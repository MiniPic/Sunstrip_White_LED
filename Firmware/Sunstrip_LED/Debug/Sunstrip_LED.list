
Sunstrip_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cb4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028fc  08006dc0  08006dc0  00016dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096bc  080096bc  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080096bc  080096bc  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080096bc  080096bc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096bc  080096bc  000196bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096c0  080096c0  000196c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080096c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b10  20000088  0800974c  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b98  0800974c  00020b98  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123b4  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033f0  00000000  00000000  00032465  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c8  00000000  00000000  00035858  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f00  00000000  00000000  00036920  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016c99  00000000  00000000  00037820  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fe05  00000000  00000000  0004e4b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078b16  00000000  00000000  0005e2be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6dd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045b0  00000000  00000000  000d6e50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08006da8 	.word	0x08006da8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08006da8 	.word	0x08006da8

0800014c <SSD1306_Init>:
	if (HAL_I2C_IsDeviceReady(ssd1306_i2c, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
		/* Return false */
		return 0;
	}
#else
	uint8_t SSD1306_Init() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

		/* Init I2C */
		ssd1306_I2C_Init();
 8000152:	f000 fbd3 	bl	80008fc <ssd1306_I2C_Init>
#endif
	
	/* A little delay */
	uint32_t p = 2500;
 8000156:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800015a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800015c:	e002      	b.n	8000164 <SSD1306_Init+0x18>
		p--;
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	3b01      	subs	r3, #1
 8000162:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b00      	cmp	r3, #0
 8000168:	d1f9      	bne.n	800015e <SSD1306_Init+0x12>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800016a:	22ae      	movs	r2, #174	; 0xae
 800016c:	2100      	movs	r1, #0
 800016e:	2078      	movs	r0, #120	; 0x78
 8000170:	f000 fc1a 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000174:	2220      	movs	r2, #32
 8000176:	2100      	movs	r1, #0
 8000178:	2078      	movs	r0, #120	; 0x78
 800017a:	f000 fc15 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800017e:	2210      	movs	r2, #16
 8000180:	2100      	movs	r1, #0
 8000182:	2078      	movs	r0, #120	; 0x78
 8000184:	f000 fc10 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000188:	22b0      	movs	r2, #176	; 0xb0
 800018a:	2100      	movs	r1, #0
 800018c:	2078      	movs	r0, #120	; 0x78
 800018e:	f000 fc0b 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000192:	22c8      	movs	r2, #200	; 0xc8
 8000194:	2100      	movs	r1, #0
 8000196:	2078      	movs	r0, #120	; 0x78
 8000198:	f000 fc06 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800019c:	2200      	movs	r2, #0
 800019e:	2100      	movs	r1, #0
 80001a0:	2078      	movs	r0, #120	; 0x78
 80001a2:	f000 fc01 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80001a6:	2210      	movs	r2, #16
 80001a8:	2100      	movs	r1, #0
 80001aa:	2078      	movs	r0, #120	; 0x78
 80001ac:	f000 fbfc 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80001b0:	2240      	movs	r2, #64	; 0x40
 80001b2:	2100      	movs	r1, #0
 80001b4:	2078      	movs	r0, #120	; 0x78
 80001b6:	f000 fbf7 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80001ba:	2281      	movs	r2, #129	; 0x81
 80001bc:	2100      	movs	r1, #0
 80001be:	2078      	movs	r0, #120	; 0x78
 80001c0:	f000 fbf2 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80001c4:	22ff      	movs	r2, #255	; 0xff
 80001c6:	2100      	movs	r1, #0
 80001c8:	2078      	movs	r0, #120	; 0x78
 80001ca:	f000 fbed 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80001ce:	22a1      	movs	r2, #161	; 0xa1
 80001d0:	2100      	movs	r1, #0
 80001d2:	2078      	movs	r0, #120	; 0x78
 80001d4:	f000 fbe8 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80001d8:	22a6      	movs	r2, #166	; 0xa6
 80001da:	2100      	movs	r1, #0
 80001dc:	2078      	movs	r0, #120	; 0x78
 80001de:	f000 fbe3 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80001e2:	22a8      	movs	r2, #168	; 0xa8
 80001e4:	2100      	movs	r1, #0
 80001e6:	2078      	movs	r0, #120	; 0x78
 80001e8:	f000 fbde 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80001ec:	223f      	movs	r2, #63	; 0x3f
 80001ee:	2100      	movs	r1, #0
 80001f0:	2078      	movs	r0, #120	; 0x78
 80001f2:	f000 fbd9 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80001f6:	22a4      	movs	r2, #164	; 0xa4
 80001f8:	2100      	movs	r1, #0
 80001fa:	2078      	movs	r0, #120	; 0x78
 80001fc:	f000 fbd4 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //--set display offset
 8000200:	22d3      	movs	r2, #211	; 0xd3
 8000202:	2100      	movs	r1, #0
 8000204:	2078      	movs	r0, #120	; 0x78
 8000206:	f000 fbcf 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //--not offset
 800020a:	2200      	movs	r2, #0
 800020c:	2100      	movs	r1, #0
 800020e:	2078      	movs	r0, #120	; 0x78
 8000210:	f000 fbca 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000214:	22d5      	movs	r2, #213	; 0xd5
 8000216:	2100      	movs	r1, #0
 8000218:	2078      	movs	r0, #120	; 0x78
 800021a:	f000 fbc5 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800021e:	22f0      	movs	r2, #240	; 0xf0
 8000220:	2100      	movs	r1, #0
 8000222:	2078      	movs	r0, #120	; 0x78
 8000224:	f000 fbc0 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000228:	22d9      	movs	r2, #217	; 0xd9
 800022a:	2100      	movs	r1, #0
 800022c:	2078      	movs	r0, #120	; 0x78
 800022e:	f000 fbbb 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000232:	2222      	movs	r2, #34	; 0x22
 8000234:	2100      	movs	r1, #0
 8000236:	2078      	movs	r0, #120	; 0x78
 8000238:	f000 fbb6 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800023c:	22da      	movs	r2, #218	; 0xda
 800023e:	2100      	movs	r1, #0
 8000240:	2078      	movs	r0, #120	; 0x78
 8000242:	f000 fbb1 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000246:	2212      	movs	r2, #18
 8000248:	2100      	movs	r1, #0
 800024a:	2078      	movs	r0, #120	; 0x78
 800024c:	f000 fbac 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000250:	22db      	movs	r2, #219	; 0xdb
 8000252:	2100      	movs	r1, #0
 8000254:	2078      	movs	r0, #120	; 0x78
 8000256:	f000 fba7 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800025a:	2220      	movs	r2, #32
 800025c:	2100      	movs	r1, #0
 800025e:	2078      	movs	r0, #120	; 0x78
 8000260:	f000 fba2 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000264:	228d      	movs	r2, #141	; 0x8d
 8000266:	2100      	movs	r1, #0
 8000268:	2078      	movs	r0, #120	; 0x78
 800026a:	f000 fb9d 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800026e:	2214      	movs	r2, #20
 8000270:	2100      	movs	r1, #0
 8000272:	2078      	movs	r0, #120	; 0x78
 8000274:	f000 fb98 	bl	80009a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000278:	22af      	movs	r2, #175	; 0xaf
 800027a:	2100      	movs	r1, #0
 800027c:	2078      	movs	r0, #120	; 0x78
 800027e:	f000 fb93 	bl	80009a8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000282:	222e      	movs	r2, #46	; 0x2e
 8000284:	2100      	movs	r1, #0
 8000286:	2078      	movs	r0, #120	; 0x78
 8000288:	f000 fb8e 	bl	80009a8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800028c:	2000      	movs	r0, #0
 800028e:	f000 f841 	bl	8000314 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000292:	f000 f811 	bl	80002b8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000296:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <SSD1306_Init+0x168>)
 8000298:	2200      	movs	r2, #0
 800029a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800029c:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <SSD1306_Init+0x168>)
 800029e:	2200      	movs	r2, #0
 80002a0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80002a2:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <SSD1306_Init+0x168>)
 80002a4:	2201      	movs	r2, #1
 80002a6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80002a8:	2301      	movs	r3, #1
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	200004a4 	.word	0x200004a4

080002b8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80002be:	2300      	movs	r3, #0
 80002c0:	71fb      	strb	r3, [r7, #7]
 80002c2:	e01d      	b.n	8000300 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	3b50      	subs	r3, #80	; 0x50
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	461a      	mov	r2, r3
 80002cc:	2100      	movs	r1, #0
 80002ce:	2078      	movs	r0, #120	; 0x78
 80002d0:	f000 fb6a 	bl	80009a8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2100      	movs	r1, #0
 80002d8:	2078      	movs	r0, #120	; 0x78
 80002da:	f000 fb65 	bl	80009a8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80002de:	2210      	movs	r2, #16
 80002e0:	2100      	movs	r1, #0
 80002e2:	2078      	movs	r0, #120	; 0x78
 80002e4:	f000 fb60 	bl	80009a8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	01db      	lsls	r3, r3, #7
 80002ec:	4a08      	ldr	r2, [pc, #32]	; (8000310 <SSD1306_UpdateScreen+0x58>)
 80002ee:	441a      	add	r2, r3
 80002f0:	2380      	movs	r3, #128	; 0x80
 80002f2:	2140      	movs	r1, #64	; 0x40
 80002f4:	2078      	movs	r0, #120	; 0x78
 80002f6:	f000 fb15 	bl	8000924 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	3301      	adds	r3, #1
 80002fe:	71fb      	strb	r3, [r7, #7]
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	2b07      	cmp	r3, #7
 8000304:	d9de      	bls.n	80002c4 <SSD1306_UpdateScreen+0xc>
	}
}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	200000a4 	.word	0x200000a4

08000314 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d101      	bne.n	8000328 <SSD1306_Fill+0x14>
 8000324:	2300      	movs	r3, #0
 8000326:	e000      	b.n	800032a <SSD1306_Fill+0x16>
 8000328:	23ff      	movs	r3, #255	; 0xff
 800032a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800032e:	4619      	mov	r1, r3
 8000330:	4803      	ldr	r0, [pc, #12]	; (8000340 <SSD1306_Fill+0x2c>)
 8000332:	f006 f91f 	bl	8006574 <memset>
}
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	200000a4 	.word	0x200000a4

08000344 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	80fb      	strh	r3, [r7, #6]
 800034e:	460b      	mov	r3, r1
 8000350:	80bb      	strh	r3, [r7, #4]
 8000352:	4613      	mov	r3, r2
 8000354:	70fb      	strb	r3, [r7, #3]
	if (
 8000356:	88fb      	ldrh	r3, [r7, #6]
 8000358:	2b7f      	cmp	r3, #127	; 0x7f
 800035a:	d848      	bhi.n	80003ee <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800035c:	88bb      	ldrh	r3, [r7, #4]
 800035e:	2b3f      	cmp	r3, #63	; 0x3f
 8000360:	d845      	bhi.n	80003ee <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000362:	4b25      	ldr	r3, [pc, #148]	; (80003f8 <SSD1306_DrawPixel+0xb4>)
 8000364:	791b      	ldrb	r3, [r3, #4]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d006      	beq.n	8000378 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800036a:	78fb      	ldrb	r3, [r7, #3]
 800036c:	2b00      	cmp	r3, #0
 800036e:	bf0c      	ite	eq
 8000370:	2301      	moveq	r3, #1
 8000372:	2300      	movne	r3, #0
 8000374:	b2db      	uxtb	r3, r3
 8000376:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000378:	78fb      	ldrb	r3, [r7, #3]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d11a      	bne.n	80003b4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800037e:	88fa      	ldrh	r2, [r7, #6]
 8000380:	88bb      	ldrh	r3, [r7, #4]
 8000382:	08db      	lsrs	r3, r3, #3
 8000384:	b298      	uxth	r0, r3
 8000386:	4603      	mov	r3, r0
 8000388:	01db      	lsls	r3, r3, #7
 800038a:	4413      	add	r3, r2
 800038c:	4a1b      	ldr	r2, [pc, #108]	; (80003fc <SSD1306_DrawPixel+0xb8>)
 800038e:	5cd3      	ldrb	r3, [r2, r3]
 8000390:	b25a      	sxtb	r2, r3
 8000392:	88bb      	ldrh	r3, [r7, #4]
 8000394:	f003 0307 	and.w	r3, r3, #7
 8000398:	2101      	movs	r1, #1
 800039a:	fa01 f303 	lsl.w	r3, r1, r3
 800039e:	b25b      	sxtb	r3, r3
 80003a0:	4313      	orrs	r3, r2
 80003a2:	b259      	sxtb	r1, r3
 80003a4:	88fa      	ldrh	r2, [r7, #6]
 80003a6:	4603      	mov	r3, r0
 80003a8:	01db      	lsls	r3, r3, #7
 80003aa:	4413      	add	r3, r2
 80003ac:	b2c9      	uxtb	r1, r1
 80003ae:	4a13      	ldr	r2, [pc, #76]	; (80003fc <SSD1306_DrawPixel+0xb8>)
 80003b0:	54d1      	strb	r1, [r2, r3]
 80003b2:	e01d      	b.n	80003f0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80003b4:	88fa      	ldrh	r2, [r7, #6]
 80003b6:	88bb      	ldrh	r3, [r7, #4]
 80003b8:	08db      	lsrs	r3, r3, #3
 80003ba:	b298      	uxth	r0, r3
 80003bc:	4603      	mov	r3, r0
 80003be:	01db      	lsls	r3, r3, #7
 80003c0:	4413      	add	r3, r2
 80003c2:	4a0e      	ldr	r2, [pc, #56]	; (80003fc <SSD1306_DrawPixel+0xb8>)
 80003c4:	5cd3      	ldrb	r3, [r2, r3]
 80003c6:	b25a      	sxtb	r2, r3
 80003c8:	88bb      	ldrh	r3, [r7, #4]
 80003ca:	f003 0307 	and.w	r3, r3, #7
 80003ce:	2101      	movs	r1, #1
 80003d0:	fa01 f303 	lsl.w	r3, r1, r3
 80003d4:	b25b      	sxtb	r3, r3
 80003d6:	43db      	mvns	r3, r3
 80003d8:	b25b      	sxtb	r3, r3
 80003da:	4013      	ands	r3, r2
 80003dc:	b259      	sxtb	r1, r3
 80003de:	88fa      	ldrh	r2, [r7, #6]
 80003e0:	4603      	mov	r3, r0
 80003e2:	01db      	lsls	r3, r3, #7
 80003e4:	4413      	add	r3, r2
 80003e6:	b2c9      	uxtb	r1, r1
 80003e8:	4a04      	ldr	r2, [pc, #16]	; (80003fc <SSD1306_DrawPixel+0xb8>)
 80003ea:	54d1      	strb	r1, [r2, r3]
 80003ec:	e000      	b.n	80003f0 <SSD1306_DrawPixel+0xac>
		return;
 80003ee:	bf00      	nop
	}
}
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr
 80003f8:	200004a4 	.word	0x200004a4
 80003fc:	200000a4 	.word	0x200000a4

08000400 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	460a      	mov	r2, r1
 800040a:	80fb      	strh	r3, [r7, #6]
 800040c:	4613      	mov	r3, r2
 800040e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000410:	4a05      	ldr	r2, [pc, #20]	; (8000428 <SSD1306_GotoXY+0x28>)
 8000412:	88fb      	ldrh	r3, [r7, #6]
 8000414:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000416:	4a04      	ldr	r2, [pc, #16]	; (8000428 <SSD1306_GotoXY+0x28>)
 8000418:	88bb      	ldrh	r3, [r7, #4]
 800041a:	8053      	strh	r3, [r2, #2]
}
 800041c:	bf00      	nop
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	bc80      	pop	{r7}
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	200004a4 	.word	0x200004a4

0800042c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	6039      	str	r1, [r7, #0]
 8000436:	71fb      	strb	r3, [r7, #7]
 8000438:	4613      	mov	r3, r2
 800043a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800043c:	4b3a      	ldr	r3, [pc, #232]	; (8000528 <SSD1306_Putc+0xfc>)
 800043e:	881b      	ldrh	r3, [r3, #0]
 8000440:	461a      	mov	r2, r3
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	4413      	add	r3, r2
	if (
 8000448:	2b7f      	cmp	r3, #127	; 0x7f
 800044a:	dc07      	bgt.n	800045c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800044c:	4b36      	ldr	r3, [pc, #216]	; (8000528 <SSD1306_Putc+0xfc>)
 800044e:	885b      	ldrh	r3, [r3, #2]
 8000450:	461a      	mov	r2, r3
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	785b      	ldrb	r3, [r3, #1]
 8000456:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000458:	2b3f      	cmp	r3, #63	; 0x3f
 800045a:	dd01      	ble.n	8000460 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800045c:	2300      	movs	r3, #0
 800045e:	e05e      	b.n	800051e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
 8000464:	e04b      	b.n	80004fe <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	685a      	ldr	r2, [r3, #4]
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	3b20      	subs	r3, #32
 800046e:	6839      	ldr	r1, [r7, #0]
 8000470:	7849      	ldrb	r1, [r1, #1]
 8000472:	fb01 f303 	mul.w	r3, r1, r3
 8000476:	4619      	mov	r1, r3
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	440b      	add	r3, r1
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	4413      	add	r3, r2
 8000480:	881b      	ldrh	r3, [r3, #0]
 8000482:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000484:	2300      	movs	r3, #0
 8000486:	613b      	str	r3, [r7, #16]
 8000488:	e030      	b.n	80004ec <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800048a:	68fa      	ldr	r2, [r7, #12]
 800048c:	693b      	ldr	r3, [r7, #16]
 800048e:	fa02 f303 	lsl.w	r3, r2, r3
 8000492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000496:	2b00      	cmp	r3, #0
 8000498:	d010      	beq.n	80004bc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800049a:	4b23      	ldr	r3, [pc, #140]	; (8000528 <SSD1306_Putc+0xfc>)
 800049c:	881a      	ldrh	r2, [r3, #0]
 800049e:	693b      	ldr	r3, [r7, #16]
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	4413      	add	r3, r2
 80004a4:	b298      	uxth	r0, r3
 80004a6:	4b20      	ldr	r3, [pc, #128]	; (8000528 <SSD1306_Putc+0xfc>)
 80004a8:	885a      	ldrh	r2, [r3, #2]
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	4413      	add	r3, r2
 80004b0:	b29b      	uxth	r3, r3
 80004b2:	79ba      	ldrb	r2, [r7, #6]
 80004b4:	4619      	mov	r1, r3
 80004b6:	f7ff ff45 	bl	8000344 <SSD1306_DrawPixel>
 80004ba:	e014      	b.n	80004e6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80004bc:	4b1a      	ldr	r3, [pc, #104]	; (8000528 <SSD1306_Putc+0xfc>)
 80004be:	881a      	ldrh	r2, [r3, #0]
 80004c0:	693b      	ldr	r3, [r7, #16]
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	4413      	add	r3, r2
 80004c6:	b298      	uxth	r0, r3
 80004c8:	4b17      	ldr	r3, [pc, #92]	; (8000528 <SSD1306_Putc+0xfc>)
 80004ca:	885a      	ldrh	r2, [r3, #2]
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	b29b      	uxth	r3, r3
 80004d0:	4413      	add	r3, r2
 80004d2:	b299      	uxth	r1, r3
 80004d4:	79bb      	ldrb	r3, [r7, #6]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	bf0c      	ite	eq
 80004da:	2301      	moveq	r3, #1
 80004dc:	2300      	movne	r3, #0
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	461a      	mov	r2, r3
 80004e2:	f7ff ff2f 	bl	8000344 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80004e6:	693b      	ldr	r3, [r7, #16]
 80004e8:	3301      	adds	r3, #1
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	461a      	mov	r2, r3
 80004f2:	693b      	ldr	r3, [r7, #16]
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d3c8      	bcc.n	800048a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	3301      	adds	r3, #1
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	785b      	ldrb	r3, [r3, #1]
 8000502:	461a      	mov	r2, r3
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	4293      	cmp	r3, r2
 8000508:	d3ad      	bcc.n	8000466 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800050a:	4b07      	ldr	r3, [pc, #28]	; (8000528 <SSD1306_Putc+0xfc>)
 800050c:	881a      	ldrh	r2, [r3, #0]
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	b29b      	uxth	r3, r3
 8000514:	4413      	add	r3, r2
 8000516:	b29a      	uxth	r2, r3
 8000518:	4b03      	ldr	r3, [pc, #12]	; (8000528 <SSD1306_Putc+0xfc>)
 800051a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800051c:	79fb      	ldrb	r3, [r7, #7]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3718      	adds	r7, #24
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	200004a4 	.word	0x200004a4

0800052c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	4613      	mov	r3, r2
 8000538:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800053a:	e012      	b.n	8000562 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	79fa      	ldrb	r2, [r7, #7]
 8000542:	68b9      	ldr	r1, [r7, #8]
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff ff71 	bl	800042c <SSD1306_Putc>
 800054a:	4603      	mov	r3, r0
 800054c:	461a      	mov	r2, r3
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	429a      	cmp	r2, r3
 8000554:	d002      	beq.n	800055c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	e008      	b.n	800056e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	3301      	adds	r3, #1
 8000560:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d1e8      	bne.n	800053c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	781b      	ldrb	r3, [r3, #0]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000576:	b590      	push	{r4, r7, lr}
 8000578:	b087      	sub	sp, #28
 800057a:	af00      	add	r7, sp, #0
 800057c:	4604      	mov	r4, r0
 800057e:	4608      	mov	r0, r1
 8000580:	4611      	mov	r1, r2
 8000582:	461a      	mov	r2, r3
 8000584:	4623      	mov	r3, r4
 8000586:	80fb      	strh	r3, [r7, #6]
 8000588:	4603      	mov	r3, r0
 800058a:	80bb      	strh	r3, [r7, #4]
 800058c:	460b      	mov	r3, r1
 800058e:	807b      	strh	r3, [r7, #2]
 8000590:	4613      	mov	r3, r2
 8000592:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8000594:	88fb      	ldrh	r3, [r7, #6]
 8000596:	2b7f      	cmp	r3, #127	; 0x7f
 8000598:	d901      	bls.n	800059e <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 800059a:	237f      	movs	r3, #127	; 0x7f
 800059c:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 800059e:	887b      	ldrh	r3, [r7, #2]
 80005a0:	2b7f      	cmp	r3, #127	; 0x7f
 80005a2:	d901      	bls.n	80005a8 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 80005a4:	237f      	movs	r3, #127	; 0x7f
 80005a6:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80005a8:	88bb      	ldrh	r3, [r7, #4]
 80005aa:	2b3f      	cmp	r3, #63	; 0x3f
 80005ac:	d901      	bls.n	80005b2 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 80005ae:	233f      	movs	r3, #63	; 0x3f
 80005b0:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 80005b2:	883b      	ldrh	r3, [r7, #0]
 80005b4:	2b3f      	cmp	r3, #63	; 0x3f
 80005b6:	d901      	bls.n	80005bc <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 80005b8:	233f      	movs	r3, #63	; 0x3f
 80005ba:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80005bc:	88fa      	ldrh	r2, [r7, #6]
 80005be:	887b      	ldrh	r3, [r7, #2]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d205      	bcs.n	80005d0 <SSD1306_DrawLine+0x5a>
 80005c4:	887a      	ldrh	r2, [r7, #2]
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	b21b      	sxth	r3, r3
 80005ce:	e004      	b.n	80005da <SSD1306_DrawLine+0x64>
 80005d0:	88fa      	ldrh	r2, [r7, #6]
 80005d2:	887b      	ldrh	r3, [r7, #2]
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	b21b      	sxth	r3, r3
 80005da:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80005dc:	88ba      	ldrh	r2, [r7, #4]
 80005de:	883b      	ldrh	r3, [r7, #0]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d205      	bcs.n	80005f0 <SSD1306_DrawLine+0x7a>
 80005e4:	883a      	ldrh	r2, [r7, #0]
 80005e6:	88bb      	ldrh	r3, [r7, #4]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b21b      	sxth	r3, r3
 80005ee:	e004      	b.n	80005fa <SSD1306_DrawLine+0x84>
 80005f0:	88ba      	ldrh	r2, [r7, #4]
 80005f2:	883b      	ldrh	r3, [r7, #0]
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	b21b      	sxth	r3, r3
 80005fa:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 80005fc:	88fa      	ldrh	r2, [r7, #6]
 80005fe:	887b      	ldrh	r3, [r7, #2]
 8000600:	429a      	cmp	r2, r3
 8000602:	d201      	bcs.n	8000608 <SSD1306_DrawLine+0x92>
 8000604:	2301      	movs	r3, #1
 8000606:	e001      	b.n	800060c <SSD1306_DrawLine+0x96>
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 800060e:	88ba      	ldrh	r2, [r7, #4]
 8000610:	883b      	ldrh	r3, [r7, #0]
 8000612:	429a      	cmp	r2, r3
 8000614:	d201      	bcs.n	800061a <SSD1306_DrawLine+0xa4>
 8000616:	2301      	movs	r3, #1
 8000618:	e001      	b.n	800061e <SSD1306_DrawLine+0xa8>
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
 800061e:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8000620:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000624:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000628:	429a      	cmp	r2, r3
 800062a:	dd06      	ble.n	800063a <SSD1306_DrawLine+0xc4>
 800062c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000630:	0fda      	lsrs	r2, r3, #31
 8000632:	4413      	add	r3, r2
 8000634:	105b      	asrs	r3, r3, #1
 8000636:	b21b      	sxth	r3, r3
 8000638:	e006      	b.n	8000648 <SSD1306_DrawLine+0xd2>
 800063a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800063e:	425b      	negs	r3, r3
 8000640:	0fda      	lsrs	r2, r3, #31
 8000642:	4413      	add	r3, r2
 8000644:	105b      	asrs	r3, r3, #1
 8000646:	b21b      	sxth	r3, r3
 8000648:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 800064a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d129      	bne.n	80006a6 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8000652:	883a      	ldrh	r2, [r7, #0]
 8000654:	88bb      	ldrh	r3, [r7, #4]
 8000656:	429a      	cmp	r2, r3
 8000658:	d205      	bcs.n	8000666 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 800065a:	883b      	ldrh	r3, [r7, #0]
 800065c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800065e:	88bb      	ldrh	r3, [r7, #4]
 8000660:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000662:	893b      	ldrh	r3, [r7, #8]
 8000664:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8000666:	887a      	ldrh	r2, [r7, #2]
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	429a      	cmp	r2, r3
 800066c:	d205      	bcs.n	800067a <SSD1306_DrawLine+0x104>
			tmp = x1;
 800066e:	887b      	ldrh	r3, [r7, #2]
 8000670:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000676:	893b      	ldrh	r3, [r7, #8]
 8000678:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800067a:	88bb      	ldrh	r3, [r7, #4]
 800067c:	82bb      	strh	r3, [r7, #20]
 800067e:	e00c      	b.n	800069a <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8000680:	8ab9      	ldrh	r1, [r7, #20]
 8000682:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff fe5b 	bl	8000344 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 800068e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000692:	b29b      	uxth	r3, r3
 8000694:	3301      	adds	r3, #1
 8000696:	b29b      	uxth	r3, r3
 8000698:	82bb      	strh	r3, [r7, #20]
 800069a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800069e:	883b      	ldrh	r3, [r7, #0]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	dded      	ble.n	8000680 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 80006a4:	e05f      	b.n	8000766 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 80006a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d129      	bne.n	8000702 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 80006ae:	883a      	ldrh	r2, [r7, #0]
 80006b0:	88bb      	ldrh	r3, [r7, #4]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d205      	bcs.n	80006c2 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 80006b6:	883b      	ldrh	r3, [r7, #0]
 80006b8:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80006ba:	88bb      	ldrh	r3, [r7, #4]
 80006bc:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80006be:	893b      	ldrh	r3, [r7, #8]
 80006c0:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80006c2:	887a      	ldrh	r2, [r7, #2]
 80006c4:	88fb      	ldrh	r3, [r7, #6]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d205      	bcs.n	80006d6 <SSD1306_DrawLine+0x160>
			tmp = x1;
 80006ca:	887b      	ldrh	r3, [r7, #2]
 80006cc:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80006d2:	893b      	ldrh	r3, [r7, #8]
 80006d4:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	82bb      	strh	r3, [r7, #20]
 80006da:	e00c      	b.n	80006f6 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 80006dc:	8abb      	ldrh	r3, [r7, #20]
 80006de:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80006e2:	88b9      	ldrh	r1, [r7, #4]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff fe2d 	bl	8000344 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80006ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	3301      	adds	r3, #1
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	82bb      	strh	r3, [r7, #20]
 80006f6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80006fa:	887b      	ldrh	r3, [r7, #2]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	dded      	ble.n	80006dc <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8000700:	e031      	b.n	8000766 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8000702:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000706:	88b9      	ldrh	r1, [r7, #4]
 8000708:	88fb      	ldrh	r3, [r7, #6]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fe1a 	bl	8000344 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8000710:	88fa      	ldrh	r2, [r7, #6]
 8000712:	887b      	ldrh	r3, [r7, #2]
 8000714:	429a      	cmp	r2, r3
 8000716:	d103      	bne.n	8000720 <SSD1306_DrawLine+0x1aa>
 8000718:	88ba      	ldrh	r2, [r7, #4]
 800071a:	883b      	ldrh	r3, [r7, #0]
 800071c:	429a      	cmp	r2, r3
 800071e:	d021      	beq.n	8000764 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8000720:	8afb      	ldrh	r3, [r7, #22]
 8000722:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8000724:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000728:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800072c:	425b      	negs	r3, r3
 800072e:	429a      	cmp	r2, r3
 8000730:	dd08      	ble.n	8000744 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8000732:	8afa      	ldrh	r2, [r7, #22]
 8000734:	8a3b      	ldrh	r3, [r7, #16]
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	b29b      	uxth	r3, r3
 800073a:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 800073c:	89fa      	ldrh	r2, [r7, #14]
 800073e:	88fb      	ldrh	r3, [r7, #6]
 8000740:	4413      	add	r3, r2
 8000742:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8000744:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000748:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800074c:	429a      	cmp	r2, r3
 800074e:	dad8      	bge.n	8000702 <SSD1306_DrawLine+0x18c>
			err += dx;
 8000750:	8afa      	ldrh	r2, [r7, #22]
 8000752:	8a7b      	ldrh	r3, [r7, #18]
 8000754:	4413      	add	r3, r2
 8000756:	b29b      	uxth	r3, r3
 8000758:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 800075a:	89ba      	ldrh	r2, [r7, #12]
 800075c:	88bb      	ldrh	r3, [r7, #4]
 800075e:	4413      	add	r3, r2
 8000760:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8000762:	e7ce      	b.n	8000702 <SSD1306_DrawLine+0x18c>
			break;
 8000764:	bf00      	nop
		} 
	}
}
 8000766:	371c      	adds	r7, #28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd90      	pop	{r4, r7, pc}

0800076c <SSD1306_DrawFilledTriangle>:
	SSD1306_DrawLine(x2, y2, x3, y3, color);
	SSD1306_DrawLine(x3, y3, x1, y1, color);
}


void SSD1306_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SSD1306_COLOR_t color) {
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b08d      	sub	sp, #52	; 0x34
 8000770:	af02      	add	r7, sp, #8
 8000772:	4604      	mov	r4, r0
 8000774:	4608      	mov	r0, r1
 8000776:	4611      	mov	r1, r2
 8000778:	461a      	mov	r2, r3
 800077a:	4623      	mov	r3, r4
 800077c:	80fb      	strh	r3, [r7, #6]
 800077e:	4603      	mov	r3, r0
 8000780:	80bb      	strh	r3, [r7, #4]
 8000782:	460b      	mov	r3, r1
 8000784:	807b      	strh	r3, [r7, #2]
 8000786:	4613      	mov	r3, r2
 8000788:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 800078a:	2300      	movs	r3, #0
 800078c:	823b      	strh	r3, [r7, #16]
 800078e:	2300      	movs	r3, #0
 8000790:	81fb      	strh	r3, [r7, #14]
 8000792:	2300      	movs	r3, #0
 8000794:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000796:	2300      	movs	r3, #0
 8000798:	84bb      	strh	r3, [r7, #36]	; 0x24
 800079a:	2300      	movs	r3, #0
 800079c:	847b      	strh	r3, [r7, #34]	; 0x22
 800079e:	2300      	movs	r3, #0
 80007a0:	843b      	strh	r3, [r7, #32]
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 80007a2:	2300      	movs	r3, #0
 80007a4:	83fb      	strh	r3, [r7, #30]
 80007a6:	2300      	movs	r3, #0
 80007a8:	83bb      	strh	r3, [r7, #28]
 80007aa:	2300      	movs	r3, #0
 80007ac:	837b      	strh	r3, [r7, #26]
 80007ae:	2300      	movs	r3, #0
 80007b0:	833b      	strh	r3, [r7, #24]
 80007b2:	2300      	movs	r3, #0
 80007b4:	82fb      	strh	r3, [r7, #22]
 80007b6:	2300      	movs	r3, #0
 80007b8:	82bb      	strh	r3, [r7, #20]
	curpixel = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	827b      	strh	r3, [r7, #18]
	
	deltax = ABS(x2 - x1);
 80007be:	887a      	ldrh	r2, [r7, #2]
 80007c0:	88fb      	ldrh	r3, [r7, #6]
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	bfb8      	it	lt
 80007c8:	425b      	neglt	r3, r3
 80007ca:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 80007cc:	883a      	ldrh	r2, [r7, #0]
 80007ce:	88bb      	ldrh	r3, [r7, #4]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	bfb8      	it	lt
 80007d6:	425b      	neglt	r3, r3
 80007d8:	81fb      	strh	r3, [r7, #14]
	x = x1;
 80007da:	88fb      	ldrh	r3, [r7, #6]
 80007dc:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 80007de:	88bb      	ldrh	r3, [r7, #4]
 80007e0:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1) {
 80007e2:	887a      	ldrh	r2, [r7, #2]
 80007e4:	88fb      	ldrh	r3, [r7, #6]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d304      	bcc.n	80007f4 <SSD1306_DrawFilledTriangle+0x88>
		xinc1 = 1;
 80007ea:	2301      	movs	r3, #1
 80007ec:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 80007ee:	2301      	movs	r3, #1
 80007f0:	843b      	strh	r3, [r7, #32]
 80007f2:	e005      	b.n	8000800 <SSD1306_DrawFilledTriangle+0x94>
	} else {
		xinc1 = -1;
 80007f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f8:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 80007fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007fe:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 8000800:	883a      	ldrh	r2, [r7, #0]
 8000802:	88bb      	ldrh	r3, [r7, #4]
 8000804:	429a      	cmp	r2, r3
 8000806:	d304      	bcc.n	8000812 <SSD1306_DrawFilledTriangle+0xa6>
		yinc1 = 1;
 8000808:	2301      	movs	r3, #1
 800080a:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 800080c:	2301      	movs	r3, #1
 800080e:	83bb      	strh	r3, [r7, #28]
 8000810:	e005      	b.n	800081e <SSD1306_DrawFilledTriangle+0xb2>
	} else {
		yinc1 = -1;
 8000812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000816:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8000818:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800081c:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay){
 800081e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000822:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000826:	429a      	cmp	r2, r3
 8000828:	db10      	blt.n	800084c <SSD1306_DrawFilledTriangle+0xe0>
		xinc1 = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8000832:	8a3b      	ldrh	r3, [r7, #16]
 8000834:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8000836:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800083a:	0fda      	lsrs	r2, r3, #31
 800083c:	4413      	add	r3, r2
 800083e:	105b      	asrs	r3, r3, #1
 8000840:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8000842:	89fb      	ldrh	r3, [r7, #14]
 8000844:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8000846:	8a3b      	ldrh	r3, [r7, #16]
 8000848:	82bb      	strh	r3, [r7, #20]
 800084a:	e00f      	b.n	800086c <SSD1306_DrawFilledTriangle+0x100>
	} else {
		xinc2 = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8000854:	89fb      	ldrh	r3, [r7, #14]
 8000856:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8000858:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800085c:	0fda      	lsrs	r2, r3, #31
 800085e:	4413      	add	r3, r2
 8000860:	105b      	asrs	r3, r3, #1
 8000862:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8000864:	8a3b      	ldrh	r3, [r7, #16]
 8000866:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8000868:	89fb      	ldrh	r3, [r7, #14]
 800086a:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 800086c:	2300      	movs	r3, #0
 800086e:	827b      	strh	r3, [r7, #18]
 8000870:	e033      	b.n	80008da <SSD1306_DrawFilledTriangle+0x16e>
		SSD1306_DrawLine(x, y, x3, y3, color);
 8000872:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8000874:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000876:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 8000878:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800087a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	4623      	mov	r3, r4
 8000882:	f7ff fe78 	bl	8000576 <SSD1306_DrawLine>

		num += numadd;
 8000886:	8b3a      	ldrh	r2, [r7, #24]
 8000888:	8afb      	ldrh	r3, [r7, #22]
 800088a:	4413      	add	r3, r2
 800088c:	b29b      	uxth	r3, r3
 800088e:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 8000890:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000894:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000898:	429a      	cmp	r2, r3
 800089a:	db0e      	blt.n	80008ba <SSD1306_DrawFilledTriangle+0x14e>
			num -= den;
 800089c:	8b3a      	ldrh	r2, [r7, #24]
 800089e:	8b7b      	ldrh	r3, [r7, #26]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 80008a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80008a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80008aa:	4413      	add	r3, r2
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 80008b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80008b2:	8bfb      	ldrh	r3, [r7, #30]
 80008b4:	4413      	add	r3, r2
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 80008ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80008bc:	8c3b      	ldrh	r3, [r7, #32]
 80008be:	4413      	add	r3, r2
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 80008c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80008c6:	8bbb      	ldrh	r3, [r7, #28]
 80008c8:	4413      	add	r3, r2
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 80008ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	3301      	adds	r3, #1
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	827b      	strh	r3, [r7, #18]
 80008da:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80008de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	ddc5      	ble.n	8000872 <SSD1306_DrawFilledTriangle+0x106>
	}
}
 80008e6:	bf00      	nop
 80008e8:	372c      	adds	r7, #44	; 0x2c
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd90      	pop	{r4, r7, pc}

080008ee <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80008f2:	2000      	movs	r0, #0
 80008f4:	f7ff fd0e 	bl	8000314 <SSD1306_Fill>
    //SSD1306_UpdateScreen();
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}

080008fc <ssd1306_I2C_Init>:
}
#endif

//Generated I2C
#ifdef GENERATED_I2C
void ssd1306_I2C_Init() {
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <ssd1306_I2C_Init+0x24>)
 8000904:	607b      	str	r3, [r7, #4]
		while(p>0)
 8000906:	e002      	b.n	800090e <ssd1306_I2C_Init+0x12>
			p--;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	607b      	str	r3, [r7, #4]
		while(p>0)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1f9      	bne.n	8000908 <ssd1306_I2C_Init+0xc>
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	0003d090 	.word	0x0003d090

08000924 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b0c5      	sub	sp, #276	; 0x114
 8000928:	af00      	add	r7, sp, #0
 800092a:	4604      	mov	r4, r0
 800092c:	4608      	mov	r0, r1
 800092e:	4639      	mov	r1, r7
 8000930:	600a      	str	r2, [r1, #0]
 8000932:	4619      	mov	r1, r3
 8000934:	1dfb      	adds	r3, r7, #7
 8000936:	4622      	mov	r2, r4
 8000938:	701a      	strb	r2, [r3, #0]
 800093a:	1dbb      	adds	r3, r7, #6
 800093c:	4602      	mov	r2, r0
 800093e:	701a      	strb	r2, [r3, #0]
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	460a      	mov	r2, r1
 8000944:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	1dba      	adds	r2, r7, #6
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8000950:	2300      	movs	r3, #0
 8000952:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000956:	e010      	b.n	800097a <ssd1306_I2C_WriteMulti+0x56>
		dt[i+1] = data[i];
 8000958:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800095c:	463a      	mov	r2, r7
 800095e:	6812      	ldr	r2, [r2, #0]
 8000960:	441a      	add	r2, r3
 8000962:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000966:	3301      	adds	r3, #1
 8000968:	7811      	ldrb	r1, [r2, #0]
 800096a:	f107 020c 	add.w	r2, r7, #12
 800096e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8000970:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000974:	3301      	adds	r3, #1
 8000976:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800097a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800097e:	b29b      	uxth	r3, r3
 8000980:	1d3a      	adds	r2, r7, #4
 8000982:	8812      	ldrh	r2, [r2, #0]
 8000984:	429a      	cmp	r2, r3
 8000986:	d8e7      	bhi.n	8000958 <ssd1306_I2C_WriteMulti+0x34>
	GENE_I2C_Master_Transmit(address, dt, count+1);
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	b29a      	uxth	r2, r3
 8000990:	f107 010c 	add.w	r1, r7, #12
 8000994:	1dfb      	adds	r3, r7, #7
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4618      	mov	r0, r3
 800099a:	f003 f8e7 	bl	8003b6c <GENE_I2C_Master_Transmit>
}
 800099e:	bf00      	nop
 80009a0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd90      	pop	{r4, r7, pc}

080009a8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
 80009b2:	460b      	mov	r3, r1
 80009b4:	71bb      	strb	r3, [r7, #6]
 80009b6:	4613      	mov	r3, r2
 80009b8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80009ba:	79bb      	ldrb	r3, [r7, #6]
 80009bc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80009be:	797b      	ldrb	r3, [r7, #5]
 80009c0:	737b      	strb	r3, [r7, #13]
	GENE_I2C_Master_Transmit(address, dt, 2);
 80009c2:	f107 010c 	add.w	r1, r7, #12
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	2202      	movs	r2, #2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f003 f8ce 	bl	8003b6c <GENE_I2C_Master_Transmit>
}
 80009d0:	bf00      	nop
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <PWM_SetDuty>:
	 HAL_TIM_PWM_ConfigChannel(timer, &sConfigOC, channel);
	 HAL_TIM_PWM_Start(timer, channel); // start pwm generation
}

void PWM_SetDuty(TIM_HandleTypeDef* timer, uint32_t channel, uint16_t pulse)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	4613      	mov	r3, r2
 80009e4:	80fb      	strh	r3, [r7, #6]
	 __HAL_TIM_SET_COMPARE(timer, channel, pulse);
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d104      	bne.n	80009f6 <PWM_SetDuty+0x1e>
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	88fa      	ldrh	r2, [r7, #6]
 80009f2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80009f4:	e013      	b.n	8000a1e <PWM_SetDuty+0x46>
	 __HAL_TIM_SET_COMPARE(timer, channel, pulse);
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	2b04      	cmp	r3, #4
 80009fa:	d104      	bne.n	8000a06 <PWM_SetDuty+0x2e>
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	88fa      	ldrh	r2, [r7, #6]
 8000a02:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a04:	e00b      	b.n	8000a1e <PWM_SetDuty+0x46>
	 __HAL_TIM_SET_COMPARE(timer, channel, pulse);
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	2b08      	cmp	r3, #8
 8000a0a:	d104      	bne.n	8000a16 <PWM_SetDuty+0x3e>
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	88fa      	ldrh	r2, [r7, #6]
 8000a12:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000a14:	e003      	b.n	8000a1e <PWM_SetDuty+0x46>
	 __HAL_TIM_SET_COMPARE(timer, channel, pulse);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	88fa      	ldrh	r2, [r7, #6]
 8000a1c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000a1e:	bf00      	nop
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_Init+0x28>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_Init+0x28>)
 8000a32:	f043 0310 	orr.w	r3, r3, #16
 8000a36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 fb2d 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 f808 	bl	8000a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a44:	f005 f84a 	bl	8005adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40022000 	.word	0x40022000

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_InitTick+0x54>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_InitTick+0x58>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 fb45 	bl	8001102 <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00e      	b.n	8000aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d80a      	bhi.n	8000a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 fb0d 	bl	80010ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <HAL_InitTick+0x5c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000020 	.word	0x20000020
 8000aac:	2000001c 	.word	0x2000001c
 8000ab0:	20000018 	.word	0x20000018

08000ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_IncTick+0x1c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <HAL_IncTick+0x20>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a03      	ldr	r2, [pc, #12]	; (8000ad4 <HAL_IncTick+0x20>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	2000001c 	.word	0x2000001c
 8000ad4:	200004e4 	.word	0x200004e4

08000ad8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b02      	ldr	r3, [pc, #8]	; (8000ae8 <HAL_GetTick+0x10>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	200004e4 	.word	0x200004e4

08000aec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d101      	bne.n	8000b0e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e0be      	b.n	8000c8c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d109      	bne.n	8000b30 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2200      	movs	r2, #0
 8000b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f004 fe5e 	bl	80057ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f000 f9ab 	bl	8000e8c <ADC_ConversionStop_Disable>
 8000b36:	4603      	mov	r3, r0
 8000b38:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3e:	f003 0310 	and.w	r3, r3, #16
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f040 8099 	bne.w	8000c7a <HAL_ADC_Init+0x18e>
 8000b48:	7dfb      	ldrb	r3, [r7, #23]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f040 8095 	bne.w	8000c7a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b58:	f023 0302 	bic.w	r3, r3, #2
 8000b5c:	f043 0202 	orr.w	r2, r3, #2
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	7b1b      	ldrb	r3, [r3, #12]
 8000b72:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b74:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b84:	d003      	beq.n	8000b8e <HAL_ADC_Init+0xa2>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d102      	bne.n	8000b94 <HAL_ADC_Init+0xa8>
 8000b8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b92:	e000      	b.n	8000b96 <HAL_ADC_Init+0xaa>
 8000b94:	2300      	movs	r3, #0
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	7d1b      	ldrb	r3, [r3, #20]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d119      	bne.n	8000bd8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7b1b      	ldrb	r3, [r3, #12]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d109      	bne.n	8000bc0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	035a      	lsls	r2, r3, #13
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	e00b      	b.n	8000bd8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc4:	f043 0220 	orr.w	r2, r3, #32
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd0:	f043 0201 	orr.w	r2, r3, #1
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	430a      	orrs	r2, r1
 8000bea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	4b28      	ldr	r3, [pc, #160]	; (8000c94 <HAL_ADC_Init+0x1a8>)
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	6812      	ldr	r2, [r2, #0]
 8000bfa:	68b9      	ldr	r1, [r7, #8]
 8000bfc:	430b      	orrs	r3, r1
 8000bfe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c08:	d003      	beq.n	8000c12 <HAL_ADC_Init+0x126>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d104      	bne.n	8000c1c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	691b      	ldr	r3, [r3, #16]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	051b      	lsls	r3, r3, #20
 8000c1a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c22:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_ADC_Init+0x1ac>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d10b      	bne.n	8000c58 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4a:	f023 0303 	bic.w	r3, r3, #3
 8000c4e:	f043 0201 	orr.w	r2, r3, #1
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c56:	e018      	b.n	8000c8a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5c:	f023 0312 	bic.w	r3, r3, #18
 8000c60:	f043 0210 	orr.w	r2, r3, #16
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6c:	f043 0201 	orr.w	r2, r3, #1
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c78:	e007      	b.n	8000c8a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c7e:	f043 0210 	orr.w	r2, r3, #16
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	ffe1f7fd 	.word	0xffe1f7fd
 8000c98:	ff1f0efe 	.word	0xff1f0efe

08000c9c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d101      	bne.n	8000cbc <HAL_ADC_ConfigChannel+0x20>
 8000cb8:	2302      	movs	r3, #2
 8000cba:	e0dc      	b.n	8000e76 <HAL_ADC_ConfigChannel+0x1da>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	2b06      	cmp	r3, #6
 8000cca:	d81c      	bhi.n	8000d06 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	4413      	add	r3, r2
 8000cdc:	3b05      	subs	r3, #5
 8000cde:	221f      	movs	r2, #31
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	4019      	ands	r1, r3
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	6818      	ldr	r0, [r3, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4413      	add	r3, r2
 8000cf6:	3b05      	subs	r3, #5
 8000cf8:	fa00 f203 	lsl.w	r2, r0, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	430a      	orrs	r2, r1
 8000d02:	635a      	str	r2, [r3, #52]	; 0x34
 8000d04:	e03c      	b.n	8000d80 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2b0c      	cmp	r3, #12
 8000d0c:	d81c      	bhi.n	8000d48 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	3b23      	subs	r3, #35	; 0x23
 8000d20:	221f      	movs	r2, #31
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	4019      	ands	r1, r3
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	6818      	ldr	r0, [r3, #0]
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	4613      	mov	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	3b23      	subs	r3, #35	; 0x23
 8000d3a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	430a      	orrs	r2, r1
 8000d44:	631a      	str	r2, [r3, #48]	; 0x30
 8000d46:	e01b      	b.n	8000d80 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	4613      	mov	r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	3b41      	subs	r3, #65	; 0x41
 8000d5a:	221f      	movs	r2, #31
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	4019      	ands	r1, r3
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	6818      	ldr	r0, [r3, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	3b41      	subs	r3, #65	; 0x41
 8000d74:	fa00 f203 	lsl.w	r2, r0, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b09      	cmp	r3, #9
 8000d86:	d91c      	bls.n	8000dc2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	68d9      	ldr	r1, [r3, #12]
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	4613      	mov	r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4413      	add	r3, r2
 8000d98:	3b1e      	subs	r3, #30
 8000d9a:	2207      	movs	r2, #7
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	4019      	ands	r1, r3
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	6898      	ldr	r0, [r3, #8]
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	3b1e      	subs	r3, #30
 8000db4:	fa00 f203 	lsl.w	r2, r0, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	e019      	b.n	8000df6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6919      	ldr	r1, [r3, #16]
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	4413      	add	r3, r2
 8000dd2:	2207      	movs	r2, #7
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	4019      	ands	r1, r3
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	6898      	ldr	r0, [r3, #8]
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4613      	mov	r3, r2
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	4413      	add	r3, r2
 8000dea:	fa00 f203 	lsl.w	r2, r0, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	430a      	orrs	r2, r1
 8000df4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b10      	cmp	r3, #16
 8000dfc:	d003      	beq.n	8000e06 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e02:	2b11      	cmp	r3, #17
 8000e04:	d132      	bne.n	8000e6c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a1d      	ldr	r2, [pc, #116]	; (8000e80 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d125      	bne.n	8000e5c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d126      	bne.n	8000e6c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e2c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b10      	cmp	r3, #16
 8000e34:	d11a      	bne.n	8000e6c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a13      	ldr	r2, [pc, #76]	; (8000e88 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e40:	0c9a      	lsrs	r2, r3, #18
 8000e42:	4613      	mov	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e4c:	e002      	b.n	8000e54 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f9      	bne.n	8000e4e <HAL_ADC_ConfigChannel+0x1b2>
 8000e5a:	e007      	b.n	8000e6c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e60:	f043 0220 	orr.w	r2, r3, #32
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr
 8000e80:	40012400 	.word	0x40012400
 8000e84:	20000020 	.word	0x20000020
 8000e88:	431bde83 	.word	0x431bde83

08000e8c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d127      	bne.n	8000ef6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 0201 	bic.w	r2, r2, #1
 8000eb4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000eb6:	f7ff fe0f 	bl	8000ad8 <HAL_GetTick>
 8000eba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ebc:	e014      	b.n	8000ee8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ebe:	f7ff fe0b 	bl	8000ad8 <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d90d      	bls.n	8000ee8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed0:	f043 0210 	orr.w	r2, r3, #16
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000edc:	f043 0201 	orr.w	r2, r3, #1
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e007      	b.n	8000ef8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d0e3      	beq.n	8000ebe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f32:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	60d3      	str	r3, [r2, #12]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <__NVIC_GetPriorityGrouping+0x18>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	f003 0307 	and.w	r3, r3, #7
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db0b      	blt.n	8000f8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f003 021f 	and.w	r2, r3, #31
 8000f7c:	4906      	ldr	r1, [pc, #24]	; (8000f98 <__NVIC_EnableIRQ+0x34>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	2001      	movs	r0, #1
 8000f86:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	; (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001064:	d301      	bcc.n	800106a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001066:	2301      	movs	r3, #1
 8001068:	e00f      	b.n	800108a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <SysTick_Config+0x40>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001072:	210f      	movs	r1, #15
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f7ff ff90 	bl	8000f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <SysTick_Config+0x40>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <SysTick_Config+0x40>)
 8001084:	2207      	movs	r2, #7
 8001086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	e000e010 	.word	0xe000e010

08001098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff2d 	bl	8000f00 <__NVIC_SetPriorityGrouping>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c0:	f7ff ff42 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 80010c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f7ff ff90 	bl	8000ff0 <NVIC_EncodePriority>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5f 	bl	8000f9c <__NVIC_SetPriority>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff35 	bl	8000f64 <__NVIC_EnableIRQ>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffa2 	bl	8001054 <SysTick_Config>
 8001110:	4603      	mov	r3, r0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800112e:	2b02      	cmp	r3, #2
 8001130:	d005      	beq.n	800113e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2204      	movs	r2, #4
 8001136:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e051      	b.n	80011e2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 020e 	bic.w	r2, r2, #14
 800114c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0201 	bic.w	r2, r2, #1
 800115c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a22      	ldr	r2, [pc, #136]	; (80011ec <HAL_DMA_Abort_IT+0xd0>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d029      	beq.n	80011bc <HAL_DMA_Abort_IT+0xa0>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a20      	ldr	r2, [pc, #128]	; (80011f0 <HAL_DMA_Abort_IT+0xd4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d022      	beq.n	80011b8 <HAL_DMA_Abort_IT+0x9c>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a1f      	ldr	r2, [pc, #124]	; (80011f4 <HAL_DMA_Abort_IT+0xd8>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d01a      	beq.n	80011b2 <HAL_DMA_Abort_IT+0x96>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a1d      	ldr	r2, [pc, #116]	; (80011f8 <HAL_DMA_Abort_IT+0xdc>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d012      	beq.n	80011ac <HAL_DMA_Abort_IT+0x90>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a1c      	ldr	r2, [pc, #112]	; (80011fc <HAL_DMA_Abort_IT+0xe0>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d00a      	beq.n	80011a6 <HAL_DMA_Abort_IT+0x8a>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a1a      	ldr	r2, [pc, #104]	; (8001200 <HAL_DMA_Abort_IT+0xe4>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d102      	bne.n	80011a0 <HAL_DMA_Abort_IT+0x84>
 800119a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800119e:	e00e      	b.n	80011be <HAL_DMA_Abort_IT+0xa2>
 80011a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011a4:	e00b      	b.n	80011be <HAL_DMA_Abort_IT+0xa2>
 80011a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011aa:	e008      	b.n	80011be <HAL_DMA_Abort_IT+0xa2>
 80011ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b0:	e005      	b.n	80011be <HAL_DMA_Abort_IT+0xa2>
 80011b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b6:	e002      	b.n	80011be <HAL_DMA_Abort_IT+0xa2>
 80011b8:	2310      	movs	r3, #16
 80011ba:	e000      	b.n	80011be <HAL_DMA_Abort_IT+0xa2>
 80011bc:	2301      	movs	r3, #1
 80011be:	4a11      	ldr	r2, [pc, #68]	; (8001204 <HAL_DMA_Abort_IT+0xe8>)
 80011c0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2201      	movs	r2, #1
 80011c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	4798      	blx	r3
    } 
  }
  return status;
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40020008 	.word	0x40020008
 80011f0:	4002001c 	.word	0x4002001c
 80011f4:	40020030 	.word	0x40020030
 80011f8:	40020044 	.word	0x40020044
 80011fc:	40020058 	.word	0x40020058
 8001200:	4002006c 	.word	0x4002006c
 8001204:	40020000 	.word	0x40020000

08001208 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001222:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <HAL_FLASH_Program+0xd8>)
 8001224:	7e1b      	ldrb	r3, [r3, #24]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d101      	bne.n	800122e <HAL_FLASH_Program+0x26>
 800122a:	2302      	movs	r3, #2
 800122c:	e054      	b.n	80012d8 <HAL_FLASH_Program+0xd0>
 800122e:	4b2c      	ldr	r3, [pc, #176]	; (80012e0 <HAL_FLASH_Program+0xd8>)
 8001230:	2201      	movs	r2, #1
 8001232:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001234:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001238:	f000 f8a8 	bl	800138c <FLASH_WaitForLastOperation>
 800123c:	4603      	mov	r3, r0
 800123e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d144      	bne.n	80012d0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d102      	bne.n	8001252 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800124c:	2301      	movs	r3, #1
 800124e:	757b      	strb	r3, [r7, #21]
 8001250:	e007      	b.n	8001262 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d102      	bne.n	800125e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001258:	2302      	movs	r3, #2
 800125a:	757b      	strb	r3, [r7, #21]
 800125c:	e001      	b.n	8001262 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800125e:	2304      	movs	r3, #4
 8001260:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001262:	2300      	movs	r3, #0
 8001264:	75bb      	strb	r3, [r7, #22]
 8001266:	e02d      	b.n	80012c4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001268:	7dbb      	ldrb	r3, [r7, #22]
 800126a:	005a      	lsls	r2, r3, #1
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	eb02 0c03 	add.w	ip, r2, r3
 8001272:	7dbb      	ldrb	r3, [r7, #22]
 8001274:	0119      	lsls	r1, r3, #4
 8001276:	e9d7 2300 	ldrd	r2, r3, [r7]
 800127a:	f1c1 0620 	rsb	r6, r1, #32
 800127e:	f1a1 0020 	sub.w	r0, r1, #32
 8001282:	fa22 f401 	lsr.w	r4, r2, r1
 8001286:	fa03 f606 	lsl.w	r6, r3, r6
 800128a:	4334      	orrs	r4, r6
 800128c:	fa23 f000 	lsr.w	r0, r3, r0
 8001290:	4304      	orrs	r4, r0
 8001292:	fa23 f501 	lsr.w	r5, r3, r1
 8001296:	b2a3      	uxth	r3, r4
 8001298:	4619      	mov	r1, r3
 800129a:	4660      	mov	r0, ip
 800129c:	f000 f85a 	bl	8001354 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80012a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012a4:	f000 f872 	bl	800138c <FLASH_WaitForLastOperation>
 80012a8:	4603      	mov	r3, r0
 80012aa:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <HAL_FLASH_Program+0xdc>)
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <HAL_FLASH_Program+0xdc>)
 80012b2:	f023 0301 	bic.w	r3, r3, #1
 80012b6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d107      	bne.n	80012ce <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80012be:	7dbb      	ldrb	r3, [r7, #22]
 80012c0:	3301      	adds	r3, #1
 80012c2:	75bb      	strb	r3, [r7, #22]
 80012c4:	7dba      	ldrb	r2, [r7, #22]
 80012c6:	7d7b      	ldrb	r3, [r7, #21]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d3cd      	bcc.n	8001268 <HAL_FLASH_Program+0x60>
 80012cc:	e000      	b.n	80012d0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80012ce:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <HAL_FLASH_Program+0xd8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	761a      	strb	r2, [r3, #24]

  return status;
 80012d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	371c      	adds	r7, #28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e0:	200004e8 	.word	0x200004e8
 80012e4:	40022000 	.word	0x40022000

080012e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <HAL_FLASH_Unlock+0x40>)
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00d      	beq.n	800131a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_FLASH_Unlock+0x40>)
 8001300:	4a0a      	ldr	r2, [pc, #40]	; (800132c <HAL_FLASH_Unlock+0x44>)
 8001302:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <HAL_FLASH_Unlock+0x40>)
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <HAL_FLASH_Unlock+0x48>)
 8001308:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <HAL_FLASH_Unlock+0x40>)
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800131a:	79fb      	ldrb	r3, [r7, #7]
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	40022000 	.word	0x40022000
 800132c:	45670123 	.word	0x45670123
 8001330:	cdef89ab 	.word	0xcdef89ab

08001334 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <HAL_FLASH_Lock+0x1c>)
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <HAL_FLASH_Lock+0x1c>)
 800133e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001342:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40022000 	.word	0x40022000

08001354 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <FLASH_Program_HalfWord+0x30>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001366:	4b08      	ldr	r3, [pc, #32]	; (8001388 <FLASH_Program_HalfWord+0x34>)
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	4a07      	ldr	r2, [pc, #28]	; (8001388 <FLASH_Program_HalfWord+0x34>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	887a      	ldrh	r2, [r7, #2]
 8001376:	801a      	strh	r2, [r3, #0]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	200004e8 	.word	0x200004e8
 8001388:	40022000 	.word	0x40022000

0800138c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff fba0 	bl	8000ad8 <HAL_GetTick>
 8001398:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800139a:	e010      	b.n	80013be <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a2:	d00c      	beq.n	80013be <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d007      	beq.n	80013ba <FLASH_WaitForLastOperation+0x2e>
 80013aa:	f7ff fb95 	bl	8000ad8 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d201      	bcs.n	80013be <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e025      	b.n	800140a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <FLASH_WaitForLastOperation+0x88>)
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1e8      	bne.n	800139c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <FLASH_WaitForLastOperation+0x88>)
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	f003 0320 	and.w	r3, r3, #32
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d002      	beq.n	80013dc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <FLASH_WaitForLastOperation+0x88>)
 80013d8:	2220      	movs	r2, #32
 80013da:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80013dc:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <FLASH_WaitForLastOperation+0x88>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	f003 0310 	and.w	r3, r3, #16
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d10b      	bne.n	8001400 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <FLASH_WaitForLastOperation+0x88>)
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d105      	bne.n	8001400 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <FLASH_WaitForLastOperation+0x88>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001400:	f000 f80a 	bl	8001418 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40022000 	.word	0x40022000

08001418 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001422:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <FLASH_SetErrorCode+0x98>)
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	2b00      	cmp	r3, #0
 800142c:	d009      	beq.n	8001442 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800142e:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <FLASH_SetErrorCode+0x9c>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f043 0302 	orr.w	r3, r3, #2
 8001436:	4a1f      	ldr	r2, [pc, #124]	; (80014b4 <FLASH_SetErrorCode+0x9c>)
 8001438:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f043 0310 	orr.w	r3, r3, #16
 8001440:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001442:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <FLASH_SetErrorCode+0x98>)
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	2b00      	cmp	r3, #0
 800144c:	d009      	beq.n	8001462 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <FLASH_SetErrorCode+0x9c>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <FLASH_SetErrorCode+0x9c>)
 8001458:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <FLASH_SetErrorCode+0x98>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00b      	beq.n	8001486 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <FLASH_SetErrorCode+0x9c>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f043 0304 	orr.w	r3, r3, #4
 8001476:	4a0f      	ldr	r2, [pc, #60]	; (80014b4 <FLASH_SetErrorCode+0x9c>)
 8001478:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <FLASH_SetErrorCode+0x98>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4a0c      	ldr	r2, [pc, #48]	; (80014b0 <FLASH_SetErrorCode+0x98>)
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f240 1201 	movw	r2, #257	; 0x101
 800148c:	4293      	cmp	r3, r2
 800148e:	d106      	bne.n	800149e <FLASH_SetErrorCode+0x86>
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <FLASH_SetErrorCode+0x98>)
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <FLASH_SetErrorCode+0x98>)
 8001496:	f023 0301 	bic.w	r3, r3, #1
 800149a:	61d3      	str	r3, [r2, #28]
}  
 800149c:	e002      	b.n	80014a4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800149e:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <FLASH_SetErrorCode+0x98>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	60d3      	str	r3, [r2, #12]
}  
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40022000 	.word	0x40022000
 80014b4:	200004e8 	.word	0x200004e8

080014b8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80014ca:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <HAL_FLASHEx_Erase+0xd0>)
 80014cc:	7e1b      	ldrb	r3, [r3, #24]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d101      	bne.n	80014d6 <HAL_FLASHEx_Erase+0x1e>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e053      	b.n	800157e <HAL_FLASHEx_Erase+0xc6>
 80014d6:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <HAL_FLASHEx_Erase+0xd0>)
 80014d8:	2201      	movs	r2, #1
 80014da:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d116      	bne.n	8001512 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80014e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014e8:	f7ff ff50 	bl	800138c <FLASH_WaitForLastOperation>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d141      	bne.n	8001576 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80014f2:	2001      	movs	r0, #1
 80014f4:	f000 f84c 	bl	8001590 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014fc:	f7ff ff46 	bl	800138c <FLASH_WaitForLastOperation>
 8001500:	4603      	mov	r3, r0
 8001502:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001504:	4b21      	ldr	r3, [pc, #132]	; (800158c <HAL_FLASHEx_Erase+0xd4>)
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	4a20      	ldr	r2, [pc, #128]	; (800158c <HAL_FLASHEx_Erase+0xd4>)
 800150a:	f023 0304 	bic.w	r3, r3, #4
 800150e:	6113      	str	r3, [r2, #16]
 8001510:	e031      	b.n	8001576 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001512:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001516:	f7ff ff39 	bl	800138c <FLASH_WaitForLastOperation>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d12a      	bne.n	8001576 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	f04f 32ff 	mov.w	r2, #4294967295
 8001526:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	e019      	b.n	8001564 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001530:	68b8      	ldr	r0, [r7, #8]
 8001532:	f000 f849 	bl	80015c8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001536:	f24c 3050 	movw	r0, #50000	; 0xc350
 800153a:	f7ff ff27 	bl	800138c <FLASH_WaitForLastOperation>
 800153e:	4603      	mov	r3, r0
 8001540:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_FLASHEx_Erase+0xd4>)
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	4a11      	ldr	r2, [pc, #68]	; (800158c <HAL_FLASHEx_Erase+0xd4>)
 8001548:	f023 0302 	bic.w	r3, r3, #2
 800154c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	601a      	str	r2, [r3, #0]
            break;
 800155a:	e00c      	b.n	8001576 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001562:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	029a      	lsls	r2, r3, #10
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001570:	68ba      	ldr	r2, [r7, #8]
 8001572:	429a      	cmp	r2, r3
 8001574:	d3dc      	bcc.n	8001530 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <HAL_FLASHEx_Erase+0xd0>)
 8001578:	2200      	movs	r2, #0
 800157a:	761a      	strb	r2, [r3, #24]

  return status;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200004e8 	.word	0x200004e8
 800158c:	40022000 	.word	0x40022000

08001590 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <FLASH_MassErase+0x30>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <FLASH_MassErase+0x34>)
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <FLASH_MassErase+0x34>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <FLASH_MassErase+0x34>)
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <FLASH_MassErase+0x34>)
 80015b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015b4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	200004e8 	.word	0x200004e8
 80015c4:	40022000 	.word	0x40022000

080015c8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <FLASH_PageErase+0x38>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <FLASH_PageErase+0x3c>)
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <FLASH_PageErase+0x3c>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80015e2:	4a08      	ldr	r2, [pc, #32]	; (8001604 <FLASH_PageErase+0x3c>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <FLASH_PageErase+0x3c>)
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	4a05      	ldr	r2, [pc, #20]	; (8001604 <FLASH_PageErase+0x3c>)
 80015ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015f2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	200004e8 	.word	0x200004e8
 8001604:	40022000 	.word	0x40022000

08001608 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001608:	b480      	push	{r7}
 800160a:	b08b      	sub	sp, #44	; 0x2c
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161a:	e127      	b.n	800186c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800161c:	2201      	movs	r2, #1
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	429a      	cmp	r2, r3
 8001636:	f040 8116 	bne.w	8001866 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b12      	cmp	r3, #18
 8001640:	d034      	beq.n	80016ac <HAL_GPIO_Init+0xa4>
 8001642:	2b12      	cmp	r3, #18
 8001644:	d80d      	bhi.n	8001662 <HAL_GPIO_Init+0x5a>
 8001646:	2b02      	cmp	r3, #2
 8001648:	d02b      	beq.n	80016a2 <HAL_GPIO_Init+0x9a>
 800164a:	2b02      	cmp	r3, #2
 800164c:	d804      	bhi.n	8001658 <HAL_GPIO_Init+0x50>
 800164e:	2b00      	cmp	r3, #0
 8001650:	d031      	beq.n	80016b6 <HAL_GPIO_Init+0xae>
 8001652:	2b01      	cmp	r3, #1
 8001654:	d01c      	beq.n	8001690 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001656:	e048      	b.n	80016ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001658:	2b03      	cmp	r3, #3
 800165a:	d043      	beq.n	80016e4 <HAL_GPIO_Init+0xdc>
 800165c:	2b11      	cmp	r3, #17
 800165e:	d01b      	beq.n	8001698 <HAL_GPIO_Init+0x90>
          break;
 8001660:	e043      	b.n	80016ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001662:	4a89      	ldr	r2, [pc, #548]	; (8001888 <HAL_GPIO_Init+0x280>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d026      	beq.n	80016b6 <HAL_GPIO_Init+0xae>
 8001668:	4a87      	ldr	r2, [pc, #540]	; (8001888 <HAL_GPIO_Init+0x280>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d806      	bhi.n	800167c <HAL_GPIO_Init+0x74>
 800166e:	4a87      	ldr	r2, [pc, #540]	; (800188c <HAL_GPIO_Init+0x284>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d020      	beq.n	80016b6 <HAL_GPIO_Init+0xae>
 8001674:	4a86      	ldr	r2, [pc, #536]	; (8001890 <HAL_GPIO_Init+0x288>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d01d      	beq.n	80016b6 <HAL_GPIO_Init+0xae>
          break;
 800167a:	e036      	b.n	80016ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800167c:	4a85      	ldr	r2, [pc, #532]	; (8001894 <HAL_GPIO_Init+0x28c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d019      	beq.n	80016b6 <HAL_GPIO_Init+0xae>
 8001682:	4a85      	ldr	r2, [pc, #532]	; (8001898 <HAL_GPIO_Init+0x290>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d016      	beq.n	80016b6 <HAL_GPIO_Init+0xae>
 8001688:	4a84      	ldr	r2, [pc, #528]	; (800189c <HAL_GPIO_Init+0x294>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d013      	beq.n	80016b6 <HAL_GPIO_Init+0xae>
          break;
 800168e:	e02c      	b.n	80016ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	623b      	str	r3, [r7, #32]
          break;
 8001696:	e028      	b.n	80016ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	3304      	adds	r3, #4
 800169e:	623b      	str	r3, [r7, #32]
          break;
 80016a0:	e023      	b.n	80016ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	3308      	adds	r3, #8
 80016a8:	623b      	str	r3, [r7, #32]
          break;
 80016aa:	e01e      	b.n	80016ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	330c      	adds	r3, #12
 80016b2:	623b      	str	r3, [r7, #32]
          break;
 80016b4:	e019      	b.n	80016ea <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d102      	bne.n	80016c4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016be:	2304      	movs	r3, #4
 80016c0:	623b      	str	r3, [r7, #32]
          break;
 80016c2:	e012      	b.n	80016ea <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d105      	bne.n	80016d8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016cc:	2308      	movs	r3, #8
 80016ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69fa      	ldr	r2, [r7, #28]
 80016d4:	611a      	str	r2, [r3, #16]
          break;
 80016d6:	e008      	b.n	80016ea <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d8:	2308      	movs	r3, #8
 80016da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	615a      	str	r2, [r3, #20]
          break;
 80016e2:	e002      	b.n	80016ea <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
          break;
 80016e8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2bff      	cmp	r3, #255	; 0xff
 80016ee:	d801      	bhi.n	80016f4 <HAL_GPIO_Init+0xec>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	e001      	b.n	80016f8 <HAL_GPIO_Init+0xf0>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3304      	adds	r3, #4
 80016f8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	2bff      	cmp	r3, #255	; 0xff
 80016fe:	d802      	bhi.n	8001706 <HAL_GPIO_Init+0xfe>
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	e002      	b.n	800170c <HAL_GPIO_Init+0x104>
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	3b08      	subs	r3, #8
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	210f      	movs	r1, #15
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	fa01 f303 	lsl.w	r3, r1, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	401a      	ands	r2, r3
 800171e:	6a39      	ldr	r1, [r7, #32]
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	431a      	orrs	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 8096 	beq.w	8001866 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800173a:	4b59      	ldr	r3, [pc, #356]	; (80018a0 <HAL_GPIO_Init+0x298>)
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	4a58      	ldr	r2, [pc, #352]	; (80018a0 <HAL_GPIO_Init+0x298>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6193      	str	r3, [r2, #24]
 8001746:	4b56      	ldr	r3, [pc, #344]	; (80018a0 <HAL_GPIO_Init+0x298>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001752:	4a54      	ldr	r2, [pc, #336]	; (80018a4 <HAL_GPIO_Init+0x29c>)
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	089b      	lsrs	r3, r3, #2
 8001758:	3302      	adds	r3, #2
 800175a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	220f      	movs	r2, #15
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	4013      	ands	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4b      	ldr	r2, [pc, #300]	; (80018a8 <HAL_GPIO_Init+0x2a0>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d013      	beq.n	80017a6 <HAL_GPIO_Init+0x19e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4a      	ldr	r2, [pc, #296]	; (80018ac <HAL_GPIO_Init+0x2a4>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00d      	beq.n	80017a2 <HAL_GPIO_Init+0x19a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a49      	ldr	r2, [pc, #292]	; (80018b0 <HAL_GPIO_Init+0x2a8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d007      	beq.n	800179e <HAL_GPIO_Init+0x196>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a48      	ldr	r2, [pc, #288]	; (80018b4 <HAL_GPIO_Init+0x2ac>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d101      	bne.n	800179a <HAL_GPIO_Init+0x192>
 8001796:	2303      	movs	r3, #3
 8001798:	e006      	b.n	80017a8 <HAL_GPIO_Init+0x1a0>
 800179a:	2304      	movs	r3, #4
 800179c:	e004      	b.n	80017a8 <HAL_GPIO_Init+0x1a0>
 800179e:	2302      	movs	r3, #2
 80017a0:	e002      	b.n	80017a8 <HAL_GPIO_Init+0x1a0>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <HAL_GPIO_Init+0x1a0>
 80017a6:	2300      	movs	r3, #0
 80017a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017aa:	f002 0203 	and.w	r2, r2, #3
 80017ae:	0092      	lsls	r2, r2, #2
 80017b0:	4093      	lsls	r3, r2
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017b8:	493a      	ldr	r1, [pc, #232]	; (80018a4 <HAL_GPIO_Init+0x29c>)
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	3302      	adds	r3, #2
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d006      	beq.n	80017e0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017d2:	4b39      	ldr	r3, [pc, #228]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	4938      	ldr	r1, [pc, #224]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]
 80017de:	e006      	b.n	80017ee <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017e0:	4b35      	ldr	r3, [pc, #212]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	4933      	ldr	r1, [pc, #204]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d006      	beq.n	8001808 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017fa:	4b2f      	ldr	r3, [pc, #188]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	492e      	ldr	r1, [pc, #184]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	604b      	str	r3, [r1, #4]
 8001806:	e006      	b.n	8001816 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001808:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	43db      	mvns	r3, r3
 8001810:	4929      	ldr	r1, [pc, #164]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 8001812:	4013      	ands	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d006      	beq.n	8001830 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001822:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	4924      	ldr	r1, [pc, #144]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
 800182e:	e006      	b.n	800183e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001830:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	43db      	mvns	r3, r3
 8001838:	491f      	ldr	r1, [pc, #124]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 800183a:	4013      	ands	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d006      	beq.n	8001858 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800184a:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	491a      	ldr	r1, [pc, #104]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	60cb      	str	r3, [r1, #12]
 8001856:	e006      	b.n	8001866 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	43db      	mvns	r3, r3
 8001860:	4915      	ldr	r1, [pc, #84]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 8001862:	4013      	ands	r3, r2
 8001864:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	3301      	adds	r3, #1
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	fa22 f303 	lsr.w	r3, r2, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	f47f aed0 	bne.w	800161c <HAL_GPIO_Init+0x14>
  }
}
 800187c:	bf00      	nop
 800187e:	372c      	adds	r7, #44	; 0x2c
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	10210000 	.word	0x10210000
 800188c:	10110000 	.word	0x10110000
 8001890:	10120000 	.word	0x10120000
 8001894:	10310000 	.word	0x10310000
 8001898:	10320000 	.word	0x10320000
 800189c:	10220000 	.word	0x10220000
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40010000 	.word	0x40010000
 80018a8:	40010800 	.word	0x40010800
 80018ac:	40010c00 	.word	0x40010c00
 80018b0:	40011000 	.word	0x40011000
 80018b4:	40011400 	.word	0x40011400
 80018b8:	40010400 	.word	0x40010400

080018bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	887b      	ldrh	r3, [r7, #2]
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
 80018d8:	e001      	b.n	80018de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018de:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr

080018ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	460b      	mov	r3, r1
 80018f4:	807b      	strh	r3, [r7, #2]
 80018f6:	4613      	mov	r3, r2
 80018f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018fa:	787b      	ldrb	r3, [r7, #1]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001900:	887a      	ldrh	r2, [r7, #2]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001906:	e003      	b.n	8001910 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001908:	887b      	ldrh	r3, [r7, #2]
 800190a:	041a      	lsls	r2, r3, #16
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	611a      	str	r2, [r3, #16]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr

0800191a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	460b      	mov	r3, r1
 8001924:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	887b      	ldrh	r3, [r7, #2]
 800192c:	4013      	ands	r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001932:	887a      	ldrh	r2, [r7, #2]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001938:	e002      	b.n	8001940 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800193a:	887a      	ldrh	r2, [r7, #2]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	611a      	str	r2, [r3, #16]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
	...

0800194c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e26c      	b.n	8001e38 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 8087 	beq.w	8001a7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800196c:	4b92      	ldr	r3, [pc, #584]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	2b04      	cmp	r3, #4
 8001976:	d00c      	beq.n	8001992 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001978:	4b8f      	ldr	r3, [pc, #572]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	2b08      	cmp	r3, #8
 8001982:	d112      	bne.n	80019aa <HAL_RCC_OscConfig+0x5e>
 8001984:	4b8c      	ldr	r3, [pc, #560]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001990:	d10b      	bne.n	80019aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001992:	4b89      	ldr	r3, [pc, #548]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d06c      	beq.n	8001a78 <HAL_RCC_OscConfig+0x12c>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d168      	bne.n	8001a78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e246      	b.n	8001e38 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b2:	d106      	bne.n	80019c2 <HAL_RCC_OscConfig+0x76>
 80019b4:	4b80      	ldr	r3, [pc, #512]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a7f      	ldr	r2, [pc, #508]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	e02e      	b.n	8001a20 <HAL_RCC_OscConfig+0xd4>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b7b      	ldr	r3, [pc, #492]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a7a      	ldr	r2, [pc, #488]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b78      	ldr	r3, [pc, #480]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a77      	ldr	r2, [pc, #476]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e01d      	b.n	8001a20 <HAL_RCC_OscConfig+0xd4>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0xbc>
 80019ee:	4b72      	ldr	r3, [pc, #456]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a71      	ldr	r2, [pc, #452]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	4b6f      	ldr	r3, [pc, #444]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a6e      	ldr	r2, [pc, #440]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e00b      	b.n	8001a20 <HAL_RCC_OscConfig+0xd4>
 8001a08:	4b6b      	ldr	r3, [pc, #428]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a6a      	ldr	r2, [pc, #424]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	4b68      	ldr	r3, [pc, #416]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a67      	ldr	r2, [pc, #412]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d013      	beq.n	8001a50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7ff f856 	bl	8000ad8 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a30:	f7ff f852 	bl	8000ad8 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b64      	cmp	r3, #100	; 0x64
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e1fa      	b.n	8001e38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b5d      	ldr	r3, [pc, #372]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0xe4>
 8001a4e:	e014      	b.n	8001a7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7ff f842 	bl	8000ad8 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a58:	f7ff f83e 	bl	8000ad8 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	; 0x64
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e1e6      	b.n	8001e38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6a:	4b53      	ldr	r3, [pc, #332]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x10c>
 8001a76:	e000      	b.n	8001a7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d063      	beq.n	8001b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a86:	4b4c      	ldr	r3, [pc, #304]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00b      	beq.n	8001aaa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a92:	4b49      	ldr	r3, [pc, #292]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d11c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x18c>
 8001a9e:	4b46      	ldr	r3, [pc, #280]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d116      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aaa:	4b43      	ldr	r3, [pc, #268]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d005      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x176>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d001      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e1ba      	b.n	8001e38 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac2:	4b3d      	ldr	r3, [pc, #244]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4939      	ldr	r1, [pc, #228]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad6:	e03a      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d020      	beq.n	8001b22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae0:	4b36      	ldr	r3, [pc, #216]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7fe fff7 	bl	8000ad8 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aee:	f7fe fff3 	bl	8000ad8 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e19b      	b.n	8001e38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b00:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0c:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4927      	ldr	r1, [pc, #156]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	600b      	str	r3, [r1, #0]
 8001b20:	e015      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b22:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <HAL_RCC_OscConfig+0x270>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b28:	f7fe ffd6 	bl	8000ad8 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b30:	f7fe ffd2 	bl	8000ad8 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e17a      	b.n	8001e38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b42:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03a      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d019      	beq.n	8001b96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b68:	f7fe ffb6 	bl	8000ad8 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b70:	f7fe ffb2 	bl	8000ad8 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e15a      	b.n	8001e38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b82:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f000 fada 	bl	8002148 <RCC_Delay>
 8001b94:	e01c      	b.n	8001bd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9c:	f7fe ff9c 	bl	8000ad8 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba2:	e00f      	b.n	8001bc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba4:	f7fe ff98 	bl	8000ad8 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d908      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e140      	b.n	8001e38 <HAL_RCC_OscConfig+0x4ec>
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	42420000 	.word	0x42420000
 8001bc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc4:	4b9e      	ldr	r3, [pc, #632]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1e9      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80a6 	beq.w	8001d2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001be2:	4b97      	ldr	r3, [pc, #604]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10d      	bne.n	8001c0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bee:	4b94      	ldr	r3, [pc, #592]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	4a93      	ldr	r2, [pc, #588]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	61d3      	str	r3, [r2, #28]
 8001bfa:	4b91      	ldr	r3, [pc, #580]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c06:	2301      	movs	r3, #1
 8001c08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0a:	4b8e      	ldr	r3, [pc, #568]	; (8001e44 <HAL_RCC_OscConfig+0x4f8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d118      	bne.n	8001c48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c16:	4b8b      	ldr	r3, [pc, #556]	; (8001e44 <HAL_RCC_OscConfig+0x4f8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a8a      	ldr	r2, [pc, #552]	; (8001e44 <HAL_RCC_OscConfig+0x4f8>)
 8001c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c22:	f7fe ff59 	bl	8000ad8 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2a:	f7fe ff55 	bl	8000ad8 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b64      	cmp	r3, #100	; 0x64
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e0fd      	b.n	8001e38 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3c:	4b81      	ldr	r3, [pc, #516]	; (8001e44 <HAL_RCC_OscConfig+0x4f8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d106      	bne.n	8001c5e <HAL_RCC_OscConfig+0x312>
 8001c50:	4b7b      	ldr	r3, [pc, #492]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	4a7a      	ldr	r2, [pc, #488]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6213      	str	r3, [r2, #32]
 8001c5c:	e02d      	b.n	8001cba <HAL_RCC_OscConfig+0x36e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x334>
 8001c66:	4b76      	ldr	r3, [pc, #472]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	4a75      	ldr	r2, [pc, #468]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	f023 0301 	bic.w	r3, r3, #1
 8001c70:	6213      	str	r3, [r2, #32]
 8001c72:	4b73      	ldr	r3, [pc, #460]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	4a72      	ldr	r2, [pc, #456]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	f023 0304 	bic.w	r3, r3, #4
 8001c7c:	6213      	str	r3, [r2, #32]
 8001c7e:	e01c      	b.n	8001cba <HAL_RCC_OscConfig+0x36e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	2b05      	cmp	r3, #5
 8001c86:	d10c      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x356>
 8001c88:	4b6d      	ldr	r3, [pc, #436]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	4a6c      	ldr	r2, [pc, #432]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001c8e:	f043 0304 	orr.w	r3, r3, #4
 8001c92:	6213      	str	r3, [r2, #32]
 8001c94:	4b6a      	ldr	r3, [pc, #424]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	4a69      	ldr	r2, [pc, #420]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6213      	str	r3, [r2, #32]
 8001ca0:	e00b      	b.n	8001cba <HAL_RCC_OscConfig+0x36e>
 8001ca2:	4b67      	ldr	r3, [pc, #412]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	4a66      	ldr	r2, [pc, #408]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	f023 0301 	bic.w	r3, r3, #1
 8001cac:	6213      	str	r3, [r2, #32]
 8001cae:	4b64      	ldr	r3, [pc, #400]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	4a63      	ldr	r2, [pc, #396]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	f023 0304 	bic.w	r3, r3, #4
 8001cb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d015      	beq.n	8001cee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc2:	f7fe ff09 	bl	8000ad8 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc8:	e00a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cca:	f7fe ff05 	bl	8000ad8 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e0ab      	b.n	8001e38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce0:	4b57      	ldr	r3, [pc, #348]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0ee      	beq.n	8001cca <HAL_RCC_OscConfig+0x37e>
 8001cec:	e014      	b.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cee:	f7fe fef3 	bl	8000ad8 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf4:	e00a      	b.n	8001d0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf6:	f7fe feef 	bl	8000ad8 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e095      	b.n	8001e38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d0c:	4b4c      	ldr	r3, [pc, #304]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1ee      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d18:	7dfb      	ldrb	r3, [r7, #23]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d105      	bne.n	8001d2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1e:	4b48      	ldr	r3, [pc, #288]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	4a47      	ldr	r2, [pc, #284]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 8081 	beq.w	8001e36 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d34:	4b42      	ldr	r3, [pc, #264]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 030c 	and.w	r3, r3, #12
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d061      	beq.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d146      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d48:	4b3f      	ldr	r3, [pc, #252]	; (8001e48 <HAL_RCC_OscConfig+0x4fc>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7fe fec3 	bl	8000ad8 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d56:	f7fe febf 	bl	8000ad8 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e067      	b.n	8001e38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d68:	4b35      	ldr	r3, [pc, #212]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1f0      	bne.n	8001d56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d7c:	d108      	bne.n	8001d90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d7e:	4b30      	ldr	r3, [pc, #192]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	492d      	ldr	r1, [pc, #180]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d90:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a19      	ldr	r1, [r3, #32]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	430b      	orrs	r3, r1
 8001da2:	4927      	ldr	r1, [pc, #156]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da8:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <HAL_RCC_OscConfig+0x4fc>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dae:	f7fe fe93 	bl	8000ad8 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db6:	f7fe fe8f 	bl	8000ad8 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e037      	b.n	8001e38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x46a>
 8001dd4:	e02f      	b.n	8001e36 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <HAL_RCC_OscConfig+0x4fc>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7fe fe7c 	bl	8000ad8 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de4:	f7fe fe78 	bl	8000ad8 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e020      	b.n	8001e38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x498>
 8001e02:	e018      	b.n	8001e36 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e013      	b.n	8001e38 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d106      	bne.n	8001e32 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d001      	beq.n	8001e36 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40007000 	.word	0x40007000
 8001e48:	42420060 	.word	0x42420060

08001e4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0d0      	b.n	8002002 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e60:	4b6a      	ldr	r3, [pc, #424]	; (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d910      	bls.n	8001e90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b67      	ldr	r3, [pc, #412]	; (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 0207 	bic.w	r2, r3, #7
 8001e76:	4965      	ldr	r1, [pc, #404]	; (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7e:	4b63      	ldr	r3, [pc, #396]	; (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0b8      	b.n	8002002 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d020      	beq.n	8001ede <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ea8:	4b59      	ldr	r3, [pc, #356]	; (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	4a58      	ldr	r2, [pc, #352]	; (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ec0:	4b53      	ldr	r3, [pc, #332]	; (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a52      	ldr	r2, [pc, #328]	; (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001eca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ecc:	4b50      	ldr	r3, [pc, #320]	; (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	494d      	ldr	r1, [pc, #308]	; (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d040      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d107      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	4b47      	ldr	r3, [pc, #284]	; (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d115      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e07f      	b.n	8002002 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d107      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0a:	4b41      	ldr	r3, [pc, #260]	; (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d109      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e073      	b.n	8002002 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1a:	4b3d      	ldr	r3, [pc, #244]	; (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e06b      	b.n	8002002 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f2a:	4b39      	ldr	r3, [pc, #228]	; (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f023 0203 	bic.w	r2, r3, #3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	4936      	ldr	r1, [pc, #216]	; (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f3c:	f7fe fdcc 	bl	8000ad8 <HAL_GetTick>
 8001f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f42:	e00a      	b.n	8001f5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f44:	f7fe fdc8 	bl	8000ad8 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e053      	b.n	8002002 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5a:	4b2d      	ldr	r3, [pc, #180]	; (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 020c 	and.w	r2, r3, #12
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d1eb      	bne.n	8001f44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f6c:	4b27      	ldr	r3, [pc, #156]	; (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d210      	bcs.n	8001f9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b24      	ldr	r3, [pc, #144]	; (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 0207 	bic.w	r2, r3, #7
 8001f82:	4922      	ldr	r1, [pc, #136]	; (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8a:	4b20      	ldr	r3, [pc, #128]	; (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e032      	b.n	8002002 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d008      	beq.n	8001fba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa8:	4b19      	ldr	r3, [pc, #100]	; (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	4916      	ldr	r1, [pc, #88]	; (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d009      	beq.n	8001fda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fc6:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	490e      	ldr	r1, [pc, #56]	; (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fda:	f000 f821 	bl	8002020 <HAL_RCC_GetSysClockFreq>
 8001fde:	4601      	mov	r1, r0
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <HAL_RCC_ClockConfig+0x1c8>)
 8001fec:	5cd3      	ldrb	r3, [r2, r3]
 8001fee:	fa21 f303 	lsr.w	r3, r1, r3
 8001ff2:	4a09      	ldr	r2, [pc, #36]	; (8002018 <HAL_RCC_ClockConfig+0x1cc>)
 8001ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <HAL_RCC_ClockConfig+0x1d0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fd2a 	bl	8000a54 <HAL_InitTick>

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40022000 	.word	0x40022000
 8002010:	40021000 	.word	0x40021000
 8002014:	08009670 	.word	0x08009670
 8002018:	20000020 	.word	0x20000020
 800201c:	20000018 	.word	0x20000018

08002020 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002020:	b490      	push	{r4, r7}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002026:	4b2a      	ldr	r3, [pc, #168]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002028:	1d3c      	adds	r4, r7, #4
 800202a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800202c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002030:	4b28      	ldr	r3, [pc, #160]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800204a:	4b23      	ldr	r3, [pc, #140]	; (80020d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	2b04      	cmp	r3, #4
 8002058:	d002      	beq.n	8002060 <HAL_RCC_GetSysClockFreq+0x40>
 800205a:	2b08      	cmp	r3, #8
 800205c:	d003      	beq.n	8002066 <HAL_RCC_GetSysClockFreq+0x46>
 800205e:	e02d      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002060:	4b1e      	ldr	r3, [pc, #120]	; (80020dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002062:	623b      	str	r3, [r7, #32]
      break;
 8002064:	e02d      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	0c9b      	lsrs	r3, r3, #18
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002072:	4413      	add	r3, r2
 8002074:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002078:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d013      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002084:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	0c5b      	lsrs	r3, r3, #17
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002092:	4413      	add	r3, r2
 8002094:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002098:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	4a0f      	ldr	r2, [pc, #60]	; (80020dc <HAL_RCC_GetSysClockFreq+0xbc>)
 800209e:	fb02 f203 	mul.w	r2, r2, r3
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
 80020aa:	e004      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	4a0c      	ldr	r2, [pc, #48]	; (80020e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020b0:	fb02 f303 	mul.w	r3, r2, r3
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	623b      	str	r3, [r7, #32]
      break;
 80020ba:	e002      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020bc:	4b07      	ldr	r3, [pc, #28]	; (80020dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80020be:	623b      	str	r3, [r7, #32]
      break;
 80020c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020c2:	6a3b      	ldr	r3, [r7, #32]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3728      	adds	r7, #40	; 0x28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc90      	pop	{r4, r7}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	08006dc0 	.word	0x08006dc0
 80020d4:	08006dd0 	.word	0x08006dd0
 80020d8:	40021000 	.word	0x40021000
 80020dc:	007a1200 	.word	0x007a1200
 80020e0:	003d0900 	.word	0x003d0900

080020e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020e8:	4b02      	ldr	r3, [pc, #8]	; (80020f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ea:	681b      	ldr	r3, [r3, #0]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	20000020 	.word	0x20000020

080020f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020fc:	f7ff fff2 	bl	80020e4 <HAL_RCC_GetHCLKFreq>
 8002100:	4601      	mov	r1, r0
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	4a03      	ldr	r2, [pc, #12]	; (800211c <HAL_RCC_GetPCLK1Freq+0x24>)
 800210e:	5cd3      	ldrb	r3, [r2, r3]
 8002110:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002114:	4618      	mov	r0, r3
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40021000 	.word	0x40021000
 800211c:	08009680 	.word	0x08009680

08002120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002124:	f7ff ffde 	bl	80020e4 <HAL_RCC_GetHCLKFreq>
 8002128:	4601      	mov	r1, r0
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_RCC_GetPCLK2Freq+0x20>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	0adb      	lsrs	r3, r3, #11
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	4a03      	ldr	r2, [pc, #12]	; (8002144 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002136:	5cd3      	ldrb	r3, [r2, r3]
 8002138:	fa21 f303 	lsr.w	r3, r1, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	08009680 	.word	0x08009680

08002148 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002150:	4b0a      	ldr	r3, [pc, #40]	; (800217c <RCC_Delay+0x34>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <RCC_Delay+0x38>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	0a5b      	lsrs	r3, r3, #9
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	fb02 f303 	mul.w	r3, r2, r3
 8002162:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002164:	bf00      	nop
  }
  while (Delay --);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1e5a      	subs	r2, r3, #1
 800216a:	60fa      	str	r2, [r7, #12]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f9      	bne.n	8002164 <RCC_Delay+0x1c>
}
 8002170:	bf00      	nop
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000020 	.word	0x20000020
 8002180:	10624dd3 	.word	0x10624dd3

08002184 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d07d      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80021a0:	2300      	movs	r3, #0
 80021a2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a4:	4b4f      	ldr	r3, [pc, #316]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10d      	bne.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b0:	4b4c      	ldr	r3, [pc, #304]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	4a4b      	ldr	r2, [pc, #300]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ba:	61d3      	str	r3, [r2, #28]
 80021bc:	4b49      	ldr	r3, [pc, #292]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c8:	2301      	movs	r3, #1
 80021ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021cc:	4b46      	ldr	r3, [pc, #280]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d118      	bne.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021d8:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a42      	ldr	r2, [pc, #264]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e4:	f7fe fc78 	bl	8000ad8 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ea:	e008      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ec:	f7fe fc74 	bl	8000ad8 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b64      	cmp	r3, #100	; 0x64
 80021f8:	d901      	bls.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e06d      	b.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fe:	4b3a      	ldr	r3, [pc, #232]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800220a:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002212:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d02e      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	429a      	cmp	r2, r3
 8002226:	d027      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002228:	4b2e      	ldr	r3, [pc, #184]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002230:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002232:	4b2e      	ldr	r3, [pc, #184]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002234:	2201      	movs	r2, #1
 8002236:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002238:	4b2c      	ldr	r3, [pc, #176]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800223e:	4a29      	ldr	r2, [pc, #164]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d014      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7fe fc43 	bl	8000ad8 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002254:	e00a      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002256:	f7fe fc3f 	bl	8000ad8 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	f241 3288 	movw	r2, #5000	; 0x1388
 8002264:	4293      	cmp	r3, r2
 8002266:	d901      	bls.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e036      	b.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226c:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0ee      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002278:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4917      	ldr	r1, [pc, #92]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002286:	4313      	orrs	r3, r2
 8002288:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800228a:	7dfb      	ldrb	r3, [r7, #23]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d105      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002290:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	4a13      	ldr	r2, [pc, #76]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800229a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022a8:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	490b      	ldr	r1, [pc, #44]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d008      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022c6:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	4904      	ldr	r1, [pc, #16]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40007000 	.word	0x40007000
 80022ec:	42420440 	.word	0x42420440

080022f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e01d      	b.n	800233e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d106      	bne.n	800231c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f003 fed8 	bl	80060cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3304      	adds	r3, #4
 800232c:	4619      	mov	r1, r3
 800232e:	4610      	mov	r0, r2
 8002330:	f000 fb3c 	bl	80029ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002346:	b480      	push	{r7}
 8002348:	b085      	sub	sp, #20
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0201 	orr.w	r2, r2, #1
 800235c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b06      	cmp	r3, #6
 800236e:	d007      	beq.n	8002380 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e01d      	b.n	80023da <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d106      	bne.n	80023b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f815 	bl	80023e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2202      	movs	r2, #2
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3304      	adds	r3, #4
 80023c8:	4619      	mov	r1, r3
 80023ca:	4610      	mov	r0, r2
 80023cc:	f000 faee 	bl	80029ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2201      	movs	r2, #1
 8002404:	6839      	ldr	r1, [r7, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f000 fd50 	bl	8002eac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a10      	ldr	r2, [pc, #64]	; (8002454 <HAL_TIM_PWM_Start+0x60>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d107      	bne.n	8002426 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002424:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b06      	cmp	r3, #6
 8002436:	d007      	beq.n	8002448 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40012c00 	.word	0x40012c00

08002458 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b02      	cmp	r3, #2
 800246c:	d122      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b02      	cmp	r3, #2
 800247a:	d11b      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0202 	mvn.w	r2, #2
 8002484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fa6a 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 80024a0:	e005      	b.n	80024ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fa5d 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fa6c 	bl	8002986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d122      	bne.n	8002508 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d11b      	bne.n	8002508 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0204 	mvn.w	r2, #4
 80024d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2202      	movs	r2, #2
 80024de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 fa40 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 80024f4:	e005      	b.n	8002502 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fa33 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fa42 	bl	8002986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b08      	cmp	r3, #8
 8002514:	d122      	bne.n	800255c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b08      	cmp	r3, #8
 8002522:	d11b      	bne.n	800255c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0208 	mvn.w	r2, #8
 800252c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2204      	movs	r2, #4
 8002532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fa16 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 8002548:	e005      	b.n	8002556 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fa09 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 fa18 	bl	8002986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0310 	and.w	r3, r3, #16
 8002566:	2b10      	cmp	r3, #16
 8002568:	d122      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b10      	cmp	r3, #16
 8002576:	d11b      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0210 	mvn.w	r2, #16
 8002580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2208      	movs	r2, #8
 8002586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f9ec 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f9df 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f9ee 	bl	8002986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d10e      	bne.n	80025dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d107      	bne.n	80025dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0201 	mvn.w	r2, #1
 80025d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f003 f8b0 	bl	800573c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e6:	2b80      	cmp	r3, #128	; 0x80
 80025e8:	d10e      	bne.n	8002608 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f4:	2b80      	cmp	r3, #128	; 0x80
 80025f6:	d107      	bne.n	8002608 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 fd14 	bl	8003030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002612:	2b40      	cmp	r3, #64	; 0x40
 8002614:	d10e      	bne.n	8002634 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002620:	2b40      	cmp	r3, #64	; 0x40
 8002622:	d107      	bne.n	8002634 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800262c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f9b2 	bl	8002998 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0320 	and.w	r3, r3, #32
 800263e:	2b20      	cmp	r3, #32
 8002640:	d10e      	bne.n	8002660 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b20      	cmp	r3, #32
 800264e:	d107      	bne.n	8002660 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0220 	mvn.w	r2, #32
 8002658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fcdf 	bl	800301e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800267e:	2302      	movs	r3, #2
 8002680:	e0b4      	b.n	80027ec <HAL_TIM_PWM_ConfigChannel+0x184>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2202      	movs	r2, #2
 800268e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b0c      	cmp	r3, #12
 8002696:	f200 809f 	bhi.w	80027d8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800269a:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800269c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a0:	080026d5 	.word	0x080026d5
 80026a4:	080027d9 	.word	0x080027d9
 80026a8:	080027d9 	.word	0x080027d9
 80026ac:	080027d9 	.word	0x080027d9
 80026b0:	08002715 	.word	0x08002715
 80026b4:	080027d9 	.word	0x080027d9
 80026b8:	080027d9 	.word	0x080027d9
 80026bc:	080027d9 	.word	0x080027d9
 80026c0:	08002757 	.word	0x08002757
 80026c4:	080027d9 	.word	0x080027d9
 80026c8:	080027d9 	.word	0x080027d9
 80026cc:	080027d9 	.word	0x080027d9
 80026d0:	08002797 	.word	0x08002797
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 f9c8 	bl	8002a70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0208 	orr.w	r2, r2, #8
 80026ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0204 	bic.w	r2, r2, #4
 80026fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6999      	ldr	r1, [r3, #24]
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	619a      	str	r2, [r3, #24]
      break;
 8002712:	e062      	b.n	80027da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	4618      	mov	r0, r3
 800271c:	f000 fa0e 	bl	8002b3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800272e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800273e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6999      	ldr	r1, [r3, #24]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	021a      	lsls	r2, r3, #8
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	619a      	str	r2, [r3, #24]
      break;
 8002754:	e041      	b.n	80027da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68b9      	ldr	r1, [r7, #8]
 800275c:	4618      	mov	r0, r3
 800275e:	f000 fa57 	bl	8002c10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	69da      	ldr	r2, [r3, #28]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0208 	orr.w	r2, r2, #8
 8002770:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	69da      	ldr	r2, [r3, #28]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0204 	bic.w	r2, r2, #4
 8002780:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69d9      	ldr	r1, [r3, #28]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	61da      	str	r2, [r3, #28]
      break;
 8002794:	e021      	b.n	80027da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68b9      	ldr	r1, [r7, #8]
 800279c:	4618      	mov	r0, r3
 800279e:	f000 faa1 	bl	8002ce4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	69da      	ldr	r2, [r3, #28]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69da      	ldr	r2, [r3, #28]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	69d9      	ldr	r1, [r3, #28]
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	021a      	lsls	r2, r3, #8
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	61da      	str	r2, [r3, #28]
      break;
 80027d6:	e000      	b.n	80027da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80027d8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_TIM_ConfigClockSource+0x18>
 8002808:	2302      	movs	r3, #2
 800280a:	e0a6      	b.n	800295a <HAL_TIM_ConfigClockSource+0x166>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800282a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002832:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b40      	cmp	r3, #64	; 0x40
 8002842:	d067      	beq.n	8002914 <HAL_TIM_ConfigClockSource+0x120>
 8002844:	2b40      	cmp	r3, #64	; 0x40
 8002846:	d80b      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x6c>
 8002848:	2b10      	cmp	r3, #16
 800284a:	d073      	beq.n	8002934 <HAL_TIM_ConfigClockSource+0x140>
 800284c:	2b10      	cmp	r3, #16
 800284e:	d802      	bhi.n	8002856 <HAL_TIM_ConfigClockSource+0x62>
 8002850:	2b00      	cmp	r3, #0
 8002852:	d06f      	beq.n	8002934 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002854:	e078      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002856:	2b20      	cmp	r3, #32
 8002858:	d06c      	beq.n	8002934 <HAL_TIM_ConfigClockSource+0x140>
 800285a:	2b30      	cmp	r3, #48	; 0x30
 800285c:	d06a      	beq.n	8002934 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800285e:	e073      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002860:	2b70      	cmp	r3, #112	; 0x70
 8002862:	d00d      	beq.n	8002880 <HAL_TIM_ConfigClockSource+0x8c>
 8002864:	2b70      	cmp	r3, #112	; 0x70
 8002866:	d804      	bhi.n	8002872 <HAL_TIM_ConfigClockSource+0x7e>
 8002868:	2b50      	cmp	r3, #80	; 0x50
 800286a:	d033      	beq.n	80028d4 <HAL_TIM_ConfigClockSource+0xe0>
 800286c:	2b60      	cmp	r3, #96	; 0x60
 800286e:	d041      	beq.n	80028f4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002870:	e06a      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002876:	d066      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x152>
 8002878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800287c:	d017      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0xba>
      break;
 800287e:	e063      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	6899      	ldr	r1, [r3, #8]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f000 faed 	bl	8002e6e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	609a      	str	r2, [r3, #8]
      break;
 80028ac:	e04c      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6899      	ldr	r1, [r3, #8]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f000 fad6 	bl	8002e6e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028d0:	609a      	str	r2, [r3, #8]
      break;
 80028d2:	e039      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6859      	ldr	r1, [r3, #4]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	461a      	mov	r2, r3
 80028e2:	f000 fa4d 	bl	8002d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2150      	movs	r1, #80	; 0x50
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 faa4 	bl	8002e3a <TIM_ITRx_SetConfig>
      break;
 80028f2:	e029      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	6859      	ldr	r1, [r3, #4]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	461a      	mov	r2, r3
 8002902:	f000 fa6b 	bl	8002ddc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2160      	movs	r1, #96	; 0x60
 800290c:	4618      	mov	r0, r3
 800290e:	f000 fa94 	bl	8002e3a <TIM_ITRx_SetConfig>
      break;
 8002912:	e019      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	461a      	mov	r2, r3
 8002922:	f000 fa2d 	bl	8002d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2140      	movs	r1, #64	; 0x40
 800292c:	4618      	mov	r0, r3
 800292e:	f000 fa84 	bl	8002e3a <TIM_ITRx_SetConfig>
      break;
 8002932:	e009      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4619      	mov	r1, r3
 800293e:	4610      	mov	r0, r2
 8002940:	f000 fa7b 	bl	8002e3a <TIM_ITRx_SetConfig>
      break;
 8002944:	e000      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002946:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
	...

080029ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a29      	ldr	r2, [pc, #164]	; (8002a64 <TIM_Base_SetConfig+0xb8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00b      	beq.n	80029dc <TIM_Base_SetConfig+0x30>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ca:	d007      	beq.n	80029dc <TIM_Base_SetConfig+0x30>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a26      	ldr	r2, [pc, #152]	; (8002a68 <TIM_Base_SetConfig+0xbc>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d003      	beq.n	80029dc <TIM_Base_SetConfig+0x30>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a25      	ldr	r2, [pc, #148]	; (8002a6c <TIM_Base_SetConfig+0xc0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d108      	bne.n	80029ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <TIM_Base_SetConfig+0xb8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00b      	beq.n	8002a0e <TIM_Base_SetConfig+0x62>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fc:	d007      	beq.n	8002a0e <TIM_Base_SetConfig+0x62>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a19      	ldr	r2, [pc, #100]	; (8002a68 <TIM_Base_SetConfig+0xbc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d003      	beq.n	8002a0e <TIM_Base_SetConfig+0x62>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <TIM_Base_SetConfig+0xc0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d108      	bne.n	8002a20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a07      	ldr	r2, [pc, #28]	; (8002a64 <TIM_Base_SetConfig+0xb8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d103      	bne.n	8002a54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	615a      	str	r2, [r3, #20]
}
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	40000400 	.word	0x40000400
 8002a6c:	40000800 	.word	0x40000800

08002a70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	f023 0201 	bic.w	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0303 	bic.w	r3, r3, #3
 8002aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f023 0302 	bic.w	r3, r3, #2
 8002ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a1c      	ldr	r2, [pc, #112]	; (8002b38 <TIM_OC1_SetConfig+0xc8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d10c      	bne.n	8002ae6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f023 0308 	bic.w	r3, r3, #8
 8002ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f023 0304 	bic.w	r3, r3, #4
 8002ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a13      	ldr	r2, [pc, #76]	; (8002b38 <TIM_OC1_SetConfig+0xc8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d111      	bne.n	8002b12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	621a      	str	r2, [r3, #32]
}
 8002b2c:	bf00      	nop
 8002b2e:	371c      	adds	r7, #28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40012c00 	.word	0x40012c00

08002b3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	f023 0210 	bic.w	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f023 0320 	bic.w	r3, r3, #32
 8002b86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a1d      	ldr	r2, [pc, #116]	; (8002c0c <TIM_OC2_SetConfig+0xd0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d10d      	bne.n	8002bb8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a14      	ldr	r2, [pc, #80]	; (8002c0c <TIM_OC2_SetConfig+0xd0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d113      	bne.n	8002be8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	621a      	str	r2, [r3, #32]
}
 8002c02:	bf00      	nop
 8002c04:	371c      	adds	r7, #28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr
 8002c0c:	40012c00 	.word	0x40012c00

08002c10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0303 	bic.w	r3, r3, #3
 8002c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	021b      	lsls	r3, r3, #8
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <TIM_OC3_SetConfig+0xd0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d10d      	bne.n	8002c8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a14      	ldr	r2, [pc, #80]	; (8002ce0 <TIM_OC3_SetConfig+0xd0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d113      	bne.n	8002cba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	621a      	str	r2, [r3, #32]
}
 8002cd4:	bf00      	nop
 8002cd6:	371c      	adds	r7, #28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40012c00 	.word	0x40012c00

08002ce4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	031b      	lsls	r3, r3, #12
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a0f      	ldr	r2, [pc, #60]	; (8002d7c <TIM_OC4_SetConfig+0x98>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d109      	bne.n	8002d58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	019b      	lsls	r3, r3, #6
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	621a      	str	r2, [r3, #32]
}
 8002d72:	bf00      	nop
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	40012c00 	.word	0x40012c00

08002d80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	f023 0201 	bic.w	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f023 030a 	bic.w	r3, r3, #10
 8002dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	621a      	str	r2, [r3, #32]
}
 8002dd2:	bf00      	nop
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr

08002ddc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	f023 0210 	bic.w	r2, r3, #16
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	031b      	lsls	r3, r3, #12
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	621a      	str	r2, [r3, #32]
}
 8002e30:	bf00      	nop
 8002e32:	371c      	adds	r7, #28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f043 0307 	orr.w	r3, r3, #7
 8002e5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	609a      	str	r2, [r3, #8]
}
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b087      	sub	sp, #28
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
 8002e7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	021a      	lsls	r2, r3, #8
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	431a      	orrs	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	609a      	str	r2, [r3, #8]
}
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a1a      	ldr	r2, [r3, #32]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	401a      	ands	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a1a      	ldr	r2, [r3, #32]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	621a      	str	r2, [r3, #32]
}
 8002eea:	bf00      	nop
 8002eec:	371c      	adds	r7, #28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e032      	b.n	8002f72 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f44:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e03d      	b.n	8003014 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr

0800301e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr

08003042 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e03f      	b.n	80030d4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d106      	bne.n	800306e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f003 f997 	bl	800639c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2224      	movs	r2, #36	; 0x24
 8003072:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003084:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 faaa 	bl	80035e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800309a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	4613      	mov	r3, r2
 80030e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	d140      	bne.n	8003178 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <HAL_UART_Receive_IT+0x26>
 80030fc:	88fb      	ldrh	r3, [r7, #6]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e039      	b.n	800317a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_UART_Receive_IT+0x38>
 8003110:	2302      	movs	r3, #2
 8003112:	e032      	b.n	800317a <HAL_UART_Receive_IT+0x9e>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	88fa      	ldrh	r2, [r7, #6]
 8003126:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	88fa      	ldrh	r2, [r7, #6]
 800312c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2222      	movs	r2, #34	; 0x22
 8003138:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003152:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695a      	ldr	r2, [r3, #20]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0220 	orr.w	r2, r2, #32
 8003172:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	e000      	b.n	800317a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003178:	2302      	movs	r3, #2
  }
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10d      	bne.n	80031d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_UART_IRQHandler+0x52>
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f984 	bl	80034dc <UART_Receive_IT>
      return;
 80031d4:	e0cc      	b.n	8003370 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80ab 	beq.w	8003334 <HAL_UART_IRQHandler+0x1b0>
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d105      	bne.n	80031f4 <HAL_UART_IRQHandler+0x70>
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 80a0 	beq.w	8003334 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_UART_IRQHandler+0x90>
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320c:	f043 0201 	orr.w	r2, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_UART_IRQHandler+0xb0>
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322c:	f043 0202 	orr.w	r2, r3, #2
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_UART_IRQHandler+0xd0>
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324c:	f043 0204 	orr.w	r2, r3, #4
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <HAL_UART_IRQHandler+0xf0>
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326c:	f043 0208 	orr.w	r2, r3, #8
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003278:	2b00      	cmp	r3, #0
 800327a:	d078      	beq.n	800336e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b00      	cmp	r3, #0
 8003284:	d007      	beq.n	8003296 <HAL_UART_IRQHandler+0x112>
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f923 	bl	80034dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf14      	ite	ne
 80032a4:	2301      	movne	r3, #1
 80032a6:	2300      	moveq	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d102      	bne.n	80032be <HAL_UART_IRQHandler+0x13a>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d031      	beq.n	8003322 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f86e 	bl	80033a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d023      	beq.n	800331a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695a      	ldr	r2, [r3, #20]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032e0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d013      	beq.n	8003312 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ee:	4a22      	ldr	r2, [pc, #136]	; (8003378 <HAL_UART_IRQHandler+0x1f4>)
 80032f0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fd ff10 	bl	800111c <HAL_DMA_Abort_IT>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d016      	beq.n	8003330 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800330c:	4610      	mov	r0, r2
 800330e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003310:	e00e      	b.n	8003330 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f83b 	bl	800338e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003318:	e00a      	b.n	8003330 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f837 	bl	800338e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003320:	e006      	b.n	8003330 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f833 	bl	800338e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800332e:	e01e      	b.n	800336e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003330:	bf00      	nop
    return;
 8003332:	e01c      	b.n	800336e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333a:	2b00      	cmp	r3, #0
 800333c:	d008      	beq.n	8003350 <HAL_UART_IRQHandler+0x1cc>
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f85a 	bl	8003402 <UART_Transmit_IT>
    return;
 800334e:	e00f      	b.n	8003370 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_UART_IRQHandler+0x1ec>
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f8a1 	bl	80034ac <UART_EndTransmit_IT>
    return;
 800336a:	bf00      	nop
 800336c:	e000      	b.n	8003370 <HAL_UART_IRQHandler+0x1ec>
    return;
 800336e:	bf00      	nop
  }
}
 8003370:	3720      	adds	r7, #32
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	080033db 	.word	0x080033db

0800337c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr

0800338e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0201 	bic.w	r2, r2, #1
 80033c6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr

080033da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f7ff ffca 	bl	800338e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033fa:	bf00      	nop
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003402:	b480      	push	{r7}
 8003404:	b085      	sub	sp, #20
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b21      	cmp	r3, #33	; 0x21
 8003414:	d144      	bne.n	80034a0 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341e:	d11a      	bne.n	8003456 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003434:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d105      	bne.n	800344a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	1c9a      	adds	r2, r3, #2
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	621a      	str	r2, [r3, #32]
 8003448:	e00e      	b.n	8003468 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	621a      	str	r2, [r3, #32]
 8003454:	e008      	b.n	8003468 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	1c59      	adds	r1, r3, #1
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6211      	str	r1, [r2, #32]
 8003460:	781a      	ldrb	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29b      	uxth	r3, r3
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	4619      	mov	r1, r3
 8003476:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10f      	bne.n	800349c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800348a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800349a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	e000      	b.n	80034a2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80034a0:	2302      	movs	r3, #2
  }
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ff55 	bl	800337c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b22      	cmp	r3, #34	; 0x22
 80034ee:	d171      	bne.n	80035d4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f8:	d123      	bne.n	8003542 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10e      	bne.n	8003526 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	b29b      	uxth	r3, r3
 8003510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	1c9a      	adds	r2, r3, #2
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	629a      	str	r2, [r3, #40]	; 0x28
 8003524:	e029      	b.n	800357a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	b29b      	uxth	r3, r3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	629a      	str	r2, [r3, #40]	; 0x28
 8003540:	e01b      	b.n	800357a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10a      	bne.n	8003560 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6858      	ldr	r0, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	1c59      	adds	r1, r3, #1
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6291      	str	r1, [r2, #40]	; 0x28
 800355a:	b2c2      	uxtb	r2, r0
 800355c:	701a      	strb	r2, [r3, #0]
 800355e:	e00c      	b.n	800357a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	b2da      	uxtb	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	1c58      	adds	r0, r3, #1
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	6288      	str	r0, [r1, #40]	; 0x28
 8003572:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29b      	uxth	r3, r3
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	4619      	mov	r1, r3
 8003588:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800358a:	2b00      	cmp	r3, #0
 800358c:	d120      	bne.n	80035d0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0220 	bic.w	r2, r2, #32
 800359c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695a      	ldr	r2, [r3, #20]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0201 	bic.w	r2, r2, #1
 80035bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f002 f8c6 	bl	8005758 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	e002      	b.n	80035d6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	e000      	b.n	80035d6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80035d4:	2302      	movs	r3, #2
  }
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800361a:	f023 030c 	bic.w	r3, r3, #12
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	68f9      	ldr	r1, [r7, #12]
 8003624:	430b      	orrs	r3, r1
 8003626:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a52      	ldr	r2, [pc, #328]	; (800378c <UART_SetConfig+0x1ac>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d14e      	bne.n	80036e6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003648:	f7fe fd6a 	bl	8002120 <HAL_RCC_GetPCLK2Freq>
 800364c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	009a      	lsls	r2, r3, #2
 8003658:	441a      	add	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	fbb2 f3f3 	udiv	r3, r2, r3
 8003664:	4a4a      	ldr	r2, [pc, #296]	; (8003790 <UART_SetConfig+0x1b0>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	0119      	lsls	r1, r3, #4
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	009a      	lsls	r2, r3, #2
 8003678:	441a      	add	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	fbb2 f2f3 	udiv	r2, r2, r3
 8003684:	4b42      	ldr	r3, [pc, #264]	; (8003790 <UART_SetConfig+0x1b0>)
 8003686:	fba3 0302 	umull	r0, r3, r3, r2
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	2064      	movs	r0, #100	; 0x64
 800368e:	fb00 f303 	mul.w	r3, r0, r3
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	3332      	adds	r3, #50	; 0x32
 8003698:	4a3d      	ldr	r2, [pc, #244]	; (8003790 <UART_SetConfig+0x1b0>)
 800369a:	fba2 2303 	umull	r2, r3, r2, r3
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036a4:	4419      	add	r1, r3
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	009a      	lsls	r2, r3, #2
 80036b0:	441a      	add	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80036bc:	4b34      	ldr	r3, [pc, #208]	; (8003790 <UART_SetConfig+0x1b0>)
 80036be:	fba3 0302 	umull	r0, r3, r3, r2
 80036c2:	095b      	lsrs	r3, r3, #5
 80036c4:	2064      	movs	r0, #100	; 0x64
 80036c6:	fb00 f303 	mul.w	r3, r0, r3
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	3332      	adds	r3, #50	; 0x32
 80036d0:	4a2f      	ldr	r2, [pc, #188]	; (8003790 <UART_SetConfig+0x1b0>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	f003 020f 	and.w	r2, r3, #15
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	440a      	add	r2, r1
 80036e2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80036e4:	e04d      	b.n	8003782 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80036e6:	f7fe fd07 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 80036ea:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	009a      	lsls	r2, r3, #2
 80036f6:	441a      	add	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003702:	4a23      	ldr	r2, [pc, #140]	; (8003790 <UART_SetConfig+0x1b0>)
 8003704:	fba2 2303 	umull	r2, r3, r2, r3
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	0119      	lsls	r1, r3, #4
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	009a      	lsls	r2, r3, #2
 8003716:	441a      	add	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003722:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <UART_SetConfig+0x1b0>)
 8003724:	fba3 0302 	umull	r0, r3, r3, r2
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	2064      	movs	r0, #100	; 0x64
 800372c:	fb00 f303 	mul.w	r3, r0, r3
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	3332      	adds	r3, #50	; 0x32
 8003736:	4a16      	ldr	r2, [pc, #88]	; (8003790 <UART_SetConfig+0x1b0>)
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003742:	4419      	add	r1, r3
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	4613      	mov	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	009a      	lsls	r2, r3, #2
 800374e:	441a      	add	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	fbb2 f2f3 	udiv	r2, r2, r3
 800375a:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <UART_SetConfig+0x1b0>)
 800375c:	fba3 0302 	umull	r0, r3, r3, r2
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	2064      	movs	r0, #100	; 0x64
 8003764:	fb00 f303 	mul.w	r3, r0, r3
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	3332      	adds	r3, #50	; 0x32
 800376e:	4a08      	ldr	r2, [pc, #32]	; (8003790 <UART_SetConfig+0x1b0>)
 8003770:	fba2 2303 	umull	r2, r3, r2, r3
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	f003 020f 	and.w	r2, r3, #15
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	440a      	add	r2, r1
 8003780:	609a      	str	r2, [r3, #8]
}
 8003782:	bf00      	nop
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40013800 	.word	0x40013800
 8003790:	51eb851f 	.word	0x51eb851f

08003794 <FlashManager_PageAddress>:
/* Private variables ---------------------------------------------------------*/
uint32_t flash_temp_data[FLASH_PAGE_SIZE/4];

/* Private function -----------------------------------------------*/
uint32_t FlashManager_PageAddress(uint32_t address)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	uint32_t begin_page_address;
	uint32_t offset_page_address;

	if(address>=SYSTEM_FLASH_ADDRESS_BEGIN && address<SYSTEM_FLASH_ADDRESS_END)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037a2:	d30d      	bcc.n	80037c0 <FlashManager_PageAddress+0x2c>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a09      	ldr	r2, [pc, #36]	; (80037cc <FlashManager_PageAddress+0x38>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d809      	bhi.n	80037c0 <FlashManager_PageAddress+0x2c>
	{
		offset_page_address=address%FLASH_PAGE_SIZE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037b2:	60fb      	str	r3, [r7, #12]
		begin_page_address=address-offset_page_address;
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	60bb      	str	r3, [r7, #8]
		return begin_page_address;
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	e000      	b.n	80037c2 <FlashManager_PageAddress+0x2e>
	}
	else
		return FLASH_ERROR_ADDRESS;
 80037c0:	2302      	movs	r3, #2
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr
 80037cc:	0800ffff 	.word	0x0800ffff

080037d0 <FlashManager_ErasePage>:

/* Public function -----------------------------------------------*/
FlashManager_Error_Code FlashManager_ErasePage(uint32_t address)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	uint32_t errorcode;
	uint32_t SectorError = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitTypeDef EraseInitStruct;

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80037dc:	2300      	movs	r3, #0
 80037de:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.Banks = FLASH_BANK_1;
 80037e0:	2301      	movs	r3, #1
 80037e2:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.PageAddress = FlashManager_PageAddress(address);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff ffd5 	bl	8003794 <FlashManager_PageAddress>
 80037ea:	4603      	mov	r3, r0
 80037ec:	613b      	str	r3, [r7, #16]
	EraseInitStruct.NbPages = 1;
 80037ee:	2301      	movs	r3, #1
 80037f0:	617b      	str	r3, [r7, #20]

	errorcode=HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80037f2:	f107 0218 	add.w	r2, r7, #24
 80037f6:	f107 0308 	add.w	r3, r7, #8
 80037fa:	4611      	mov	r1, r2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fd fe5b 	bl	80014b8 <HAL_FLASHEx_Erase>
 8003802:	4603      	mov	r3, r0
 8003804:	61fb      	str	r3, [r7, #28]
	if(errorcode!=HAL_OK)
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <FlashManager_ErasePage+0x40>
		return FLASH_ERASE_ERROR;
 800380c:	2303      	movs	r3, #3
 800380e:	e000      	b.n	8003812 <FlashManager_ErasePage+0x42>
	else
		return FLASH_NO_ERROR;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3720      	adds	r7, #32
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <FlashManager_WriteMulti>:
	else
		return FLASH_ERROR_ADDRESS;
}

FlashManager_Error_Code FlashManager_WriteMulti(uint32_t address, uint32_t NbWord, uint32_t* data)
{
 800381c:	b590      	push	{r4, r7, lr}
 800381e:	b08b      	sub	sp, #44	; 0x2c
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
	uint32_t begin_page_address;
	uint32_t offset_page_address;
	uint32_t pWriteFlash;
	__IO uint32_t* pReadFlash;

	if(address>=SYSTEM_FLASH_ADDRESS_BEGIN && address<SYSTEM_FLASH_ADDRESS_END && address%4==0)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800382e:	d362      	bcc.n	80038f6 <FlashManager_WriteMulti+0xda>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4a33      	ldr	r2, [pc, #204]	; (8003900 <FlashManager_WriteMulti+0xe4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d85e      	bhi.n	80038f6 <FlashManager_WriteMulti+0xda>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d159      	bne.n	80038f6 <FlashManager_WriteMulti+0xda>
	{
		offset_page_address=address%FLASH_PAGE_SIZE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003848:	623b      	str	r3, [r7, #32]
		begin_page_address=address-offset_page_address;
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	61fb      	str	r3, [r7, #28]

		//Read page
		for(cpt_address=0; cpt_address<(FLASH_PAGE_SIZE/4) ;cpt_address++)
 8003852:	2300      	movs	r3, #0
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
 8003856:	e00d      	b.n	8003874 <FlashManager_WriteMulti+0x58>
		{
			pReadFlash = begin_page_address+(cpt_address*4);
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	009a      	lsls	r2, r3, #2
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	4413      	add	r3, r2
 8003860:	617b      	str	r3, [r7, #20]
			flash_temp_data[cpt_address]=*pReadFlash;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	4927      	ldr	r1, [pc, #156]	; (8003904 <FlashManager_WriteMulti+0xe8>)
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(cpt_address=0; cpt_address<(FLASH_PAGE_SIZE/4) ;cpt_address++)
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	3301      	adds	r3, #1
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	2bff      	cmp	r3, #255	; 0xff
 8003878:	d9ee      	bls.n	8003858 <FlashManager_WriteMulti+0x3c>
		}

		//Erase page
		HAL_FLASH_Unlock();
 800387a:	f7fd fd35 	bl	80012e8 <HAL_FLASH_Unlock>
		FlashManager_ErasePage(address);
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f7ff ffa6 	bl	80037d0 <FlashManager_ErasePage>

		//Change Data
		for(cpt_address=0; cpt_address<NbWord ;cpt_address++)
 8003884:	2300      	movs	r3, #0
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
 8003888:	e00e      	b.n	80038a8 <FlashManager_WriteMulti+0x8c>
		{
			flash_temp_data[(offset_page_address/4)+cpt_address]=data[cpt_address];
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	441a      	add	r2, r3
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	0899      	lsrs	r1, r3, #2
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	440b      	add	r3, r1
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	4919      	ldr	r1, [pc, #100]	; (8003904 <FlashManager_WriteMulti+0xe8>)
 800389e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(cpt_address=0; cpt_address<NbWord ;cpt_address++)
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	3301      	adds	r3, #1
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
 80038a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d3ec      	bcc.n	800388a <FlashManager_WriteMulti+0x6e>
		}

		//Write page
		for(cpt_address=0; cpt_address<(FLASH_PAGE_SIZE/4) ;cpt_address++)
 80038b0:	2300      	movs	r3, #0
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
 80038b4:	e018      	b.n	80038e8 <FlashManager_WriteMulti+0xcc>
		{
			pWriteFlash = begin_page_address+(cpt_address*4);
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	69fa      	ldr	r2, [r7, #28]
 80038bc:	4413      	add	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pWriteFlash, flash_temp_data[cpt_address]) != HAL_OK)
 80038c0:	4a10      	ldr	r2, [pc, #64]	; (8003904 <FlashManager_WriteMulti+0xe8>)
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c8:	f04f 0400 	mov.w	r4, #0
 80038cc:	461a      	mov	r2, r3
 80038ce:	4623      	mov	r3, r4
 80038d0:	69b9      	ldr	r1, [r7, #24]
 80038d2:	2002      	movs	r0, #2
 80038d4:	f7fd fc98 	bl	8001208 <HAL_FLASH_Program>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <FlashManager_WriteMulti+0xc6>
				return FLASH_WRITE_ERROR;
 80038de:	2304      	movs	r3, #4
 80038e0:	e00a      	b.n	80038f8 <FlashManager_WriteMulti+0xdc>
		for(cpt_address=0; cpt_address<(FLASH_PAGE_SIZE/4) ;cpt_address++)
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	3301      	adds	r3, #1
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	2bff      	cmp	r3, #255	; 0xff
 80038ec:	d9e3      	bls.n	80038b6 <FlashManager_WriteMulti+0x9a>
		}

		HAL_FLASH_Lock();
 80038ee:	f7fd fd21 	bl	8001334 <HAL_FLASH_Lock>

		return FLASH_NO_ERROR;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e000      	b.n	80038f8 <FlashManager_WriteMulti+0xdc>
	}
	else
		return FLASH_ERROR_ADDRESS;
 80038f6:	2302      	movs	r3, #2
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	372c      	adds	r7, #44	; 0x2c
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd90      	pop	{r4, r7, pc}
 8003900:	0800ffff 	.word	0x0800ffff
 8003904:	20000508 	.word	0x20000508

08003908 <FlashManager_ReadInt32>:

uint32_t FlashManager_ReadInt32(uint32_t address)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
	__IO uint32_t* pReadFlash;

	pReadFlash = address;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	60fb      	str	r3, [r7, #12]
	return *pReadFlash;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	bc80      	pop	{r7}
 8003920:	4770      	bx	lr
	...

08003924 <Protocol_DMX_init>:
/* Private function -----------------------------------------------*/

/* Public function -----------------------------------------------*/

void Protocol_DMX_init(uint16_t address,UART_HandleTypeDef *ref_uart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	6039      	str	r1, [r7, #0]
 800392e:	80fb      	strh	r3, [r7, #6]

	//Disable UART
	//HAL_UART_DeInit(dmx_ref_uart);

	//init variables
	dmx_Last_Error=DMX_NO_ERROR;
 8003930:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <Protocol_DMX_init+0x90>)
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
	dmx_rx_buff[0]=0;
 8003936:	4b20      	ldr	r3, [pc, #128]	; (80039b8 <Protocol_DMX_init+0x94>)
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]
	dmx_cptAddress=0;
 800393c:	4b1f      	ldr	r3, [pc, #124]	; (80039bc <Protocol_DMX_init+0x98>)
 800393e:	2200      	movs	r2, #0
 8003940:	801a      	strh	r2, [r3, #0]
	dmx_cptByte=0;
 8003942:	4b1f      	ldr	r3, [pc, #124]	; (80039c0 <Protocol_DMX_init+0x9c>)
 8003944:	2200      	movs	r2, #0
 8003946:	801a      	strh	r2, [r3, #0]
	dmx_ref_buffer=1;
 8003948:	4b1e      	ldr	r3, [pc, #120]	; (80039c4 <Protocol_DMX_init+0xa0>)
 800394a:	2201      	movs	r2, #1
 800394c:	701a      	strb	r2, [r3, #0]
	dmx_address_begin = address;
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <Protocol_DMX_init+0xa4>)
 8003954:	701a      	strb	r2, [r3, #0]
	dmx_address_end = address + DMX_SIZE_CHANNEL - 1;
 8003956:	88fb      	ldrh	r3, [r7, #6]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	330b      	adds	r3, #11
 800395c:	b2da      	uxtb	r2, r3
 800395e:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <Protocol_DMX_init+0xa8>)
 8003960:	701a      	strb	r2, [r3, #0]
	for (i=0; i<DMX_SIZE_CHANNEL; i++)
 8003962:	2300      	movs	r3, #0
 8003964:	73fb      	strb	r3, [r7, #15]
 8003966:	e00e      	b.n	8003986 <Protocol_DMX_init+0x62>
	{
		dmx_buff1[i]=0;
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	4a19      	ldr	r2, [pc, #100]	; (80039d0 <Protocol_DMX_init+0xac>)
 800396c:	2100      	movs	r1, #0
 800396e:	54d1      	strb	r1, [r2, r3]
		dmx_buff2[i]=0;
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	4a18      	ldr	r2, [pc, #96]	; (80039d4 <Protocol_DMX_init+0xb0>)
 8003974:	2100      	movs	r1, #0
 8003976:	54d1      	strb	r1, [r2, r3]
		dmx_buff_valid[i]=0;
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	4a17      	ldr	r2, [pc, #92]	; (80039d8 <Protocol_DMX_init+0xb4>)
 800397c:	2100      	movs	r1, #0
 800397e:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<DMX_SIZE_CHANNEL; i++)
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	3301      	adds	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
 8003986:	7bfb      	ldrb	r3, [r7, #15]
 8003988:	2b0b      	cmp	r3, #11
 800398a:	d9ed      	bls.n	8003968 <Protocol_DMX_init+0x44>
	}

	dmx_LastTick = HAL_GetTick();
 800398c:	f7fd f8a4 	bl	8000ad8 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	4b12      	ldr	r3, [pc, #72]	; (80039dc <Protocol_DMX_init+0xb8>)
 8003994:	601a      	str	r2, [r3, #0]
	{
		Error_Handler();
	}*/

	/* Receive one byte in interrupt mode */
	dmx_ref_uart = ref_uart;
 8003996:	4a12      	ldr	r2, [pc, #72]	; (80039e0 <Protocol_DMX_init+0xbc>)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(dmx_ref_uart, dmx_rx_buff, 1);
 800399c:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <Protocol_DMX_init+0xbc>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2201      	movs	r2, #1
 80039a2:	4905      	ldr	r1, [pc, #20]	; (80039b8 <Protocol_DMX_init+0x94>)
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff fb99 	bl	80030dc <HAL_UART_Receive_IT>

}
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000920 	.word	0x20000920
 80039b8:	20000924 	.word	0x20000924
 80039bc:	20000926 	.word	0x20000926
 80039c0:	20000940 	.word	0x20000940
 80039c4:	20000925 	.word	0x20000925
 80039c8:	20000921 	.word	0x20000921
 80039cc:	2000090c 	.word	0x2000090c
 80039d0:	20000928 	.word	0x20000928
 80039d4:	20000934 	.word	0x20000934
 80039d8:	20000910 	.word	0x20000910
 80039dc:	20000908 	.word	0x20000908
 80039e0:	2000091c 	.word	0x2000091c

080039e4 <Protocol_DMX_UartCallback>:


void Protocol_DMX_UartCallback(UART_HandleTypeDef *huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
	uint32_t err_code;
	err_code = huart->ErrorCode;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f0:	60fb      	str	r3, [r7, #12]
	if (huart->Instance == dmx_ref_uart->Instance)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4b29      	ldr	r3, [pc, #164]	; (8003a9c <Protocol_DMX_UartCallback+0xb8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d148      	bne.n	8003a92 <Protocol_DMX_UartCallback+0xae>
	{
		/* Receive one byte in interrupt mode */
		HAL_UART_Receive_IT(dmx_ref_uart, dmx_rx_buff, 1);
 8003a00:	4b26      	ldr	r3, [pc, #152]	; (8003a9c <Protocol_DMX_UartCallback+0xb8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2201      	movs	r2, #1
 8003a06:	4926      	ldr	r1, [pc, #152]	; (8003aa0 <Protocol_DMX_UartCallback+0xbc>)
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fb67 	bl	80030dc <HAL_UART_Receive_IT>

		//Load buffer
		if(dmx_cptAddress>=dmx_address_begin && dmx_cptAddress<=dmx_address_end)
 8003a0e:	4b25      	ldr	r3, [pc, #148]	; (8003aa4 <Protocol_DMX_UartCallback+0xc0>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	4b24      	ldr	r3, [pc, #144]	; (8003aa8 <Protocol_DMX_UartCallback+0xc4>)
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d813      	bhi.n	8003a44 <Protocol_DMX_UartCallback+0x60>
 8003a1c:	4b23      	ldr	r3, [pc, #140]	; (8003aac <Protocol_DMX_UartCallback+0xc8>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	4b21      	ldr	r3, [pc, #132]	; (8003aa8 <Protocol_DMX_UartCallback+0xc4>)
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d30c      	bcc.n	8003a44 <Protocol_DMX_UartCallback+0x60>
				dmx_Last_Error=DMX_ERROR_BUFF;

			if(dmx_buff1[dmx_cptByte] == dmx_buff2[dmx_cptByte])
				dmx_buff_valid[dmx_cptByte] = dmx_buff1[dmx_cptByte];
#else
			dmx_buff_valid[dmx_cptByte]=dmx_rx_buff[0];
 8003a2a:	4b21      	ldr	r3, [pc, #132]	; (8003ab0 <Protocol_DMX_UartCallback+0xcc>)
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <Protocol_DMX_UartCallback+0xbc>)
 8003a32:	7819      	ldrb	r1, [r3, #0]
 8003a34:	4b1f      	ldr	r3, [pc, #124]	; (8003ab4 <Protocol_DMX_UartCallback+0xd0>)
 8003a36:	5499      	strb	r1, [r3, r2]
#endif

			dmx_cptByte++;
 8003a38:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <Protocol_DMX_UartCallback+0xcc>)
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <Protocol_DMX_UartCallback+0xcc>)
 8003a42:	801a      	strh	r2, [r3, #0]
		}
		dmx_cptAddress++;
 8003a44:	4b18      	ldr	r3, [pc, #96]	; (8003aa8 <Protocol_DMX_UartCallback+0xc4>)
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	4b16      	ldr	r3, [pc, #88]	; (8003aa8 <Protocol_DMX_UartCallback+0xc4>)
 8003a4e:	801a      	strh	r2, [r3, #0]

		//New frame detection
		if(err_code==HAL_UART_ERROR_FE)// && rx_buff[0]==0)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d11d      	bne.n	8003a92 <Protocol_DMX_UartCallback+0xae>
		{
			dmx_LastTick = HAL_GetTick();
 8003a56:	f7fd f83f 	bl	8000ad8 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <Protocol_DMX_UartCallback+0xd4>)
 8003a5e:	601a      	str	r2, [r3, #0]

			dmx_cptAddress=0;
 8003a60:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <Protocol_DMX_UartCallback+0xc4>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	801a      	strh	r2, [r3, #0]
			dmx_cptByte=0;
 8003a66:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <Protocol_DMX_UartCallback+0xcc>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	801a      	strh	r2, [r3, #0]

			if (dmx_ref_buffer==1)
 8003a6c:	4b13      	ldr	r3, [pc, #76]	; (8003abc <Protocol_DMX_UartCallback+0xd8>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d103      	bne.n	8003a7c <Protocol_DMX_UartCallback+0x98>
				dmx_ref_buffer=2;
 8003a74:	4b11      	ldr	r3, [pc, #68]	; (8003abc <Protocol_DMX_UartCallback+0xd8>)
 8003a76:	2202      	movs	r2, #2
 8003a78:	701a      	strb	r2, [r3, #0]
				dmx_ref_buffer=1;
			else
				dmx_Last_Error=DMX_ERROR_BUFF;
		}
	}
}
 8003a7a:	e00a      	b.n	8003a92 <Protocol_DMX_UartCallback+0xae>
			else if (dmx_ref_buffer==2)
 8003a7c:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <Protocol_DMX_UartCallback+0xd8>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d103      	bne.n	8003a8c <Protocol_DMX_UartCallback+0xa8>
				dmx_ref_buffer=1;
 8003a84:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <Protocol_DMX_UartCallback+0xd8>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	701a      	strb	r2, [r3, #0]
}
 8003a8a:	e002      	b.n	8003a92 <Protocol_DMX_UartCallback+0xae>
				dmx_Last_Error=DMX_ERROR_BUFF;
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <Protocol_DMX_UartCallback+0xdc>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	701a      	strb	r2, [r3, #0]
}
 8003a92:	bf00      	nop
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	2000091c 	.word	0x2000091c
 8003aa0:	20000924 	.word	0x20000924
 8003aa4:	20000921 	.word	0x20000921
 8003aa8:	20000926 	.word	0x20000926
 8003aac:	2000090c 	.word	0x2000090c
 8003ab0:	20000940 	.word	0x20000940
 8003ab4:	20000910 	.word	0x20000910
 8003ab8:	20000908 	.word	0x20000908
 8003abc:	20000925 	.word	0x20000925
 8003ac0:	20000920 	.word	0x20000920

08003ac4 <Protocol_DMX_GetValue>:


uint8_t Protocol_DMX_GetValue (uint8_t channel)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	71fb      	strb	r3, [r7, #7]
	if(channel==0 || channel>DMX_SIZE_CHANNEL)
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <Protocol_DMX_GetValue+0x16>
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	2b0c      	cmp	r3, #12
 8003ad8:	d901      	bls.n	8003ade <Protocol_DMX_GetValue+0x1a>
		return 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	e003      	b.n	8003ae6 <Protocol_DMX_GetValue+0x22>
	else
		return dmx_buff_valid[channel-1];
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	4a03      	ldr	r2, [pc, #12]	; (8003af0 <Protocol_DMX_GetValue+0x2c>)
 8003ae4:	5cd3      	ldrb	r3, [r2, r3]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	20000910 	.word	0x20000910

08003af4 <Protocol_DMX_GetLastTickFrame>:


uint32_t Protocol_DMX_GetLastTickFrame (void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
	return dmx_LastTick;
 8003af8:	4b02      	ldr	r3, [pc, #8]	; (8003b04 <Protocol_DMX_GetLastTickFrame+0x10>)
 8003afa:	681b      	ldr	r3, [r3, #0]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr
 8003b04:	20000908 	.word	0x20000908

08003b08 <GENE_I2C_Init>:

/* Private function -----------------------------------------------*/

/* Public function -----------------------------------------------*/
void GENE_I2C_Init(GPIO_TypeDef * SDA_Port, uint16_t SDA_Pin, GPIO_TypeDef * SCL_Port, uint16_t SCL_Pin)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	461a      	mov	r2, r3
 8003b14:	460b      	mov	r3, r1
 8003b16:	817b      	strh	r3, [r7, #10]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	813b      	strh	r3, [r7, #8]
	pSDA_Port = SDA_Port;
 8003b1c:	4a0f      	ldr	r2, [pc, #60]	; (8003b5c <GENE_I2C_Init+0x54>)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6013      	str	r3, [r2, #0]
	pSCL_Port = SCL_Port;
 8003b22:	4a0f      	ldr	r2, [pc, #60]	; (8003b60 <GENE_I2C_Init+0x58>)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6013      	str	r3, [r2, #0]
	iSDA_Pin = SDA_Pin;
 8003b28:	4a0e      	ldr	r2, [pc, #56]	; (8003b64 <GENE_I2C_Init+0x5c>)
 8003b2a:	897b      	ldrh	r3, [r7, #10]
 8003b2c:	8013      	strh	r3, [r2, #0]
	iSCL_Pin = SCL_Pin;
 8003b2e:	4a0e      	ldr	r2, [pc, #56]	; (8003b68 <GENE_I2C_Init+0x60>)
 8003b30:	893b      	ldrh	r3, [r7, #8]
 8003b32:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(pSDA_Port, iSDA_Pin, GPIO_PIN_SET);
 8003b34:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <GENE_I2C_Init+0x54>)
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <GENE_I2C_Init+0x5c>)
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	4619      	mov	r1, r3
 8003b40:	f7fd fed3 	bl	80018ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_SET);
 8003b44:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <GENE_I2C_Init+0x58>)
 8003b46:	6818      	ldr	r0, [r3, #0]
 8003b48:	4b07      	ldr	r3, [pc, #28]	; (8003b68 <GENE_I2C_Init+0x60>)
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	4619      	mov	r1, r3
 8003b50:	f7fd fecb 	bl	80018ea <HAL_GPIO_WritePin>
}
 8003b54:	bf00      	nop
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20000944 	.word	0x20000944
 8003b60:	2000094c 	.word	0x2000094c
 8003b64:	20000948 	.word	0x20000948
 8003b68:	2000094a 	.word	0x2000094a

08003b6c <GENE_I2C_Master_Transmit>:

void GENE_I2C_Master_Transmit(uint8_t Address, uint8_t data[], uint16_t count)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	6039      	str	r1, [r7, #0]
 8003b76:	71fb      	strb	r3, [r7, #7]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	80bb      	strh	r3, [r7, #4]
	uint8_t i,j,d;

	//START
	HAL_GPIO_WritePin(pSDA_Port, iSDA_Pin, GPIO_PIN_RESET);
 8003b7c:	4b82      	ldr	r3, [pc, #520]	; (8003d88 <GENE_I2C_Master_Transmit+0x21c>)
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	4b82      	ldr	r3, [pc, #520]	; (8003d8c <GENE_I2C_Master_Transmit+0x220>)
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	2200      	movs	r2, #0
 8003b86:	4619      	mov	r1, r3
 8003b88:	f7fd feaf 	bl	80018ea <HAL_GPIO_WritePin>
	I2C_usDelay(1);
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	f000 f903 	bl	8003d98 <I2C_usDelay>
	HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_RESET);
 8003b92:	4b7f      	ldr	r3, [pc, #508]	; (8003d90 <GENE_I2C_Master_Transmit+0x224>)
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	4b7f      	ldr	r3, [pc, #508]	; (8003d94 <GENE_I2C_Master_Transmit+0x228>)
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	f7fd fea4 	bl	80018ea <HAL_GPIO_WritePin>
	I2C_usDelay(1);
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	f000 f8f8 	bl	8003d98 <I2C_usDelay>

	for(i=7; i>0; i--)	//Address b7-1
 8003ba8:	2307      	movs	r3, #7
 8003baa:	73fb      	strb	r3, [r7, #15]
 8003bac:	e02a      	b.n	8003c04 <GENE_I2C_Master_Transmit+0x98>
	{
		HAL_GPIO_WritePin(pSDA_Port, iSDA_Pin, (Address>>i)&0x0001);
 8003bae:	4b76      	ldr	r3, [pc, #472]	; (8003d88 <GENE_I2C_Master_Transmit+0x21c>)
 8003bb0:	6818      	ldr	r0, [r3, #0]
 8003bb2:	4b76      	ldr	r3, [pc, #472]	; (8003d8c <GENE_I2C_Master_Transmit+0x220>)
 8003bb4:	8819      	ldrh	r1, [r3, #0]
 8003bb6:	79fa      	ldrb	r2, [r7, #7]
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	fa42 f303 	asr.w	r3, r2, r3
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f7fd fe8f 	bl	80018ea <HAL_GPIO_WritePin>
		I2C_usDelay(1);
 8003bcc:	2001      	movs	r0, #1
 8003bce:	f000 f8e3 	bl	8003d98 <I2C_usDelay>
		HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_SET);
 8003bd2:	4b6f      	ldr	r3, [pc, #444]	; (8003d90 <GENE_I2C_Master_Transmit+0x224>)
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	4b6f      	ldr	r3, [pc, #444]	; (8003d94 <GENE_I2C_Master_Transmit+0x228>)
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	4619      	mov	r1, r3
 8003bde:	f7fd fe84 	bl	80018ea <HAL_GPIO_WritePin>
		I2C_usDelay(1);
 8003be2:	2001      	movs	r0, #1
 8003be4:	f000 f8d8 	bl	8003d98 <I2C_usDelay>
		HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_RESET);
 8003be8:	4b69      	ldr	r3, [pc, #420]	; (8003d90 <GENE_I2C_Master_Transmit+0x224>)
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	4b69      	ldr	r3, [pc, #420]	; (8003d94 <GENE_I2C_Master_Transmit+0x228>)
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	f7fd fe79 	bl	80018ea <HAL_GPIO_WritePin>
		I2C_usDelay(1);
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	f000 f8cd 	bl	8003d98 <I2C_usDelay>
	for(i=7; i>0; i--)	//Address b7-1
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1d1      	bne.n	8003bae <GENE_I2C_Master_Transmit+0x42>
	}

	//Address b0
	HAL_GPIO_WritePin(pSDA_Port, iSDA_Pin, GPIO_PIN_RESET);
 8003c0a:	4b5f      	ldr	r3, [pc, #380]	; (8003d88 <GENE_I2C_Master_Transmit+0x21c>)
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	4b5f      	ldr	r3, [pc, #380]	; (8003d8c <GENE_I2C_Master_Transmit+0x220>)
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	2200      	movs	r2, #0
 8003c14:	4619      	mov	r1, r3
 8003c16:	f7fd fe68 	bl	80018ea <HAL_GPIO_WritePin>
	I2C_usDelay(1);
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	f000 f8bc 	bl	8003d98 <I2C_usDelay>
	HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_SET);
 8003c20:	4b5b      	ldr	r3, [pc, #364]	; (8003d90 <GENE_I2C_Master_Transmit+0x224>)
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	4b5b      	ldr	r3, [pc, #364]	; (8003d94 <GENE_I2C_Master_Transmit+0x228>)
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	f7fd fe5d 	bl	80018ea <HAL_GPIO_WritePin>
	I2C_usDelay(1);
 8003c30:	2001      	movs	r0, #1
 8003c32:	f000 f8b1 	bl	8003d98 <I2C_usDelay>
	HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_RESET);
 8003c36:	4b56      	ldr	r3, [pc, #344]	; (8003d90 <GENE_I2C_Master_Transmit+0x224>)
 8003c38:	6818      	ldr	r0, [r3, #0]
 8003c3a:	4b56      	ldr	r3, [pc, #344]	; (8003d94 <GENE_I2C_Master_Transmit+0x228>)
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	4619      	mov	r1, r3
 8003c42:	f7fd fe52 	bl	80018ea <HAL_GPIO_WritePin>
	I2C_usDelay(1);
 8003c46:	2001      	movs	r0, #1
 8003c48:	f000 f8a6 	bl	8003d98 <I2C_usDelay>

	//ACK
	HAL_GPIO_WritePin(pSDA_Port, iSDA_Pin, GPIO_PIN_SET);
 8003c4c:	4b4e      	ldr	r3, [pc, #312]	; (8003d88 <GENE_I2C_Master_Transmit+0x21c>)
 8003c4e:	6818      	ldr	r0, [r3, #0]
 8003c50:	4b4e      	ldr	r3, [pc, #312]	; (8003d8c <GENE_I2C_Master_Transmit+0x220>)
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	2201      	movs	r2, #1
 8003c56:	4619      	mov	r1, r3
 8003c58:	f7fd fe47 	bl	80018ea <HAL_GPIO_WritePin>
	I2C_usDelay(1);
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	f000 f89b 	bl	8003d98 <I2C_usDelay>
	HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_SET);
 8003c62:	4b4b      	ldr	r3, [pc, #300]	; (8003d90 <GENE_I2C_Master_Transmit+0x224>)
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	4b4b      	ldr	r3, [pc, #300]	; (8003d94 <GENE_I2C_Master_Transmit+0x228>)
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	f7fd fe3c 	bl	80018ea <HAL_GPIO_WritePin>
	I2C_usDelay(1);
 8003c72:	2001      	movs	r0, #1
 8003c74:	f000 f890 	bl	8003d98 <I2C_usDelay>
	HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_RESET);
 8003c78:	4b45      	ldr	r3, [pc, #276]	; (8003d90 <GENE_I2C_Master_Transmit+0x224>)
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	4b45      	ldr	r3, [pc, #276]	; (8003d94 <GENE_I2C_Master_Transmit+0x228>)
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	2200      	movs	r2, #0
 8003c82:	4619      	mov	r1, r3
 8003c84:	f7fd fe31 	bl	80018ea <HAL_GPIO_WritePin>
	I2C_usDelay(1);
 8003c88:	2001      	movs	r0, #1
 8003c8a:	f000 f885 	bl	8003d98 <I2C_usDelay>

	//Data
	for(j=0; j<count; j++)
 8003c8e:	2300      	movs	r3, #0
 8003c90:	73bb      	strb	r3, [r7, #14]
 8003c92:	e05a      	b.n	8003d4a <GENE_I2C_Master_Transmit+0x1de>
	{
		for(i=8; i>0; i--)
 8003c94:	2308      	movs	r3, #8
 8003c96:	73fb      	strb	r3, [r7, #15]
 8003c98:	e030      	b.n	8003cfc <GENE_I2C_Master_Transmit+0x190>
		{
			d = data[j];
 8003c9a:	7bbb      	ldrb	r3, [r7, #14]
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	737b      	strb	r3, [r7, #13]
			HAL_GPIO_WritePin(pSDA_Port, iSDA_Pin, (d>>(i-1))&0x0001);
 8003ca4:	4b38      	ldr	r3, [pc, #224]	; (8003d88 <GENE_I2C_Master_Transmit+0x21c>)
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	4b38      	ldr	r3, [pc, #224]	; (8003d8c <GENE_I2C_Master_Transmit+0x220>)
 8003caa:	8819      	ldrh	r1, [r3, #0]
 8003cac:	7b7a      	ldrb	r2, [r7, #13]
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	fa42 f303 	asr.w	r3, r2, r3
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f7fd fe13 	bl	80018ea <HAL_GPIO_WritePin>
			I2C_usDelay(1);
 8003cc4:	2001      	movs	r0, #1
 8003cc6:	f000 f867 	bl	8003d98 <I2C_usDelay>
			HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_SET);
 8003cca:	4b31      	ldr	r3, [pc, #196]	; (8003d90 <GENE_I2C_Master_Transmit+0x224>)
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <GENE_I2C_Master_Transmit+0x228>)
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f7fd fe08 	bl	80018ea <HAL_GPIO_WritePin>
			I2C_usDelay(1);
 8003cda:	2001      	movs	r0, #1
 8003cdc:	f000 f85c 	bl	8003d98 <I2C_usDelay>
			HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_RESET);
 8003ce0:	4b2b      	ldr	r3, [pc, #172]	; (8003d90 <GENE_I2C_Master_Transmit+0x224>)
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	4b2b      	ldr	r3, [pc, #172]	; (8003d94 <GENE_I2C_Master_Transmit+0x228>)
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	4619      	mov	r1, r3
 8003cec:	f7fd fdfd 	bl	80018ea <HAL_GPIO_WritePin>
			I2C_usDelay(1);
 8003cf0:	2001      	movs	r0, #1
 8003cf2:	f000 f851 	bl	8003d98 <I2C_usDelay>
		for(i=8; i>0; i--)
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1cb      	bne.n	8003c9a <GENE_I2C_Master_Transmit+0x12e>
		}

		//ACK
		HAL_GPIO_WritePin(pSDA_Port, iSDA_Pin, GPIO_PIN_SET);
 8003d02:	4b21      	ldr	r3, [pc, #132]	; (8003d88 <GENE_I2C_Master_Transmit+0x21c>)
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	4b21      	ldr	r3, [pc, #132]	; (8003d8c <GENE_I2C_Master_Transmit+0x220>)
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	f7fd fdec 	bl	80018ea <HAL_GPIO_WritePin>
		I2C_usDelay(1);
 8003d12:	2001      	movs	r0, #1
 8003d14:	f000 f840 	bl	8003d98 <I2C_usDelay>
		HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_SET);
 8003d18:	4b1d      	ldr	r3, [pc, #116]	; (8003d90 <GENE_I2C_Master_Transmit+0x224>)
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	4b1d      	ldr	r3, [pc, #116]	; (8003d94 <GENE_I2C_Master_Transmit+0x228>)
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	2201      	movs	r2, #1
 8003d22:	4619      	mov	r1, r3
 8003d24:	f7fd fde1 	bl	80018ea <HAL_GPIO_WritePin>
		I2C_usDelay(1);
 8003d28:	2001      	movs	r0, #1
 8003d2a:	f000 f835 	bl	8003d98 <I2C_usDelay>
		HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_RESET);
 8003d2e:	4b18      	ldr	r3, [pc, #96]	; (8003d90 <GENE_I2C_Master_Transmit+0x224>)
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	4b18      	ldr	r3, [pc, #96]	; (8003d94 <GENE_I2C_Master_Transmit+0x228>)
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	2200      	movs	r2, #0
 8003d38:	4619      	mov	r1, r3
 8003d3a:	f7fd fdd6 	bl	80018ea <HAL_GPIO_WritePin>
		I2C_usDelay(1);
 8003d3e:	2001      	movs	r0, #1
 8003d40:	f000 f82a 	bl	8003d98 <I2C_usDelay>
	for(j=0; j<count; j++)
 8003d44:	7bbb      	ldrb	r3, [r7, #14]
 8003d46:	3301      	adds	r3, #1
 8003d48:	73bb      	strb	r3, [r7, #14]
 8003d4a:	7bbb      	ldrb	r3, [r7, #14]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	88ba      	ldrh	r2, [r7, #4]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d89f      	bhi.n	8003c94 <GENE_I2C_Master_Transmit+0x128>
	}

	//STOP
	HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_SET);
 8003d54:	4b0e      	ldr	r3, [pc, #56]	; (8003d90 <GENE_I2C_Master_Transmit+0x224>)
 8003d56:	6818      	ldr	r0, [r3, #0]
 8003d58:	4b0e      	ldr	r3, [pc, #56]	; (8003d94 <GENE_I2C_Master_Transmit+0x228>)
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	4619      	mov	r1, r3
 8003d60:	f7fd fdc3 	bl	80018ea <HAL_GPIO_WritePin>
	I2C_usDelay(1);
 8003d64:	2001      	movs	r0, #1
 8003d66:	f000 f817 	bl	8003d98 <I2C_usDelay>
	HAL_GPIO_WritePin(pSDA_Port, iSDA_Pin, GPIO_PIN_SET);
 8003d6a:	4b07      	ldr	r3, [pc, #28]	; (8003d88 <GENE_I2C_Master_Transmit+0x21c>)
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <GENE_I2C_Master_Transmit+0x220>)
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	2201      	movs	r2, #1
 8003d74:	4619      	mov	r1, r3
 8003d76:	f7fd fdb8 	bl	80018ea <HAL_GPIO_WritePin>
	I2C_usDelay(1);
 8003d7a:	2001      	movs	r0, #1
 8003d7c:	f000 f80c 	bl	8003d98 <I2C_usDelay>
}
 8003d80:	bf00      	nop
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	20000944 	.word	0x20000944
 8003d8c:	20000948 	.word	0x20000948
 8003d90:	2000094c 	.word	0x2000094c
 8003d94:	2000094a 	.word	0x2000094a

08003d98 <I2C_usDelay>:


void I2C_usDelay(uint32_t t)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
	for(uint32_t cpt = t; cpt--; cpt>0)
	{
		//cptus = t/BASE_TIME_US;
		//while(cptus--);
	}*/
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr
	...

08003dac <Load_Param>:
BP_Status 			Bp_Down;
BP_Status 			Bp_Ok;

/* Private function -----------------------------------------------*/
uint8_t Load_Param()
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
	uint32_t val_param;

	if(ParamExist())
 8003db2:	481a      	ldr	r0, [pc, #104]	; (8003e1c <Load_Param+0x70>)
 8003db4:	f7ff fda8 	bl	8003908 <FlashManager_ReadInt32>
 8003db8:	4602      	mov	r2, r0
 8003dba:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <Load_Param+0x74>)
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d11b      	bne.n	8003df8 <Load_Param+0x4c>
	{
		val_param = 	FlashManager_ReadInt32(PARAM_DMX_PARAM);
 8003dc0:	4818      	ldr	r0, [pc, #96]	; (8003e24 <Load_Param+0x78>)
 8003dc2:	f7ff fda1 	bl	8003908 <FlashManager_ReadInt32>
 8003dc6:	6078      	str	r0, [r7, #4]
		IsInverted = 	(val_param&0xF0000000)>>28;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	0f1b      	lsrs	r3, r3, #28
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	4b16      	ldr	r3, [pc, #88]	; (8003e28 <Load_Param+0x7c>)
 8003dd0:	701a      	strb	r2, [r3, #0]
		Current_Mode = 	(val_param&0x0F000000)>>24;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	0e1b      	lsrs	r3, r3, #24
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <Load_Param+0x80>)
 8003de0:	701a      	strb	r2, [r3, #0]
		Manu_value = 	(val_param&0x00FF0000)>>16;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	0c1b      	lsrs	r3, r3, #16
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	4b11      	ldr	r3, [pc, #68]	; (8003e30 <Load_Param+0x84>)
 8003dea:	701a      	strb	r2, [r3, #0]
		DMX_Adress = 	(val_param&0x0000FFFF);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <Load_Param+0x88>)
 8003df2:	801a      	strh	r2, [r3, #0]
		return __TRUE;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e00c      	b.n	8003e12 <Load_Param+0x66>
	}
	else
	{
		Current_Mode = MODE_OFF;
 8003df8:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <Load_Param+0x80>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	701a      	strb	r2, [r3, #0]
		IsInverted = __FALSE;
 8003dfe:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <Load_Param+0x7c>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	701a      	strb	r2, [r3, #0]
		Manu_value = 100;
 8003e04:	4b0a      	ldr	r3, [pc, #40]	; (8003e30 <Load_Param+0x84>)
 8003e06:	2264      	movs	r2, #100	; 0x64
 8003e08:	701a      	strb	r2, [r3, #0]
		DMX_Adress = 1;
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <Load_Param+0x88>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	801a      	strh	r2, [r3, #0]
		return __FALSE;
 8003e10:	2300      	movs	r3, #0
	}
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	0800f800 	.word	0x0800f800
 8003e20:	55aa00ff 	.word	0x55aa00ff
 8003e24:	0800f804 	.word	0x0800f804
 8003e28:	20000968 	.word	0x20000968
 8003e2c:	2000099c 	.word	0x2000099c
 8003e30:	20000970 	.word	0x20000970
 8003e34:	200009da 	.word	0x200009da

08003e38 <Write_Param>:

void Write_Param()
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
	uint32_t data[2];
	data[0] = PARAM_EXIST_CODE;
 8003e3e:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <Write_Param+0x54>)
 8003e40:	603b      	str	r3, [r7, #0]
	data[1] = 0x00;
 8003e42:	2300      	movs	r3, #0
 8003e44:	607b      	str	r3, [r7, #4]
	data[1] |= (IsInverted<<28);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a11      	ldr	r2, [pc, #68]	; (8003e90 <Write_Param+0x58>)
 8003e4a:	7812      	ldrb	r2, [r2, #0]
 8003e4c:	0712      	lsls	r2, r2, #28
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	607b      	str	r3, [r7, #4]
	data[1] |= (Current_Mode<<24);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a0f      	ldr	r2, [pc, #60]	; (8003e94 <Write_Param+0x5c>)
 8003e56:	7812      	ldrb	r2, [r2, #0]
 8003e58:	0612      	lsls	r2, r2, #24
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	607b      	str	r3, [r7, #4]
	data[1] |= (Manu_value<<16);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a0d      	ldr	r2, [pc, #52]	; (8003e98 <Write_Param+0x60>)
 8003e62:	7812      	ldrb	r2, [r2, #0]
 8003e64:	0412      	lsls	r2, r2, #16
 8003e66:	4313      	orrs	r3, r2
 8003e68:	607b      	str	r3, [r7, #4]
	data[1] |= (DMX_Adress);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a0b      	ldr	r2, [pc, #44]	; (8003e9c <Write_Param+0x64>)
 8003e6e:	8812      	ldrh	r2, [r2, #0]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	607b      	str	r3, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e74:	b672      	cpsid	i

	__disable_irq();
	FlashManager_WriteMulti(PARAM_EXIST_ADDRESS,2,data);
 8003e76:	463b      	mov	r3, r7
 8003e78:	461a      	mov	r2, r3
 8003e7a:	2102      	movs	r1, #2
 8003e7c:	4808      	ldr	r0, [pc, #32]	; (8003ea0 <Write_Param+0x68>)
 8003e7e:	f7ff fccd 	bl	800381c <FlashManager_WriteMulti>
  __ASM volatile ("cpsie i" : : : "memory");
 8003e82:	b662      	cpsie	i
	__enable_irq();

//	Display_Cursor=0;
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	55aa00ff 	.word	0x55aa00ff
 8003e90:	20000968 	.word	0x20000968
 8003e94:	2000099c 	.word	0x2000099c
 8003e98:	20000970 	.word	0x20000970
 8003e9c:	200009da 	.word	0x200009da
 8003ea0:	0800f800 	.word	0x0800f800

08003ea4 <MeanArray>:

uint8_t MeanArray(uint8_t array[], uint8_t size)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	70fb      	strb	r3, [r7, #3]
	uint32_t mean = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]

	for (uint8_t i=0; i<size; i++)
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	72fb      	strb	r3, [r7, #11]
 8003eb8:	e00a      	b.n	8003ed0 <MeanArray+0x2c>
	{
		mean += array[i];
 8003eba:	7afb      	ldrb	r3, [r7, #11]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]
	for (uint8_t i=0; i<size; i++)
 8003eca:	7afb      	ldrb	r3, [r7, #11]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	72fb      	strb	r3, [r7, #11]
 8003ed0:	7afa      	ldrb	r2, [r7, #11]
 8003ed2:	78fb      	ldrb	r3, [r7, #3]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d3f0      	bcc.n	8003eba <MeanArray+0x16>
	}

	return mean/size;
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee0:	b2db      	uxtb	r3, r3
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr

08003eec <PWM_SetDutyAdapt>:

void PWM_SetDutyAdapt(TIM_HandleTypeDef* timer, uint32_t channel, uint16_t power)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	80fb      	strh	r3, [r7, #6]

	uint32_t value_pulse;

	//out power
	if(power==0)
 8003efa:	88fb      	ldrh	r3, [r7, #6]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d102      	bne.n	8003f06 <PWM_SetDutyAdapt+0x1a>
		value_pulse = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	e011      	b.n	8003f2a <PWM_SetDutyAdapt+0x3e>
	else
	{
		value_pulse = ((254*power)/(MAX_LED_PWM_VALUE-MIN_LED_PWM_VALUE))+MIN_LED_PWM_VALUE;
 8003f06:	88fa      	ldrh	r2, [r7, #6]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	01db      	lsls	r3, r3, #7
 8003f0c:	1a9b      	subs	r3, r3, r2
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	4a16      	ldr	r2, [pc, #88]	; (8003f6c <PWM_SetDutyAdapt+0x80>)
 8003f12:	fb82 1203 	smull	r1, r2, r2, r3
 8003f16:	441a      	add	r2, r3
 8003f18:	11d2      	asrs	r2, r2, #7
 8003f1a:	17db      	asrs	r3, r3, #31
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	617b      	str	r3, [r7, #20]
		if(value_pulse > MAX_LED_PWM_VALUE)
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2be9      	cmp	r3, #233	; 0xe9
 8003f24:	d901      	bls.n	8003f2a <PWM_SetDutyAdapt+0x3e>
			value_pulse = MAX_LED_PWM_VALUE;
 8003f26:	23e9      	movs	r3, #233	; 0xe9
 8003f28:	617b      	str	r3, [r7, #20]
	}

	 __HAL_TIM_SET_COMPARE(timer, channel, value_pulse);
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d104      	bne.n	8003f3a <PWM_SetDutyAdapt+0x4e>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003f38:	e013      	b.n	8003f62 <PWM_SetDutyAdapt+0x76>
	 __HAL_TIM_SET_COMPARE(timer, channel, value_pulse);
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d104      	bne.n	8003f4a <PWM_SetDutyAdapt+0x5e>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003f48:	e00b      	b.n	8003f62 <PWM_SetDutyAdapt+0x76>
	 __HAL_TIM_SET_COMPARE(timer, channel, value_pulse);
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d104      	bne.n	8003f5a <PWM_SetDutyAdapt+0x6e>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003f58:	e003      	b.n	8003f62 <PWM_SetDutyAdapt+0x76>
	 __HAL_TIM_SET_COMPARE(timer, channel, value_pulse);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr
 8003f6c:	8ca29c05 	.word	0x8ca29c05

08003f70 <PatchPWMtoLED>:

void PatchPWMtoLED (uint8_t isInverted)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	71fb      	strb	r3, [r7, #7]
	if(isInverted)
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d03c      	beq.n	8003ffa <PatchPWMtoLED+0x8a>
	{
		  LED1_pwmtimer = &htim3;
 8003f80:	4b3e      	ldr	r3, [pc, #248]	; (800407c <PatchPWMtoLED+0x10c>)
 8003f82:	4a3f      	ldr	r2, [pc, #252]	; (8004080 <PatchPWMtoLED+0x110>)
 8003f84:	601a      	str	r2, [r3, #0]
		  LED1_PWMchannel = TIM_CHANNEL_2;
 8003f86:	4b3f      	ldr	r3, [pc, #252]	; (8004084 <PatchPWMtoLED+0x114>)
 8003f88:	2204      	movs	r2, #4
 8003f8a:	601a      	str	r2, [r3, #0]
		  LED2_pwmtimer = &htim3;
 8003f8c:	4b3e      	ldr	r3, [pc, #248]	; (8004088 <PatchPWMtoLED+0x118>)
 8003f8e:	4a3c      	ldr	r2, [pc, #240]	; (8004080 <PatchPWMtoLED+0x110>)
 8003f90:	601a      	str	r2, [r3, #0]
		  LED2_PWMchannel = TIM_CHANNEL_1;
 8003f92:	4b3e      	ldr	r3, [pc, #248]	; (800408c <PatchPWMtoLED+0x11c>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
		  LED3_pwmtimer = &htim2;
 8003f98:	4b3d      	ldr	r3, [pc, #244]	; (8004090 <PatchPWMtoLED+0x120>)
 8003f9a:	4a3e      	ldr	r2, [pc, #248]	; (8004094 <PatchPWMtoLED+0x124>)
 8003f9c:	601a      	str	r2, [r3, #0]
		  LED3_PWMchannel = TIM_CHANNEL_4;
 8003f9e:	4b3e      	ldr	r3, [pc, #248]	; (8004098 <PatchPWMtoLED+0x128>)
 8003fa0:	220c      	movs	r2, #12
 8003fa2:	601a      	str	r2, [r3, #0]
		  LED4_pwmtimer = &htim2;
 8003fa4:	4b3d      	ldr	r3, [pc, #244]	; (800409c <PatchPWMtoLED+0x12c>)
 8003fa6:	4a3b      	ldr	r2, [pc, #236]	; (8004094 <PatchPWMtoLED+0x124>)
 8003fa8:	601a      	str	r2, [r3, #0]
		  LED4_PWMchannel = TIM_CHANNEL_3;
 8003faa:	4b3d      	ldr	r3, [pc, #244]	; (80040a0 <PatchPWMtoLED+0x130>)
 8003fac:	2208      	movs	r2, #8
 8003fae:	601a      	str	r2, [r3, #0]
		  LED5_pwmtimer = &htim2;
 8003fb0:	4b3c      	ldr	r3, [pc, #240]	; (80040a4 <PatchPWMtoLED+0x134>)
 8003fb2:	4a38      	ldr	r2, [pc, #224]	; (8004094 <PatchPWMtoLED+0x124>)
 8003fb4:	601a      	str	r2, [r3, #0]
		  LED5_PWMchannel = TIM_CHANNEL_2;
 8003fb6:	4b3c      	ldr	r3, [pc, #240]	; (80040a8 <PatchPWMtoLED+0x138>)
 8003fb8:	2204      	movs	r2, #4
 8003fba:	601a      	str	r2, [r3, #0]
		  LED6_pwmtimer = &htim2;
 8003fbc:	4b3b      	ldr	r3, [pc, #236]	; (80040ac <PatchPWMtoLED+0x13c>)
 8003fbe:	4a35      	ldr	r2, [pc, #212]	; (8004094 <PatchPWMtoLED+0x124>)
 8003fc0:	601a      	str	r2, [r3, #0]
		  LED6_PWMchannel = TIM_CHANNEL_1;
 8003fc2:	4b3b      	ldr	r3, [pc, #236]	; (80040b0 <PatchPWMtoLED+0x140>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
		  LED7_pwmtimer = &htim1;
 8003fc8:	4b3a      	ldr	r3, [pc, #232]	; (80040b4 <PatchPWMtoLED+0x144>)
 8003fca:	4a3b      	ldr	r2, [pc, #236]	; (80040b8 <PatchPWMtoLED+0x148>)
 8003fcc:	601a      	str	r2, [r3, #0]
		  LED7_PWMchannel = TIM_CHANNEL_1;
 8003fce:	4b3b      	ldr	r3, [pc, #236]	; (80040bc <PatchPWMtoLED+0x14c>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
		  LED8_pwmtimer = &htim1;
 8003fd4:	4b3a      	ldr	r3, [pc, #232]	; (80040c0 <PatchPWMtoLED+0x150>)
 8003fd6:	4a38      	ldr	r2, [pc, #224]	; (80040b8 <PatchPWMtoLED+0x148>)
 8003fd8:	601a      	str	r2, [r3, #0]
		  LED8_PWMchannel = TIM_CHANNEL_2;
 8003fda:	4b3a      	ldr	r3, [pc, #232]	; (80040c4 <PatchPWMtoLED+0x154>)
 8003fdc:	2204      	movs	r2, #4
 8003fde:	601a      	str	r2, [r3, #0]
		  LED9_pwmtimer = &htim1;
 8003fe0:	4b39      	ldr	r3, [pc, #228]	; (80040c8 <PatchPWMtoLED+0x158>)
 8003fe2:	4a35      	ldr	r2, [pc, #212]	; (80040b8 <PatchPWMtoLED+0x148>)
 8003fe4:	601a      	str	r2, [r3, #0]
		  LED9_PWMchannel = TIM_CHANNEL_3;
 8003fe6:	4b39      	ldr	r3, [pc, #228]	; (80040cc <PatchPWMtoLED+0x15c>)
 8003fe8:	2208      	movs	r2, #8
 8003fea:	601a      	str	r2, [r3, #0]
		  LED10_pwmtimer = &htim1;
 8003fec:	4b38      	ldr	r3, [pc, #224]	; (80040d0 <PatchPWMtoLED+0x160>)
 8003fee:	4a32      	ldr	r2, [pc, #200]	; (80040b8 <PatchPWMtoLED+0x148>)
 8003ff0:	601a      	str	r2, [r3, #0]
		  LED10_PWMchannel = TIM_CHANNEL_4;
 8003ff2:	4b38      	ldr	r3, [pc, #224]	; (80040d4 <PatchPWMtoLED+0x164>)
 8003ff4:	220c      	movs	r2, #12
 8003ff6:	601a      	str	r2, [r3, #0]
		  LED9_pwmtimer = &htim3;
		  LED9_PWMchannel = TIM_CHANNEL_1;
		  LED10_pwmtimer = &htim3;
		  LED10_PWMchannel = TIM_CHANNEL_2;
	}
}
 8003ff8:	e03b      	b.n	8004072 <PatchPWMtoLED+0x102>
		  LED1_pwmtimer = &htim1;
 8003ffa:	4b20      	ldr	r3, [pc, #128]	; (800407c <PatchPWMtoLED+0x10c>)
 8003ffc:	4a2e      	ldr	r2, [pc, #184]	; (80040b8 <PatchPWMtoLED+0x148>)
 8003ffe:	601a      	str	r2, [r3, #0]
		  LED1_PWMchannel = TIM_CHANNEL_4;
 8004000:	4b20      	ldr	r3, [pc, #128]	; (8004084 <PatchPWMtoLED+0x114>)
 8004002:	220c      	movs	r2, #12
 8004004:	601a      	str	r2, [r3, #0]
		  LED2_pwmtimer = &htim1;
 8004006:	4b20      	ldr	r3, [pc, #128]	; (8004088 <PatchPWMtoLED+0x118>)
 8004008:	4a2b      	ldr	r2, [pc, #172]	; (80040b8 <PatchPWMtoLED+0x148>)
 800400a:	601a      	str	r2, [r3, #0]
		  LED2_PWMchannel = TIM_CHANNEL_3;
 800400c:	4b1f      	ldr	r3, [pc, #124]	; (800408c <PatchPWMtoLED+0x11c>)
 800400e:	2208      	movs	r2, #8
 8004010:	601a      	str	r2, [r3, #0]
		  LED3_pwmtimer = &htim1;
 8004012:	4b1f      	ldr	r3, [pc, #124]	; (8004090 <PatchPWMtoLED+0x120>)
 8004014:	4a28      	ldr	r2, [pc, #160]	; (80040b8 <PatchPWMtoLED+0x148>)
 8004016:	601a      	str	r2, [r3, #0]
		  LED3_PWMchannel = TIM_CHANNEL_2;
 8004018:	4b1f      	ldr	r3, [pc, #124]	; (8004098 <PatchPWMtoLED+0x128>)
 800401a:	2204      	movs	r2, #4
 800401c:	601a      	str	r2, [r3, #0]
		  LED4_pwmtimer = &htim1;
 800401e:	4b1f      	ldr	r3, [pc, #124]	; (800409c <PatchPWMtoLED+0x12c>)
 8004020:	4a25      	ldr	r2, [pc, #148]	; (80040b8 <PatchPWMtoLED+0x148>)
 8004022:	601a      	str	r2, [r3, #0]
		  LED4_PWMchannel = TIM_CHANNEL_1;
 8004024:	4b1e      	ldr	r3, [pc, #120]	; (80040a0 <PatchPWMtoLED+0x130>)
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
		  LED5_pwmtimer = &htim2;
 800402a:	4b1e      	ldr	r3, [pc, #120]	; (80040a4 <PatchPWMtoLED+0x134>)
 800402c:	4a19      	ldr	r2, [pc, #100]	; (8004094 <PatchPWMtoLED+0x124>)
 800402e:	601a      	str	r2, [r3, #0]
		  LED5_PWMchannel = TIM_CHANNEL_1;
 8004030:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <PatchPWMtoLED+0x138>)
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
		  LED6_pwmtimer = &htim2;
 8004036:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <PatchPWMtoLED+0x13c>)
 8004038:	4a16      	ldr	r2, [pc, #88]	; (8004094 <PatchPWMtoLED+0x124>)
 800403a:	601a      	str	r2, [r3, #0]
		  LED6_PWMchannel = TIM_CHANNEL_2;
 800403c:	4b1c      	ldr	r3, [pc, #112]	; (80040b0 <PatchPWMtoLED+0x140>)
 800403e:	2204      	movs	r2, #4
 8004040:	601a      	str	r2, [r3, #0]
		  LED7_pwmtimer = &htim2;
 8004042:	4b1c      	ldr	r3, [pc, #112]	; (80040b4 <PatchPWMtoLED+0x144>)
 8004044:	4a13      	ldr	r2, [pc, #76]	; (8004094 <PatchPWMtoLED+0x124>)
 8004046:	601a      	str	r2, [r3, #0]
		  LED7_PWMchannel = TIM_CHANNEL_3;
 8004048:	4b1c      	ldr	r3, [pc, #112]	; (80040bc <PatchPWMtoLED+0x14c>)
 800404a:	2208      	movs	r2, #8
 800404c:	601a      	str	r2, [r3, #0]
		  LED8_pwmtimer = &htim2;
 800404e:	4b1c      	ldr	r3, [pc, #112]	; (80040c0 <PatchPWMtoLED+0x150>)
 8004050:	4a10      	ldr	r2, [pc, #64]	; (8004094 <PatchPWMtoLED+0x124>)
 8004052:	601a      	str	r2, [r3, #0]
		  LED8_PWMchannel = TIM_CHANNEL_4;
 8004054:	4b1b      	ldr	r3, [pc, #108]	; (80040c4 <PatchPWMtoLED+0x154>)
 8004056:	220c      	movs	r2, #12
 8004058:	601a      	str	r2, [r3, #0]
		  LED9_pwmtimer = &htim3;
 800405a:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <PatchPWMtoLED+0x158>)
 800405c:	4a08      	ldr	r2, [pc, #32]	; (8004080 <PatchPWMtoLED+0x110>)
 800405e:	601a      	str	r2, [r3, #0]
		  LED9_PWMchannel = TIM_CHANNEL_1;
 8004060:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <PatchPWMtoLED+0x15c>)
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
		  LED10_pwmtimer = &htim3;
 8004066:	4b1a      	ldr	r3, [pc, #104]	; (80040d0 <PatchPWMtoLED+0x160>)
 8004068:	4a05      	ldr	r2, [pc, #20]	; (8004080 <PatchPWMtoLED+0x110>)
 800406a:	601a      	str	r2, [r3, #0]
		  LED10_PWMchannel = TIM_CHANNEL_2;
 800406c:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <PatchPWMtoLED+0x164>)
 800406e:	2204      	movs	r2, #4
 8004070:	601a      	str	r2, [r3, #0]
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr
 800407c:	20000994 	.word	0x20000994
 8004080:	20000a54 	.word	0x20000a54
 8004084:	2000096c 	.word	0x2000096c
 8004088:	200009c0 	.word	0x200009c0
 800408c:	2000097c 	.word	0x2000097c
 8004090:	20000984 	.word	0x20000984
 8004094:	20000ad4 	.word	0x20000ad4
 8004098:	200009a0 	.word	0x200009a0
 800409c:	200009b0 	.word	0x200009b0
 80040a0:	200009c4 	.word	0x200009c4
 80040a4:	20000950 	.word	0x20000950
 80040a8:	200009d4 	.word	0x200009d4
 80040ac:	20000998 	.word	0x20000998
 80040b0:	20000988 	.word	0x20000988
 80040b4:	200009a4 	.word	0x200009a4
 80040b8:	20000a94 	.word	0x20000a94
 80040bc:	200009a8 	.word	0x200009a8
 80040c0:	200009dc 	.word	0x200009dc
 80040c4:	200009b4 	.word	0x200009b4
 80040c8:	200009bc 	.word	0x200009bc
 80040cc:	20000960 	.word	0x20000960
 80040d0:	20000974 	.word	0x20000974
 80040d4:	200009ac 	.word	0x200009ac

080040d8 <Update_Display>:

void Update_Display()
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af04      	add	r7, sp, #16
	char Str_percent[]="000";
 80040de:	4bab      	ldr	r3, [pc, #684]	; (800438c <Update_Display+0x2b4>)
 80040e0:	60bb      	str	r3, [r7, #8]
    char Str_dmx[]="000";
 80040e2:	4baa      	ldr	r3, [pc, #680]	; (800438c <Update_Display+0x2b4>)
 80040e4:	607b      	str	r3, [r7, #4]
    char Str_add[]="000";
 80040e6:	4ba9      	ldr	r3, [pc, #676]	; (800438c <Update_Display+0x2b4>)
 80040e8:	603b      	str	r3, [r7, #0]
    uint8_t percent_value;

    SSD1306_Clear();
 80040ea:	f7fc fc00 	bl	80008ee <SSD1306_Clear>

    if(Current_Display == DISP_PARAM)
 80040ee:	4ba8      	ldr	r3, [pc, #672]	; (8004390 <Update_Display+0x2b8>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f040 80a0 	bne.w	800423a <Update_Display+0x162>
    {
    	//CURSOR
    	SSD1306_DrawFilledTriangle(0, 11*Display_Cursor, 0, 11*Display_Cursor + 8, 7, 11*Display_Cursor + 4, 1);
 80040fa:	4ba6      	ldr	r3, [pc, #664]	; (8004394 <Update_Display+0x2bc>)
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	461a      	mov	r2, r3
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	1899      	adds	r1, r3, r2
 800410a:	4ba2      	ldr	r3, [pc, #648]	; (8004394 <Update_Display+0x2bc>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	4613      	mov	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	4413      	add	r3, r2
 800411a:	f103 0008 	add.w	r0, r3, #8
 800411e:	4b9d      	ldr	r3, [pc, #628]	; (8004394 <Update_Display+0x2bc>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	4613      	mov	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	4413      	add	r3, r2
 800412e:	3304      	adds	r3, #4
 8004130:	2201      	movs	r2, #1
 8004132:	9202      	str	r2, [sp, #8]
 8004134:	9301      	str	r3, [sp, #4]
 8004136:	2307      	movs	r3, #7
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	4603      	mov	r3, r0
 800413c:	2200      	movs	r2, #0
 800413e:	2000      	movs	r0, #0
 8004140:	f7fc fb14 	bl	800076c <SSD1306_DrawFilledTriangle>

    	//MODE
    	SSD1306_GotoXY (10,0);
 8004144:	2100      	movs	r1, #0
 8004146:	200a      	movs	r0, #10
 8004148:	f7fc f95a 	bl	8000400 <SSD1306_GotoXY>
    	SSD1306_Puts ("MODE: ", &Font_7x10, 1);
 800414c:	2201      	movs	r2, #1
 800414e:	4992      	ldr	r1, [pc, #584]	; (8004398 <Update_Display+0x2c0>)
 8004150:	4892      	ldr	r0, [pc, #584]	; (800439c <Update_Display+0x2c4>)
 8004152:	f7fc f9eb 	bl	800052c <SSD1306_Puts>
    	SSD1306_GotoXY (80,0);
 8004156:	2100      	movs	r1, #0
 8004158:	2050      	movs	r0, #80	; 0x50
 800415a:	f7fc f951 	bl	8000400 <SSD1306_GotoXY>
    	if(Current_Mode == MODE_OFF)
 800415e:	4b90      	ldr	r3, [pc, #576]	; (80043a0 <Update_Display+0x2c8>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d104      	bne.n	8004170 <Update_Display+0x98>
    		SSD1306_Puts ("OFF", &Font_7x10, 1);
 8004166:	2201      	movs	r2, #1
 8004168:	498b      	ldr	r1, [pc, #556]	; (8004398 <Update_Display+0x2c0>)
 800416a:	488e      	ldr	r0, [pc, #568]	; (80043a4 <Update_Display+0x2cc>)
 800416c:	f7fc f9de 	bl	800052c <SSD1306_Puts>
    	if(Current_Mode == MODE_MANU)
 8004170:	4b8b      	ldr	r3, [pc, #556]	; (80043a0 <Update_Display+0x2c8>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d104      	bne.n	8004182 <Update_Display+0xaa>
    		SSD1306_Puts ("MANU", &Font_7x10, 1);
 8004178:	2201      	movs	r2, #1
 800417a:	4987      	ldr	r1, [pc, #540]	; (8004398 <Update_Display+0x2c0>)
 800417c:	488a      	ldr	r0, [pc, #552]	; (80043a8 <Update_Display+0x2d0>)
 800417e:	f7fc f9d5 	bl	800052c <SSD1306_Puts>
    	if(Current_Mode == MODE_DMX)
 8004182:	4b87      	ldr	r3, [pc, #540]	; (80043a0 <Update_Display+0x2c8>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d104      	bne.n	8004194 <Update_Display+0xbc>
    	    SSD1306_Puts ("DMX", &Font_7x10, 1);
 800418a:	2201      	movs	r2, #1
 800418c:	4982      	ldr	r1, [pc, #520]	; (8004398 <Update_Display+0x2c0>)
 800418e:	4887      	ldr	r0, [pc, #540]	; (80043ac <Update_Display+0x2d4>)
 8004190:	f7fc f9cc 	bl	800052c <SSD1306_Puts>

    	//INVERT
    	SSD1306_GotoXY (10,11);
 8004194:	210b      	movs	r1, #11
 8004196:	200a      	movs	r0, #10
 8004198:	f7fc f932 	bl	8000400 <SSD1306_GotoXY>
    	SSD1306_Puts ("INVERT: ", &Font_7x10, 1);
 800419c:	2201      	movs	r2, #1
 800419e:	497e      	ldr	r1, [pc, #504]	; (8004398 <Update_Display+0x2c0>)
 80041a0:	4883      	ldr	r0, [pc, #524]	; (80043b0 <Update_Display+0x2d8>)
 80041a2:	f7fc f9c3 	bl	800052c <SSD1306_Puts>
    	SSD1306_GotoXY (80,11);
 80041a6:	210b      	movs	r1, #11
 80041a8:	2050      	movs	r0, #80	; 0x50
 80041aa:	f7fc f929 	bl	8000400 <SSD1306_GotoXY>
		if(IsInverted)
 80041ae:	4b81      	ldr	r3, [pc, #516]	; (80043b4 <Update_Display+0x2dc>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <Update_Display+0xea>
			SSD1306_Puts ("YES", &Font_7x10, 1);
 80041b6:	2201      	movs	r2, #1
 80041b8:	4977      	ldr	r1, [pc, #476]	; (8004398 <Update_Display+0x2c0>)
 80041ba:	487f      	ldr	r0, [pc, #508]	; (80043b8 <Update_Display+0x2e0>)
 80041bc:	f7fc f9b6 	bl	800052c <SSD1306_Puts>
 80041c0:	e004      	b.n	80041cc <Update_Display+0xf4>
		else
			SSD1306_Puts ("NO", &Font_7x10, 1);
 80041c2:	2201      	movs	r2, #1
 80041c4:	4974      	ldr	r1, [pc, #464]	; (8004398 <Update_Display+0x2c0>)
 80041c6:	487d      	ldr	r0, [pc, #500]	; (80043bc <Update_Display+0x2e4>)
 80041c8:	f7fc f9b0 	bl	800052c <SSD1306_Puts>

    	//ADRESS DMX
    	SSD1306_GotoXY (10,22);
 80041cc:	2116      	movs	r1, #22
 80041ce:	200a      	movs	r0, #10
 80041d0:	f7fc f916 	bl	8000400 <SSD1306_GotoXY>
    	SSD1306_Puts ("ADDRESS: ", &Font_7x10, 1);
 80041d4:	2201      	movs	r2, #1
 80041d6:	4970      	ldr	r1, [pc, #448]	; (8004398 <Update_Display+0x2c0>)
 80041d8:	4879      	ldr	r0, [pc, #484]	; (80043c0 <Update_Display+0x2e8>)
 80041da:	f7fc f9a7 	bl	800052c <SSD1306_Puts>
    	SSD1306_GotoXY (80,22);
 80041de:	2116      	movs	r1, #22
 80041e0:	2050      	movs	r0, #80	; 0x50
 80041e2:	f7fc f90d 	bl	8000400 <SSD1306_GotoXY>
    	sprintf(Str_add,"%03d",DMX_Adress);
 80041e6:	4b77      	ldr	r3, [pc, #476]	; (80043c4 <Update_Display+0x2ec>)
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	463b      	mov	r3, r7
 80041ee:	4976      	ldr	r1, [pc, #472]	; (80043c8 <Update_Display+0x2f0>)
 80041f0:	4618      	mov	r0, r3
 80041f2:	f002 f9c7 	bl	8006584 <siprintf>
    	SSD1306_Puts (Str_add, &Font_7x10, 1);
 80041f6:	463b      	mov	r3, r7
 80041f8:	2201      	movs	r2, #1
 80041fa:	4967      	ldr	r1, [pc, #412]	; (8004398 <Update_Display+0x2c0>)
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fc f995 	bl	800052c <SSD1306_Puts>

    	//MAN VALUE
    	SSD1306_GotoXY (10,33);
 8004202:	2121      	movs	r1, #33	; 0x21
 8004204:	200a      	movs	r0, #10
 8004206:	f7fc f8fb 	bl	8000400 <SSD1306_GotoXY>
    	SSD1306_Puts ("MAN VALUE: ", &Font_7x10, 1);
 800420a:	2201      	movs	r2, #1
 800420c:	4962      	ldr	r1, [pc, #392]	; (8004398 <Update_Display+0x2c0>)
 800420e:	486f      	ldr	r0, [pc, #444]	; (80043cc <Update_Display+0x2f4>)
 8004210:	f7fc f98c 	bl	800052c <SSD1306_Puts>
    	SSD1306_GotoXY (80,33);
 8004214:	2121      	movs	r1, #33	; 0x21
 8004216:	2050      	movs	r0, #80	; 0x50
 8004218:	f7fc f8f2 	bl	8000400 <SSD1306_GotoXY>
		sprintf(Str_add,"%03d",Manu_value);
 800421c:	4b6c      	ldr	r3, [pc, #432]	; (80043d0 <Update_Display+0x2f8>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	463b      	mov	r3, r7
 8004224:	4968      	ldr	r1, [pc, #416]	; (80043c8 <Update_Display+0x2f0>)
 8004226:	4618      	mov	r0, r3
 8004228:	f002 f9ac 	bl	8006584 <siprintf>
		SSD1306_Puts (Str_add, &Font_7x10, 1);
 800422c:	463b      	mov	r3, r7
 800422e:	2201      	movs	r2, #1
 8004230:	4959      	ldr	r1, [pc, #356]	; (8004398 <Update_Display+0x2c0>)
 8004232:	4618      	mov	r0, r3
 8004234:	f7fc f97a 	bl	800052c <SSD1306_Puts>
 8004238:	e123      	b.n	8004482 <Update_Display+0x3aa>
    }
    else if(Current_Display == DISP_CONFIG_MODE)
 800423a:	4b55      	ldr	r3, [pc, #340]	; (8004390 <Update_Display+0x2b8>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b01      	cmp	r3, #1
 8004242:	d11e      	bne.n	8004282 <Update_Display+0x1aa>
    {
    	SSD1306_GotoXY (40,0);
 8004244:	2100      	movs	r1, #0
 8004246:	2028      	movs	r0, #40	; 0x28
 8004248:	f7fc f8da 	bl	8000400 <SSD1306_GotoXY>

    	switch(Current_Mode)
 800424c:	4b54      	ldr	r3, [pc, #336]	; (80043a0 <Update_Display+0x2c8>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d010      	beq.n	8004276 <Update_Display+0x19e>
 8004254:	2b02      	cmp	r3, #2
 8004256:	d008      	beq.n	800426a <Update_Display+0x192>
 8004258:	2b00      	cmp	r3, #0
 800425a:	d000      	beq.n	800425e <Update_Display+0x186>
			break;
		case MODE_DMX:
			SSD1306_Puts ("DMX", &Font_16x26, 1);
			break;
		default:
			break;
 800425c:	e111      	b.n	8004482 <Update_Display+0x3aa>
			SSD1306_Puts ("OFF", &Font_16x26, 1);
 800425e:	2201      	movs	r2, #1
 8004260:	495c      	ldr	r1, [pc, #368]	; (80043d4 <Update_Display+0x2fc>)
 8004262:	4850      	ldr	r0, [pc, #320]	; (80043a4 <Update_Display+0x2cc>)
 8004264:	f7fc f962 	bl	800052c <SSD1306_Puts>
			break;
 8004268:	e10b      	b.n	8004482 <Update_Display+0x3aa>
			SSD1306_Puts ("MANU", &Font_16x26, 1);
 800426a:	2201      	movs	r2, #1
 800426c:	4959      	ldr	r1, [pc, #356]	; (80043d4 <Update_Display+0x2fc>)
 800426e:	484e      	ldr	r0, [pc, #312]	; (80043a8 <Update_Display+0x2d0>)
 8004270:	f7fc f95c 	bl	800052c <SSD1306_Puts>
			break;
 8004274:	e105      	b.n	8004482 <Update_Display+0x3aa>
			SSD1306_Puts ("DMX", &Font_16x26, 1);
 8004276:	2201      	movs	r2, #1
 8004278:	4956      	ldr	r1, [pc, #344]	; (80043d4 <Update_Display+0x2fc>)
 800427a:	484c      	ldr	r0, [pc, #304]	; (80043ac <Update_Display+0x2d4>)
 800427c:	f7fc f956 	bl	800052c <SSD1306_Puts>
			break;
 8004280:	e0ff      	b.n	8004482 <Update_Display+0x3aa>
		}
    }
    else if(Current_Display == DISP_CONFIG_INVERT)
 8004282:	4b43      	ldr	r3, [pc, #268]	; (8004390 <Update_Display+0x2b8>)
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d117      	bne.n	80042bc <Update_Display+0x1e4>
	{

    	if(IsInverted)
 800428c:	4b49      	ldr	r3, [pc, #292]	; (80043b4 <Update_Display+0x2dc>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d009      	beq.n	80042a8 <Update_Display+0x1d0>
    	{
    		SSD1306_GotoXY (40,0);
 8004294:	2100      	movs	r1, #0
 8004296:	2028      	movs	r0, #40	; 0x28
 8004298:	f7fc f8b2 	bl	8000400 <SSD1306_GotoXY>
    		SSD1306_Puts ("YES", &Font_16x26, 1);
 800429c:	2201      	movs	r2, #1
 800429e:	494d      	ldr	r1, [pc, #308]	; (80043d4 <Update_Display+0x2fc>)
 80042a0:	4845      	ldr	r0, [pc, #276]	; (80043b8 <Update_Display+0x2e0>)
 80042a2:	f7fc f943 	bl	800052c <SSD1306_Puts>
 80042a6:	e0ec      	b.n	8004482 <Update_Display+0x3aa>
    	}
    	else
    	{
    		SSD1306_GotoXY (48,0);
 80042a8:	2100      	movs	r1, #0
 80042aa:	2030      	movs	r0, #48	; 0x30
 80042ac:	f7fc f8a8 	bl	8000400 <SSD1306_GotoXY>
    		SSD1306_Puts ("NO", &Font_16x26, 1);
 80042b0:	2201      	movs	r2, #1
 80042b2:	4948      	ldr	r1, [pc, #288]	; (80043d4 <Update_Display+0x2fc>)
 80042b4:	4841      	ldr	r0, [pc, #260]	; (80043bc <Update_Display+0x2e4>)
 80042b6:	f7fc f939 	bl	800052c <SSD1306_Puts>
 80042ba:	e0e2      	b.n	8004482 <Update_Display+0x3aa>
    	}
	}
    else if(Current_Display == DISP_CONFIG_MANVALUE)		//MANU
 80042bc:	4b34      	ldr	r3, [pc, #208]	; (8004390 <Update_Display+0x2b8>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d127      	bne.n	8004316 <Update_Display+0x23e>
    {
    	percent_value = Manu_value;
 80042c6:	4b42      	ldr	r3, [pc, #264]	; (80043d0 <Update_Display+0x2f8>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	73fb      	strb	r3, [r7, #15]
    	sprintf(Str_percent,"%03d",percent_value);
 80042cc:	7bfa      	ldrb	r2, [r7, #15]
 80042ce:	f107 0308 	add.w	r3, r7, #8
 80042d2:	493d      	ldr	r1, [pc, #244]	; (80043c8 <Update_Display+0x2f0>)
 80042d4:	4618      	mov	r0, r3
 80042d6:	f002 f955 	bl	8006584 <siprintf>
    	SSD1306_GotoXY (25,0);
 80042da:	2100      	movs	r1, #0
 80042dc:	2019      	movs	r0, #25
 80042de:	f7fc f88f 	bl	8000400 <SSD1306_GotoXY>
    	SSD1306_Puts (Str_percent, &Font_16x26, 1);
 80042e2:	f107 0308 	add.w	r3, r7, #8
 80042e6:	2201      	movs	r2, #1
 80042e8:	493a      	ldr	r1, [pc, #232]	; (80043d4 <Update_Display+0x2fc>)
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fc f91e 	bl	800052c <SSD1306_Puts>
    	SSD1306_GotoXY (74,0);
 80042f0:	2100      	movs	r1, #0
 80042f2:	204a      	movs	r0, #74	; 0x4a
 80042f4:	f7fc f884 	bl	8000400 <SSD1306_GotoXY>
    	SSD1306_Puts ("%", &Font_16x26, 1);
 80042f8:	2201      	movs	r2, #1
 80042fa:	4936      	ldr	r1, [pc, #216]	; (80043d4 <Update_Display+0x2fc>)
 80042fc:	4836      	ldr	r0, [pc, #216]	; (80043d8 <Update_Display+0x300>)
 80042fe:	f7fc f915 	bl	800052c <SSD1306_Puts>
    	SSD1306_GotoXY (0, 45);
 8004302:	212d      	movs	r1, #45	; 0x2d
 8004304:	2000      	movs	r0, #0
 8004306:	f7fc f87b 	bl	8000400 <SSD1306_GotoXY>
    	SSD1306_Puts ("MODE:MANUAL", &Font_11x18, 1);
 800430a:	2201      	movs	r2, #1
 800430c:	4933      	ldr	r1, [pc, #204]	; (80043dc <Update_Display+0x304>)
 800430e:	4834      	ldr	r0, [pc, #208]	; (80043e0 <Update_Display+0x308>)
 8004310:	f7fc f90c 	bl	800052c <SSD1306_Puts>
 8004314:	e0b5      	b.n	8004482 <Update_Display+0x3aa>
    }
    else if (Current_Display == DISP_CONFIG_ADDRESS)		//DMX
 8004316:	4b1e      	ldr	r3, [pc, #120]	; (8004390 <Update_Display+0x2b8>)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b03      	cmp	r3, #3
 800431e:	f040 80b0 	bne.w	8004482 <Update_Display+0x3aa>
    {
    	percent_value = Mean_Value*100/255;
 8004322:	4b30      	ldr	r3, [pc, #192]	; (80043e4 <Update_Display+0x30c>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	2364      	movs	r3, #100	; 0x64
 800432a:	fb03 f302 	mul.w	r3, r3, r2
 800432e:	4a2e      	ldr	r2, [pc, #184]	; (80043e8 <Update_Display+0x310>)
 8004330:	fb82 1203 	smull	r1, r2, r2, r3
 8004334:	441a      	add	r2, r3
 8004336:	11d2      	asrs	r2, r2, #7
 8004338:	17db      	asrs	r3, r3, #31
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	73fb      	strb	r3, [r7, #15]
    	sprintf(Str_add,"%03d",DMX_Adress);
 800433e:	4b21      	ldr	r3, [pc, #132]	; (80043c4 <Update_Display+0x2ec>)
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	463b      	mov	r3, r7
 8004346:	4920      	ldr	r1, [pc, #128]	; (80043c8 <Update_Display+0x2f0>)
 8004348:	4618      	mov	r0, r3
 800434a:	f002 f91b 	bl	8006584 <siprintf>
    	if(DMX_signal_OK)
 800434e:	4b27      	ldr	r3, [pc, #156]	; (80043ec <Update_Display+0x314>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d04e      	beq.n	80043f4 <Update_Display+0x31c>
		{
			SSD1306_GotoXY (0, 45);
 8004356:	212d      	movs	r1, #45	; 0x2d
 8004358:	2000      	movs	r0, #0
 800435a:	f7fc f851 	bl	8000400 <SSD1306_GotoXY>
			SSD1306_Puts ("SIGNAL :OK", &Font_11x18, 1);
 800435e:	2201      	movs	r2, #1
 8004360:	491e      	ldr	r1, [pc, #120]	; (80043dc <Update_Display+0x304>)
 8004362:	4823      	ldr	r0, [pc, #140]	; (80043f0 <Update_Display+0x318>)
 8004364:	f7fc f8e2 	bl	800052c <SSD1306_Puts>
			sprintf(Str_percent,"%03d",percent_value);
 8004368:	7bfa      	ldrb	r2, [r7, #15]
 800436a:	f107 0308 	add.w	r3, r7, #8
 800436e:	4916      	ldr	r1, [pc, #88]	; (80043c8 <Update_Display+0x2f0>)
 8004370:	4618      	mov	r0, r3
 8004372:	f002 f907 	bl	8006584 <siprintf>
			sprintf(Str_dmx,"%03d",Protocol_DMX_GetValue(1));
 8004376:	2001      	movs	r0, #1
 8004378:	f7ff fba4 	bl	8003ac4 <Protocol_DMX_GetValue>
 800437c:	4603      	mov	r3, r0
 800437e:	461a      	mov	r2, r3
 8004380:	1d3b      	adds	r3, r7, #4
 8004382:	4911      	ldr	r1, [pc, #68]	; (80043c8 <Update_Display+0x2f0>)
 8004384:	4618      	mov	r0, r3
 8004386:	f002 f8fd 	bl	8006584 <siprintf>
 800438a:	e040      	b.n	800440e <Update_Display+0x336>
 800438c:	00303030 	.word	0x00303030
 8004390:	200009c8 	.word	0x200009c8
 8004394:	200009d1 	.word	0x200009d1
 8004398:	20000000 	.word	0x20000000
 800439c:	08006dd4 	.word	0x08006dd4
 80043a0:	2000099c 	.word	0x2000099c
 80043a4:	08006ddc 	.word	0x08006ddc
 80043a8:	08006de0 	.word	0x08006de0
 80043ac:	08006de8 	.word	0x08006de8
 80043b0:	08006dec 	.word	0x08006dec
 80043b4:	20000968 	.word	0x20000968
 80043b8:	08006df8 	.word	0x08006df8
 80043bc:	08006dfc 	.word	0x08006dfc
 80043c0:	08006e00 	.word	0x08006e00
 80043c4:	200009da 	.word	0x200009da
 80043c8:	08006e0c 	.word	0x08006e0c
 80043cc:	08006e14 	.word	0x08006e14
 80043d0:	20000970 	.word	0x20000970
 80043d4:	20000010 	.word	0x20000010
 80043d8:	08006e20 	.word	0x08006e20
 80043dc:	20000008 	.word	0x20000008
 80043e0:	08006e24 	.word	0x08006e24
 80043e4:	20000969 	.word	0x20000969
 80043e8:	80808081 	.word	0x80808081
 80043ec:	20000971 	.word	0x20000971
 80043f0:	08006e30 	.word	0x08006e30
		}
		else
		{
			SSD1306_GotoXY (0, 45);
 80043f4:	212d      	movs	r1, #45	; 0x2d
 80043f6:	2000      	movs	r0, #0
 80043f8:	f7fc f802 	bl	8000400 <SSD1306_GotoXY>
			SSD1306_Puts ("SIGNAL :ERR", &Font_11x18, 1);
 80043fc:	2201      	movs	r2, #1
 80043fe:	492a      	ldr	r1, [pc, #168]	; (80044a8 <Update_Display+0x3d0>)
 8004400:	482a      	ldr	r0, [pc, #168]	; (80044ac <Update_Display+0x3d4>)
 8004402:	f7fc f893 	bl	800052c <SSD1306_Puts>
			sprintf(Str_percent,"---");
 8004406:	4b2a      	ldr	r3, [pc, #168]	; (80044b0 <Update_Display+0x3d8>)
 8004408:	60bb      	str	r3, [r7, #8]
			sprintf(Str_dmx,"---");
 800440a:	4b29      	ldr	r3, [pc, #164]	; (80044b0 <Update_Display+0x3d8>)
 800440c:	607b      	str	r3, [r7, #4]
		}
    	SSD1306_GotoXY (25,0);
 800440e:	2100      	movs	r1, #0
 8004410:	2019      	movs	r0, #25
 8004412:	f7fb fff5 	bl	8000400 <SSD1306_GotoXY>
		SSD1306_Puts (Str_percent, &Font_16x26, 1);
 8004416:	f107 0308 	add.w	r3, r7, #8
 800441a:	2201      	movs	r2, #1
 800441c:	4925      	ldr	r1, [pc, #148]	; (80044b4 <Update_Display+0x3dc>)
 800441e:	4618      	mov	r0, r3
 8004420:	f7fc f884 	bl	800052c <SSD1306_Puts>
		SSD1306_GotoXY (74,0);
 8004424:	2100      	movs	r1, #0
 8004426:	204a      	movs	r0, #74	; 0x4a
 8004428:	f7fb ffea 	bl	8000400 <SSD1306_GotoXY>
		SSD1306_Puts ("%", &Font_16x26, 1);
 800442c:	2201      	movs	r2, #1
 800442e:	4921      	ldr	r1, [pc, #132]	; (80044b4 <Update_Display+0x3dc>)
 8004430:	4821      	ldr	r0, [pc, #132]	; (80044b8 <Update_Display+0x3e0>)
 8004432:	f7fc f87b 	bl	800052c <SSD1306_Puts>
		SSD1306_GotoXY (0, 27);
 8004436:	211b      	movs	r1, #27
 8004438:	2000      	movs	r0, #0
 800443a:	f7fb ffe1 	bl	8000400 <SSD1306_GotoXY>
		SSD1306_Puts ("DMX ADD:", &Font_11x18, 1);
 800443e:	2201      	movs	r2, #1
 8004440:	4919      	ldr	r1, [pc, #100]	; (80044a8 <Update_Display+0x3d0>)
 8004442:	481e      	ldr	r0, [pc, #120]	; (80044bc <Update_Display+0x3e4>)
 8004444:	f7fc f872 	bl	800052c <SSD1306_Puts>
		SSD1306_GotoXY (89, 27);
 8004448:	211b      	movs	r1, #27
 800444a:	2059      	movs	r0, #89	; 0x59
 800444c:	f7fb ffd8 	bl	8000400 <SSD1306_GotoXY>
		SSD1306_Puts (Str_add, &Font_11x18, 1);
 8004450:	463b      	mov	r3, r7
 8004452:	2201      	movs	r2, #1
 8004454:	4914      	ldr	r1, [pc, #80]	; (80044a8 <Update_Display+0x3d0>)
 8004456:	4618      	mov	r0, r3
 8004458:	f7fc f868 	bl	800052c <SSD1306_Puts>
		SSD1306_GotoXY (105, 0);
 800445c:	2100      	movs	r1, #0
 800445e:	2069      	movs	r0, #105	; 0x69
 8004460:	f7fb ffce 	bl	8000400 <SSD1306_GotoXY>
		SSD1306_Puts ("CH1", &Font_7x10, 1);
 8004464:	2201      	movs	r2, #1
 8004466:	4916      	ldr	r1, [pc, #88]	; (80044c0 <Update_Display+0x3e8>)
 8004468:	4816      	ldr	r0, [pc, #88]	; (80044c4 <Update_Display+0x3ec>)
 800446a:	f7fc f85f 	bl	800052c <SSD1306_Puts>
		SSD1306_GotoXY (105, 10);
 800446e:	210a      	movs	r1, #10
 8004470:	2069      	movs	r0, #105	; 0x69
 8004472:	f7fb ffc5 	bl	8000400 <SSD1306_GotoXY>
		SSD1306_Puts (Str_dmx, &Font_7x10, 1);
 8004476:	1d3b      	adds	r3, r7, #4
 8004478:	2201      	movs	r2, #1
 800447a:	4911      	ldr	r1, [pc, #68]	; (80044c0 <Update_Display+0x3e8>)
 800447c:	4618      	mov	r0, r3
 800447e:	f7fc f855 	bl	800052c <SSD1306_Puts>
    }

    if(param_changed==__TRUE)
 8004482:	4b11      	ldr	r3, [pc, #68]	; (80044c8 <Update_Display+0x3f0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d108      	bne.n	800449c <Update_Display+0x3c4>
    {
    	SSD1306_GotoXY (120,53);
 800448a:	2135      	movs	r1, #53	; 0x35
 800448c:	2078      	movs	r0, #120	; 0x78
 800448e:	f7fb ffb7 	bl	8000400 <SSD1306_GotoXY>
    	SSD1306_Puts ("M", &Font_7x10, 1);
 8004492:	2201      	movs	r2, #1
 8004494:	490a      	ldr	r1, [pc, #40]	; (80044c0 <Update_Display+0x3e8>)
 8004496:	480d      	ldr	r0, [pc, #52]	; (80044cc <Update_Display+0x3f4>)
 8004498:	f7fc f848 	bl	800052c <SSD1306_Puts>
    }

	SSD1306_UpdateScreen(); //display
 800449c:	f7fb ff0c 	bl	80002b8 <SSD1306_UpdateScreen>
}
 80044a0:	bf00      	nop
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	20000008 	.word	0x20000008
 80044ac:	08006e3c 	.word	0x08006e3c
 80044b0:	002d2d2d 	.word	0x002d2d2d
 80044b4:	20000010 	.word	0x20000010
 80044b8:	08006e20 	.word	0x08006e20
 80044bc:	08006e48 	.word	0x08006e48
 80044c0:	20000000 	.word	0x20000000
 80044c4:	08006e54 	.word	0x08006e54
 80044c8:	200004ac 	.word	0x200004ac
 80044cc:	08006e58 	.word	0x08006e58

080044d0 <Manage_Button>:

void Manage_Button()
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
	static uint32_t time_BpUp=0;
	static uint32_t time_BpDown=0;
	static uint32_t time_BpOk=0;

	//UP
	if(!HAL_GPIO_ReadPin(T1_GPIO_Port, T1_Pin))
 80044d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80044d8:	484a      	ldr	r0, [pc, #296]	; (8004604 <Manage_Button+0x134>)
 80044da:	f7fd f9ef 	bl	80018bc <HAL_GPIO_ReadPin>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d126      	bne.n	8004532 <Manage_Button+0x62>
	{
		if(Bp_Up==BP_OFF)
 80044e4:	4b48      	ldr	r3, [pc, #288]	; (8004608 <Manage_Button+0x138>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d108      	bne.n	80044fe <Manage_Button+0x2e>
		{
			Bp_Up=BP_CLICK;
 80044ec:	4b46      	ldr	r3, [pc, #280]	; (8004608 <Manage_Button+0x138>)
 80044ee:	2201      	movs	r2, #1
 80044f0:	701a      	strb	r2, [r3, #0]
			time_BpUp = HAL_GetTick();
 80044f2:	f7fc faf1 	bl	8000ad8 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	4b44      	ldr	r3, [pc, #272]	; (800460c <Manage_Button+0x13c>)
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	e01c      	b.n	8004538 <Manage_Button+0x68>
		}
		else if((HAL_GetTick() > time_BpUp+TIME_LONG_BP) && Bp_Up==BP_IDLE)
 80044fe:	f7fc faeb 	bl	8000ad8 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	4b41      	ldr	r3, [pc, #260]	; (800460c <Manage_Button+0x13c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800450c:	429a      	cmp	r2, r3
 800450e:	d90c      	bls.n	800452a <Manage_Button+0x5a>
 8004510:	4b3d      	ldr	r3, [pc, #244]	; (8004608 <Manage_Button+0x138>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b03      	cmp	r3, #3
 8004516:	d108      	bne.n	800452a <Manage_Button+0x5a>
		{
			time_BpUp = HAL_GetTick();
 8004518:	f7fc fade 	bl	8000ad8 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	4b3b      	ldr	r3, [pc, #236]	; (800460c <Manage_Button+0x13c>)
 8004520:	601a      	str	r2, [r3, #0]
			Bp_Up=BP_1s;
 8004522:	4b39      	ldr	r3, [pc, #228]	; (8004608 <Manage_Button+0x138>)
 8004524:	2202      	movs	r2, #2
 8004526:	701a      	strb	r2, [r3, #0]
 8004528:	e006      	b.n	8004538 <Manage_Button+0x68>
		}
		else
			Bp_Up = BP_IDLE;
 800452a:	4b37      	ldr	r3, [pc, #220]	; (8004608 <Manage_Button+0x138>)
 800452c:	2203      	movs	r2, #3
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	e002      	b.n	8004538 <Manage_Button+0x68>
	}
	else
		Bp_Up=BP_OFF;
 8004532:	4b35      	ldr	r3, [pc, #212]	; (8004608 <Manage_Button+0x138>)
 8004534:	2200      	movs	r2, #0
 8004536:	701a      	strb	r2, [r3, #0]

	//DOWN
	if(!HAL_GPIO_ReadPin(T3_GPIO_Port, T3_Pin))
 8004538:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800453c:	4834      	ldr	r0, [pc, #208]	; (8004610 <Manage_Button+0x140>)
 800453e:	f7fd f9bd 	bl	80018bc <HAL_GPIO_ReadPin>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d126      	bne.n	8004596 <Manage_Button+0xc6>
	{
		if(Bp_Down==BP_OFF)
 8004548:	4b32      	ldr	r3, [pc, #200]	; (8004614 <Manage_Button+0x144>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d108      	bne.n	8004562 <Manage_Button+0x92>
		{
			Bp_Down=BP_CLICK;
 8004550:	4b30      	ldr	r3, [pc, #192]	; (8004614 <Manage_Button+0x144>)
 8004552:	2201      	movs	r2, #1
 8004554:	701a      	strb	r2, [r3, #0]
			time_BpDown = HAL_GetTick();
 8004556:	f7fc fabf 	bl	8000ad8 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	4b2e      	ldr	r3, [pc, #184]	; (8004618 <Manage_Button+0x148>)
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	e01c      	b.n	800459c <Manage_Button+0xcc>
		}
		else if((HAL_GetTick() > time_BpDown+TIME_LONG_BP) && Bp_Down==BP_IDLE)
 8004562:	f7fc fab9 	bl	8000ad8 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	4b2b      	ldr	r3, [pc, #172]	; (8004618 <Manage_Button+0x148>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004570:	429a      	cmp	r2, r3
 8004572:	d90c      	bls.n	800458e <Manage_Button+0xbe>
 8004574:	4b27      	ldr	r3, [pc, #156]	; (8004614 <Manage_Button+0x144>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b03      	cmp	r3, #3
 800457a:	d108      	bne.n	800458e <Manage_Button+0xbe>
		{
			time_BpDown = HAL_GetTick();
 800457c:	f7fc faac 	bl	8000ad8 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	4b25      	ldr	r3, [pc, #148]	; (8004618 <Manage_Button+0x148>)
 8004584:	601a      	str	r2, [r3, #0]
			Bp_Down=BP_1s;
 8004586:	4b23      	ldr	r3, [pc, #140]	; (8004614 <Manage_Button+0x144>)
 8004588:	2202      	movs	r2, #2
 800458a:	701a      	strb	r2, [r3, #0]
 800458c:	e006      	b.n	800459c <Manage_Button+0xcc>
		}
		else
			Bp_Down = BP_IDLE;
 800458e:	4b21      	ldr	r3, [pc, #132]	; (8004614 <Manage_Button+0x144>)
 8004590:	2203      	movs	r2, #3
 8004592:	701a      	strb	r2, [r3, #0]
 8004594:	e002      	b.n	800459c <Manage_Button+0xcc>
	}
	else
		Bp_Down=BP_OFF;
 8004596:	4b1f      	ldr	r3, [pc, #124]	; (8004614 <Manage_Button+0x144>)
 8004598:	2200      	movs	r2, #0
 800459a:	701a      	strb	r2, [r3, #0]

	//OK
	if(!HAL_GPIO_ReadPin(T2_GPIO_Port, T2_Pin))
 800459c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045a0:	481b      	ldr	r0, [pc, #108]	; (8004610 <Manage_Button+0x140>)
 80045a2:	f7fd f98b 	bl	80018bc <HAL_GPIO_ReadPin>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d126      	bne.n	80045fa <Manage_Button+0x12a>
	{
		if(Bp_Ok==BP_OFF)
 80045ac:	4b1b      	ldr	r3, [pc, #108]	; (800461c <Manage_Button+0x14c>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d108      	bne.n	80045c6 <Manage_Button+0xf6>
		{
			Bp_Ok=BP_CLICK;
 80045b4:	4b19      	ldr	r3, [pc, #100]	; (800461c <Manage_Button+0x14c>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	701a      	strb	r2, [r3, #0]
			time_BpOk = HAL_GetTick();
 80045ba:	f7fc fa8d 	bl	8000ad8 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	4b17      	ldr	r3, [pc, #92]	; (8004620 <Manage_Button+0x150>)
 80045c2:	601a      	str	r2, [r3, #0]
		else
			Bp_Ok = BP_IDLE;
	}
	else
		Bp_Ok=BP_OFF;
}
 80045c4:	e01c      	b.n	8004600 <Manage_Button+0x130>
		else if((HAL_GetTick()>time_BpOk+TIME_LONG_BP) && Bp_Ok==BP_IDLE)
 80045c6:	f7fc fa87 	bl	8000ad8 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	4b14      	ldr	r3, [pc, #80]	; (8004620 <Manage_Button+0x150>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d90c      	bls.n	80045f2 <Manage_Button+0x122>
 80045d8:	4b10      	ldr	r3, [pc, #64]	; (800461c <Manage_Button+0x14c>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d108      	bne.n	80045f2 <Manage_Button+0x122>
			time_BpOk = HAL_GetTick();
 80045e0:	f7fc fa7a 	bl	8000ad8 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	4b0e      	ldr	r3, [pc, #56]	; (8004620 <Manage_Button+0x150>)
 80045e8:	601a      	str	r2, [r3, #0]
			Bp_Ok=BP_1s;
 80045ea:	4b0c      	ldr	r3, [pc, #48]	; (800461c <Manage_Button+0x14c>)
 80045ec:	2202      	movs	r2, #2
 80045ee:	701a      	strb	r2, [r3, #0]
}
 80045f0:	e006      	b.n	8004600 <Manage_Button+0x130>
			Bp_Ok = BP_IDLE;
 80045f2:	4b0a      	ldr	r3, [pc, #40]	; (800461c <Manage_Button+0x14c>)
 80045f4:	2203      	movs	r2, #3
 80045f6:	701a      	strb	r2, [r3, #0]
}
 80045f8:	e002      	b.n	8004600 <Manage_Button+0x130>
		Bp_Ok=BP_OFF;
 80045fa:	4b08      	ldr	r3, [pc, #32]	; (800461c <Manage_Button+0x14c>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	701a      	strb	r2, [r3, #0]
}
 8004600:	bf00      	nop
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40011000 	.word	0x40011000
 8004608:	200009d0 	.word	0x200009d0
 800460c:	200004b0 	.word	0x200004b0
 8004610:	40010c00 	.word	0x40010c00
 8004614:	20000980 	.word	0x20000980
 8004618:	200004b4 	.word	0x200004b4
 800461c:	200009b8 	.word	0x200009b8
 8004620:	200004b8 	.word	0x200004b8

08004624 <AppLEDTask>:

void AppLEDTask()
{
 8004624:	b590      	push	{r4, r7, lr}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
	uint8_t temp_strob_value =0;
 800462a:	2300      	movs	r3, #0
 800462c:	71fb      	strb	r3, [r7, #7]
	uint8_t rand_value=0;
 800462e:	2300      	movs	r3, #0
 8004630:	717b      	strb	r3, [r7, #5]
	int32_t calcul;

	static uint32_t cpt_strob=0;

	//Mean value calculation
	Mean_Value = MeanArray(Current_Value,10);
 8004632:	210a      	movs	r1, #10
 8004634:	48b3      	ldr	r0, [pc, #716]	; (8004904 <AppLEDTask+0x2e0>)
 8004636:	f7ff fc35 	bl	8003ea4 <MeanArray>
 800463a:	4603      	mov	r3, r0
 800463c:	461a      	mov	r2, r3
 800463e:	4bb2      	ldr	r3, [pc, #712]	; (8004908 <AppLEDTask+0x2e4>)
 8004640:	701a      	strb	r2, [r3, #0]

	if(Current_Mode == MODE_OFF)
 8004642:	4bb2      	ldr	r3, [pc, #712]	; (800490c <AppLEDTask+0x2e8>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d128      	bne.n	800469c <AppLEDTask+0x78>
	{
		Current_Value[0]=0;
 800464a:	4bae      	ldr	r3, [pc, #696]	; (8004904 <AppLEDTask+0x2e0>)
 800464c:	2200      	movs	r2, #0
 800464e:	701a      	strb	r2, [r3, #0]
		Current_Value[1]=0;
 8004650:	4bac      	ldr	r3, [pc, #688]	; (8004904 <AppLEDTask+0x2e0>)
 8004652:	2200      	movs	r2, #0
 8004654:	705a      	strb	r2, [r3, #1]
		Current_Value[2]=0;
 8004656:	4bab      	ldr	r3, [pc, #684]	; (8004904 <AppLEDTask+0x2e0>)
 8004658:	2200      	movs	r2, #0
 800465a:	709a      	strb	r2, [r3, #2]
		Current_Value[3]=0;
 800465c:	4ba9      	ldr	r3, [pc, #676]	; (8004904 <AppLEDTask+0x2e0>)
 800465e:	2200      	movs	r2, #0
 8004660:	70da      	strb	r2, [r3, #3]
		Current_Value[4]=0;
 8004662:	4ba8      	ldr	r3, [pc, #672]	; (8004904 <AppLEDTask+0x2e0>)
 8004664:	2200      	movs	r2, #0
 8004666:	711a      	strb	r2, [r3, #4]
		Current_Value[5]=0;
 8004668:	4ba6      	ldr	r3, [pc, #664]	; (8004904 <AppLEDTask+0x2e0>)
 800466a:	2200      	movs	r2, #0
 800466c:	715a      	strb	r2, [r3, #5]
		Current_Value[6]=0;
 800466e:	4ba5      	ldr	r3, [pc, #660]	; (8004904 <AppLEDTask+0x2e0>)
 8004670:	2200      	movs	r2, #0
 8004672:	719a      	strb	r2, [r3, #6]
		Current_Value[7]=0;
 8004674:	4ba3      	ldr	r3, [pc, #652]	; (8004904 <AppLEDTask+0x2e0>)
 8004676:	2200      	movs	r2, #0
 8004678:	71da      	strb	r2, [r3, #7]
		Current_Value[8]=0;
 800467a:	4ba2      	ldr	r3, [pc, #648]	; (8004904 <AppLEDTask+0x2e0>)
 800467c:	2200      	movs	r2, #0
 800467e:	721a      	strb	r2, [r3, #8]
		Current_Value[9]=0;
 8004680:	4ba0      	ldr	r3, [pc, #640]	; (8004904 <AppLEDTask+0x2e0>)
 8004682:	2200      	movs	r2, #0
 8004684:	725a      	strb	r2, [r3, #9]

		Speed_value=0;
 8004686:	4ba2      	ldr	r3, [pc, #648]	; (8004910 <AppLEDTask+0x2ec>)
 8004688:	2200      	movs	r2, #0
 800468a:	701a      	strb	r2, [r3, #0]
		Strob_value_Full=0;
 800468c:	4ba1      	ldr	r3, [pc, #644]	; (8004914 <AppLEDTask+0x2f0>)
 800468e:	2200      	movs	r2, #0
 8004690:	701a      	strb	r2, [r3, #0]
		Strob_value_Rand=0;
 8004692:	4ba1      	ldr	r3, [pc, #644]	; (8004918 <AppLEDTask+0x2f4>)
 8004694:	2200      	movs	r2, #0
 8004696:	701a      	strb	r2, [r3, #0]
			PWM_SetDutyAdapt(LED10_pwmtimer,LED10_PWMchannel,(uint32_t)Current_Value[9]);
			cpt_strob=0;
		}

	}
}
 8004698:	f000 bc72 	b.w	8004f80 <AppLEDTask+0x95c>
	else if(Current_Mode == MODE_MANU)
 800469c:	4b9b      	ldr	r3, [pc, #620]	; (800490c <AppLEDTask+0x2e8>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	f040 80a0 	bne.w	80047e6 <AppLEDTask+0x1c2>
		Current_Value[0]=(uint32_t)(Manu_value*255/100);
 80046a6:	4b9d      	ldr	r3, [pc, #628]	; (800491c <AppLEDTask+0x2f8>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	4613      	mov	r3, r2
 80046ae:	021b      	lsls	r3, r3, #8
 80046b0:	1a9b      	subs	r3, r3, r2
 80046b2:	4a9b      	ldr	r2, [pc, #620]	; (8004920 <AppLEDTask+0x2fc>)
 80046b4:	fb82 1203 	smull	r1, r2, r2, r3
 80046b8:	1152      	asrs	r2, r2, #5
 80046ba:	17db      	asrs	r3, r3, #31
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	4b90      	ldr	r3, [pc, #576]	; (8004904 <AppLEDTask+0x2e0>)
 80046c2:	701a      	strb	r2, [r3, #0]
		Current_Value[1]=(uint32_t)(Manu_value*255/100);
 80046c4:	4b95      	ldr	r3, [pc, #596]	; (800491c <AppLEDTask+0x2f8>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	461a      	mov	r2, r3
 80046ca:	4613      	mov	r3, r2
 80046cc:	021b      	lsls	r3, r3, #8
 80046ce:	1a9b      	subs	r3, r3, r2
 80046d0:	4a93      	ldr	r2, [pc, #588]	; (8004920 <AppLEDTask+0x2fc>)
 80046d2:	fb82 1203 	smull	r1, r2, r2, r3
 80046d6:	1152      	asrs	r2, r2, #5
 80046d8:	17db      	asrs	r3, r3, #31
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	4b89      	ldr	r3, [pc, #548]	; (8004904 <AppLEDTask+0x2e0>)
 80046e0:	705a      	strb	r2, [r3, #1]
		Current_Value[2]=(uint32_t)(Manu_value*255/100);
 80046e2:	4b8e      	ldr	r3, [pc, #568]	; (800491c <AppLEDTask+0x2f8>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	461a      	mov	r2, r3
 80046e8:	4613      	mov	r3, r2
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	1a9b      	subs	r3, r3, r2
 80046ee:	4a8c      	ldr	r2, [pc, #560]	; (8004920 <AppLEDTask+0x2fc>)
 80046f0:	fb82 1203 	smull	r1, r2, r2, r3
 80046f4:	1152      	asrs	r2, r2, #5
 80046f6:	17db      	asrs	r3, r3, #31
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	4b81      	ldr	r3, [pc, #516]	; (8004904 <AppLEDTask+0x2e0>)
 80046fe:	709a      	strb	r2, [r3, #2]
		Current_Value[3]=(uint32_t)(Manu_value*255/100);
 8004700:	4b86      	ldr	r3, [pc, #536]	; (800491c <AppLEDTask+0x2f8>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	4613      	mov	r3, r2
 8004708:	021b      	lsls	r3, r3, #8
 800470a:	1a9b      	subs	r3, r3, r2
 800470c:	4a84      	ldr	r2, [pc, #528]	; (8004920 <AppLEDTask+0x2fc>)
 800470e:	fb82 1203 	smull	r1, r2, r2, r3
 8004712:	1152      	asrs	r2, r2, #5
 8004714:	17db      	asrs	r3, r3, #31
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	b2da      	uxtb	r2, r3
 800471a:	4b7a      	ldr	r3, [pc, #488]	; (8004904 <AppLEDTask+0x2e0>)
 800471c:	70da      	strb	r2, [r3, #3]
		Current_Value[4]=(uint32_t)(Manu_value*255/100);
 800471e:	4b7f      	ldr	r3, [pc, #508]	; (800491c <AppLEDTask+0x2f8>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	461a      	mov	r2, r3
 8004724:	4613      	mov	r3, r2
 8004726:	021b      	lsls	r3, r3, #8
 8004728:	1a9b      	subs	r3, r3, r2
 800472a:	4a7d      	ldr	r2, [pc, #500]	; (8004920 <AppLEDTask+0x2fc>)
 800472c:	fb82 1203 	smull	r1, r2, r2, r3
 8004730:	1152      	asrs	r2, r2, #5
 8004732:	17db      	asrs	r3, r3, #31
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	b2da      	uxtb	r2, r3
 8004738:	4b72      	ldr	r3, [pc, #456]	; (8004904 <AppLEDTask+0x2e0>)
 800473a:	711a      	strb	r2, [r3, #4]
		Current_Value[5]=(uint32_t)(Manu_value*255/100);
 800473c:	4b77      	ldr	r3, [pc, #476]	; (800491c <AppLEDTask+0x2f8>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	461a      	mov	r2, r3
 8004742:	4613      	mov	r3, r2
 8004744:	021b      	lsls	r3, r3, #8
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	4a75      	ldr	r2, [pc, #468]	; (8004920 <AppLEDTask+0x2fc>)
 800474a:	fb82 1203 	smull	r1, r2, r2, r3
 800474e:	1152      	asrs	r2, r2, #5
 8004750:	17db      	asrs	r3, r3, #31
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	b2da      	uxtb	r2, r3
 8004756:	4b6b      	ldr	r3, [pc, #428]	; (8004904 <AppLEDTask+0x2e0>)
 8004758:	715a      	strb	r2, [r3, #5]
		Current_Value[6]=(uint32_t)(Manu_value*255/100);
 800475a:	4b70      	ldr	r3, [pc, #448]	; (800491c <AppLEDTask+0x2f8>)
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	4613      	mov	r3, r2
 8004762:	021b      	lsls	r3, r3, #8
 8004764:	1a9b      	subs	r3, r3, r2
 8004766:	4a6e      	ldr	r2, [pc, #440]	; (8004920 <AppLEDTask+0x2fc>)
 8004768:	fb82 1203 	smull	r1, r2, r2, r3
 800476c:	1152      	asrs	r2, r2, #5
 800476e:	17db      	asrs	r3, r3, #31
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	b2da      	uxtb	r2, r3
 8004774:	4b63      	ldr	r3, [pc, #396]	; (8004904 <AppLEDTask+0x2e0>)
 8004776:	719a      	strb	r2, [r3, #6]
		Current_Value[7]=(uint32_t)(Manu_value*255/100);
 8004778:	4b68      	ldr	r3, [pc, #416]	; (800491c <AppLEDTask+0x2f8>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	4613      	mov	r3, r2
 8004780:	021b      	lsls	r3, r3, #8
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	4a66      	ldr	r2, [pc, #408]	; (8004920 <AppLEDTask+0x2fc>)
 8004786:	fb82 1203 	smull	r1, r2, r2, r3
 800478a:	1152      	asrs	r2, r2, #5
 800478c:	17db      	asrs	r3, r3, #31
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	b2da      	uxtb	r2, r3
 8004792:	4b5c      	ldr	r3, [pc, #368]	; (8004904 <AppLEDTask+0x2e0>)
 8004794:	71da      	strb	r2, [r3, #7]
		Current_Value[8]=(uint32_t)(Manu_value*255/100);
 8004796:	4b61      	ldr	r3, [pc, #388]	; (800491c <AppLEDTask+0x2f8>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	4613      	mov	r3, r2
 800479e:	021b      	lsls	r3, r3, #8
 80047a0:	1a9b      	subs	r3, r3, r2
 80047a2:	4a5f      	ldr	r2, [pc, #380]	; (8004920 <AppLEDTask+0x2fc>)
 80047a4:	fb82 1203 	smull	r1, r2, r2, r3
 80047a8:	1152      	asrs	r2, r2, #5
 80047aa:	17db      	asrs	r3, r3, #31
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	4b54      	ldr	r3, [pc, #336]	; (8004904 <AppLEDTask+0x2e0>)
 80047b2:	721a      	strb	r2, [r3, #8]
		Current_Value[9]=(uint32_t)(Manu_value*255/100);
 80047b4:	4b59      	ldr	r3, [pc, #356]	; (800491c <AppLEDTask+0x2f8>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	4613      	mov	r3, r2
 80047bc:	021b      	lsls	r3, r3, #8
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	4a57      	ldr	r2, [pc, #348]	; (8004920 <AppLEDTask+0x2fc>)
 80047c2:	fb82 1203 	smull	r1, r2, r2, r3
 80047c6:	1152      	asrs	r2, r2, #5
 80047c8:	17db      	asrs	r3, r3, #31
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	4b4d      	ldr	r3, [pc, #308]	; (8004904 <AppLEDTask+0x2e0>)
 80047d0:	725a      	strb	r2, [r3, #9]
		Speed_value=0;
 80047d2:	4b4f      	ldr	r3, [pc, #316]	; (8004910 <AppLEDTask+0x2ec>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	701a      	strb	r2, [r3, #0]
		Strob_value_Full=0;
 80047d8:	4b4e      	ldr	r3, [pc, #312]	; (8004914 <AppLEDTask+0x2f0>)
 80047da:	2200      	movs	r2, #0
 80047dc:	701a      	strb	r2, [r3, #0]
		Strob_value_Rand=0;
 80047de:	4b4e      	ldr	r3, [pc, #312]	; (8004918 <AppLEDTask+0x2f4>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	701a      	strb	r2, [r3, #0]
}
 80047e4:	e3cc      	b.n	8004f80 <AppLEDTask+0x95c>
		if(HAL_GetTick()>Protocol_DMX_GetLastTickFrame()+TIMOUT_DMX_SIGNAL)
 80047e6:	f7fc f977 	bl	8000ad8 <HAL_GetTick>
 80047ea:	4604      	mov	r4, r0
 80047ec:	f7ff f982 	bl	8003af4 <Protocol_DMX_GetLastTickFrame>
 80047f0:	4603      	mov	r3, r0
 80047f2:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80047f6:	429c      	cmp	r4, r3
 80047f8:	d92a      	bls.n	8004850 <AppLEDTask+0x22c>
			Current_Value[0]=0;
 80047fa:	4b42      	ldr	r3, [pc, #264]	; (8004904 <AppLEDTask+0x2e0>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]
			Current_Value[1]=0;
 8004800:	4b40      	ldr	r3, [pc, #256]	; (8004904 <AppLEDTask+0x2e0>)
 8004802:	2200      	movs	r2, #0
 8004804:	705a      	strb	r2, [r3, #1]
			Current_Value[2]=0;
 8004806:	4b3f      	ldr	r3, [pc, #252]	; (8004904 <AppLEDTask+0x2e0>)
 8004808:	2200      	movs	r2, #0
 800480a:	709a      	strb	r2, [r3, #2]
			Current_Value[3]=0;
 800480c:	4b3d      	ldr	r3, [pc, #244]	; (8004904 <AppLEDTask+0x2e0>)
 800480e:	2200      	movs	r2, #0
 8004810:	70da      	strb	r2, [r3, #3]
			Current_Value[4]=0;
 8004812:	4b3c      	ldr	r3, [pc, #240]	; (8004904 <AppLEDTask+0x2e0>)
 8004814:	2200      	movs	r2, #0
 8004816:	711a      	strb	r2, [r3, #4]
			Current_Value[5]=0;
 8004818:	4b3a      	ldr	r3, [pc, #232]	; (8004904 <AppLEDTask+0x2e0>)
 800481a:	2200      	movs	r2, #0
 800481c:	715a      	strb	r2, [r3, #5]
			Current_Value[6]=0;
 800481e:	4b39      	ldr	r3, [pc, #228]	; (8004904 <AppLEDTask+0x2e0>)
 8004820:	2200      	movs	r2, #0
 8004822:	719a      	strb	r2, [r3, #6]
			Current_Value[7]=0;
 8004824:	4b37      	ldr	r3, [pc, #220]	; (8004904 <AppLEDTask+0x2e0>)
 8004826:	2200      	movs	r2, #0
 8004828:	71da      	strb	r2, [r3, #7]
			Current_Value[8]=0;
 800482a:	4b36      	ldr	r3, [pc, #216]	; (8004904 <AppLEDTask+0x2e0>)
 800482c:	2200      	movs	r2, #0
 800482e:	721a      	strb	r2, [r3, #8]
			Current_Value[9]=0;
 8004830:	4b34      	ldr	r3, [pc, #208]	; (8004904 <AppLEDTask+0x2e0>)
 8004832:	2200      	movs	r2, #0
 8004834:	725a      	strb	r2, [r3, #9]
			Speed_value=0;
 8004836:	4b36      	ldr	r3, [pc, #216]	; (8004910 <AppLEDTask+0x2ec>)
 8004838:	2200      	movs	r2, #0
 800483a:	701a      	strb	r2, [r3, #0]
			Strob_value_Full=0;
 800483c:	4b35      	ldr	r3, [pc, #212]	; (8004914 <AppLEDTask+0x2f0>)
 800483e:	2200      	movs	r2, #0
 8004840:	701a      	strb	r2, [r3, #0]
			Strob_value_Rand=0;
 8004842:	4b35      	ldr	r3, [pc, #212]	; (8004918 <AppLEDTask+0x2f4>)
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]
			DMX_signal_OK = __FALSE;
 8004848:	4b36      	ldr	r3, [pc, #216]	; (8004924 <AppLEDTask+0x300>)
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	e0f8      	b.n	8004a42 <AppLEDTask+0x41e>
			Speed_value=Protocol_DMX_GetValue(12);
 8004850:	200c      	movs	r0, #12
 8004852:	f7ff f937 	bl	8003ac4 <Protocol_DMX_GetValue>
 8004856:	4603      	mov	r3, r0
 8004858:	461a      	mov	r2, r3
 800485a:	4b2d      	ldr	r3, [pc, #180]	; (8004910 <AppLEDTask+0x2ec>)
 800485c:	701a      	strb	r2, [r3, #0]
			temp_strob_value=Protocol_DMX_GetValue(11);
 800485e:	200b      	movs	r0, #11
 8004860:	f7ff f930 	bl	8003ac4 <Protocol_DMX_GetValue>
 8004864:	4603      	mov	r3, r0
 8004866:	71fb      	strb	r3, [r7, #7]
			if(Speed_value==0)		//Instant
 8004868:	4b29      	ldr	r3, [pc, #164]	; (8004910 <AppLEDTask+0x2ec>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d146      	bne.n	80048fe <AppLEDTask+0x2da>
				Current_Value[0] = Protocol_DMX_GetValue(1);									//CHANNEL 1
 8004870:	2001      	movs	r0, #1
 8004872:	f7ff f927 	bl	8003ac4 <Protocol_DMX_GetValue>
 8004876:	4603      	mov	r3, r0
 8004878:	461a      	mov	r2, r3
 800487a:	4b22      	ldr	r3, [pc, #136]	; (8004904 <AppLEDTask+0x2e0>)
 800487c:	701a      	strb	r2, [r3, #0]
				Current_Value[1] = Protocol_DMX_GetValue(2);									//CHANNEL 2
 800487e:	2002      	movs	r0, #2
 8004880:	f7ff f920 	bl	8003ac4 <Protocol_DMX_GetValue>
 8004884:	4603      	mov	r3, r0
 8004886:	461a      	mov	r2, r3
 8004888:	4b1e      	ldr	r3, [pc, #120]	; (8004904 <AppLEDTask+0x2e0>)
 800488a:	705a      	strb	r2, [r3, #1]
				Current_Value[2] = Protocol_DMX_GetValue(3);									//CHANNEL 3
 800488c:	2003      	movs	r0, #3
 800488e:	f7ff f919 	bl	8003ac4 <Protocol_DMX_GetValue>
 8004892:	4603      	mov	r3, r0
 8004894:	461a      	mov	r2, r3
 8004896:	4b1b      	ldr	r3, [pc, #108]	; (8004904 <AppLEDTask+0x2e0>)
 8004898:	709a      	strb	r2, [r3, #2]
				Current_Value[3] = Protocol_DMX_GetValue(4);									//CHANNEL 4
 800489a:	2004      	movs	r0, #4
 800489c:	f7ff f912 	bl	8003ac4 <Protocol_DMX_GetValue>
 80048a0:	4603      	mov	r3, r0
 80048a2:	461a      	mov	r2, r3
 80048a4:	4b17      	ldr	r3, [pc, #92]	; (8004904 <AppLEDTask+0x2e0>)
 80048a6:	70da      	strb	r2, [r3, #3]
				Current_Value[4] = Protocol_DMX_GetValue(5);									//CHANNEL 5
 80048a8:	2005      	movs	r0, #5
 80048aa:	f7ff f90b 	bl	8003ac4 <Protocol_DMX_GetValue>
 80048ae:	4603      	mov	r3, r0
 80048b0:	461a      	mov	r2, r3
 80048b2:	4b14      	ldr	r3, [pc, #80]	; (8004904 <AppLEDTask+0x2e0>)
 80048b4:	711a      	strb	r2, [r3, #4]
				Current_Value[5] = Protocol_DMX_GetValue(6);									//CHANNEL 6
 80048b6:	2006      	movs	r0, #6
 80048b8:	f7ff f904 	bl	8003ac4 <Protocol_DMX_GetValue>
 80048bc:	4603      	mov	r3, r0
 80048be:	461a      	mov	r2, r3
 80048c0:	4b10      	ldr	r3, [pc, #64]	; (8004904 <AppLEDTask+0x2e0>)
 80048c2:	715a      	strb	r2, [r3, #5]
				Current_Value[6] = Protocol_DMX_GetValue(7);									//CHANNEL 7
 80048c4:	2007      	movs	r0, #7
 80048c6:	f7ff f8fd 	bl	8003ac4 <Protocol_DMX_GetValue>
 80048ca:	4603      	mov	r3, r0
 80048cc:	461a      	mov	r2, r3
 80048ce:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <AppLEDTask+0x2e0>)
 80048d0:	719a      	strb	r2, [r3, #6]
				Current_Value[7] = Protocol_DMX_GetValue(8);									//CHANNEL 8
 80048d2:	2008      	movs	r0, #8
 80048d4:	f7ff f8f6 	bl	8003ac4 <Protocol_DMX_GetValue>
 80048d8:	4603      	mov	r3, r0
 80048da:	461a      	mov	r2, r3
 80048dc:	4b09      	ldr	r3, [pc, #36]	; (8004904 <AppLEDTask+0x2e0>)
 80048de:	71da      	strb	r2, [r3, #7]
				Current_Value[8] = Protocol_DMX_GetValue(9);									//CHANNEL 9
 80048e0:	2009      	movs	r0, #9
 80048e2:	f7ff f8ef 	bl	8003ac4 <Protocol_DMX_GetValue>
 80048e6:	4603      	mov	r3, r0
 80048e8:	461a      	mov	r2, r3
 80048ea:	4b06      	ldr	r3, [pc, #24]	; (8004904 <AppLEDTask+0x2e0>)
 80048ec:	721a      	strb	r2, [r3, #8]
				Current_Value[9] = Protocol_DMX_GetValue(10);									//CHANNEL 10
 80048ee:	200a      	movs	r0, #10
 80048f0:	f7ff f8e8 	bl	8003ac4 <Protocol_DMX_GetValue>
 80048f4:	4603      	mov	r3, r0
 80048f6:	461a      	mov	r2, r3
 80048f8:	4b02      	ldr	r3, [pc, #8]	; (8004904 <AppLEDTask+0x2e0>)
 80048fa:	725a      	strb	r2, [r3, #9]
 80048fc:	e08b      	b.n	8004a16 <AppLEDTask+0x3f2>
				for (uint8_t i =0 ;i<10; i++)
 80048fe:	2300      	movs	r3, #0
 8004900:	71bb      	strb	r3, [r7, #6]
 8004902:	e085      	b.n	8004a10 <AppLEDTask+0x3ec>
 8004904:	20000954 	.word	0x20000954
 8004908:	20000969 	.word	0x20000969
 800490c:	2000099c 	.word	0x2000099c
 8004910:	200009d8 	.word	0x200009d8
 8004914:	20000990 	.word	0x20000990
 8004918:	2000096a 	.word	0x2000096a
 800491c:	20000970 	.word	0x20000970
 8004920:	51eb851f 	.word	0x51eb851f
 8004924:	20000971 	.word	0x20000971
					if(Current_Value[i]<Protocol_DMX_GetValue(i+1))
 8004928:	79bb      	ldrb	r3, [r7, #6]
 800492a:	4aa6      	ldr	r2, [pc, #664]	; (8004bc4 <AppLEDTask+0x5a0>)
 800492c:	5cd4      	ldrb	r4, [r2, r3]
 800492e:	79bb      	ldrb	r3, [r7, #6]
 8004930:	3301      	adds	r3, #1
 8004932:	b2db      	uxtb	r3, r3
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff f8c5 	bl	8003ac4 <Protocol_DMX_GetValue>
 800493a:	4603      	mov	r3, r0
 800493c:	429c      	cmp	r4, r3
 800493e:	d22c      	bcs.n	800499a <AppLEDTask+0x376>
						calcul=Current_Value[i]+(260-Speed_value)/5;
 8004940:	79bb      	ldrb	r3, [r7, #6]
 8004942:	4aa0      	ldr	r2, [pc, #640]	; (8004bc4 <AppLEDTask+0x5a0>)
 8004944:	5cd3      	ldrb	r3, [r2, r3]
 8004946:	4619      	mov	r1, r3
 8004948:	4b9f      	ldr	r3, [pc, #636]	; (8004bc8 <AppLEDTask+0x5a4>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	f5c3 7382 	rsb	r3, r3, #260	; 0x104
 8004950:	4a9e      	ldr	r2, [pc, #632]	; (8004bcc <AppLEDTask+0x5a8>)
 8004952:	fb82 0203 	smull	r0, r2, r2, r3
 8004956:	1052      	asrs	r2, r2, #1
 8004958:	17db      	asrs	r3, r3, #31
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	440b      	add	r3, r1
 800495e:	603b      	str	r3, [r7, #0]
						if(calcul>Protocol_DMX_GetValue(i+1))
 8004960:	79bb      	ldrb	r3, [r7, #6]
 8004962:	3301      	adds	r3, #1
 8004964:	b2db      	uxtb	r3, r3
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff f8ac 	bl	8003ac4 <Protocol_DMX_GetValue>
 800496c:	4603      	mov	r3, r0
 800496e:	461a      	mov	r2, r3
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	4293      	cmp	r3, r2
 8004974:	dd0b      	ble.n	800498e <AppLEDTask+0x36a>
							Current_Value[i]=Protocol_DMX_GetValue(i+1);
 8004976:	79bb      	ldrb	r3, [r7, #6]
 8004978:	3301      	adds	r3, #1
 800497a:	b2db      	uxtb	r3, r3
 800497c:	79bc      	ldrb	r4, [r7, #6]
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff f8a0 	bl	8003ac4 <Protocol_DMX_GetValue>
 8004984:	4603      	mov	r3, r0
 8004986:	461a      	mov	r2, r3
 8004988:	4b8e      	ldr	r3, [pc, #568]	; (8004bc4 <AppLEDTask+0x5a0>)
 800498a:	551a      	strb	r2, [r3, r4]
 800498c:	e03d      	b.n	8004a0a <AppLEDTask+0x3e6>
							Current_Value[i]=calcul;
 800498e:	79bb      	ldrb	r3, [r7, #6]
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	b2d1      	uxtb	r1, r2
 8004994:	4a8b      	ldr	r2, [pc, #556]	; (8004bc4 <AppLEDTask+0x5a0>)
 8004996:	54d1      	strb	r1, [r2, r3]
 8004998:	e037      	b.n	8004a0a <AppLEDTask+0x3e6>
					else if (Current_Value[i]>Protocol_DMX_GetValue(i+1))
 800499a:	79bb      	ldrb	r3, [r7, #6]
 800499c:	4a89      	ldr	r2, [pc, #548]	; (8004bc4 <AppLEDTask+0x5a0>)
 800499e:	5cd4      	ldrb	r4, [r2, r3]
 80049a0:	79bb      	ldrb	r3, [r7, #6]
 80049a2:	3301      	adds	r3, #1
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff f88c 	bl	8003ac4 <Protocol_DMX_GetValue>
 80049ac:	4603      	mov	r3, r0
 80049ae:	429c      	cmp	r4, r3
 80049b0:	d92b      	bls.n	8004a0a <AppLEDTask+0x3e6>
						calcul=Current_Value[i]-(260-Speed_value)/5;
 80049b2:	79bb      	ldrb	r3, [r7, #6]
 80049b4:	4a83      	ldr	r2, [pc, #524]	; (8004bc4 <AppLEDTask+0x5a0>)
 80049b6:	5cd3      	ldrb	r3, [r2, r3]
 80049b8:	4619      	mov	r1, r3
 80049ba:	4b83      	ldr	r3, [pc, #524]	; (8004bc8 <AppLEDTask+0x5a4>)
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	f5c3 7382 	rsb	r3, r3, #260	; 0x104
 80049c2:	4a82      	ldr	r2, [pc, #520]	; (8004bcc <AppLEDTask+0x5a8>)
 80049c4:	fb82 0203 	smull	r0, r2, r2, r3
 80049c8:	1052      	asrs	r2, r2, #1
 80049ca:	17db      	asrs	r3, r3, #31
 80049cc:	1a9b      	subs	r3, r3, r2
 80049ce:	440b      	add	r3, r1
 80049d0:	603b      	str	r3, [r7, #0]
						if(calcul<Protocol_DMX_GetValue(i+1))
 80049d2:	79bb      	ldrb	r3, [r7, #6]
 80049d4:	3301      	adds	r3, #1
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff f873 	bl	8003ac4 <Protocol_DMX_GetValue>
 80049de:	4603      	mov	r3, r0
 80049e0:	461a      	mov	r2, r3
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	4293      	cmp	r3, r2
 80049e6:	da0b      	bge.n	8004a00 <AppLEDTask+0x3dc>
							Current_Value[i]=Protocol_DMX_GetValue(i+1);
 80049e8:	79bb      	ldrb	r3, [r7, #6]
 80049ea:	3301      	adds	r3, #1
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	79bc      	ldrb	r4, [r7, #6]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff f867 	bl	8003ac4 <Protocol_DMX_GetValue>
 80049f6:	4603      	mov	r3, r0
 80049f8:	461a      	mov	r2, r3
 80049fa:	4b72      	ldr	r3, [pc, #456]	; (8004bc4 <AppLEDTask+0x5a0>)
 80049fc:	551a      	strb	r2, [r3, r4]
 80049fe:	e004      	b.n	8004a0a <AppLEDTask+0x3e6>
							Current_Value[i]=calcul;
 8004a00:	79bb      	ldrb	r3, [r7, #6]
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	b2d1      	uxtb	r1, r2
 8004a06:	4a6f      	ldr	r2, [pc, #444]	; (8004bc4 <AppLEDTask+0x5a0>)
 8004a08:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i =0 ;i<10; i++)
 8004a0a:	79bb      	ldrb	r3, [r7, #6]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	71bb      	strb	r3, [r7, #6]
 8004a10:	79bb      	ldrb	r3, [r7, #6]
 8004a12:	2b09      	cmp	r3, #9
 8004a14:	d988      	bls.n	8004928 <AppLEDTask+0x304>
			if(temp_strob_value>127)
 8004a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	da08      	bge.n	8004a30 <AppLEDTask+0x40c>
				Strob_value_Full=0;
 8004a1e:	4b6c      	ldr	r3, [pc, #432]	; (8004bd0 <AppLEDTask+0x5ac>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
				Strob_value_Rand=temp_strob_value-127;
 8004a24:	79fb      	ldrb	r3, [r7, #7]
 8004a26:	3b7f      	subs	r3, #127	; 0x7f
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	4b6a      	ldr	r3, [pc, #424]	; (8004bd4 <AppLEDTask+0x5b0>)
 8004a2c:	701a      	strb	r2, [r3, #0]
 8004a2e:	e005      	b.n	8004a3c <AppLEDTask+0x418>
				Strob_value_Full=temp_strob_value;
 8004a30:	4a67      	ldr	r2, [pc, #412]	; (8004bd0 <AppLEDTask+0x5ac>)
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	7013      	strb	r3, [r2, #0]
				Strob_value_Rand=0;
 8004a36:	4b67      	ldr	r3, [pc, #412]	; (8004bd4 <AppLEDTask+0x5b0>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	701a      	strb	r2, [r3, #0]
			DMX_signal_OK = __TRUE;
 8004a3c:	4b66      	ldr	r3, [pc, #408]	; (8004bd8 <AppLEDTask+0x5b4>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	701a      	strb	r2, [r3, #0]
		if(temp_strob_value>0)	//STROB
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 8233 	beq.w	8004eb0 <AppLEDTask+0x88c>
			if(Strob_value_Full>0 && cpt_strob>=(129-Strob_value_Full)/2)
 8004a4a:	4b61      	ldr	r3, [pc, #388]	; (8004bd0 <AppLEDTask+0x5ac>)
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d073      	beq.n	8004b3a <AppLEDTask+0x516>
 8004a52:	4b5f      	ldr	r3, [pc, #380]	; (8004bd0 <AppLEDTask+0x5ac>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	f1c3 0381 	rsb	r3, r3, #129	; 0x81
 8004a5a:	0fda      	lsrs	r2, r3, #31
 8004a5c:	4413      	add	r3, r2
 8004a5e:	105b      	asrs	r3, r3, #1
 8004a60:	461a      	mov	r2, r3
 8004a62:	4b5e      	ldr	r3, [pc, #376]	; (8004bdc <AppLEDTask+0x5b8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d867      	bhi.n	8004b3a <AppLEDTask+0x516>
				PWM_SetDutyAdapt(LED1_pwmtimer,LED1_PWMchannel,(uint32_t)Current_Value[0]);
 8004a6a:	4b5d      	ldr	r3, [pc, #372]	; (8004be0 <AppLEDTask+0x5bc>)
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	4b5d      	ldr	r3, [pc, #372]	; (8004be4 <AppLEDTask+0x5c0>)
 8004a70:	6819      	ldr	r1, [r3, #0]
 8004a72:	4b54      	ldr	r3, [pc, #336]	; (8004bc4 <AppLEDTask+0x5a0>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f7ff fa37 	bl	8003eec <PWM_SetDutyAdapt>
				PWM_SetDutyAdapt(LED2_pwmtimer,LED2_PWMchannel,(uint32_t)Current_Value[1]);
 8004a7e:	4b5a      	ldr	r3, [pc, #360]	; (8004be8 <AppLEDTask+0x5c4>)
 8004a80:	6818      	ldr	r0, [r3, #0]
 8004a82:	4b5a      	ldr	r3, [pc, #360]	; (8004bec <AppLEDTask+0x5c8>)
 8004a84:	6819      	ldr	r1, [r3, #0]
 8004a86:	4b4f      	ldr	r3, [pc, #316]	; (8004bc4 <AppLEDTask+0x5a0>)
 8004a88:	785b      	ldrb	r3, [r3, #1]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	f7ff fa2d 	bl	8003eec <PWM_SetDutyAdapt>
				PWM_SetDutyAdapt(LED3_pwmtimer,LED3_PWMchannel,(uint32_t)Current_Value[2]);
 8004a92:	4b57      	ldr	r3, [pc, #348]	; (8004bf0 <AppLEDTask+0x5cc>)
 8004a94:	6818      	ldr	r0, [r3, #0]
 8004a96:	4b57      	ldr	r3, [pc, #348]	; (8004bf4 <AppLEDTask+0x5d0>)
 8004a98:	6819      	ldr	r1, [r3, #0]
 8004a9a:	4b4a      	ldr	r3, [pc, #296]	; (8004bc4 <AppLEDTask+0x5a0>)
 8004a9c:	789b      	ldrb	r3, [r3, #2]
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	f7ff fa23 	bl	8003eec <PWM_SetDutyAdapt>
				PWM_SetDutyAdapt(LED4_pwmtimer,LED4_PWMchannel,(uint32_t)Current_Value[3]);
 8004aa6:	4b54      	ldr	r3, [pc, #336]	; (8004bf8 <AppLEDTask+0x5d4>)
 8004aa8:	6818      	ldr	r0, [r3, #0]
 8004aaa:	4b54      	ldr	r3, [pc, #336]	; (8004bfc <AppLEDTask+0x5d8>)
 8004aac:	6819      	ldr	r1, [r3, #0]
 8004aae:	4b45      	ldr	r3, [pc, #276]	; (8004bc4 <AppLEDTask+0x5a0>)
 8004ab0:	78db      	ldrb	r3, [r3, #3]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f7ff fa19 	bl	8003eec <PWM_SetDutyAdapt>
				PWM_SetDutyAdapt(LED5_pwmtimer,LED5_PWMchannel,(uint32_t)Current_Value[4]);
 8004aba:	4b51      	ldr	r3, [pc, #324]	; (8004c00 <AppLEDTask+0x5dc>)
 8004abc:	6818      	ldr	r0, [r3, #0]
 8004abe:	4b51      	ldr	r3, [pc, #324]	; (8004c04 <AppLEDTask+0x5e0>)
 8004ac0:	6819      	ldr	r1, [r3, #0]
 8004ac2:	4b40      	ldr	r3, [pc, #256]	; (8004bc4 <AppLEDTask+0x5a0>)
 8004ac4:	791b      	ldrb	r3, [r3, #4]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	f7ff fa0f 	bl	8003eec <PWM_SetDutyAdapt>
				PWM_SetDutyAdapt(LED6_pwmtimer,LED6_PWMchannel,(uint32_t)Current_Value[5]);
 8004ace:	4b4e      	ldr	r3, [pc, #312]	; (8004c08 <AppLEDTask+0x5e4>)
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	4b4e      	ldr	r3, [pc, #312]	; (8004c0c <AppLEDTask+0x5e8>)
 8004ad4:	6819      	ldr	r1, [r3, #0]
 8004ad6:	4b3b      	ldr	r3, [pc, #236]	; (8004bc4 <AppLEDTask+0x5a0>)
 8004ad8:	795b      	ldrb	r3, [r3, #5]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	461a      	mov	r2, r3
 8004ade:	f7ff fa05 	bl	8003eec <PWM_SetDutyAdapt>
				PWM_SetDutyAdapt(LED7_pwmtimer,LED7_PWMchannel,(uint32_t)Current_Value[6]);
 8004ae2:	4b4b      	ldr	r3, [pc, #300]	; (8004c10 <AppLEDTask+0x5ec>)
 8004ae4:	6818      	ldr	r0, [r3, #0]
 8004ae6:	4b4b      	ldr	r3, [pc, #300]	; (8004c14 <AppLEDTask+0x5f0>)
 8004ae8:	6819      	ldr	r1, [r3, #0]
 8004aea:	4b36      	ldr	r3, [pc, #216]	; (8004bc4 <AppLEDTask+0x5a0>)
 8004aec:	799b      	ldrb	r3, [r3, #6]
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	461a      	mov	r2, r3
 8004af2:	f7ff f9fb 	bl	8003eec <PWM_SetDutyAdapt>
				PWM_SetDutyAdapt(LED8_pwmtimer,LED8_PWMchannel,(uint32_t)Current_Value[7]);
 8004af6:	4b48      	ldr	r3, [pc, #288]	; (8004c18 <AppLEDTask+0x5f4>)
 8004af8:	6818      	ldr	r0, [r3, #0]
 8004afa:	4b48      	ldr	r3, [pc, #288]	; (8004c1c <AppLEDTask+0x5f8>)
 8004afc:	6819      	ldr	r1, [r3, #0]
 8004afe:	4b31      	ldr	r3, [pc, #196]	; (8004bc4 <AppLEDTask+0x5a0>)
 8004b00:	79db      	ldrb	r3, [r3, #7]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	461a      	mov	r2, r3
 8004b06:	f7ff f9f1 	bl	8003eec <PWM_SetDutyAdapt>
				PWM_SetDutyAdapt(LED9_pwmtimer,LED9_PWMchannel,(uint32_t)Current_Value[8]);
 8004b0a:	4b45      	ldr	r3, [pc, #276]	; (8004c20 <AppLEDTask+0x5fc>)
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	4b45      	ldr	r3, [pc, #276]	; (8004c24 <AppLEDTask+0x600>)
 8004b10:	6819      	ldr	r1, [r3, #0]
 8004b12:	4b2c      	ldr	r3, [pc, #176]	; (8004bc4 <AppLEDTask+0x5a0>)
 8004b14:	7a1b      	ldrb	r3, [r3, #8]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	f7ff f9e7 	bl	8003eec <PWM_SetDutyAdapt>
				PWM_SetDutyAdapt(LED10_pwmtimer,LED10_PWMchannel,(uint32_t)Current_Value[9]);
 8004b1e:	4b42      	ldr	r3, [pc, #264]	; (8004c28 <AppLEDTask+0x604>)
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	4b42      	ldr	r3, [pc, #264]	; (8004c2c <AppLEDTask+0x608>)
 8004b24:	6819      	ldr	r1, [r3, #0]
 8004b26:	4b27      	ldr	r3, [pc, #156]	; (8004bc4 <AppLEDTask+0x5a0>)
 8004b28:	7a5b      	ldrb	r3, [r3, #9]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	f7ff f9dd 	bl	8003eec <PWM_SetDutyAdapt>
				cpt_strob=0;
 8004b32:	4b2a      	ldr	r3, [pc, #168]	; (8004bdc <AppLEDTask+0x5b8>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	e222      	b.n	8004f80 <AppLEDTask+0x95c>
			else if(Strob_value_Rand>0 && cpt_strob>=(128-Strob_value_Rand)/2)
 8004b3a:	4b26      	ldr	r3, [pc, #152]	; (8004bd4 <AppLEDTask+0x5b0>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 8134 	beq.w	8004dac <AppLEDTask+0x788>
 8004b44:	4b23      	ldr	r3, [pc, #140]	; (8004bd4 <AppLEDTask+0x5b0>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004b4c:	0fda      	lsrs	r2, r3, #31
 8004b4e:	4413      	add	r3, r2
 8004b50:	105b      	asrs	r3, r3, #1
 8004b52:	461a      	mov	r2, r3
 8004b54:	4b21      	ldr	r3, [pc, #132]	; (8004bdc <AppLEDTask+0x5b8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	f200 8127 	bhi.w	8004dac <AppLEDTask+0x788>
				rand_value = HAL_GetTick()%10;
 8004b5e:	f7fb ffbb 	bl	8000ad8 <HAL_GetTick>
 8004b62:	4601      	mov	r1, r0
 8004b64:	4b32      	ldr	r3, [pc, #200]	; (8004c30 <AppLEDTask+0x60c>)
 8004b66:	fba3 2301 	umull	r2, r3, r3, r1
 8004b6a:	08da      	lsrs	r2, r3, #3
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	1aca      	subs	r2, r1, r3
 8004b76:	4613      	mov	r3, r2
 8004b78:	717b      	strb	r3, [r7, #5]
				if(rand_value==0) PWM_SetDutyAdapt(LED1_pwmtimer,LED1_PWMchannel,(uint32_t)Current_Value[0]); else PWM_SetDutyAdapt(LED1_pwmtimer,LED1_PWMchannel,0);
 8004b7a:	797b      	ldrb	r3, [r7, #5]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10a      	bne.n	8004b96 <AppLEDTask+0x572>
 8004b80:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <AppLEDTask+0x5bc>)
 8004b82:	6818      	ldr	r0, [r3, #0]
 8004b84:	4b17      	ldr	r3, [pc, #92]	; (8004be4 <AppLEDTask+0x5c0>)
 8004b86:	6819      	ldr	r1, [r3, #0]
 8004b88:	4b0e      	ldr	r3, [pc, #56]	; (8004bc4 <AppLEDTask+0x5a0>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f7ff f9ac 	bl	8003eec <PWM_SetDutyAdapt>
 8004b94:	e007      	b.n	8004ba6 <AppLEDTask+0x582>
 8004b96:	4b12      	ldr	r3, [pc, #72]	; (8004be0 <AppLEDTask+0x5bc>)
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <AppLEDTask+0x5c0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	f7ff f9a3 	bl	8003eec <PWM_SetDutyAdapt>
				if(rand_value==1) PWM_SetDutyAdapt(LED2_pwmtimer,LED2_PWMchannel,(uint32_t)Current_Value[1]); else PWM_SetDutyAdapt(LED2_pwmtimer,LED2_PWMchannel,0);
 8004ba6:	797b      	ldrb	r3, [r7, #5]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d143      	bne.n	8004c34 <AppLEDTask+0x610>
 8004bac:	4b0e      	ldr	r3, [pc, #56]	; (8004be8 <AppLEDTask+0x5c4>)
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <AppLEDTask+0x5c8>)
 8004bb2:	6819      	ldr	r1, [r3, #0]
 8004bb4:	4b03      	ldr	r3, [pc, #12]	; (8004bc4 <AppLEDTask+0x5a0>)
 8004bb6:	785b      	ldrb	r3, [r3, #1]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f7ff f996 	bl	8003eec <PWM_SetDutyAdapt>
 8004bc0:	e040      	b.n	8004c44 <AppLEDTask+0x620>
 8004bc2:	bf00      	nop
 8004bc4:	20000954 	.word	0x20000954
 8004bc8:	200009d8 	.word	0x200009d8
 8004bcc:	66666667 	.word	0x66666667
 8004bd0:	20000990 	.word	0x20000990
 8004bd4:	2000096a 	.word	0x2000096a
 8004bd8:	20000971 	.word	0x20000971
 8004bdc:	200004bc 	.word	0x200004bc
 8004be0:	20000994 	.word	0x20000994
 8004be4:	2000096c 	.word	0x2000096c
 8004be8:	200009c0 	.word	0x200009c0
 8004bec:	2000097c 	.word	0x2000097c
 8004bf0:	20000984 	.word	0x20000984
 8004bf4:	200009a0 	.word	0x200009a0
 8004bf8:	200009b0 	.word	0x200009b0
 8004bfc:	200009c4 	.word	0x200009c4
 8004c00:	20000950 	.word	0x20000950
 8004c04:	200009d4 	.word	0x200009d4
 8004c08:	20000998 	.word	0x20000998
 8004c0c:	20000988 	.word	0x20000988
 8004c10:	200009a4 	.word	0x200009a4
 8004c14:	200009a8 	.word	0x200009a8
 8004c18:	200009dc 	.word	0x200009dc
 8004c1c:	200009b4 	.word	0x200009b4
 8004c20:	200009bc 	.word	0x200009bc
 8004c24:	20000960 	.word	0x20000960
 8004c28:	20000974 	.word	0x20000974
 8004c2c:	200009ac 	.word	0x200009ac
 8004c30:	cccccccd 	.word	0xcccccccd
 8004c34:	4b88      	ldr	r3, [pc, #544]	; (8004e58 <AppLEDTask+0x834>)
 8004c36:	6818      	ldr	r0, [r3, #0]
 8004c38:	4b88      	ldr	r3, [pc, #544]	; (8004e5c <AppLEDTask+0x838>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	4619      	mov	r1, r3
 8004c40:	f7ff f954 	bl	8003eec <PWM_SetDutyAdapt>
				if(rand_value==2) PWM_SetDutyAdapt(LED3_pwmtimer,LED3_PWMchannel,(uint32_t)Current_Value[2]); else PWM_SetDutyAdapt(LED3_pwmtimer,LED3_PWMchannel,0);
 8004c44:	797b      	ldrb	r3, [r7, #5]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d10a      	bne.n	8004c60 <AppLEDTask+0x63c>
 8004c4a:	4b85      	ldr	r3, [pc, #532]	; (8004e60 <AppLEDTask+0x83c>)
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	4b85      	ldr	r3, [pc, #532]	; (8004e64 <AppLEDTask+0x840>)
 8004c50:	6819      	ldr	r1, [r3, #0]
 8004c52:	4b85      	ldr	r3, [pc, #532]	; (8004e68 <AppLEDTask+0x844>)
 8004c54:	789b      	ldrb	r3, [r3, #2]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	461a      	mov	r2, r3
 8004c5a:	f7ff f947 	bl	8003eec <PWM_SetDutyAdapt>
 8004c5e:	e007      	b.n	8004c70 <AppLEDTask+0x64c>
 8004c60:	4b7f      	ldr	r3, [pc, #508]	; (8004e60 <AppLEDTask+0x83c>)
 8004c62:	6818      	ldr	r0, [r3, #0]
 8004c64:	4b7f      	ldr	r3, [pc, #508]	; (8004e64 <AppLEDTask+0x840>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	f7ff f93e 	bl	8003eec <PWM_SetDutyAdapt>
				if(rand_value==3) PWM_SetDutyAdapt(LED4_pwmtimer,LED4_PWMchannel,(uint32_t)Current_Value[3]); else PWM_SetDutyAdapt(LED4_pwmtimer,LED4_PWMchannel,0);
 8004c70:	797b      	ldrb	r3, [r7, #5]
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	d10a      	bne.n	8004c8c <AppLEDTask+0x668>
 8004c76:	4b7d      	ldr	r3, [pc, #500]	; (8004e6c <AppLEDTask+0x848>)
 8004c78:	6818      	ldr	r0, [r3, #0]
 8004c7a:	4b7d      	ldr	r3, [pc, #500]	; (8004e70 <AppLEDTask+0x84c>)
 8004c7c:	6819      	ldr	r1, [r3, #0]
 8004c7e:	4b7a      	ldr	r3, [pc, #488]	; (8004e68 <AppLEDTask+0x844>)
 8004c80:	78db      	ldrb	r3, [r3, #3]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	f7ff f931 	bl	8003eec <PWM_SetDutyAdapt>
 8004c8a:	e007      	b.n	8004c9c <AppLEDTask+0x678>
 8004c8c:	4b77      	ldr	r3, [pc, #476]	; (8004e6c <AppLEDTask+0x848>)
 8004c8e:	6818      	ldr	r0, [r3, #0]
 8004c90:	4b77      	ldr	r3, [pc, #476]	; (8004e70 <AppLEDTask+0x84c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2200      	movs	r2, #0
 8004c96:	4619      	mov	r1, r3
 8004c98:	f7ff f928 	bl	8003eec <PWM_SetDutyAdapt>
				if(rand_value==4) PWM_SetDutyAdapt(LED5_pwmtimer,LED5_PWMchannel,(uint32_t)Current_Value[4]); else PWM_SetDutyAdapt(LED5_pwmtimer,LED5_PWMchannel,0);
 8004c9c:	797b      	ldrb	r3, [r7, #5]
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	d10a      	bne.n	8004cb8 <AppLEDTask+0x694>
 8004ca2:	4b74      	ldr	r3, [pc, #464]	; (8004e74 <AppLEDTask+0x850>)
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	4b74      	ldr	r3, [pc, #464]	; (8004e78 <AppLEDTask+0x854>)
 8004ca8:	6819      	ldr	r1, [r3, #0]
 8004caa:	4b6f      	ldr	r3, [pc, #444]	; (8004e68 <AppLEDTask+0x844>)
 8004cac:	791b      	ldrb	r3, [r3, #4]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	f7ff f91b 	bl	8003eec <PWM_SetDutyAdapt>
 8004cb6:	e007      	b.n	8004cc8 <AppLEDTask+0x6a4>
 8004cb8:	4b6e      	ldr	r3, [pc, #440]	; (8004e74 <AppLEDTask+0x850>)
 8004cba:	6818      	ldr	r0, [r3, #0]
 8004cbc:	4b6e      	ldr	r3, [pc, #440]	; (8004e78 <AppLEDTask+0x854>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	f7ff f912 	bl	8003eec <PWM_SetDutyAdapt>
				if(rand_value==5) PWM_SetDutyAdapt(LED6_pwmtimer,LED6_PWMchannel,(uint32_t)Current_Value[5]); else PWM_SetDutyAdapt(LED6_pwmtimer,LED6_PWMchannel,0);
 8004cc8:	797b      	ldrb	r3, [r7, #5]
 8004cca:	2b05      	cmp	r3, #5
 8004ccc:	d10a      	bne.n	8004ce4 <AppLEDTask+0x6c0>
 8004cce:	4b6b      	ldr	r3, [pc, #428]	; (8004e7c <AppLEDTask+0x858>)
 8004cd0:	6818      	ldr	r0, [r3, #0]
 8004cd2:	4b6b      	ldr	r3, [pc, #428]	; (8004e80 <AppLEDTask+0x85c>)
 8004cd4:	6819      	ldr	r1, [r3, #0]
 8004cd6:	4b64      	ldr	r3, [pc, #400]	; (8004e68 <AppLEDTask+0x844>)
 8004cd8:	795b      	ldrb	r3, [r3, #5]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	461a      	mov	r2, r3
 8004cde:	f7ff f905 	bl	8003eec <PWM_SetDutyAdapt>
 8004ce2:	e007      	b.n	8004cf4 <AppLEDTask+0x6d0>
 8004ce4:	4b65      	ldr	r3, [pc, #404]	; (8004e7c <AppLEDTask+0x858>)
 8004ce6:	6818      	ldr	r0, [r3, #0]
 8004ce8:	4b65      	ldr	r3, [pc, #404]	; (8004e80 <AppLEDTask+0x85c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2200      	movs	r2, #0
 8004cee:	4619      	mov	r1, r3
 8004cf0:	f7ff f8fc 	bl	8003eec <PWM_SetDutyAdapt>
				if(rand_value==6) PWM_SetDutyAdapt(LED7_pwmtimer,LED7_PWMchannel,(uint32_t)Current_Value[6]); else PWM_SetDutyAdapt(LED7_pwmtimer,LED7_PWMchannel,0);
 8004cf4:	797b      	ldrb	r3, [r7, #5]
 8004cf6:	2b06      	cmp	r3, #6
 8004cf8:	d10a      	bne.n	8004d10 <AppLEDTask+0x6ec>
 8004cfa:	4b62      	ldr	r3, [pc, #392]	; (8004e84 <AppLEDTask+0x860>)
 8004cfc:	6818      	ldr	r0, [r3, #0]
 8004cfe:	4b62      	ldr	r3, [pc, #392]	; (8004e88 <AppLEDTask+0x864>)
 8004d00:	6819      	ldr	r1, [r3, #0]
 8004d02:	4b59      	ldr	r3, [pc, #356]	; (8004e68 <AppLEDTask+0x844>)
 8004d04:	799b      	ldrb	r3, [r3, #6]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	461a      	mov	r2, r3
 8004d0a:	f7ff f8ef 	bl	8003eec <PWM_SetDutyAdapt>
 8004d0e:	e007      	b.n	8004d20 <AppLEDTask+0x6fc>
 8004d10:	4b5c      	ldr	r3, [pc, #368]	; (8004e84 <AppLEDTask+0x860>)
 8004d12:	6818      	ldr	r0, [r3, #0]
 8004d14:	4b5c      	ldr	r3, [pc, #368]	; (8004e88 <AppLEDTask+0x864>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	f7ff f8e6 	bl	8003eec <PWM_SetDutyAdapt>
				if(rand_value==7) PWM_SetDutyAdapt(LED8_pwmtimer,LED8_PWMchannel,(uint32_t)Current_Value[7]); else PWM_SetDutyAdapt(LED8_pwmtimer,LED8_PWMchannel,0);
 8004d20:	797b      	ldrb	r3, [r7, #5]
 8004d22:	2b07      	cmp	r3, #7
 8004d24:	d10a      	bne.n	8004d3c <AppLEDTask+0x718>
 8004d26:	4b59      	ldr	r3, [pc, #356]	; (8004e8c <AppLEDTask+0x868>)
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	4b59      	ldr	r3, [pc, #356]	; (8004e90 <AppLEDTask+0x86c>)
 8004d2c:	6819      	ldr	r1, [r3, #0]
 8004d2e:	4b4e      	ldr	r3, [pc, #312]	; (8004e68 <AppLEDTask+0x844>)
 8004d30:	79db      	ldrb	r3, [r3, #7]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	461a      	mov	r2, r3
 8004d36:	f7ff f8d9 	bl	8003eec <PWM_SetDutyAdapt>
 8004d3a:	e007      	b.n	8004d4c <AppLEDTask+0x728>
 8004d3c:	4b53      	ldr	r3, [pc, #332]	; (8004e8c <AppLEDTask+0x868>)
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	4b53      	ldr	r3, [pc, #332]	; (8004e90 <AppLEDTask+0x86c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2200      	movs	r2, #0
 8004d46:	4619      	mov	r1, r3
 8004d48:	f7ff f8d0 	bl	8003eec <PWM_SetDutyAdapt>
				if(rand_value==8) PWM_SetDutyAdapt(LED9_pwmtimer,LED9_PWMchannel,(uint32_t)Current_Value[8]); else PWM_SetDutyAdapt(LED9_pwmtimer,LED9_PWMchannel,0);
 8004d4c:	797b      	ldrb	r3, [r7, #5]
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d10a      	bne.n	8004d68 <AppLEDTask+0x744>
 8004d52:	4b50      	ldr	r3, [pc, #320]	; (8004e94 <AppLEDTask+0x870>)
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	4b50      	ldr	r3, [pc, #320]	; (8004e98 <AppLEDTask+0x874>)
 8004d58:	6819      	ldr	r1, [r3, #0]
 8004d5a:	4b43      	ldr	r3, [pc, #268]	; (8004e68 <AppLEDTask+0x844>)
 8004d5c:	7a1b      	ldrb	r3, [r3, #8]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	461a      	mov	r2, r3
 8004d62:	f7ff f8c3 	bl	8003eec <PWM_SetDutyAdapt>
 8004d66:	e007      	b.n	8004d78 <AppLEDTask+0x754>
 8004d68:	4b4a      	ldr	r3, [pc, #296]	; (8004e94 <AppLEDTask+0x870>)
 8004d6a:	6818      	ldr	r0, [r3, #0]
 8004d6c:	4b4a      	ldr	r3, [pc, #296]	; (8004e98 <AppLEDTask+0x874>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2200      	movs	r2, #0
 8004d72:	4619      	mov	r1, r3
 8004d74:	f7ff f8ba 	bl	8003eec <PWM_SetDutyAdapt>
				if(rand_value==9) PWM_SetDutyAdapt(LED10_pwmtimer,LED10_PWMchannel,(uint32_t)Current_Value[9]); else PWM_SetDutyAdapt(LED10_pwmtimer,LED10_PWMchannel,0);
 8004d78:	797b      	ldrb	r3, [r7, #5]
 8004d7a:	2b09      	cmp	r3, #9
 8004d7c:	d10a      	bne.n	8004d94 <AppLEDTask+0x770>
 8004d7e:	4b47      	ldr	r3, [pc, #284]	; (8004e9c <AppLEDTask+0x878>)
 8004d80:	6818      	ldr	r0, [r3, #0]
 8004d82:	4b47      	ldr	r3, [pc, #284]	; (8004ea0 <AppLEDTask+0x87c>)
 8004d84:	6819      	ldr	r1, [r3, #0]
 8004d86:	4b38      	ldr	r3, [pc, #224]	; (8004e68 <AppLEDTask+0x844>)
 8004d88:	7a5b      	ldrb	r3, [r3, #9]
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f7ff f8ad 	bl	8003eec <PWM_SetDutyAdapt>
 8004d92:	e007      	b.n	8004da4 <AppLEDTask+0x780>
 8004d94:	4b41      	ldr	r3, [pc, #260]	; (8004e9c <AppLEDTask+0x878>)
 8004d96:	6818      	ldr	r0, [r3, #0]
 8004d98:	4b41      	ldr	r3, [pc, #260]	; (8004ea0 <AppLEDTask+0x87c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	4619      	mov	r1, r3
 8004da0:	f7ff f8a4 	bl	8003eec <PWM_SetDutyAdapt>
				cpt_strob=0;
 8004da4:	4b3f      	ldr	r3, [pc, #252]	; (8004ea4 <AppLEDTask+0x880>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	e0e9      	b.n	8004f80 <AppLEDTask+0x95c>
				PWM_SetDutyAdapt(LED1_pwmtimer,LED1_PWMchannel,0);
 8004dac:	4b3e      	ldr	r3, [pc, #248]	; (8004ea8 <AppLEDTask+0x884>)
 8004dae:	6818      	ldr	r0, [r3, #0]
 8004db0:	4b3e      	ldr	r3, [pc, #248]	; (8004eac <AppLEDTask+0x888>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2200      	movs	r2, #0
 8004db6:	4619      	mov	r1, r3
 8004db8:	f7ff f898 	bl	8003eec <PWM_SetDutyAdapt>
				PWM_SetDutyAdapt(LED2_pwmtimer,LED2_PWMchannel,0);
 8004dbc:	4b26      	ldr	r3, [pc, #152]	; (8004e58 <AppLEDTask+0x834>)
 8004dbe:	6818      	ldr	r0, [r3, #0]
 8004dc0:	4b26      	ldr	r3, [pc, #152]	; (8004e5c <AppLEDTask+0x838>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	f7ff f890 	bl	8003eec <PWM_SetDutyAdapt>
				PWM_SetDutyAdapt(LED3_pwmtimer,LED3_PWMchannel,0);
 8004dcc:	4b24      	ldr	r3, [pc, #144]	; (8004e60 <AppLEDTask+0x83c>)
 8004dce:	6818      	ldr	r0, [r3, #0]
 8004dd0:	4b24      	ldr	r3, [pc, #144]	; (8004e64 <AppLEDTask+0x840>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	f7ff f888 	bl	8003eec <PWM_SetDutyAdapt>
				PWM_SetDutyAdapt(LED4_pwmtimer,LED4_PWMchannel,0);
 8004ddc:	4b23      	ldr	r3, [pc, #140]	; (8004e6c <AppLEDTask+0x848>)
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	4b23      	ldr	r3, [pc, #140]	; (8004e70 <AppLEDTask+0x84c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2200      	movs	r2, #0
 8004de6:	4619      	mov	r1, r3
 8004de8:	f7ff f880 	bl	8003eec <PWM_SetDutyAdapt>
				PWM_SetDutyAdapt(LED5_pwmtimer,LED5_PWMchannel,0);
 8004dec:	4b21      	ldr	r3, [pc, #132]	; (8004e74 <AppLEDTask+0x850>)
 8004dee:	6818      	ldr	r0, [r3, #0]
 8004df0:	4b21      	ldr	r3, [pc, #132]	; (8004e78 <AppLEDTask+0x854>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2200      	movs	r2, #0
 8004df6:	4619      	mov	r1, r3
 8004df8:	f7ff f878 	bl	8003eec <PWM_SetDutyAdapt>
				PWM_SetDutyAdapt(LED6_pwmtimer,LED6_PWMchannel,0);
 8004dfc:	4b1f      	ldr	r3, [pc, #124]	; (8004e7c <AppLEDTask+0x858>)
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	4b1f      	ldr	r3, [pc, #124]	; (8004e80 <AppLEDTask+0x85c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2200      	movs	r2, #0
 8004e06:	4619      	mov	r1, r3
 8004e08:	f7ff f870 	bl	8003eec <PWM_SetDutyAdapt>
				PWM_SetDutyAdapt(LED7_pwmtimer,LED7_PWMchannel,0);
 8004e0c:	4b1d      	ldr	r3, [pc, #116]	; (8004e84 <AppLEDTask+0x860>)
 8004e0e:	6818      	ldr	r0, [r3, #0]
 8004e10:	4b1d      	ldr	r3, [pc, #116]	; (8004e88 <AppLEDTask+0x864>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2200      	movs	r2, #0
 8004e16:	4619      	mov	r1, r3
 8004e18:	f7ff f868 	bl	8003eec <PWM_SetDutyAdapt>
				PWM_SetDutyAdapt(LED8_pwmtimer,LED8_PWMchannel,0);
 8004e1c:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <AppLEDTask+0x868>)
 8004e1e:	6818      	ldr	r0, [r3, #0]
 8004e20:	4b1b      	ldr	r3, [pc, #108]	; (8004e90 <AppLEDTask+0x86c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2200      	movs	r2, #0
 8004e26:	4619      	mov	r1, r3
 8004e28:	f7ff f860 	bl	8003eec <PWM_SetDutyAdapt>
				PWM_SetDutyAdapt(LED9_pwmtimer,LED9_PWMchannel,0);
 8004e2c:	4b19      	ldr	r3, [pc, #100]	; (8004e94 <AppLEDTask+0x870>)
 8004e2e:	6818      	ldr	r0, [r3, #0]
 8004e30:	4b19      	ldr	r3, [pc, #100]	; (8004e98 <AppLEDTask+0x874>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2200      	movs	r2, #0
 8004e36:	4619      	mov	r1, r3
 8004e38:	f7ff f858 	bl	8003eec <PWM_SetDutyAdapt>
				PWM_SetDutyAdapt(LED10_pwmtimer,LED10_PWMchannel,0);
 8004e3c:	4b17      	ldr	r3, [pc, #92]	; (8004e9c <AppLEDTask+0x878>)
 8004e3e:	6818      	ldr	r0, [r3, #0]
 8004e40:	4b17      	ldr	r3, [pc, #92]	; (8004ea0 <AppLEDTask+0x87c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2200      	movs	r2, #0
 8004e46:	4619      	mov	r1, r3
 8004e48:	f7ff f850 	bl	8003eec <PWM_SetDutyAdapt>
				cpt_strob++;
 8004e4c:	4b15      	ldr	r3, [pc, #84]	; (8004ea4 <AppLEDTask+0x880>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3301      	adds	r3, #1
 8004e52:	4a14      	ldr	r2, [pc, #80]	; (8004ea4 <AppLEDTask+0x880>)
 8004e54:	6013      	str	r3, [r2, #0]
}
 8004e56:	e093      	b.n	8004f80 <AppLEDTask+0x95c>
 8004e58:	200009c0 	.word	0x200009c0
 8004e5c:	2000097c 	.word	0x2000097c
 8004e60:	20000984 	.word	0x20000984
 8004e64:	200009a0 	.word	0x200009a0
 8004e68:	20000954 	.word	0x20000954
 8004e6c:	200009b0 	.word	0x200009b0
 8004e70:	200009c4 	.word	0x200009c4
 8004e74:	20000950 	.word	0x20000950
 8004e78:	200009d4 	.word	0x200009d4
 8004e7c:	20000998 	.word	0x20000998
 8004e80:	20000988 	.word	0x20000988
 8004e84:	200009a4 	.word	0x200009a4
 8004e88:	200009a8 	.word	0x200009a8
 8004e8c:	200009dc 	.word	0x200009dc
 8004e90:	200009b4 	.word	0x200009b4
 8004e94:	200009bc 	.word	0x200009bc
 8004e98:	20000960 	.word	0x20000960
 8004e9c:	20000974 	.word	0x20000974
 8004ea0:	200009ac 	.word	0x200009ac
 8004ea4:	200004bc 	.word	0x200004bc
 8004ea8:	20000994 	.word	0x20000994
 8004eac:	2000096c 	.word	0x2000096c
			PWM_SetDutyAdapt(LED1_pwmtimer,LED1_PWMchannel,(uint32_t)Current_Value[0]);
 8004eb0:	4b35      	ldr	r3, [pc, #212]	; (8004f88 <AppLEDTask+0x964>)
 8004eb2:	6818      	ldr	r0, [r3, #0]
 8004eb4:	4b35      	ldr	r3, [pc, #212]	; (8004f8c <AppLEDTask+0x968>)
 8004eb6:	6819      	ldr	r1, [r3, #0]
 8004eb8:	4b35      	ldr	r3, [pc, #212]	; (8004f90 <AppLEDTask+0x96c>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f7ff f814 	bl	8003eec <PWM_SetDutyAdapt>
			PWM_SetDutyAdapt(LED2_pwmtimer,LED2_PWMchannel,(uint32_t)Current_Value[1]);
 8004ec4:	4b33      	ldr	r3, [pc, #204]	; (8004f94 <AppLEDTask+0x970>)
 8004ec6:	6818      	ldr	r0, [r3, #0]
 8004ec8:	4b33      	ldr	r3, [pc, #204]	; (8004f98 <AppLEDTask+0x974>)
 8004eca:	6819      	ldr	r1, [r3, #0]
 8004ecc:	4b30      	ldr	r3, [pc, #192]	; (8004f90 <AppLEDTask+0x96c>)
 8004ece:	785b      	ldrb	r3, [r3, #1]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f7ff f80a 	bl	8003eec <PWM_SetDutyAdapt>
			PWM_SetDutyAdapt(LED3_pwmtimer,LED3_PWMchannel,(uint32_t)Current_Value[2]);
 8004ed8:	4b30      	ldr	r3, [pc, #192]	; (8004f9c <AppLEDTask+0x978>)
 8004eda:	6818      	ldr	r0, [r3, #0]
 8004edc:	4b30      	ldr	r3, [pc, #192]	; (8004fa0 <AppLEDTask+0x97c>)
 8004ede:	6819      	ldr	r1, [r3, #0]
 8004ee0:	4b2b      	ldr	r3, [pc, #172]	; (8004f90 <AppLEDTask+0x96c>)
 8004ee2:	789b      	ldrb	r3, [r3, #2]
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f7ff f800 	bl	8003eec <PWM_SetDutyAdapt>
			PWM_SetDutyAdapt(LED4_pwmtimer,LED4_PWMchannel,(uint32_t)Current_Value[3]);
 8004eec:	4b2d      	ldr	r3, [pc, #180]	; (8004fa4 <AppLEDTask+0x980>)
 8004eee:	6818      	ldr	r0, [r3, #0]
 8004ef0:	4b2d      	ldr	r3, [pc, #180]	; (8004fa8 <AppLEDTask+0x984>)
 8004ef2:	6819      	ldr	r1, [r3, #0]
 8004ef4:	4b26      	ldr	r3, [pc, #152]	; (8004f90 <AppLEDTask+0x96c>)
 8004ef6:	78db      	ldrb	r3, [r3, #3]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	461a      	mov	r2, r3
 8004efc:	f7fe fff6 	bl	8003eec <PWM_SetDutyAdapt>
			PWM_SetDutyAdapt(LED5_pwmtimer,LED5_PWMchannel,(uint32_t)Current_Value[4]);
 8004f00:	4b2a      	ldr	r3, [pc, #168]	; (8004fac <AppLEDTask+0x988>)
 8004f02:	6818      	ldr	r0, [r3, #0]
 8004f04:	4b2a      	ldr	r3, [pc, #168]	; (8004fb0 <AppLEDTask+0x98c>)
 8004f06:	6819      	ldr	r1, [r3, #0]
 8004f08:	4b21      	ldr	r3, [pc, #132]	; (8004f90 <AppLEDTask+0x96c>)
 8004f0a:	791b      	ldrb	r3, [r3, #4]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f7fe ffec 	bl	8003eec <PWM_SetDutyAdapt>
			PWM_SetDutyAdapt(LED6_pwmtimer,LED6_PWMchannel,(uint32_t)Current_Value[5]);
 8004f14:	4b27      	ldr	r3, [pc, #156]	; (8004fb4 <AppLEDTask+0x990>)
 8004f16:	6818      	ldr	r0, [r3, #0]
 8004f18:	4b27      	ldr	r3, [pc, #156]	; (8004fb8 <AppLEDTask+0x994>)
 8004f1a:	6819      	ldr	r1, [r3, #0]
 8004f1c:	4b1c      	ldr	r3, [pc, #112]	; (8004f90 <AppLEDTask+0x96c>)
 8004f1e:	795b      	ldrb	r3, [r3, #5]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	461a      	mov	r2, r3
 8004f24:	f7fe ffe2 	bl	8003eec <PWM_SetDutyAdapt>
			PWM_SetDutyAdapt(LED7_pwmtimer,LED7_PWMchannel,(uint32_t)Current_Value[6]);
 8004f28:	4b24      	ldr	r3, [pc, #144]	; (8004fbc <AppLEDTask+0x998>)
 8004f2a:	6818      	ldr	r0, [r3, #0]
 8004f2c:	4b24      	ldr	r3, [pc, #144]	; (8004fc0 <AppLEDTask+0x99c>)
 8004f2e:	6819      	ldr	r1, [r3, #0]
 8004f30:	4b17      	ldr	r3, [pc, #92]	; (8004f90 <AppLEDTask+0x96c>)
 8004f32:	799b      	ldrb	r3, [r3, #6]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	461a      	mov	r2, r3
 8004f38:	f7fe ffd8 	bl	8003eec <PWM_SetDutyAdapt>
			PWM_SetDutyAdapt(LED8_pwmtimer,LED8_PWMchannel,(uint32_t)Current_Value[7]);
 8004f3c:	4b21      	ldr	r3, [pc, #132]	; (8004fc4 <AppLEDTask+0x9a0>)
 8004f3e:	6818      	ldr	r0, [r3, #0]
 8004f40:	4b21      	ldr	r3, [pc, #132]	; (8004fc8 <AppLEDTask+0x9a4>)
 8004f42:	6819      	ldr	r1, [r3, #0]
 8004f44:	4b12      	ldr	r3, [pc, #72]	; (8004f90 <AppLEDTask+0x96c>)
 8004f46:	79db      	ldrb	r3, [r3, #7]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f7fe ffce 	bl	8003eec <PWM_SetDutyAdapt>
			PWM_SetDutyAdapt(LED9_pwmtimer,LED9_PWMchannel,(uint32_t)Current_Value[8]);
 8004f50:	4b1e      	ldr	r3, [pc, #120]	; (8004fcc <AppLEDTask+0x9a8>)
 8004f52:	6818      	ldr	r0, [r3, #0]
 8004f54:	4b1e      	ldr	r3, [pc, #120]	; (8004fd0 <AppLEDTask+0x9ac>)
 8004f56:	6819      	ldr	r1, [r3, #0]
 8004f58:	4b0d      	ldr	r3, [pc, #52]	; (8004f90 <AppLEDTask+0x96c>)
 8004f5a:	7a1b      	ldrb	r3, [r3, #8]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f7fe ffc4 	bl	8003eec <PWM_SetDutyAdapt>
			PWM_SetDutyAdapt(LED10_pwmtimer,LED10_PWMchannel,(uint32_t)Current_Value[9]);
 8004f64:	4b1b      	ldr	r3, [pc, #108]	; (8004fd4 <AppLEDTask+0x9b0>)
 8004f66:	6818      	ldr	r0, [r3, #0]
 8004f68:	4b1b      	ldr	r3, [pc, #108]	; (8004fd8 <AppLEDTask+0x9b4>)
 8004f6a:	6819      	ldr	r1, [r3, #0]
 8004f6c:	4b08      	ldr	r3, [pc, #32]	; (8004f90 <AppLEDTask+0x96c>)
 8004f6e:	7a5b      	ldrb	r3, [r3, #9]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	461a      	mov	r2, r3
 8004f74:	f7fe ffba 	bl	8003eec <PWM_SetDutyAdapt>
			cpt_strob=0;
 8004f78:	4b18      	ldr	r3, [pc, #96]	; (8004fdc <AppLEDTask+0x9b8>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	601a      	str	r2, [r3, #0]
}
 8004f7e:	e7ff      	b.n	8004f80 <AppLEDTask+0x95c>
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd90      	pop	{r4, r7, pc}
 8004f88:	20000994 	.word	0x20000994
 8004f8c:	2000096c 	.word	0x2000096c
 8004f90:	20000954 	.word	0x20000954
 8004f94:	200009c0 	.word	0x200009c0
 8004f98:	2000097c 	.word	0x2000097c
 8004f9c:	20000984 	.word	0x20000984
 8004fa0:	200009a0 	.word	0x200009a0
 8004fa4:	200009b0 	.word	0x200009b0
 8004fa8:	200009c4 	.word	0x200009c4
 8004fac:	20000950 	.word	0x20000950
 8004fb0:	200009d4 	.word	0x200009d4
 8004fb4:	20000998 	.word	0x20000998
 8004fb8:	20000988 	.word	0x20000988
 8004fbc:	200009a4 	.word	0x200009a4
 8004fc0:	200009a8 	.word	0x200009a8
 8004fc4:	200009dc 	.word	0x200009dc
 8004fc8:	200009b4 	.word	0x200009b4
 8004fcc:	200009bc 	.word	0x200009bc
 8004fd0:	20000960 	.word	0x20000960
 8004fd4:	20000974 	.word	0x20000974
 8004fd8:	200009ac 	.word	0x200009ac
 8004fdc:	200004bc 	.word	0x200004bc

08004fe0 <AppIHMTask>:

void AppIHMTask()
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
	Manage_Button();
 8004fe4:	f7ff fa74 	bl	80044d0 <Manage_Button>

	if(Current_Display == DISP_PARAM)
 8004fe8:	4b90      	ldr	r3, [pc, #576]	; (800522c <AppIHMTask+0x24c>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d148      	bne.n	8005084 <AppIHMTask+0xa4>
	{
		if(Bp_Up == BP_CLICK)
 8004ff2:	4b8f      	ldr	r3, [pc, #572]	; (8005230 <AppIHMTask+0x250>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d10d      	bne.n	8005016 <AppIHMTask+0x36>
		{
			if(Display_Cursor == 3)
 8004ffa:	4b8e      	ldr	r3, [pc, #568]	; (8005234 <AppIHMTask+0x254>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d103      	bne.n	800500a <AppIHMTask+0x2a>
				Display_Cursor = 0;
 8005002:	4b8c      	ldr	r3, [pc, #560]	; (8005234 <AppIHMTask+0x254>)
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]
 8005008:	e005      	b.n	8005016 <AppIHMTask+0x36>
			else
				Display_Cursor++;
 800500a:	4b8a      	ldr	r3, [pc, #552]	; (8005234 <AppIHMTask+0x254>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	3301      	adds	r3, #1
 8005010:	b2da      	uxtb	r2, r3
 8005012:	4b88      	ldr	r3, [pc, #544]	; (8005234 <AppIHMTask+0x254>)
 8005014:	701a      	strb	r2, [r3, #0]
		}
		if(Bp_Down == BP_CLICK)
 8005016:	4b88      	ldr	r3, [pc, #544]	; (8005238 <AppIHMTask+0x258>)
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d10d      	bne.n	800503a <AppIHMTask+0x5a>
		{
			if(Display_Cursor == 0)
 800501e:	4b85      	ldr	r3, [pc, #532]	; (8005234 <AppIHMTask+0x254>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d103      	bne.n	800502e <AppIHMTask+0x4e>
				Display_Cursor = 3;
 8005026:	4b83      	ldr	r3, [pc, #524]	; (8005234 <AppIHMTask+0x254>)
 8005028:	2203      	movs	r2, #3
 800502a:	701a      	strb	r2, [r3, #0]
 800502c:	e005      	b.n	800503a <AppIHMTask+0x5a>
			else
				Display_Cursor--;
 800502e:	4b81      	ldr	r3, [pc, #516]	; (8005234 <AppIHMTask+0x254>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	3b01      	subs	r3, #1
 8005034:	b2da      	uxtb	r2, r3
 8005036:	4b7f      	ldr	r3, [pc, #508]	; (8005234 <AppIHMTask+0x254>)
 8005038:	701a      	strb	r2, [r3, #0]
		}
		if(Bp_Ok == BP_CLICK)
 800503a:	4b80      	ldr	r3, [pc, #512]	; (800523c <AppIHMTask+0x25c>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b01      	cmp	r3, #1
 8005040:	f040 819d 	bne.w	800537e <AppIHMTask+0x39e>
		{
			switch(Display_Cursor)
 8005044:	4b7b      	ldr	r3, [pc, #492]	; (8005234 <AppIHMTask+0x254>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b03      	cmp	r3, #3
 800504a:	f200 819a 	bhi.w	8005382 <AppIHMTask+0x3a2>
 800504e:	a201      	add	r2, pc, #4	; (adr r2, 8005054 <AppIHMTask+0x74>)
 8005050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005054:	08005065 	.word	0x08005065
 8005058:	0800506d 	.word	0x0800506d
 800505c:	08005075 	.word	0x08005075
 8005060:	0800507d 	.word	0x0800507d
			{
			case 0:
				Current_Display = DISP_CONFIG_MODE;
 8005064:	4b71      	ldr	r3, [pc, #452]	; (800522c <AppIHMTask+0x24c>)
 8005066:	2201      	movs	r2, #1
 8005068:	701a      	strb	r2, [r3, #0]
				break;
 800506a:	e18b      	b.n	8005384 <AppIHMTask+0x3a4>
			case 1:
				Current_Display = DISP_CONFIG_INVERT;
 800506c:	4b6f      	ldr	r3, [pc, #444]	; (800522c <AppIHMTask+0x24c>)
 800506e:	2202      	movs	r2, #2
 8005070:	701a      	strb	r2, [r3, #0]
				break;
 8005072:	e187      	b.n	8005384 <AppIHMTask+0x3a4>
			case 2:
				Current_Display = DISP_CONFIG_ADDRESS;
 8005074:	4b6d      	ldr	r3, [pc, #436]	; (800522c <AppIHMTask+0x24c>)
 8005076:	2203      	movs	r2, #3
 8005078:	701a      	strb	r2, [r3, #0]
				break;
 800507a:	e183      	b.n	8005384 <AppIHMTask+0x3a4>
			case 3:
				Current_Display = DISP_CONFIG_MANVALUE;
 800507c:	4b6b      	ldr	r3, [pc, #428]	; (800522c <AppIHMTask+0x24c>)
 800507e:	2204      	movs	r2, #4
 8005080:	701a      	strb	r2, [r3, #0]
				break;
 8005082:	e17f      	b.n	8005384 <AppIHMTask+0x3a4>
				break;
			}
		}
	}

	else if(Current_Display == DISP_CONFIG_MODE)
 8005084:	4b69      	ldr	r3, [pc, #420]	; (800522c <AppIHMTask+0x24c>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b01      	cmp	r3, #1
 800508c:	d13c      	bne.n	8005108 <AppIHMTask+0x128>
	{
		if(Bp_Up == BP_CLICK)
 800508e:	4b68      	ldr	r3, [pc, #416]	; (8005230 <AppIHMTask+0x250>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d115      	bne.n	80050c2 <AppIHMTask+0xe2>
		{
			param_changed=__TRUE;
 8005096:	4b6a      	ldr	r3, [pc, #424]	; (8005240 <AppIHMTask+0x260>)
 8005098:	2201      	movs	r2, #1
 800509a:	601a      	str	r2, [r3, #0]
			tick_save_param = HAL_GetTick();
 800509c:	f7fb fd1c 	bl	8000ad8 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	4b68      	ldr	r3, [pc, #416]	; (8005244 <AppIHMTask+0x264>)
 80050a4:	601a      	str	r2, [r3, #0]
			if(Current_Mode == 2)
 80050a6:	4b68      	ldr	r3, [pc, #416]	; (8005248 <AppIHMTask+0x268>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d103      	bne.n	80050b6 <AppIHMTask+0xd6>
				Current_Mode = 0;
 80050ae:	4b66      	ldr	r3, [pc, #408]	; (8005248 <AppIHMTask+0x268>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	701a      	strb	r2, [r3, #0]
 80050b4:	e005      	b.n	80050c2 <AppIHMTask+0xe2>
			else
				Current_Mode++;
 80050b6:	4b64      	ldr	r3, [pc, #400]	; (8005248 <AppIHMTask+0x268>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	3301      	adds	r3, #1
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	4b62      	ldr	r3, [pc, #392]	; (8005248 <AppIHMTask+0x268>)
 80050c0:	701a      	strb	r2, [r3, #0]
		}
		if(Bp_Down == BP_CLICK)
 80050c2:	4b5d      	ldr	r3, [pc, #372]	; (8005238 <AppIHMTask+0x258>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d115      	bne.n	80050f6 <AppIHMTask+0x116>
		{
			param_changed=__TRUE;
 80050ca:	4b5d      	ldr	r3, [pc, #372]	; (8005240 <AppIHMTask+0x260>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
			tick_save_param = HAL_GetTick();
 80050d0:	f7fb fd02 	bl	8000ad8 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	4b5b      	ldr	r3, [pc, #364]	; (8005244 <AppIHMTask+0x264>)
 80050d8:	601a      	str	r2, [r3, #0]
			if(Current_Mode == 0)
 80050da:	4b5b      	ldr	r3, [pc, #364]	; (8005248 <AppIHMTask+0x268>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d103      	bne.n	80050ea <AppIHMTask+0x10a>
				Current_Mode = 2;
 80050e2:	4b59      	ldr	r3, [pc, #356]	; (8005248 <AppIHMTask+0x268>)
 80050e4:	2202      	movs	r2, #2
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	e005      	b.n	80050f6 <AppIHMTask+0x116>
			else
				Current_Mode--;
 80050ea:	4b57      	ldr	r3, [pc, #348]	; (8005248 <AppIHMTask+0x268>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	4b55      	ldr	r3, [pc, #340]	; (8005248 <AppIHMTask+0x268>)
 80050f4:	701a      	strb	r2, [r3, #0]
		}

		if(Bp_Ok == BP_CLICK)
 80050f6:	4b51      	ldr	r3, [pc, #324]	; (800523c <AppIHMTask+0x25c>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	f040 8142 	bne.w	8005384 <AppIHMTask+0x3a4>
		{
			Current_Display = DISP_PARAM;
 8005100:	4b4a      	ldr	r3, [pc, #296]	; (800522c <AppIHMTask+0x24c>)
 8005102:	2200      	movs	r2, #0
 8005104:	701a      	strb	r2, [r3, #0]
		if(Bp_Ok == BP_CLICK)
		{
			Current_Display = DISP_PARAM;
		}
	}
}
 8005106:	e13d      	b.n	8005384 <AppIHMTask+0x3a4>
	else if(Current_Display == DISP_CONFIG_ADDRESS)
 8005108:	4b48      	ldr	r3, [pc, #288]	; (800522c <AppIHMTask+0x24c>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b03      	cmp	r3, #3
 8005110:	f040 80a0 	bne.w	8005254 <AppIHMTask+0x274>
		if(Bp_Up == BP_CLICK)
 8005114:	4b46      	ldr	r3, [pc, #280]	; (8005230 <AppIHMTask+0x250>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d11a      	bne.n	8005152 <AppIHMTask+0x172>
			if(DMX_Adress<512)
 800511c:	4b4b      	ldr	r3, [pc, #300]	; (800524c <AppIHMTask+0x26c>)
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005124:	d205      	bcs.n	8005132 <AppIHMTask+0x152>
				DMX_Adress++;
 8005126:	4b49      	ldr	r3, [pc, #292]	; (800524c <AppIHMTask+0x26c>)
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	3301      	adds	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	4b47      	ldr	r3, [pc, #284]	; (800524c <AppIHMTask+0x26c>)
 8005130:	801a      	strh	r2, [r3, #0]
			param_changed = __TRUE;
 8005132:	4b43      	ldr	r3, [pc, #268]	; (8005240 <AppIHMTask+0x260>)
 8005134:	2201      	movs	r2, #1
 8005136:	601a      	str	r2, [r3, #0]
			tick_save_param = HAL_GetTick();
 8005138:	f7fb fcce 	bl	8000ad8 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	4b41      	ldr	r3, [pc, #260]	; (8005244 <AppIHMTask+0x264>)
 8005140:	601a      	str	r2, [r3, #0]
			Protocol_DMX_init(DMX_Adress,DMX_uart);
 8005142:	4b42      	ldr	r3, [pc, #264]	; (800524c <AppIHMTask+0x26c>)
 8005144:	881a      	ldrh	r2, [r3, #0]
 8005146:	4b42      	ldr	r3, [pc, #264]	; (8005250 <AppIHMTask+0x270>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4619      	mov	r1, r3
 800514c:	4610      	mov	r0, r2
 800514e:	f7fe fbe9 	bl	8003924 <Protocol_DMX_init>
		if(Bp_Up == BP_1s)
 8005152:	4b37      	ldr	r3, [pc, #220]	; (8005230 <AppIHMTask+0x250>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b02      	cmp	r3, #2
 8005158:	d11f      	bne.n	800519a <AppIHMTask+0x1ba>
			if(DMX_Adress<=502)
 800515a:	4b3c      	ldr	r3, [pc, #240]	; (800524c <AppIHMTask+0x26c>)
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8005162:	d806      	bhi.n	8005172 <AppIHMTask+0x192>
				DMX_Adress+=10;
 8005164:	4b39      	ldr	r3, [pc, #228]	; (800524c <AppIHMTask+0x26c>)
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	330a      	adds	r3, #10
 800516a:	b29a      	uxth	r2, r3
 800516c:	4b37      	ldr	r3, [pc, #220]	; (800524c <AppIHMTask+0x26c>)
 800516e:	801a      	strh	r2, [r3, #0]
 8005170:	e003      	b.n	800517a <AppIHMTask+0x19a>
				DMX_Adress=512;
 8005172:	4b36      	ldr	r3, [pc, #216]	; (800524c <AppIHMTask+0x26c>)
 8005174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005178:	801a      	strh	r2, [r3, #0]
			param_changed = __TRUE;
 800517a:	4b31      	ldr	r3, [pc, #196]	; (8005240 <AppIHMTask+0x260>)
 800517c:	2201      	movs	r2, #1
 800517e:	601a      	str	r2, [r3, #0]
			tick_save_param = HAL_GetTick();
 8005180:	f7fb fcaa 	bl	8000ad8 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	4b2f      	ldr	r3, [pc, #188]	; (8005244 <AppIHMTask+0x264>)
 8005188:	601a      	str	r2, [r3, #0]
			Protocol_DMX_init(DMX_Adress,DMX_uart);
 800518a:	4b30      	ldr	r3, [pc, #192]	; (800524c <AppIHMTask+0x26c>)
 800518c:	881a      	ldrh	r2, [r3, #0]
 800518e:	4b30      	ldr	r3, [pc, #192]	; (8005250 <AppIHMTask+0x270>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4619      	mov	r1, r3
 8005194:	4610      	mov	r0, r2
 8005196:	f7fe fbc5 	bl	8003924 <Protocol_DMX_init>
		if(Bp_Down == BP_CLICK)
 800519a:	4b27      	ldr	r3, [pc, #156]	; (8005238 <AppIHMTask+0x258>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d119      	bne.n	80051d6 <AppIHMTask+0x1f6>
			if(DMX_Adress>1)
 80051a2:	4b2a      	ldr	r3, [pc, #168]	; (800524c <AppIHMTask+0x26c>)
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d905      	bls.n	80051b6 <AppIHMTask+0x1d6>
				DMX_Adress--;
 80051aa:	4b28      	ldr	r3, [pc, #160]	; (800524c <AppIHMTask+0x26c>)
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	4b26      	ldr	r3, [pc, #152]	; (800524c <AppIHMTask+0x26c>)
 80051b4:	801a      	strh	r2, [r3, #0]
			param_changed = __TRUE;
 80051b6:	4b22      	ldr	r3, [pc, #136]	; (8005240 <AppIHMTask+0x260>)
 80051b8:	2201      	movs	r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
			tick_save_param = HAL_GetTick();
 80051bc:	f7fb fc8c 	bl	8000ad8 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	4b20      	ldr	r3, [pc, #128]	; (8005244 <AppIHMTask+0x264>)
 80051c4:	601a      	str	r2, [r3, #0]
			Protocol_DMX_init(DMX_Adress,DMX_uart);
 80051c6:	4b21      	ldr	r3, [pc, #132]	; (800524c <AppIHMTask+0x26c>)
 80051c8:	881a      	ldrh	r2, [r3, #0]
 80051ca:	4b21      	ldr	r3, [pc, #132]	; (8005250 <AppIHMTask+0x270>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4619      	mov	r1, r3
 80051d0:	4610      	mov	r0, r2
 80051d2:	f7fe fba7 	bl	8003924 <Protocol_DMX_init>
		if(Bp_Down == BP_1s)
 80051d6:	4b18      	ldr	r3, [pc, #96]	; (8005238 <AppIHMTask+0x258>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d11d      	bne.n	800521a <AppIHMTask+0x23a>
			if(DMX_Adress>=11)
 80051de:	4b1b      	ldr	r3, [pc, #108]	; (800524c <AppIHMTask+0x26c>)
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	2b0a      	cmp	r3, #10
 80051e4:	d906      	bls.n	80051f4 <AppIHMTask+0x214>
				DMX_Adress-=10;
 80051e6:	4b19      	ldr	r3, [pc, #100]	; (800524c <AppIHMTask+0x26c>)
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	3b0a      	subs	r3, #10
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	4b17      	ldr	r3, [pc, #92]	; (800524c <AppIHMTask+0x26c>)
 80051f0:	801a      	strh	r2, [r3, #0]
 80051f2:	e002      	b.n	80051fa <AppIHMTask+0x21a>
				DMX_Adress=1;
 80051f4:	4b15      	ldr	r3, [pc, #84]	; (800524c <AppIHMTask+0x26c>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	801a      	strh	r2, [r3, #0]
			param_changed = __TRUE;
 80051fa:	4b11      	ldr	r3, [pc, #68]	; (8005240 <AppIHMTask+0x260>)
 80051fc:	2201      	movs	r2, #1
 80051fe:	601a      	str	r2, [r3, #0]
			tick_save_param = HAL_GetTick();
 8005200:	f7fb fc6a 	bl	8000ad8 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	4b0f      	ldr	r3, [pc, #60]	; (8005244 <AppIHMTask+0x264>)
 8005208:	601a      	str	r2, [r3, #0]
			Protocol_DMX_init(DMX_Adress,DMX_uart);
 800520a:	4b10      	ldr	r3, [pc, #64]	; (800524c <AppIHMTask+0x26c>)
 800520c:	881a      	ldrh	r2, [r3, #0]
 800520e:	4b10      	ldr	r3, [pc, #64]	; (8005250 <AppIHMTask+0x270>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4619      	mov	r1, r3
 8005214:	4610      	mov	r0, r2
 8005216:	f7fe fb85 	bl	8003924 <Protocol_DMX_init>
		if(Bp_Ok == BP_CLICK)
 800521a:	4b08      	ldr	r3, [pc, #32]	; (800523c <AppIHMTask+0x25c>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b01      	cmp	r3, #1
 8005220:	f040 80b0 	bne.w	8005384 <AppIHMTask+0x3a4>
			Current_Display = DISP_PARAM;
 8005224:	4b01      	ldr	r3, [pc, #4]	; (800522c <AppIHMTask+0x24c>)
 8005226:	2200      	movs	r2, #0
 8005228:	701a      	strb	r2, [r3, #0]
}
 800522a:	e0ab      	b.n	8005384 <AppIHMTask+0x3a4>
 800522c:	200009c8 	.word	0x200009c8
 8005230:	200009d0 	.word	0x200009d0
 8005234:	200009d1 	.word	0x200009d1
 8005238:	20000980 	.word	0x20000980
 800523c:	200009b8 	.word	0x200009b8
 8005240:	200004ac 	.word	0x200004ac
 8005244:	20000964 	.word	0x20000964
 8005248:	2000099c 	.word	0x2000099c
 800524c:	200009da 	.word	0x200009da
 8005250:	2000098c 	.word	0x2000098c
	else if(Current_Display==DISP_CONFIG_MANVALUE)
 8005254:	4b4c      	ldr	r3, [pc, #304]	; (8005388 <AppIHMTask+0x3a8>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b04      	cmp	r3, #4
 800525c:	d167      	bne.n	800532e <AppIHMTask+0x34e>
		if(Bp_Up == BP_CLICK)
 800525e:	4b4b      	ldr	r3, [pc, #300]	; (800538c <AppIHMTask+0x3ac>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d111      	bne.n	800528a <AppIHMTask+0x2aa>
			if(Manu_value<100)
 8005266:	4b4a      	ldr	r3, [pc, #296]	; (8005390 <AppIHMTask+0x3b0>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b63      	cmp	r3, #99	; 0x63
 800526c:	d805      	bhi.n	800527a <AppIHMTask+0x29a>
				Manu_value++;
 800526e:	4b48      	ldr	r3, [pc, #288]	; (8005390 <AppIHMTask+0x3b0>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	3301      	adds	r3, #1
 8005274:	b2da      	uxtb	r2, r3
 8005276:	4b46      	ldr	r3, [pc, #280]	; (8005390 <AppIHMTask+0x3b0>)
 8005278:	701a      	strb	r2, [r3, #0]
			param_changed = __TRUE;
 800527a:	4b46      	ldr	r3, [pc, #280]	; (8005394 <AppIHMTask+0x3b4>)
 800527c:	2201      	movs	r2, #1
 800527e:	601a      	str	r2, [r3, #0]
			tick_save_param = HAL_GetTick();
 8005280:	f7fb fc2a 	bl	8000ad8 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	4b44      	ldr	r3, [pc, #272]	; (8005398 <AppIHMTask+0x3b8>)
 8005288:	601a      	str	r2, [r3, #0]
		if(Bp_Up == BP_1s)
 800528a:	4b40      	ldr	r3, [pc, #256]	; (800538c <AppIHMTask+0x3ac>)
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b02      	cmp	r3, #2
 8005290:	d115      	bne.n	80052be <AppIHMTask+0x2de>
			if(Manu_value<=90)
 8005292:	4b3f      	ldr	r3, [pc, #252]	; (8005390 <AppIHMTask+0x3b0>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b5a      	cmp	r3, #90	; 0x5a
 8005298:	d806      	bhi.n	80052a8 <AppIHMTask+0x2c8>
				Manu_value+=10;
 800529a:	4b3d      	ldr	r3, [pc, #244]	; (8005390 <AppIHMTask+0x3b0>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	330a      	adds	r3, #10
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	4b3b      	ldr	r3, [pc, #236]	; (8005390 <AppIHMTask+0x3b0>)
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	e002      	b.n	80052ae <AppIHMTask+0x2ce>
				Manu_value=100;
 80052a8:	4b39      	ldr	r3, [pc, #228]	; (8005390 <AppIHMTask+0x3b0>)
 80052aa:	2264      	movs	r2, #100	; 0x64
 80052ac:	701a      	strb	r2, [r3, #0]
			param_changed = __TRUE;
 80052ae:	4b39      	ldr	r3, [pc, #228]	; (8005394 <AppIHMTask+0x3b4>)
 80052b0:	2201      	movs	r2, #1
 80052b2:	601a      	str	r2, [r3, #0]
			tick_save_param = HAL_GetTick();
 80052b4:	f7fb fc10 	bl	8000ad8 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	4b37      	ldr	r3, [pc, #220]	; (8005398 <AppIHMTask+0x3b8>)
 80052bc:	601a      	str	r2, [r3, #0]
		if(Bp_Down == BP_CLICK)
 80052be:	4b37      	ldr	r3, [pc, #220]	; (800539c <AppIHMTask+0x3bc>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d111      	bne.n	80052ea <AppIHMTask+0x30a>
			if(Manu_value>0)
 80052c6:	4b32      	ldr	r3, [pc, #200]	; (8005390 <AppIHMTask+0x3b0>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <AppIHMTask+0x2fa>
				Manu_value--;
 80052ce:	4b30      	ldr	r3, [pc, #192]	; (8005390 <AppIHMTask+0x3b0>)
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	4b2e      	ldr	r3, [pc, #184]	; (8005390 <AppIHMTask+0x3b0>)
 80052d8:	701a      	strb	r2, [r3, #0]
			param_changed = __TRUE;
 80052da:	4b2e      	ldr	r3, [pc, #184]	; (8005394 <AppIHMTask+0x3b4>)
 80052dc:	2201      	movs	r2, #1
 80052de:	601a      	str	r2, [r3, #0]
			tick_save_param = HAL_GetTick();
 80052e0:	f7fb fbfa 	bl	8000ad8 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	4b2c      	ldr	r3, [pc, #176]	; (8005398 <AppIHMTask+0x3b8>)
 80052e8:	601a      	str	r2, [r3, #0]
		if(Bp_Down == BP_1s)
 80052ea:	4b2c      	ldr	r3, [pc, #176]	; (800539c <AppIHMTask+0x3bc>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d115      	bne.n	800531e <AppIHMTask+0x33e>
			if(Manu_value>=10)
 80052f2:	4b27      	ldr	r3, [pc, #156]	; (8005390 <AppIHMTask+0x3b0>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b09      	cmp	r3, #9
 80052f8:	d906      	bls.n	8005308 <AppIHMTask+0x328>
				Manu_value-=10;
 80052fa:	4b25      	ldr	r3, [pc, #148]	; (8005390 <AppIHMTask+0x3b0>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	3b0a      	subs	r3, #10
 8005300:	b2da      	uxtb	r2, r3
 8005302:	4b23      	ldr	r3, [pc, #140]	; (8005390 <AppIHMTask+0x3b0>)
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	e002      	b.n	800530e <AppIHMTask+0x32e>
				Manu_value=0;
 8005308:	4b21      	ldr	r3, [pc, #132]	; (8005390 <AppIHMTask+0x3b0>)
 800530a:	2200      	movs	r2, #0
 800530c:	701a      	strb	r2, [r3, #0]
			param_changed = __TRUE;
 800530e:	4b21      	ldr	r3, [pc, #132]	; (8005394 <AppIHMTask+0x3b4>)
 8005310:	2201      	movs	r2, #1
 8005312:	601a      	str	r2, [r3, #0]
			tick_save_param = HAL_GetTick();
 8005314:	f7fb fbe0 	bl	8000ad8 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	4b1f      	ldr	r3, [pc, #124]	; (8005398 <AppIHMTask+0x3b8>)
 800531c:	601a      	str	r2, [r3, #0]
		if(Bp_Ok == BP_CLICK)
 800531e:	4b20      	ldr	r3, [pc, #128]	; (80053a0 <AppIHMTask+0x3c0>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d12e      	bne.n	8005384 <AppIHMTask+0x3a4>
			Current_Display = DISP_PARAM;
 8005326:	4b18      	ldr	r3, [pc, #96]	; (8005388 <AppIHMTask+0x3a8>)
 8005328:	2200      	movs	r2, #0
 800532a:	701a      	strb	r2, [r3, #0]
}
 800532c:	e02a      	b.n	8005384 <AppIHMTask+0x3a4>
	else if(Current_Display==DISP_CONFIG_INVERT)
 800532e:	4b16      	ldr	r3, [pc, #88]	; (8005388 <AppIHMTask+0x3a8>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d125      	bne.n	8005384 <AppIHMTask+0x3a4>
		if(Bp_Up == BP_CLICK || Bp_Down == BP_CLICK)
 8005338:	4b14      	ldr	r3, [pc, #80]	; (800538c <AppIHMTask+0x3ac>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d003      	beq.n	8005348 <AppIHMTask+0x368>
 8005340:	4b16      	ldr	r3, [pc, #88]	; (800539c <AppIHMTask+0x3bc>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d112      	bne.n	800536e <AppIHMTask+0x38e>
			param_changed=__TRUE;
 8005348:	4b12      	ldr	r3, [pc, #72]	; (8005394 <AppIHMTask+0x3b4>)
 800534a:	2201      	movs	r2, #1
 800534c:	601a      	str	r2, [r3, #0]
			tick_save_param = HAL_GetTick();
 800534e:	f7fb fbc3 	bl	8000ad8 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	4b10      	ldr	r3, [pc, #64]	; (8005398 <AppIHMTask+0x3b8>)
 8005356:	601a      	str	r2, [r3, #0]
			if(IsInverted)
 8005358:	4b12      	ldr	r3, [pc, #72]	; (80053a4 <AppIHMTask+0x3c4>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <AppIHMTask+0x388>
				IsInverted = __FALSE;
 8005360:	4b10      	ldr	r3, [pc, #64]	; (80053a4 <AppIHMTask+0x3c4>)
 8005362:	2200      	movs	r2, #0
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	e002      	b.n	800536e <AppIHMTask+0x38e>
				IsInverted = __TRUE;
 8005368:	4b0e      	ldr	r3, [pc, #56]	; (80053a4 <AppIHMTask+0x3c4>)
 800536a:	2201      	movs	r2, #1
 800536c:	701a      	strb	r2, [r3, #0]
		if(Bp_Ok == BP_CLICK)
 800536e:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <AppIHMTask+0x3c0>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d106      	bne.n	8005384 <AppIHMTask+0x3a4>
			Current_Display = DISP_PARAM;
 8005376:	4b04      	ldr	r3, [pc, #16]	; (8005388 <AppIHMTask+0x3a8>)
 8005378:	2200      	movs	r2, #0
 800537a:	701a      	strb	r2, [r3, #0]
}
 800537c:	e002      	b.n	8005384 <AppIHMTask+0x3a4>
		}
 800537e:	bf00      	nop
 8005380:	e000      	b.n	8005384 <AppIHMTask+0x3a4>
				break;
 8005382:	bf00      	nop
}
 8005384:	bf00      	nop
 8005386:	bd80      	pop	{r7, pc}
 8005388:	200009c8 	.word	0x200009c8
 800538c:	200009d0 	.word	0x200009d0
 8005390:	20000970 	.word	0x20000970
 8005394:	200004ac 	.word	0x200004ac
 8005398:	20000964 	.word	0x20000964
 800539c:	20000980 	.word	0x20000980
 80053a0:	200009b8 	.word	0x200009b8
 80053a4:	20000968 	.word	0x20000968

080053a8 <App_Init>:

/* Public function -----------------------------------------------*/
void App_Init()
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
	Load_Param();
 80053ac:	f7fe fcfe 	bl	8003dac <Load_Param>
	Display_Cursor = 0;
 80053b0:	4b6f      	ldr	r3, [pc, #444]	; (8005570 <App_Init+0x1c8>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	701a      	strb	r2, [r3, #0]

	PatchPWMtoLED(IsInverted);
 80053b6:	4b6f      	ldr	r3, [pc, #444]	; (8005574 <App_Init+0x1cc>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fe fdd8 	bl	8003f70 <PatchPWMtoLED>

	switch(Current_Mode)
 80053c0:	4b6d      	ldr	r3, [pc, #436]	; (8005578 <App_Init+0x1d0>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <App_Init+0x26>
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d004      	beq.n	80053d6 <App_Init+0x2e>
 80053cc:	e007      	b.n	80053de <App_Init+0x36>
	{
		case MODE_OFF:
			Current_Display = DISP_CONFIG_MODE;
 80053ce:	4b6b      	ldr	r3, [pc, #428]	; (800557c <App_Init+0x1d4>)
 80053d0:	2201      	movs	r2, #1
 80053d2:	701a      	strb	r2, [r3, #0]
			break;
 80053d4:	e007      	b.n	80053e6 <App_Init+0x3e>
		case MODE_MANU:
			Current_Display = DISP_CONFIG_MANVALUE;
 80053d6:	4b69      	ldr	r3, [pc, #420]	; (800557c <App_Init+0x1d4>)
 80053d8:	2204      	movs	r2, #4
 80053da:	701a      	strb	r2, [r3, #0]
			break;
 80053dc:	e003      	b.n	80053e6 <App_Init+0x3e>
		default:
			Current_Display = DISP_CONFIG_ADDRESS;
 80053de:	4b67      	ldr	r3, [pc, #412]	; (800557c <App_Init+0x1d4>)
 80053e0:	2203      	movs	r2, #3
 80053e2:	701a      	strb	r2, [r3, #0]
			break;
 80053e4:	bf00      	nop
	}


	DMX_signal_OK = __FALSE;
 80053e6:	4b66      	ldr	r3, [pc, #408]	; (8005580 <App_Init+0x1d8>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	701a      	strb	r2, [r3, #0]

	HAL_TIM_PWM_Start( LED1_pwmtimer, LED1_PWMchannel );
 80053ec:	4b65      	ldr	r3, [pc, #404]	; (8005584 <App_Init+0x1dc>)
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	4b65      	ldr	r3, [pc, #404]	; (8005588 <App_Init+0x1e0>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4619      	mov	r1, r3
 80053f6:	4610      	mov	r0, r2
 80053f8:	f7fc fffc 	bl	80023f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( LED2_pwmtimer, LED2_PWMchannel );
 80053fc:	4b63      	ldr	r3, [pc, #396]	; (800558c <App_Init+0x1e4>)
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	4b63      	ldr	r3, [pc, #396]	; (8005590 <App_Init+0x1e8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4619      	mov	r1, r3
 8005406:	4610      	mov	r0, r2
 8005408:	f7fc fff4 	bl	80023f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( LED3_pwmtimer, LED3_PWMchannel );
 800540c:	4b61      	ldr	r3, [pc, #388]	; (8005594 <App_Init+0x1ec>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	4b61      	ldr	r3, [pc, #388]	; (8005598 <App_Init+0x1f0>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4619      	mov	r1, r3
 8005416:	4610      	mov	r0, r2
 8005418:	f7fc ffec 	bl	80023f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( LED4_pwmtimer, LED4_PWMchannel );
 800541c:	4b5f      	ldr	r3, [pc, #380]	; (800559c <App_Init+0x1f4>)
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	4b5f      	ldr	r3, [pc, #380]	; (80055a0 <App_Init+0x1f8>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4619      	mov	r1, r3
 8005426:	4610      	mov	r0, r2
 8005428:	f7fc ffe4 	bl	80023f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( LED5_pwmtimer, LED5_PWMchannel );
 800542c:	4b5d      	ldr	r3, [pc, #372]	; (80055a4 <App_Init+0x1fc>)
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	4b5d      	ldr	r3, [pc, #372]	; (80055a8 <App_Init+0x200>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4619      	mov	r1, r3
 8005436:	4610      	mov	r0, r2
 8005438:	f7fc ffdc 	bl	80023f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( LED6_pwmtimer, LED6_PWMchannel );
 800543c:	4b5b      	ldr	r3, [pc, #364]	; (80055ac <App_Init+0x204>)
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	4b5b      	ldr	r3, [pc, #364]	; (80055b0 <App_Init+0x208>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4619      	mov	r1, r3
 8005446:	4610      	mov	r0, r2
 8005448:	f7fc ffd4 	bl	80023f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( LED7_pwmtimer, LED7_PWMchannel );
 800544c:	4b59      	ldr	r3, [pc, #356]	; (80055b4 <App_Init+0x20c>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	4b59      	ldr	r3, [pc, #356]	; (80055b8 <App_Init+0x210>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4619      	mov	r1, r3
 8005456:	4610      	mov	r0, r2
 8005458:	f7fc ffcc 	bl	80023f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( LED8_pwmtimer, LED8_PWMchannel );
 800545c:	4b57      	ldr	r3, [pc, #348]	; (80055bc <App_Init+0x214>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	4b57      	ldr	r3, [pc, #348]	; (80055c0 <App_Init+0x218>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4619      	mov	r1, r3
 8005466:	4610      	mov	r0, r2
 8005468:	f7fc ffc4 	bl	80023f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( LED9_pwmtimer, LED9_PWMchannel );
 800546c:	4b55      	ldr	r3, [pc, #340]	; (80055c4 <App_Init+0x21c>)
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	4b55      	ldr	r3, [pc, #340]	; (80055c8 <App_Init+0x220>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4619      	mov	r1, r3
 8005476:	4610      	mov	r0, r2
 8005478:	f7fc ffbc 	bl	80023f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( LED10_pwmtimer, LED10_PWMchannel );
 800547c:	4b53      	ldr	r3, [pc, #332]	; (80055cc <App_Init+0x224>)
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	4b53      	ldr	r3, [pc, #332]	; (80055d0 <App_Init+0x228>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4619      	mov	r1, r3
 8005486:	4610      	mov	r0, r2
 8005488:	f7fc ffb4 	bl	80023f4 <HAL_TIM_PWM_Start>

	PWM_SetDuty(LED1_pwmtimer,LED1_PWMchannel,0);		//PWM Off
 800548c:	4b3d      	ldr	r3, [pc, #244]	; (8005584 <App_Init+0x1dc>)
 800548e:	6818      	ldr	r0, [r3, #0]
 8005490:	4b3d      	ldr	r3, [pc, #244]	; (8005588 <App_Init+0x1e0>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2200      	movs	r2, #0
 8005496:	4619      	mov	r1, r3
 8005498:	f7fb fa9e 	bl	80009d8 <PWM_SetDuty>
	PWM_SetDuty(LED2_pwmtimer,LED2_PWMchannel,0);		//PWM Off
 800549c:	4b3b      	ldr	r3, [pc, #236]	; (800558c <App_Init+0x1e4>)
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	4b3b      	ldr	r3, [pc, #236]	; (8005590 <App_Init+0x1e8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2200      	movs	r2, #0
 80054a6:	4619      	mov	r1, r3
 80054a8:	f7fb fa96 	bl	80009d8 <PWM_SetDuty>
	PWM_SetDuty(LED3_pwmtimer,LED3_PWMchannel,0);		//PWM Off
 80054ac:	4b39      	ldr	r3, [pc, #228]	; (8005594 <App_Init+0x1ec>)
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	4b39      	ldr	r3, [pc, #228]	; (8005598 <App_Init+0x1f0>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2200      	movs	r2, #0
 80054b6:	4619      	mov	r1, r3
 80054b8:	f7fb fa8e 	bl	80009d8 <PWM_SetDuty>
	PWM_SetDuty(LED4_pwmtimer,LED4_PWMchannel,0);		//PWM Off
 80054bc:	4b37      	ldr	r3, [pc, #220]	; (800559c <App_Init+0x1f4>)
 80054be:	6818      	ldr	r0, [r3, #0]
 80054c0:	4b37      	ldr	r3, [pc, #220]	; (80055a0 <App_Init+0x1f8>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2200      	movs	r2, #0
 80054c6:	4619      	mov	r1, r3
 80054c8:	f7fb fa86 	bl	80009d8 <PWM_SetDuty>
	PWM_SetDuty(LED5_pwmtimer,LED5_PWMchannel,0);		//PWM Off
 80054cc:	4b35      	ldr	r3, [pc, #212]	; (80055a4 <App_Init+0x1fc>)
 80054ce:	6818      	ldr	r0, [r3, #0]
 80054d0:	4b35      	ldr	r3, [pc, #212]	; (80055a8 <App_Init+0x200>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2200      	movs	r2, #0
 80054d6:	4619      	mov	r1, r3
 80054d8:	f7fb fa7e 	bl	80009d8 <PWM_SetDuty>
	PWM_SetDuty(LED6_pwmtimer,LED6_PWMchannel,0);		//PWM Off
 80054dc:	4b33      	ldr	r3, [pc, #204]	; (80055ac <App_Init+0x204>)
 80054de:	6818      	ldr	r0, [r3, #0]
 80054e0:	4b33      	ldr	r3, [pc, #204]	; (80055b0 <App_Init+0x208>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2200      	movs	r2, #0
 80054e6:	4619      	mov	r1, r3
 80054e8:	f7fb fa76 	bl	80009d8 <PWM_SetDuty>
	PWM_SetDuty(LED7_pwmtimer,LED7_PWMchannel,0);		//PWM Off
 80054ec:	4b31      	ldr	r3, [pc, #196]	; (80055b4 <App_Init+0x20c>)
 80054ee:	6818      	ldr	r0, [r3, #0]
 80054f0:	4b31      	ldr	r3, [pc, #196]	; (80055b8 <App_Init+0x210>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2200      	movs	r2, #0
 80054f6:	4619      	mov	r1, r3
 80054f8:	f7fb fa6e 	bl	80009d8 <PWM_SetDuty>
	PWM_SetDuty(LED8_pwmtimer,LED8_PWMchannel,0);		//PWM Off
 80054fc:	4b2f      	ldr	r3, [pc, #188]	; (80055bc <App_Init+0x214>)
 80054fe:	6818      	ldr	r0, [r3, #0]
 8005500:	4b2f      	ldr	r3, [pc, #188]	; (80055c0 <App_Init+0x218>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2200      	movs	r2, #0
 8005506:	4619      	mov	r1, r3
 8005508:	f7fb fa66 	bl	80009d8 <PWM_SetDuty>
	PWM_SetDuty(LED9_pwmtimer,LED9_PWMchannel,0);		//PWM Off
 800550c:	4b2d      	ldr	r3, [pc, #180]	; (80055c4 <App_Init+0x21c>)
 800550e:	6818      	ldr	r0, [r3, #0]
 8005510:	4b2d      	ldr	r3, [pc, #180]	; (80055c8 <App_Init+0x220>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2200      	movs	r2, #0
 8005516:	4619      	mov	r1, r3
 8005518:	f7fb fa5e 	bl	80009d8 <PWM_SetDuty>
	PWM_SetDuty(LED10_pwmtimer,LED10_PWMchannel,0);		//PWM Off
 800551c:	4b2b      	ldr	r3, [pc, #172]	; (80055cc <App_Init+0x224>)
 800551e:	6818      	ldr	r0, [r3, #0]
 8005520:	4b2b      	ldr	r3, [pc, #172]	; (80055d0 <App_Init+0x228>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2200      	movs	r2, #0
 8005526:	4619      	mov	r1, r3
 8005528:	f7fb fa56 	bl	80009d8 <PWM_SetDuty>

	GENE_I2C_Init(GPIOB, SDA_IO_Pin, GPIOB, SCL_IO_Pin);
 800552c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005530:	4a28      	ldr	r2, [pc, #160]	; (80055d4 <App_Init+0x22c>)
 8005532:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005536:	4827      	ldr	r0, [pc, #156]	; (80055d4 <App_Init+0x22c>)
 8005538:	f7fe fae6 	bl	8003b08 <GENE_I2C_Init>
	Protocol_DMX_init(DMX_Adress,DMX_uart);
 800553c:	4b26      	ldr	r3, [pc, #152]	; (80055d8 <App_Init+0x230>)
 800553e:	881a      	ldrh	r2, [r3, #0]
 8005540:	4b26      	ldr	r3, [pc, #152]	; (80055dc <App_Init+0x234>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4619      	mov	r1, r3
 8005546:	4610      	mov	r0, r2
 8005548:	f7fe f9ec 	bl	8003924 <Protocol_DMX_init>
	//SSD1306_Init(hi2c_display);  // initialise
	SSD1306_Init();  // initialise
 800554c:	f7fa fdfe 	bl	800014c <SSD1306_Init>

	Bp_Up = BP_OFF;
 8005550:	4b23      	ldr	r3, [pc, #140]	; (80055e0 <App_Init+0x238>)
 8005552:	2200      	movs	r2, #0
 8005554:	701a      	strb	r2, [r3, #0]
	Bp_Down = BP_OFF;
 8005556:	4b23      	ldr	r3, [pc, #140]	; (80055e4 <App_Init+0x23c>)
 8005558:	2200      	movs	r2, #0
 800555a:	701a      	strb	r2, [r3, #0]
	Bp_Ok = BP_OFF;
 800555c:	4b22      	ldr	r3, [pc, #136]	; (80055e8 <App_Init+0x240>)
 800555e:	2200      	movs	r2, #0
 8005560:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(Tick_Timer);
 8005562:	4b22      	ldr	r3, [pc, #136]	; (80055ec <App_Init+0x244>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f7fc feed 	bl	8002346 <HAL_TIM_Base_Start_IT>
}
 800556c:	bf00      	nop
 800556e:	bd80      	pop	{r7, pc}
 8005570:	200009d1 	.word	0x200009d1
 8005574:	20000968 	.word	0x20000968
 8005578:	2000099c 	.word	0x2000099c
 800557c:	200009c8 	.word	0x200009c8
 8005580:	20000971 	.word	0x20000971
 8005584:	20000994 	.word	0x20000994
 8005588:	2000096c 	.word	0x2000096c
 800558c:	200009c0 	.word	0x200009c0
 8005590:	2000097c 	.word	0x2000097c
 8005594:	20000984 	.word	0x20000984
 8005598:	200009a0 	.word	0x200009a0
 800559c:	200009b0 	.word	0x200009b0
 80055a0:	200009c4 	.word	0x200009c4
 80055a4:	20000950 	.word	0x20000950
 80055a8:	200009d4 	.word	0x200009d4
 80055ac:	20000998 	.word	0x20000998
 80055b0:	20000988 	.word	0x20000988
 80055b4:	200009a4 	.word	0x200009a4
 80055b8:	200009a8 	.word	0x200009a8
 80055bc:	200009dc 	.word	0x200009dc
 80055c0:	200009b4 	.word	0x200009b4
 80055c4:	200009bc 	.word	0x200009bc
 80055c8:	20000960 	.word	0x20000960
 80055cc:	20000974 	.word	0x20000974
 80055d0:	200009ac 	.word	0x200009ac
 80055d4:	40010c00 	.word	0x40010c00
 80055d8:	200009da 	.word	0x200009da
 80055dc:	2000098c 	.word	0x2000098c
 80055e0:	200009d0 	.word	0x200009d0
 80055e4:	20000980 	.word	0x20000980
 80055e8:	200009b8 	.word	0x200009b8
 80055ec:	200009e0 	.word	0x200009e0

080055f0 <ManageFan>:

void ManageFan()
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
	static uint8_t FAN_Duty;
	static uint32_t FAN_Mean;
	static uint8_t Cpt_Mean;

	//update FAN
	if(HAL_GetTick() > timeRefreshFan+REFRESH_FAN)
 80055f4:	f7fb fa70 	bl	8000ad8 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	4b2b      	ldr	r3, [pc, #172]	; (80056a8 <ManageFan+0xb8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3364      	adds	r3, #100	; 0x64
 8005600:	429a      	cmp	r2, r3
 8005602:	d926      	bls.n	8005652 <ManageFan+0x62>
	{
		if(Cpt_Mean>0)
 8005604:	4b29      	ldr	r3, [pc, #164]	; (80056ac <ManageFan+0xbc>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00e      	beq.n	800562a <ManageFan+0x3a>
		{
			FAN_Mean += Mean_Value;
 800560c:	4b28      	ldr	r3, [pc, #160]	; (80056b0 <ManageFan+0xc0>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	461a      	mov	r2, r3
 8005612:	4b28      	ldr	r3, [pc, #160]	; (80056b4 <ManageFan+0xc4>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4413      	add	r3, r2
 8005618:	4a26      	ldr	r2, [pc, #152]	; (80056b4 <ManageFan+0xc4>)
 800561a:	6013      	str	r3, [r2, #0]
			Cpt_Mean--;
 800561c:	4b23      	ldr	r3, [pc, #140]	; (80056ac <ManageFan+0xbc>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	3b01      	subs	r3, #1
 8005622:	b2da      	uxtb	r2, r3
 8005624:	4b21      	ldr	r3, [pc, #132]	; (80056ac <ManageFan+0xbc>)
 8005626:	701a      	strb	r2, [r3, #0]
 8005628:	e00e      	b.n	8005648 <ManageFan+0x58>
		}
		else
		{
			Cpt_Mean=100;
 800562a:	4b20      	ldr	r3, [pc, #128]	; (80056ac <ManageFan+0xbc>)
 800562c:	2264      	movs	r2, #100	; 0x64
 800562e:	701a      	strb	r2, [r3, #0]
			FAN_Duty = FAN_Mean/100;
 8005630:	4b20      	ldr	r3, [pc, #128]	; (80056b4 <ManageFan+0xc4>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a20      	ldr	r2, [pc, #128]	; (80056b8 <ManageFan+0xc8>)
 8005636:	fba2 2303 	umull	r2, r3, r2, r3
 800563a:	095b      	lsrs	r3, r3, #5
 800563c:	b2da      	uxtb	r2, r3
 800563e:	4b1f      	ldr	r3, [pc, #124]	; (80056bc <ManageFan+0xcc>)
 8005640:	701a      	strb	r2, [r3, #0]
			FAN_Mean=0;
 8005642:	4b1c      	ldr	r3, [pc, #112]	; (80056b4 <ManageFan+0xc4>)
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]
		}
		timeRefreshFan = HAL_GetTick();
 8005648:	f7fb fa46 	bl	8000ad8 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	4b16      	ldr	r3, [pc, #88]	; (80056a8 <ManageFan+0xb8>)
 8005650:	601a      	str	r2, [r3, #0]
	}

	if(FAN_Duty==0)											//power  0%
 8005652:	4b1a      	ldr	r3, [pc, #104]	; (80056bc <ManageFan+0xcc>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d105      	bne.n	8005666 <ManageFan+0x76>
		HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET);
 800565a:	2200      	movs	r2, #0
 800565c:	2101      	movs	r1, #1
 800565e:	4818      	ldr	r0, [pc, #96]	; (80056c0 <ManageFan+0xd0>)
 8005660:	f7fc f943 	bl	80018ea <HAL_GPIO_WritePin>
	else if(FAN_Duty>0 && HAL_GetTick()>timePWMFan+200)	//power > 0%
	{
		HAL_GPIO_TogglePin(FAN_GPIO_Port, FAN_Pin);
		timePWMFan = HAL_GetTick();
	}
}
 8005664:	e01e      	b.n	80056a4 <ManageFan+0xb4>
	else if(FAN_Duty>128)									//power > 50%
 8005666:	4b15      	ldr	r3, [pc, #84]	; (80056bc <ManageFan+0xcc>)
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b80      	cmp	r3, #128	; 0x80
 800566c:	d905      	bls.n	800567a <ManageFan+0x8a>
		HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_SET);
 800566e:	2201      	movs	r2, #1
 8005670:	2101      	movs	r1, #1
 8005672:	4813      	ldr	r0, [pc, #76]	; (80056c0 <ManageFan+0xd0>)
 8005674:	f7fc f939 	bl	80018ea <HAL_GPIO_WritePin>
}
 8005678:	e014      	b.n	80056a4 <ManageFan+0xb4>
	else if(FAN_Duty>0 && HAL_GetTick()>timePWMFan+200)	//power > 0%
 800567a:	4b10      	ldr	r3, [pc, #64]	; (80056bc <ManageFan+0xcc>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d010      	beq.n	80056a4 <ManageFan+0xb4>
 8005682:	f7fb fa29 	bl	8000ad8 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	4b0e      	ldr	r3, [pc, #56]	; (80056c4 <ManageFan+0xd4>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	33c8      	adds	r3, #200	; 0xc8
 800568e:	429a      	cmp	r2, r3
 8005690:	d908      	bls.n	80056a4 <ManageFan+0xb4>
		HAL_GPIO_TogglePin(FAN_GPIO_Port, FAN_Pin);
 8005692:	2101      	movs	r1, #1
 8005694:	480a      	ldr	r0, [pc, #40]	; (80056c0 <ManageFan+0xd0>)
 8005696:	f7fc f940 	bl	800191a <HAL_GPIO_TogglePin>
		timePWMFan = HAL_GetTick();
 800569a:	f7fb fa1d 	bl	8000ad8 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	4b08      	ldr	r3, [pc, #32]	; (80056c4 <ManageFan+0xd4>)
 80056a2:	601a      	str	r2, [r3, #0]
}
 80056a4:	bf00      	nop
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	200004c0 	.word	0x200004c0
 80056ac:	200004c4 	.word	0x200004c4
 80056b0:	20000969 	.word	0x20000969
 80056b4:	200004c8 	.word	0x200004c8
 80056b8:	51eb851f 	.word	0x51eb851f
 80056bc:	200004cc 	.word	0x200004cc
 80056c0:	40010c00 	.word	0x40010c00
 80056c4:	200004d0 	.word	0x200004d0

080056c8 <App>:

void App()
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
	static uint32_t timeRefreshDisplay=0;


	//Update Display
	if(HAL_GetTick() > timeRefreshDisplay+REFRESH_DISPLAY)
 80056cc:	f7fb fa04 	bl	8000ad8 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	4b15      	ldr	r3, [pc, #84]	; (8005728 <App+0x60>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3364      	adds	r3, #100	; 0x64
 80056d8:	429a      	cmp	r2, r3
 80056da:	d90b      	bls.n	80056f4 <App+0x2c>
	{
		timeRefreshDisplay = HAL_GetTick();
 80056dc:	f7fb f9fc 	bl	8000ad8 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	4b11      	ldr	r3, [pc, #68]	; (8005728 <App+0x60>)
 80056e4:	601a      	str	r2, [r3, #0]
		Update_Display();
 80056e6:	f7fe fcf7 	bl	80040d8 <Update_Display>
		HAL_GPIO_TogglePin(GPIOC, LED_V_Pin);
 80056ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056ee:	480f      	ldr	r0, [pc, #60]	; (800572c <App+0x64>)
 80056f0:	f7fc f913 	bl	800191a <HAL_GPIO_TogglePin>
	}

	//Save Param if change
	if(HAL_GetTick()>(tick_save_param+DELAY_SAVE_PARAM) && param_changed==__TRUE)
 80056f4:	f7fb f9f0 	bl	8000ad8 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	4b0d      	ldr	r3, [pc, #52]	; (8005730 <App+0x68>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8005702:	429a      	cmp	r2, r3
 8005704:	d90d      	bls.n	8005722 <App+0x5a>
 8005706:	4b0b      	ldr	r3, [pc, #44]	; (8005734 <App+0x6c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d109      	bne.n	8005722 <App+0x5a>
	{
		param_changed = __FALSE;
 800570e:	4b09      	ldr	r3, [pc, #36]	; (8005734 <App+0x6c>)
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]
		Write_Param();
 8005714:	f7fe fb90 	bl	8003e38 <Write_Param>
		PatchPWMtoLED(IsInverted);
 8005718:	4b07      	ldr	r3, [pc, #28]	; (8005738 <App+0x70>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	4618      	mov	r0, r3
 800571e:	f7fe fc27 	bl	8003f70 <PatchPWMtoLED>
	}

}
 8005722:	bf00      	nop
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	200004d4 	.word	0x200004d4
 800572c:	40011000 	.word	0x40011000
 8005730:	20000964 	.word	0x20000964
 8005734:	200004ac 	.word	0x200004ac
 8005738:	20000968 	.word	0x20000968

0800573c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
		AppLEDTask();
 8005744:	f7fe ff6e 	bl	8004624 <AppLEDTask>
		AppIHMTask();
 8005748:	f7ff fc4a 	bl	8004fe0 <AppIHMTask>
		ManageFan();
 800574c:	f7ff ff50 	bl	80055f0 <ManageFan>
}
 8005750:	bf00      	nop
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
	Protocol_DMX_UartCallback(huart);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7fe f93f 	bl	80039e4 <Protocol_DMX_UartCallback>
}
 8005766:	bf00      	nop
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8005776:	1d3b      	adds	r3, r7, #4
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	605a      	str	r2, [r3, #4]
 800577e:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8005780:	4b18      	ldr	r3, [pc, #96]	; (80057e4 <MX_ADC1_Init+0x74>)
 8005782:	4a19      	ldr	r2, [pc, #100]	; (80057e8 <MX_ADC1_Init+0x78>)
 8005784:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005786:	4b17      	ldr	r3, [pc, #92]	; (80057e4 <MX_ADC1_Init+0x74>)
 8005788:	2200      	movs	r2, #0
 800578a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800578c:	4b15      	ldr	r3, [pc, #84]	; (80057e4 <MX_ADC1_Init+0x74>)
 800578e:	2200      	movs	r2, #0
 8005790:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005792:	4b14      	ldr	r3, [pc, #80]	; (80057e4 <MX_ADC1_Init+0x74>)
 8005794:	2200      	movs	r2, #0
 8005796:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005798:	4b12      	ldr	r3, [pc, #72]	; (80057e4 <MX_ADC1_Init+0x74>)
 800579a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800579e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80057a0:	4b10      	ldr	r3, [pc, #64]	; (80057e4 <MX_ADC1_Init+0x74>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80057a6:	4b0f      	ldr	r3, [pc, #60]	; (80057e4 <MX_ADC1_Init+0x74>)
 80057a8:	2201      	movs	r2, #1
 80057aa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80057ac:	480d      	ldr	r0, [pc, #52]	; (80057e4 <MX_ADC1_Init+0x74>)
 80057ae:	f7fb f99d 	bl	8000aec <HAL_ADC_Init>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80057b8:	f000 f98a 	bl	8005ad0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80057bc:	2309      	movs	r3, #9
 80057be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80057c0:	2301      	movs	r3, #1
 80057c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80057c8:	1d3b      	adds	r3, r7, #4
 80057ca:	4619      	mov	r1, r3
 80057cc:	4805      	ldr	r0, [pc, #20]	; (80057e4 <MX_ADC1_Init+0x74>)
 80057ce:	f7fb fa65 	bl	8000c9c <HAL_ADC_ConfigChannel>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80057d8:	f000 f97a 	bl	8005ad0 <Error_Handler>
  }

}
 80057dc:	bf00      	nop
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	200009e4 	.word	0x200009e4
 80057e8:	40012400 	.word	0x40012400

080057ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08a      	sub	sp, #40	; 0x28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057f4:	f107 0318 	add.w	r3, r7, #24
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	605a      	str	r2, [r3, #4]
 80057fe:	609a      	str	r2, [r3, #8]
 8005800:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <HAL_ADC_MspInit+0x98>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d137      	bne.n	800587c <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800580c:	4b1e      	ldr	r3, [pc, #120]	; (8005888 <HAL_ADC_MspInit+0x9c>)
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	4a1d      	ldr	r2, [pc, #116]	; (8005888 <HAL_ADC_MspInit+0x9c>)
 8005812:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005816:	6193      	str	r3, [r2, #24]
 8005818:	4b1b      	ldr	r3, [pc, #108]	; (8005888 <HAL_ADC_MspInit+0x9c>)
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005820:	617b      	str	r3, [r7, #20]
 8005822:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005824:	4b18      	ldr	r3, [pc, #96]	; (8005888 <HAL_ADC_MspInit+0x9c>)
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	4a17      	ldr	r2, [pc, #92]	; (8005888 <HAL_ADC_MspInit+0x9c>)
 800582a:	f043 0304 	orr.w	r3, r3, #4
 800582e:	6193      	str	r3, [r2, #24]
 8005830:	4b15      	ldr	r3, [pc, #84]	; (8005888 <HAL_ADC_MspInit+0x9c>)
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	613b      	str	r3, [r7, #16]
 800583a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800583c:	4b12      	ldr	r3, [pc, #72]	; (8005888 <HAL_ADC_MspInit+0x9c>)
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	4a11      	ldr	r2, [pc, #68]	; (8005888 <HAL_ADC_MspInit+0x9c>)
 8005842:	f043 0308 	orr.w	r3, r3, #8
 8005846:	6193      	str	r3, [r2, #24]
 8005848:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <HAL_ADC_MspInit+0x9c>)
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	f003 0308 	and.w	r3, r3, #8
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = CTN_Pin;
 8005854:	2380      	movs	r3, #128	; 0x80
 8005856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005858:	2303      	movs	r3, #3
 800585a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CTN_GPIO_Port, &GPIO_InitStruct);
 800585c:	f107 0318 	add.w	r3, r7, #24
 8005860:	4619      	mov	r1, r3
 8005862:	480a      	ldr	r0, [pc, #40]	; (800588c <HAL_ADC_MspInit+0xa0>)
 8005864:	f7fb fed0 	bl	8001608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VOLTAGE_Pin;
 8005868:	2302      	movs	r3, #2
 800586a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800586c:	2303      	movs	r3, #3
 800586e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8005870:	f107 0318 	add.w	r3, r7, #24
 8005874:	4619      	mov	r1, r3
 8005876:	4806      	ldr	r0, [pc, #24]	; (8005890 <HAL_ADC_MspInit+0xa4>)
 8005878:	f7fb fec6 	bl	8001608 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800587c:	bf00      	nop
 800587e:	3728      	adds	r7, #40	; 0x28
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	40012400 	.word	0x40012400
 8005888:	40021000 	.word	0x40021000
 800588c:	40010800 	.word	0x40010800
 8005890:	40010c00 	.word	0x40010c00

08005894 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800589a:	f107 0310 	add.w	r3, r7, #16
 800589e:	2200      	movs	r2, #0
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	605a      	str	r2, [r3, #4]
 80058a4:	609a      	str	r2, [r3, #8]
 80058a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80058a8:	4b45      	ldr	r3, [pc, #276]	; (80059c0 <MX_GPIO_Init+0x12c>)
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	4a44      	ldr	r2, [pc, #272]	; (80059c0 <MX_GPIO_Init+0x12c>)
 80058ae:	f043 0310 	orr.w	r3, r3, #16
 80058b2:	6193      	str	r3, [r2, #24]
 80058b4:	4b42      	ldr	r3, [pc, #264]	; (80059c0 <MX_GPIO_Init+0x12c>)
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	f003 0310 	and.w	r3, r3, #16
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80058c0:	4b3f      	ldr	r3, [pc, #252]	; (80059c0 <MX_GPIO_Init+0x12c>)
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	4a3e      	ldr	r2, [pc, #248]	; (80059c0 <MX_GPIO_Init+0x12c>)
 80058c6:	f043 0320 	orr.w	r3, r3, #32
 80058ca:	6193      	str	r3, [r2, #24]
 80058cc:	4b3c      	ldr	r3, [pc, #240]	; (80059c0 <MX_GPIO_Init+0x12c>)
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	f003 0320 	and.w	r3, r3, #32
 80058d4:	60bb      	str	r3, [r7, #8]
 80058d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80058d8:	4b39      	ldr	r3, [pc, #228]	; (80059c0 <MX_GPIO_Init+0x12c>)
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	4a38      	ldr	r2, [pc, #224]	; (80059c0 <MX_GPIO_Init+0x12c>)
 80058de:	f043 0304 	orr.w	r3, r3, #4
 80058e2:	6193      	str	r3, [r2, #24]
 80058e4:	4b36      	ldr	r3, [pc, #216]	; (80059c0 <MX_GPIO_Init+0x12c>)
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	607b      	str	r3, [r7, #4]
 80058ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80058f0:	4b33      	ldr	r3, [pc, #204]	; (80059c0 <MX_GPIO_Init+0x12c>)
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	4a32      	ldr	r2, [pc, #200]	; (80059c0 <MX_GPIO_Init+0x12c>)
 80058f6:	f043 0308 	orr.w	r3, r3, #8
 80058fa:	6193      	str	r3, [r2, #24]
 80058fc:	4b30      	ldr	r3, [pc, #192]	; (80059c0 <MX_GPIO_Init+0x12c>)
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	603b      	str	r3, [r7, #0]
 8005906:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_V_Pin|RE_DE_Pin, GPIO_PIN_RESET);
 8005908:	2200      	movs	r2, #0
 800590a:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800590e:	482d      	ldr	r0, [pc, #180]	; (80059c4 <MX_GPIO_Init+0x130>)
 8005910:	f7fb ffeb 	bl	80018ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET);
 8005914:	2200      	movs	r2, #0
 8005916:	2101      	movs	r1, #1
 8005918:	482b      	ldr	r0, [pc, #172]	; (80059c8 <MX_GPIO_Init+0x134>)
 800591a:	f7fb ffe6 	bl	80018ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCL_IO_Pin|SDA_IO_Pin, GPIO_PIN_SET);
 800591e:	2201      	movs	r2, #1
 8005920:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005924:	4828      	ldr	r0, [pc, #160]	; (80059c8 <MX_GPIO_Init+0x134>)
 8005926:	f7fb ffe0 	bl	80018ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_V_Pin|RE_DE_Pin;
 800592a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800592e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005930:	2301      	movs	r3, #1
 8005932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005934:	2300      	movs	r3, #0
 8005936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005938:	2302      	movs	r3, #2
 800593a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800593c:	f107 0310 	add.w	r3, r7, #16
 8005940:	4619      	mov	r1, r3
 8005942:	4820      	ldr	r0, [pc, #128]	; (80059c4 <MX_GPIO_Init+0x130>)
 8005944:	f7fb fe60 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T1_Pin;
 8005948:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800594c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800594e:	2300      	movs	r3, #0
 8005950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005952:	2300      	movs	r3, #0
 8005954:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(T1_GPIO_Port, &GPIO_InitStruct);
 8005956:	f107 0310 	add.w	r3, r7, #16
 800595a:	4619      	mov	r1, r3
 800595c:	4819      	ldr	r0, [pc, #100]	; (80059c4 <MX_GPIO_Init+0x130>)
 800595e:	f7fb fe53 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = FAN_Pin|SDA_IO_Pin;
 8005962:	f240 2301 	movw	r3, #513	; 0x201
 8005966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005968:	2301      	movs	r3, #1
 800596a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800596c:	2300      	movs	r3, #0
 800596e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005970:	2302      	movs	r3, #2
 8005972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005974:	f107 0310 	add.w	r3, r7, #16
 8005978:	4619      	mov	r1, r3
 800597a:	4813      	ldr	r0, [pc, #76]	; (80059c8 <MX_GPIO_Init+0x134>)
 800597c:	f7fb fe44 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = T2_Pin|T3_Pin;
 8005980:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005984:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005986:	2300      	movs	r3, #0
 8005988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800598a:	2300      	movs	r3, #0
 800598c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800598e:	f107 0310 	add.w	r3, r7, #16
 8005992:	4619      	mov	r1, r3
 8005994:	480c      	ldr	r0, [pc, #48]	; (80059c8 <MX_GPIO_Init+0x134>)
 8005996:	f7fb fe37 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SCL_IO_Pin;
 800599a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800599e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80059a0:	2311      	movs	r3, #17
 80059a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a4:	2300      	movs	r3, #0
 80059a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059a8:	2302      	movs	r3, #2
 80059aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SCL_IO_GPIO_Port, &GPIO_InitStruct);
 80059ac:	f107 0310 	add.w	r3, r7, #16
 80059b0:	4619      	mov	r1, r3
 80059b2:	4805      	ldr	r0, [pc, #20]	; (80059c8 <MX_GPIO_Init+0x134>)
 80059b4:	f7fb fe28 	bl	8001608 <HAL_GPIO_Init>

}
 80059b8:	bf00      	nop
 80059ba:	3720      	adds	r7, #32
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40021000 	.word	0x40021000
 80059c4:	40011000 	.word	0x40011000
 80059c8:	40010c00 	.word	0x40010c00

080059cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80059d0:	f7fb f82a 	bl	8000a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80059d4:	f000 f824 	bl	8005a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80059d8:	f7ff ff5c 	bl	8005894 <MX_GPIO_Init>
  MX_TIM2_Init();
 80059dc:	f000 fa12 	bl	8005e04 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80059e0:	f000 fc86 	bl	80062f0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80059e4:	f000 fcae 	bl	8006344 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80059e8:	f000 faa2 	bl	8005f30 <MX_TIM3_Init>
  MX_ADC1_Init();
 80059ec:	f7ff fec0 	bl	8005770 <MX_ADC1_Init>
  MX_TIM1_Init();
 80059f0:	f000 f944 	bl	8005c7c <MX_TIM1_Init>
  MX_TIM4_Init();
 80059f4:	f000 fb1c 	bl	8006030 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  DMX_uart = &huart2;
 80059f8:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <main+0x44>)
 80059fa:	4a06      	ldr	r2, [pc, #24]	; (8005a14 <main+0x48>)
 80059fc:	601a      	str	r2, [r3, #0]

  Tick_Timer = &htim4;
 80059fe:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <main+0x4c>)
 8005a00:	4a06      	ldr	r2, [pc, #24]	; (8005a1c <main+0x50>)
 8005a02:	601a      	str	r2, [r3, #0]

  //hi2c_display = &hi2c1;

  App_Init();
 8005a04:	f7ff fcd0 	bl	80053a8 <App_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	App();
 8005a08:	f7ff fe5e 	bl	80056c8 <App>
 8005a0c:	e7fc      	b.n	8005a08 <main+0x3c>
 8005a0e:	bf00      	nop
 8005a10:	2000098c 	.word	0x2000098c
 8005a14:	20000b54 	.word	0x20000b54
 8005a18:	200009e0 	.word	0x200009e0
 8005a1c:	20000a14 	.word	0x20000a14

08005a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b094      	sub	sp, #80	; 0x50
 8005a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a2a:	2228      	movs	r2, #40	; 0x28
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fda0 	bl	8006574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a34:	f107 0314 	add.w	r3, r7, #20
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	605a      	str	r2, [r3, #4]
 8005a3e:	609a      	str	r2, [r3, #8]
 8005a40:	60da      	str	r2, [r3, #12]
 8005a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005a44:	1d3b      	adds	r3, r7, #4
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	605a      	str	r2, [r3, #4]
 8005a4c:	609a      	str	r2, [r3, #8]
 8005a4e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005a50:	2301      	movs	r3, #1
 8005a52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005a54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a62:	2302      	movs	r3, #2
 8005a64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005a66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fb ff69 	bl	800194c <HAL_RCC_OscConfig>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8005a80:	f000 f826 	bl	8005ad0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a84:	230f      	movs	r3, #15
 8005a86:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a88:	2302      	movs	r3, #2
 8005a8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005a90:	2300      	movs	r3, #0
 8005a92:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005a94:	2300      	movs	r3, #0
 8005a96:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005a98:	f107 0314 	add.w	r3, r7, #20
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fc f9d4 	bl	8001e4c <HAL_RCC_ClockConfig>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8005aaa:	f000 f811 	bl	8005ad0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005aae:	2302      	movs	r3, #2
 8005ab0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005ab6:	1d3b      	adds	r3, r7, #4
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fc fb63 	bl	8002184 <HAL_RCCEx_PeriphCLKConfig>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8005ac4:	f000 f804 	bl	8005ad0 <Error_Handler>
  }
}
 8005ac8:	bf00      	nop
 8005aca:	3750      	adds	r7, #80	; 0x50
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005ad4:	bf00      	nop
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bc80      	pop	{r7}
 8005ada:	4770      	bx	lr

08005adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005ae2:	4b15      	ldr	r3, [pc, #84]	; (8005b38 <HAL_MspInit+0x5c>)
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	4a14      	ldr	r2, [pc, #80]	; (8005b38 <HAL_MspInit+0x5c>)
 8005ae8:	f043 0301 	orr.w	r3, r3, #1
 8005aec:	6193      	str	r3, [r2, #24]
 8005aee:	4b12      	ldr	r3, [pc, #72]	; (8005b38 <HAL_MspInit+0x5c>)
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	60bb      	str	r3, [r7, #8]
 8005af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005afa:	4b0f      	ldr	r3, [pc, #60]	; (8005b38 <HAL_MspInit+0x5c>)
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	4a0e      	ldr	r2, [pc, #56]	; (8005b38 <HAL_MspInit+0x5c>)
 8005b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b04:	61d3      	str	r3, [r2, #28]
 8005b06:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <HAL_MspInit+0x5c>)
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b0e:	607b      	str	r3, [r7, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005b12:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <HAL_MspInit+0x60>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	4a04      	ldr	r2, [pc, #16]	; (8005b3c <HAL_MspInit+0x60>)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b2e:	bf00      	nop
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bc80      	pop	{r7}
 8005b36:	4770      	bx	lr
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	40010000 	.word	0x40010000

08005b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005b44:	bf00      	nop
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bc80      	pop	{r7}
 8005b4a:	4770      	bx	lr

08005b4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b50:	e7fe      	b.n	8005b50 <HardFault_Handler+0x4>

08005b52 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b52:	b480      	push	{r7}
 8005b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b56:	e7fe      	b.n	8005b56 <MemManage_Handler+0x4>

08005b58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b5c:	e7fe      	b.n	8005b5c <BusFault_Handler+0x4>

08005b5e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b62:	e7fe      	b.n	8005b62 <UsageFault_Handler+0x4>

08005b64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b68:	bf00      	nop
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bc80      	pop	{r7}
 8005b6e:	4770      	bx	lr

08005b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b74:	bf00      	nop
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr

08005b7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b80:	bf00      	nop
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bc80      	pop	{r7}
 8005b86:	4770      	bx	lr

08005b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b8c:	f7fa ff92 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b90:	bf00      	nop
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005b98:	4802      	ldr	r0, [pc, #8]	; (8005ba4 <TIM4_IRQHandler+0x10>)
 8005b9a:	f7fc fc5d 	bl	8002458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005b9e:	bf00      	nop
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20000a14 	.word	0x20000a14

08005ba8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005bac:	4802      	ldr	r0, [pc, #8]	; (8005bb8 <USART2_IRQHandler+0x10>)
 8005bae:	f7fd fae9 	bl	8003184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005bb2:	bf00      	nop
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20000b54 	.word	0x20000b54

08005bbc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005bc4:	4b11      	ldr	r3, [pc, #68]	; (8005c0c <_sbrk+0x50>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d102      	bne.n	8005bd2 <_sbrk+0x16>
		heap_end = &end;
 8005bcc:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <_sbrk+0x50>)
 8005bce:	4a10      	ldr	r2, [pc, #64]	; (8005c10 <_sbrk+0x54>)
 8005bd0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005bd2:	4b0e      	ldr	r3, [pc, #56]	; (8005c0c <_sbrk+0x50>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005bd8:	4b0c      	ldr	r3, [pc, #48]	; (8005c0c <_sbrk+0x50>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4413      	add	r3, r2
 8005be0:	466a      	mov	r2, sp
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d907      	bls.n	8005bf6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005be6:	f000 fc9b 	bl	8006520 <__errno>
 8005bea:	4602      	mov	r2, r0
 8005bec:	230c      	movs	r3, #12
 8005bee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf4:	e006      	b.n	8005c04 <_sbrk+0x48>
	}

	heap_end += incr;
 8005bf6:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <_sbrk+0x50>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	4a03      	ldr	r2, [pc, #12]	; (8005c0c <_sbrk+0x50>)
 8005c00:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005c02:	68fb      	ldr	r3, [r7, #12]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	200004d8 	.word	0x200004d8
 8005c10:	20000b98 	.word	0x20000b98

08005c14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005c18:	4b15      	ldr	r3, [pc, #84]	; (8005c70 <SystemInit+0x5c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a14      	ldr	r2, [pc, #80]	; (8005c70 <SystemInit+0x5c>)
 8005c1e:	f043 0301 	orr.w	r3, r3, #1
 8005c22:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005c24:	4b12      	ldr	r3, [pc, #72]	; (8005c70 <SystemInit+0x5c>)
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	4911      	ldr	r1, [pc, #68]	; (8005c70 <SystemInit+0x5c>)
 8005c2a:	4b12      	ldr	r3, [pc, #72]	; (8005c74 <SystemInit+0x60>)
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005c30:	4b0f      	ldr	r3, [pc, #60]	; (8005c70 <SystemInit+0x5c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a0e      	ldr	r2, [pc, #56]	; (8005c70 <SystemInit+0x5c>)
 8005c36:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c3e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005c40:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <SystemInit+0x5c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a0a      	ldr	r2, [pc, #40]	; (8005c70 <SystemInit+0x5c>)
 8005c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c4a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005c4c:	4b08      	ldr	r3, [pc, #32]	; (8005c70 <SystemInit+0x5c>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	4a07      	ldr	r2, [pc, #28]	; (8005c70 <SystemInit+0x5c>)
 8005c52:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005c56:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <SystemInit+0x5c>)
 8005c5a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005c5e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005c60:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <SystemInit+0x64>)
 8005c62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c66:	609a      	str	r2, [r3, #8]
#endif 
}
 8005c68:	bf00      	nop
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bc80      	pop	{r7}
 8005c6e:	4770      	bx	lr
 8005c70:	40021000 	.word	0x40021000
 8005c74:	f8ff0000 	.word	0xf8ff0000
 8005c78:	e000ed00 	.word	0xe000ed00

08005c7c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b096      	sub	sp, #88	; 0x58
 8005c80:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005c86:	2200      	movs	r2, #0
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	605a      	str	r2, [r3, #4]
 8005c8c:	609a      	str	r2, [r3, #8]
 8005c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	605a      	str	r2, [r3, #4]
 8005ca4:	609a      	str	r2, [r3, #8]
 8005ca6:	60da      	str	r2, [r3, #12]
 8005ca8:	611a      	str	r2, [r3, #16]
 8005caa:	615a      	str	r2, [r3, #20]
 8005cac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005cae:	1d3b      	adds	r3, r7, #4
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 fc5d 	bl	8006574 <memset>

  htim1.Instance = TIM1;
 8005cba:	4b50      	ldr	r3, [pc, #320]	; (8005dfc <MX_TIM1_Init+0x180>)
 8005cbc:	4a50      	ldr	r2, [pc, #320]	; (8005e00 <MX_TIM1_Init+0x184>)
 8005cbe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 30;
 8005cc0:	4b4e      	ldr	r3, [pc, #312]	; (8005dfc <MX_TIM1_Init+0x180>)
 8005cc2:	221e      	movs	r2, #30
 8005cc4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cc6:	4b4d      	ldr	r3, [pc, #308]	; (8005dfc <MX_TIM1_Init+0x180>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8005ccc:	4b4b      	ldr	r3, [pc, #300]	; (8005dfc <MX_TIM1_Init+0x180>)
 8005cce:	22ff      	movs	r2, #255	; 0xff
 8005cd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cd2:	4b4a      	ldr	r3, [pc, #296]	; (8005dfc <MX_TIM1_Init+0x180>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005cd8:	4b48      	ldr	r3, [pc, #288]	; (8005dfc <MX_TIM1_Init+0x180>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005cde:	4b47      	ldr	r3, [pc, #284]	; (8005dfc <MX_TIM1_Init+0x180>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005ce4:	4845      	ldr	r0, [pc, #276]	; (8005dfc <MX_TIM1_Init+0x180>)
 8005ce6:	f7fc fb03 	bl	80022f0 <HAL_TIM_Base_Init>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8005cf0:	f7ff feee 	bl	8005ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cf8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005cfa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005cfe:	4619      	mov	r1, r3
 8005d00:	483e      	ldr	r0, [pc, #248]	; (8005dfc <MX_TIM1_Init+0x180>)
 8005d02:	f7fc fd77 	bl	80027f4 <HAL_TIM_ConfigClockSource>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d001      	beq.n	8005d10 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8005d0c:	f7ff fee0 	bl	8005ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005d10:	483a      	ldr	r0, [pc, #232]	; (8005dfc <MX_TIM1_Init+0x180>)
 8005d12:	f7fc fb3b 	bl	800238c <HAL_TIM_PWM_Init>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8005d1c:	f7ff fed8 	bl	8005ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d20:	2300      	movs	r3, #0
 8005d22:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d24:	2300      	movs	r3, #0
 8005d26:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005d28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4833      	ldr	r0, [pc, #204]	; (8005dfc <MX_TIM1_Init+0x180>)
 8005d30:	f7fd f8e0 	bl	8002ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8005d3a:	f7ff fec9 	bl	8005ad0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d3e:	2360      	movs	r3, #96	; 0x60
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005d42:	2300      	movs	r3, #0
 8005d44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d46:	2300      	movs	r3, #0
 8005d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005d52:	2300      	movs	r3, #0
 8005d54:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005d56:	2300      	movs	r3, #0
 8005d58:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d5e:	2200      	movs	r2, #0
 8005d60:	4619      	mov	r1, r3
 8005d62:	4826      	ldr	r0, [pc, #152]	; (8005dfc <MX_TIM1_Init+0x180>)
 8005d64:	f7fc fc80 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8005d6e:	f7ff feaf 	bl	8005ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d76:	2204      	movs	r2, #4
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4820      	ldr	r0, [pc, #128]	; (8005dfc <MX_TIM1_Init+0x180>)
 8005d7c:	f7fc fc74 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8005d86:	f7ff fea3 	bl	8005ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d8e:	2208      	movs	r2, #8
 8005d90:	4619      	mov	r1, r3
 8005d92:	481a      	ldr	r0, [pc, #104]	; (8005dfc <MX_TIM1_Init+0x180>)
 8005d94:	f7fc fc68 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8005d9e:	f7ff fe97 	bl	8005ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005da6:	220c      	movs	r2, #12
 8005da8:	4619      	mov	r1, r3
 8005daa:	4814      	ldr	r0, [pc, #80]	; (8005dfc <MX_TIM1_Init+0x180>)
 8005dac:	f7fc fc5c 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8005db6:	f7ff fe8b 	bl	8005ad0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005dd2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005dd8:	1d3b      	adds	r3, r7, #4
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4807      	ldr	r0, [pc, #28]	; (8005dfc <MX_TIM1_Init+0x180>)
 8005dde:	f7fd f8cd 	bl	8002f7c <HAL_TIMEx_ConfigBreakDeadTime>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d001      	beq.n	8005dec <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8005de8:	f7ff fe72 	bl	8005ad0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8005dec:	4803      	ldr	r0, [pc, #12]	; (8005dfc <MX_TIM1_Init+0x180>)
 8005dee:	f000 f9cd 	bl	800618c <HAL_TIM_MspPostInit>

}
 8005df2:	bf00      	nop
 8005df4:	3758      	adds	r7, #88	; 0x58
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	20000a94 	.word	0x20000a94
 8005e00:	40012c00 	.word	0x40012c00

08005e04 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08e      	sub	sp, #56	; 0x38
 8005e08:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e0e:	2200      	movs	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]
 8005e12:	605a      	str	r2, [r3, #4]
 8005e14:	609a      	str	r2, [r3, #8]
 8005e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e18:	f107 0320 	add.w	r3, r7, #32
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e22:	1d3b      	adds	r3, r7, #4
 8005e24:	2200      	movs	r2, #0
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	605a      	str	r2, [r3, #4]
 8005e2a:	609a      	str	r2, [r3, #8]
 8005e2c:	60da      	str	r2, [r3, #12]
 8005e2e:	611a      	str	r2, [r3, #16]
 8005e30:	615a      	str	r2, [r3, #20]
 8005e32:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8005e34:	4b3d      	ldr	r3, [pc, #244]	; (8005f2c <MX_TIM2_Init+0x128>)
 8005e36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 30;
 8005e3c:	4b3b      	ldr	r3, [pc, #236]	; (8005f2c <MX_TIM2_Init+0x128>)
 8005e3e:	221e      	movs	r2, #30
 8005e40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e42:	4b3a      	ldr	r3, [pc, #232]	; (8005f2c <MX_TIM2_Init+0x128>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8005e48:	4b38      	ldr	r3, [pc, #224]	; (8005f2c <MX_TIM2_Init+0x128>)
 8005e4a:	22ff      	movs	r2, #255	; 0xff
 8005e4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e4e:	4b37      	ldr	r3, [pc, #220]	; (8005f2c <MX_TIM2_Init+0x128>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e54:	4b35      	ldr	r3, [pc, #212]	; (8005f2c <MX_TIM2_Init+0x128>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005e5a:	4834      	ldr	r0, [pc, #208]	; (8005f2c <MX_TIM2_Init+0x128>)
 8005e5c:	f7fc fa48 	bl	80022f0 <HAL_TIM_Base_Init>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8005e66:	f7ff fe33 	bl	8005ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005e70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e74:	4619      	mov	r1, r3
 8005e76:	482d      	ldr	r0, [pc, #180]	; (8005f2c <MX_TIM2_Init+0x128>)
 8005e78:	f7fc fcbc 	bl	80027f4 <HAL_TIM_ConfigClockSource>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8005e82:	f7ff fe25 	bl	8005ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005e86:	4829      	ldr	r0, [pc, #164]	; (8005f2c <MX_TIM2_Init+0x128>)
 8005e88:	f7fc fa80 	bl	800238c <HAL_TIM_PWM_Init>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8005e92:	f7ff fe1d 	bl	8005ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e96:	2300      	movs	r3, #0
 8005e98:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005e9e:	f107 0320 	add.w	r3, r7, #32
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4821      	ldr	r0, [pc, #132]	; (8005f2c <MX_TIM2_Init+0x128>)
 8005ea6:	f7fd f825 	bl	8002ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8005eb0:	f7ff fe0e 	bl	8005ad0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005eb4:	2360      	movs	r3, #96	; 0x60
 8005eb6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ec4:	1d3b      	adds	r3, r7, #4
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	4619      	mov	r1, r3
 8005eca:	4818      	ldr	r0, [pc, #96]	; (8005f2c <MX_TIM2_Init+0x128>)
 8005ecc:	f7fc fbcc 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8005ed6:	f7ff fdfb 	bl	8005ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005eda:	1d3b      	adds	r3, r7, #4
 8005edc:	2204      	movs	r2, #4
 8005ede:	4619      	mov	r1, r3
 8005ee0:	4812      	ldr	r0, [pc, #72]	; (8005f2c <MX_TIM2_Init+0x128>)
 8005ee2:	f7fc fbc1 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8005eec:	f7ff fdf0 	bl	8005ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005ef0:	1d3b      	adds	r3, r7, #4
 8005ef2:	2208      	movs	r2, #8
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	480d      	ldr	r0, [pc, #52]	; (8005f2c <MX_TIM2_Init+0x128>)
 8005ef8:	f7fc fbb6 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8005f02:	f7ff fde5 	bl	8005ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005f06:	1d3b      	adds	r3, r7, #4
 8005f08:	220c      	movs	r2, #12
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	4807      	ldr	r0, [pc, #28]	; (8005f2c <MX_TIM2_Init+0x128>)
 8005f0e:	f7fc fbab 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d001      	beq.n	8005f1c <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8005f18:	f7ff fdda 	bl	8005ad0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8005f1c:	4803      	ldr	r0, [pc, #12]	; (8005f2c <MX_TIM2_Init+0x128>)
 8005f1e:	f000 f935 	bl	800618c <HAL_TIM_MspPostInit>

}
 8005f22:	bf00      	nop
 8005f24:	3738      	adds	r7, #56	; 0x38
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20000ad4 	.word	0x20000ad4

08005f30 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08e      	sub	sp, #56	; 0x38
 8005f34:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	605a      	str	r2, [r3, #4]
 8005f40:	609a      	str	r2, [r3, #8]
 8005f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f44:	f107 0320 	add.w	r3, r7, #32
 8005f48:	2200      	movs	r2, #0
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f4e:	1d3b      	adds	r3, r7, #4
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	605a      	str	r2, [r3, #4]
 8005f56:	609a      	str	r2, [r3, #8]
 8005f58:	60da      	str	r2, [r3, #12]
 8005f5a:	611a      	str	r2, [r3, #16]
 8005f5c:	615a      	str	r2, [r3, #20]
 8005f5e:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8005f60:	4b31      	ldr	r3, [pc, #196]	; (8006028 <MX_TIM3_Init+0xf8>)
 8005f62:	4a32      	ldr	r2, [pc, #200]	; (800602c <MX_TIM3_Init+0xfc>)
 8005f64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 30;
 8005f66:	4b30      	ldr	r3, [pc, #192]	; (8006028 <MX_TIM3_Init+0xf8>)
 8005f68:	221e      	movs	r2, #30
 8005f6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f6c:	4b2e      	ldr	r3, [pc, #184]	; (8006028 <MX_TIM3_Init+0xf8>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8005f72:	4b2d      	ldr	r3, [pc, #180]	; (8006028 <MX_TIM3_Init+0xf8>)
 8005f74:	22ff      	movs	r2, #255	; 0xff
 8005f76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f78:	4b2b      	ldr	r3, [pc, #172]	; (8006028 <MX_TIM3_Init+0xf8>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f7e:	4b2a      	ldr	r3, [pc, #168]	; (8006028 <MX_TIM3_Init+0xf8>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005f84:	4828      	ldr	r0, [pc, #160]	; (8006028 <MX_TIM3_Init+0xf8>)
 8005f86:	f7fc f9b3 	bl	80022f0 <HAL_TIM_Base_Init>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8005f90:	f7ff fd9e 	bl	8005ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f98:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005f9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	4821      	ldr	r0, [pc, #132]	; (8006028 <MX_TIM3_Init+0xf8>)
 8005fa2:	f7fc fc27 	bl	80027f4 <HAL_TIM_ConfigClockSource>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8005fac:	f7ff fd90 	bl	8005ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005fb0:	481d      	ldr	r0, [pc, #116]	; (8006028 <MX_TIM3_Init+0xf8>)
 8005fb2:	f7fc f9eb 	bl	800238c <HAL_TIM_PWM_Init>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8005fbc:	f7ff fd88 	bl	8005ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005fc8:	f107 0320 	add.w	r3, r7, #32
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4816      	ldr	r0, [pc, #88]	; (8006028 <MX_TIM3_Init+0xf8>)
 8005fd0:	f7fc ff90 	bl	8002ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8005fda:	f7ff fd79 	bl	8005ad0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005fde:	2360      	movs	r3, #96	; 0x60
 8005fe0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005fee:	1d3b      	adds	r3, r7, #4
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	480c      	ldr	r0, [pc, #48]	; (8006028 <MX_TIM3_Init+0xf8>)
 8005ff6:	f7fc fb37 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8006000:	f7ff fd66 	bl	8005ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006004:	1d3b      	adds	r3, r7, #4
 8006006:	2204      	movs	r2, #4
 8006008:	4619      	mov	r1, r3
 800600a:	4807      	ldr	r0, [pc, #28]	; (8006028 <MX_TIM3_Init+0xf8>)
 800600c:	f7fc fb2c 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8006016:	f7ff fd5b 	bl	8005ad0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800601a:	4803      	ldr	r0, [pc, #12]	; (8006028 <MX_TIM3_Init+0xf8>)
 800601c:	f000 f8b6 	bl	800618c <HAL_TIM_MspPostInit>

}
 8006020:	bf00      	nop
 8006022:	3738      	adds	r7, #56	; 0x38
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	20000a54 	.word	0x20000a54
 800602c:	40000400 	.word	0x40000400

08006030 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006036:	f107 0308 	add.w	r3, r7, #8
 800603a:	2200      	movs	r2, #0
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	605a      	str	r2, [r3, #4]
 8006040:	609a      	str	r2, [r3, #8]
 8006042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006044:	463b      	mov	r3, r7
 8006046:	2200      	movs	r2, #0
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 800604c:	4b1d      	ldr	r3, [pc, #116]	; (80060c4 <MX_TIM4_Init+0x94>)
 800604e:	4a1e      	ldr	r2, [pc, #120]	; (80060c8 <MX_TIM4_Init+0x98>)
 8006050:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63000;
 8006052:	4b1c      	ldr	r3, [pc, #112]	; (80060c4 <MX_TIM4_Init+0x94>)
 8006054:	f24f 6218 	movw	r2, #63000	; 0xf618
 8006058:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800605a:	4b1a      	ldr	r3, [pc, #104]	; (80060c4 <MX_TIM4_Init+0x94>)
 800605c:	2200      	movs	r2, #0
 800605e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5;
 8006060:	4b18      	ldr	r3, [pc, #96]	; (80060c4 <MX_TIM4_Init+0x94>)
 8006062:	2205      	movs	r2, #5
 8006064:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006066:	4b17      	ldr	r3, [pc, #92]	; (80060c4 <MX_TIM4_Init+0x94>)
 8006068:	2200      	movs	r2, #0
 800606a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800606c:	4b15      	ldr	r3, [pc, #84]	; (80060c4 <MX_TIM4_Init+0x94>)
 800606e:	2280      	movs	r2, #128	; 0x80
 8006070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006072:	4814      	ldr	r0, [pc, #80]	; (80060c4 <MX_TIM4_Init+0x94>)
 8006074:	f7fc f93c 	bl	80022f0 <HAL_TIM_Base_Init>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800607e:	f7ff fd27 	bl	8005ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006086:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8006088:	f107 0308 	add.w	r3, r7, #8
 800608c:	4619      	mov	r1, r3
 800608e:	480d      	ldr	r0, [pc, #52]	; (80060c4 <MX_TIM4_Init+0x94>)
 8006090:	f7fc fbb0 	bl	80027f4 <HAL_TIM_ConfigClockSource>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800609a:	f7ff fd19 	bl	8005ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800609e:	2300      	movs	r3, #0
 80060a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80060a2:	2300      	movs	r3, #0
 80060a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80060a6:	463b      	mov	r3, r7
 80060a8:	4619      	mov	r1, r3
 80060aa:	4806      	ldr	r0, [pc, #24]	; (80060c4 <MX_TIM4_Init+0x94>)
 80060ac:	f7fc ff22 	bl	8002ef4 <HAL_TIMEx_MasterConfigSynchronization>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80060b6:	f7ff fd0b 	bl	8005ad0 <Error_Handler>
  }

}
 80060ba:	bf00      	nop
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20000a14 	.word	0x20000a14
 80060c8:	40000800 	.word	0x40000800

080060cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a28      	ldr	r2, [pc, #160]	; (800617c <HAL_TIM_Base_MspInit+0xb0>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d10c      	bne.n	80060f8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80060de:	4b28      	ldr	r3, [pc, #160]	; (8006180 <HAL_TIM_Base_MspInit+0xb4>)
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	4a27      	ldr	r2, [pc, #156]	; (8006180 <HAL_TIM_Base_MspInit+0xb4>)
 80060e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80060e8:	6193      	str	r3, [r2, #24]
 80060ea:	4b25      	ldr	r3, [pc, #148]	; (8006180 <HAL_TIM_Base_MspInit+0xb4>)
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80060f6:	e03c      	b.n	8006172 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM2)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006100:	d10c      	bne.n	800611c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006102:	4b1f      	ldr	r3, [pc, #124]	; (8006180 <HAL_TIM_Base_MspInit+0xb4>)
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	4a1e      	ldr	r2, [pc, #120]	; (8006180 <HAL_TIM_Base_MspInit+0xb4>)
 8006108:	f043 0301 	orr.w	r3, r3, #1
 800610c:	61d3      	str	r3, [r2, #28]
 800610e:	4b1c      	ldr	r3, [pc, #112]	; (8006180 <HAL_TIM_Base_MspInit+0xb4>)
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	613b      	str	r3, [r7, #16]
 8006118:	693b      	ldr	r3, [r7, #16]
}
 800611a:	e02a      	b.n	8006172 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a18      	ldr	r2, [pc, #96]	; (8006184 <HAL_TIM_Base_MspInit+0xb8>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d10c      	bne.n	8006140 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006126:	4b16      	ldr	r3, [pc, #88]	; (8006180 <HAL_TIM_Base_MspInit+0xb4>)
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	4a15      	ldr	r2, [pc, #84]	; (8006180 <HAL_TIM_Base_MspInit+0xb4>)
 800612c:	f043 0302 	orr.w	r3, r3, #2
 8006130:	61d3      	str	r3, [r2, #28]
 8006132:	4b13      	ldr	r3, [pc, #76]	; (8006180 <HAL_TIM_Base_MspInit+0xb4>)
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	68fb      	ldr	r3, [r7, #12]
}
 800613e:	e018      	b.n	8006172 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM4)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a10      	ldr	r2, [pc, #64]	; (8006188 <HAL_TIM_Base_MspInit+0xbc>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d113      	bne.n	8006172 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800614a:	4b0d      	ldr	r3, [pc, #52]	; (8006180 <HAL_TIM_Base_MspInit+0xb4>)
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	4a0c      	ldr	r2, [pc, #48]	; (8006180 <HAL_TIM_Base_MspInit+0xb4>)
 8006150:	f043 0304 	orr.w	r3, r3, #4
 8006154:	61d3      	str	r3, [r2, #28]
 8006156:	4b0a      	ldr	r3, [pc, #40]	; (8006180 <HAL_TIM_Base_MspInit+0xb4>)
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	f003 0304 	and.w	r3, r3, #4
 800615e:	60bb      	str	r3, [r7, #8]
 8006160:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8006162:	2200      	movs	r2, #0
 8006164:	2102      	movs	r1, #2
 8006166:	201e      	movs	r0, #30
 8006168:	f7fa ffa1 	bl	80010ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800616c:	201e      	movs	r0, #30
 800616e:	f7fa ffba 	bl	80010e6 <HAL_NVIC_EnableIRQ>
}
 8006172:	bf00      	nop
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	40012c00 	.word	0x40012c00
 8006180:	40021000 	.word	0x40021000
 8006184:	40000400 	.word	0x40000400
 8006188:	40000800 	.word	0x40000800

0800618c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08c      	sub	sp, #48	; 0x30
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006194:	f107 0318 	add.w	r3, r7, #24
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	605a      	str	r2, [r3, #4]
 800619e:	609a      	str	r2, [r3, #8]
 80061a0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a4c      	ldr	r2, [pc, #304]	; (80062d8 <HAL_TIM_MspPostInit+0x14c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d119      	bne.n	80061e0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ac:	4b4b      	ldr	r3, [pc, #300]	; (80062dc <HAL_TIM_MspPostInit+0x150>)
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	4a4a      	ldr	r2, [pc, #296]	; (80062dc <HAL_TIM_MspPostInit+0x150>)
 80061b2:	f043 0304 	orr.w	r3, r3, #4
 80061b6:	6193      	str	r3, [r2, #24]
 80061b8:	4b48      	ldr	r3, [pc, #288]	; (80062dc <HAL_TIM_MspPostInit+0x150>)
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	697b      	ldr	r3, [r7, #20]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = PWM4_Pin|PWM3_Pin|PWM2_Pin|PWM1_Pin;
 80061c4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80061c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ca:	2302      	movs	r3, #2
 80061cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061ce:	2302      	movs	r3, #2
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061d2:	f107 0318 	add.w	r3, r7, #24
 80061d6:	4619      	mov	r1, r3
 80061d8:	4841      	ldr	r0, [pc, #260]	; (80062e0 <HAL_TIM_MspPostInit+0x154>)
 80061da:	f7fb fa15 	bl	8001608 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80061de:	e077      	b.n	80062d0 <HAL_TIM_MspPostInit+0x144>
  else if(timHandle->Instance==TIM2)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e8:	d143      	bne.n	8006272 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ea:	4b3c      	ldr	r3, [pc, #240]	; (80062dc <HAL_TIM_MspPostInit+0x150>)
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	4a3b      	ldr	r2, [pc, #236]	; (80062dc <HAL_TIM_MspPostInit+0x150>)
 80061f0:	f043 0304 	orr.w	r3, r3, #4
 80061f4:	6193      	str	r3, [r2, #24]
 80061f6:	4b39      	ldr	r3, [pc, #228]	; (80062dc <HAL_TIM_MspPostInit+0x150>)
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	f003 0304 	and.w	r3, r3, #4
 80061fe:	613b      	str	r3, [r7, #16]
 8006200:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006202:	4b36      	ldr	r3, [pc, #216]	; (80062dc <HAL_TIM_MspPostInit+0x150>)
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	4a35      	ldr	r2, [pc, #212]	; (80062dc <HAL_TIM_MspPostInit+0x150>)
 8006208:	f043 0308 	orr.w	r3, r3, #8
 800620c:	6193      	str	r3, [r2, #24]
 800620e:	4b33      	ldr	r3, [pc, #204]	; (80062dc <HAL_TIM_MspPostInit+0x150>)
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	f003 0308 	and.w	r3, r3, #8
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM5_Pin|PWM6_Pin;
 800621a:	2303      	movs	r3, #3
 800621c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800621e:	2302      	movs	r3, #2
 8006220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006222:	2302      	movs	r3, #2
 8006224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006226:	f107 0318 	add.w	r3, r7, #24
 800622a:	4619      	mov	r1, r3
 800622c:	482c      	ldr	r0, [pc, #176]	; (80062e0 <HAL_TIM_MspPostInit+0x154>)
 800622e:	f7fb f9eb 	bl	8001608 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM7_Pin|PWM8_Pin;
 8006232:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006238:	2302      	movs	r3, #2
 800623a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800623c:	2302      	movs	r3, #2
 800623e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006240:	f107 0318 	add.w	r3, r7, #24
 8006244:	4619      	mov	r1, r3
 8006246:	4827      	ldr	r0, [pc, #156]	; (80062e4 <HAL_TIM_MspPostInit+0x158>)
 8006248:	f7fb f9de 	bl	8001608 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 800624c:	4b26      	ldr	r3, [pc, #152]	; (80062e8 <HAL_TIM_MspPostInit+0x15c>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	62bb      	str	r3, [r7, #40]	; 0x28
 8006252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006258:	62bb      	str	r3, [r7, #40]	; 0x28
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8006260:	62bb      	str	r3, [r7, #40]	; 0x28
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006268:	62bb      	str	r3, [r7, #40]	; 0x28
 800626a:	4a1f      	ldr	r2, [pc, #124]	; (80062e8 <HAL_TIM_MspPostInit+0x15c>)
 800626c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626e:	6053      	str	r3, [r2, #4]
}
 8006270:	e02e      	b.n	80062d0 <HAL_TIM_MspPostInit+0x144>
  else if(timHandle->Instance==TIM3)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a1d      	ldr	r2, [pc, #116]	; (80062ec <HAL_TIM_MspPostInit+0x160>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d129      	bne.n	80062d0 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800627c:	4b17      	ldr	r3, [pc, #92]	; (80062dc <HAL_TIM_MspPostInit+0x150>)
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	4a16      	ldr	r2, [pc, #88]	; (80062dc <HAL_TIM_MspPostInit+0x150>)
 8006282:	f043 0308 	orr.w	r3, r3, #8
 8006286:	6193      	str	r3, [r2, #24]
 8006288:	4b14      	ldr	r3, [pc, #80]	; (80062dc <HAL_TIM_MspPostInit+0x150>)
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	f003 0308 	and.w	r3, r3, #8
 8006290:	60bb      	str	r3, [r7, #8]
 8006292:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM9_Pin|PWM10_Pin;
 8006294:	2330      	movs	r3, #48	; 0x30
 8006296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006298:	2302      	movs	r3, #2
 800629a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800629c:	2302      	movs	r3, #2
 800629e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062a0:	f107 0318 	add.w	r3, r7, #24
 80062a4:	4619      	mov	r1, r3
 80062a6:	480f      	ldr	r0, [pc, #60]	; (80062e4 <HAL_TIM_MspPostInit+0x158>)
 80062a8:	f7fb f9ae 	bl	8001608 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80062ac:	4b0e      	ldr	r3, [pc, #56]	; (80062e8 <HAL_TIM_MspPostInit+0x15c>)
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80062b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062bc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80062c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80062c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ca:	4a07      	ldr	r2, [pc, #28]	; (80062e8 <HAL_TIM_MspPostInit+0x15c>)
 80062cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ce:	6053      	str	r3, [r2, #4]
}
 80062d0:	bf00      	nop
 80062d2:	3730      	adds	r7, #48	; 0x30
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	40012c00 	.word	0x40012c00
 80062dc:	40021000 	.word	0x40021000
 80062e0:	40010800 	.word	0x40010800
 80062e4:	40010c00 	.word	0x40010c00
 80062e8:	40010000 	.word	0x40010000
 80062ec:	40000400 	.word	0x40000400

080062f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80062f4:	4b11      	ldr	r3, [pc, #68]	; (800633c <MX_USART1_UART_Init+0x4c>)
 80062f6:	4a12      	ldr	r2, [pc, #72]	; (8006340 <MX_USART1_UART_Init+0x50>)
 80062f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80062fa:	4b10      	ldr	r3, [pc, #64]	; (800633c <MX_USART1_UART_Init+0x4c>)
 80062fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006300:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006302:	4b0e      	ldr	r3, [pc, #56]	; (800633c <MX_USART1_UART_Init+0x4c>)
 8006304:	2200      	movs	r2, #0
 8006306:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006308:	4b0c      	ldr	r3, [pc, #48]	; (800633c <MX_USART1_UART_Init+0x4c>)
 800630a:	2200      	movs	r2, #0
 800630c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800630e:	4b0b      	ldr	r3, [pc, #44]	; (800633c <MX_USART1_UART_Init+0x4c>)
 8006310:	2200      	movs	r2, #0
 8006312:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006314:	4b09      	ldr	r3, [pc, #36]	; (800633c <MX_USART1_UART_Init+0x4c>)
 8006316:	220c      	movs	r2, #12
 8006318:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800631a:	4b08      	ldr	r3, [pc, #32]	; (800633c <MX_USART1_UART_Init+0x4c>)
 800631c:	2200      	movs	r2, #0
 800631e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006320:	4b06      	ldr	r3, [pc, #24]	; (800633c <MX_USART1_UART_Init+0x4c>)
 8006322:	2200      	movs	r2, #0
 8006324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006326:	4805      	ldr	r0, [pc, #20]	; (800633c <MX_USART1_UART_Init+0x4c>)
 8006328:	f7fc fe8b 	bl	8003042 <HAL_UART_Init>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006332:	f7ff fbcd 	bl	8005ad0 <Error_Handler>
  }

}
 8006336:	bf00      	nop
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	20000b14 	.word	0x20000b14
 8006340:	40013800 	.word	0x40013800

08006344 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006348:	4b11      	ldr	r3, [pc, #68]	; (8006390 <MX_USART2_UART_Init+0x4c>)
 800634a:	4a12      	ldr	r2, [pc, #72]	; (8006394 <MX_USART2_UART_Init+0x50>)
 800634c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 800634e:	4b10      	ldr	r3, [pc, #64]	; (8006390 <MX_USART2_UART_Init+0x4c>)
 8006350:	4a11      	ldr	r2, [pc, #68]	; (8006398 <MX_USART2_UART_Init+0x54>)
 8006352:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006354:	4b0e      	ldr	r3, [pc, #56]	; (8006390 <MX_USART2_UART_Init+0x4c>)
 8006356:	2200      	movs	r2, #0
 8006358:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800635a:	4b0d      	ldr	r3, [pc, #52]	; (8006390 <MX_USART2_UART_Init+0x4c>)
 800635c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006362:	4b0b      	ldr	r3, [pc, #44]	; (8006390 <MX_USART2_UART_Init+0x4c>)
 8006364:	2200      	movs	r2, #0
 8006366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8006368:	4b09      	ldr	r3, [pc, #36]	; (8006390 <MX_USART2_UART_Init+0x4c>)
 800636a:	2204      	movs	r2, #4
 800636c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800636e:	4b08      	ldr	r3, [pc, #32]	; (8006390 <MX_USART2_UART_Init+0x4c>)
 8006370:	2200      	movs	r2, #0
 8006372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006374:	4b06      	ldr	r3, [pc, #24]	; (8006390 <MX_USART2_UART_Init+0x4c>)
 8006376:	2200      	movs	r2, #0
 8006378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800637a:	4805      	ldr	r0, [pc, #20]	; (8006390 <MX_USART2_UART_Init+0x4c>)
 800637c:	f7fc fe61 	bl	8003042 <HAL_UART_Init>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006386:	f7ff fba3 	bl	8005ad0 <Error_Handler>
  }

}
 800638a:	bf00      	nop
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20000b54 	.word	0x20000b54
 8006394:	40004400 	.word	0x40004400
 8006398:	0003d090 	.word	0x0003d090

0800639c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08c      	sub	sp, #48	; 0x30
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063a4:	f107 031c 	add.w	r3, r7, #28
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	605a      	str	r2, [r3, #4]
 80063ae:	609a      	str	r2, [r3, #8]
 80063b0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a41      	ldr	r2, [pc, #260]	; (80064bc <HAL_UART_MspInit+0x120>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d13e      	bne.n	800643a <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80063bc:	4b40      	ldr	r3, [pc, #256]	; (80064c0 <HAL_UART_MspInit+0x124>)
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	4a3f      	ldr	r2, [pc, #252]	; (80064c0 <HAL_UART_MspInit+0x124>)
 80063c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063c6:	6193      	str	r3, [r2, #24]
 80063c8:	4b3d      	ldr	r3, [pc, #244]	; (80064c0 <HAL_UART_MspInit+0x124>)
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063d0:	61bb      	str	r3, [r7, #24]
 80063d2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063d4:	4b3a      	ldr	r3, [pc, #232]	; (80064c0 <HAL_UART_MspInit+0x124>)
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	4a39      	ldr	r2, [pc, #228]	; (80064c0 <HAL_UART_MspInit+0x124>)
 80063da:	f043 0308 	orr.w	r3, r3, #8
 80063de:	6193      	str	r3, [r2, #24]
 80063e0:	4b37      	ldr	r3, [pc, #220]	; (80064c0 <HAL_UART_MspInit+0x124>)
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	f003 0308 	and.w	r3, r3, #8
 80063e8:	617b      	str	r3, [r7, #20]
 80063ea:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_DUBUG_Pin;
 80063ec:	2340      	movs	r3, #64	; 0x40
 80063ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063f0:	2302      	movs	r3, #2
 80063f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80063f4:	2303      	movs	r3, #3
 80063f6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(USART_TX_DUBUG_GPIO_Port, &GPIO_InitStruct);
 80063f8:	f107 031c 	add.w	r3, r7, #28
 80063fc:	4619      	mov	r1, r3
 80063fe:	4831      	ldr	r0, [pc, #196]	; (80064c4 <HAL_UART_MspInit+0x128>)
 8006400:	f7fb f902 	bl	8001608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_DUBUG_Pin;
 8006404:	2380      	movs	r3, #128	; 0x80
 8006406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006408:	2300      	movs	r3, #0
 800640a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800640c:	2300      	movs	r3, #0
 800640e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USART_RX_DUBUG_GPIO_Port, &GPIO_InitStruct);
 8006410:	f107 031c 	add.w	r3, r7, #28
 8006414:	4619      	mov	r1, r3
 8006416:	482b      	ldr	r0, [pc, #172]	; (80064c4 <HAL_UART_MspInit+0x128>)
 8006418:	f7fb f8f6 	bl	8001608 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800641c:	4b2a      	ldr	r3, [pc, #168]	; (80064c8 <HAL_UART_MspInit+0x12c>)
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8006428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800642a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642c:	f043 0304 	orr.w	r3, r3, #4
 8006430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006432:	4a25      	ldr	r2, [pc, #148]	; (80064c8 <HAL_UART_MspInit+0x12c>)
 8006434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006436:	6053      	str	r3, [r2, #4]
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006438:	e03c      	b.n	80064b4 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART2)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a23      	ldr	r2, [pc, #140]	; (80064cc <HAL_UART_MspInit+0x130>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d137      	bne.n	80064b4 <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006444:	4b1e      	ldr	r3, [pc, #120]	; (80064c0 <HAL_UART_MspInit+0x124>)
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	4a1d      	ldr	r2, [pc, #116]	; (80064c0 <HAL_UART_MspInit+0x124>)
 800644a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800644e:	61d3      	str	r3, [r2, #28]
 8006450:	4b1b      	ldr	r3, [pc, #108]	; (80064c0 <HAL_UART_MspInit+0x124>)
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006458:	613b      	str	r3, [r7, #16]
 800645a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800645c:	4b18      	ldr	r3, [pc, #96]	; (80064c0 <HAL_UART_MspInit+0x124>)
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	4a17      	ldr	r2, [pc, #92]	; (80064c0 <HAL_UART_MspInit+0x124>)
 8006462:	f043 0304 	orr.w	r3, r3, #4
 8006466:	6193      	str	r3, [r2, #24]
 8006468:	4b15      	ldr	r3, [pc, #84]	; (80064c0 <HAL_UART_MspInit+0x124>)
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	60fb      	str	r3, [r7, #12]
 8006472:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DMX_OUT_Pin;
 8006474:	2304      	movs	r3, #4
 8006476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006478:	2302      	movs	r3, #2
 800647a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800647c:	2303      	movs	r3, #3
 800647e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(DMX_OUT_GPIO_Port, &GPIO_InitStruct);
 8006480:	f107 031c 	add.w	r3, r7, #28
 8006484:	4619      	mov	r1, r3
 8006486:	4812      	ldr	r0, [pc, #72]	; (80064d0 <HAL_UART_MspInit+0x134>)
 8006488:	f7fb f8be 	bl	8001608 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DMX_IN_Pin;
 800648c:	2308      	movs	r3, #8
 800648e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006490:	2300      	movs	r3, #0
 8006492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006494:	2300      	movs	r3, #0
 8006496:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DMX_IN_GPIO_Port, &GPIO_InitStruct);
 8006498:	f107 031c 	add.w	r3, r7, #28
 800649c:	4619      	mov	r1, r3
 800649e:	480c      	ldr	r0, [pc, #48]	; (80064d0 <HAL_UART_MspInit+0x134>)
 80064a0:	f7fb f8b2 	bl	8001608 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80064a4:	2200      	movs	r2, #0
 80064a6:	2101      	movs	r1, #1
 80064a8:	2026      	movs	r0, #38	; 0x26
 80064aa:	f7fa fe00 	bl	80010ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80064ae:	2026      	movs	r0, #38	; 0x26
 80064b0:	f7fa fe19 	bl	80010e6 <HAL_NVIC_EnableIRQ>
}
 80064b4:	bf00      	nop
 80064b6:	3730      	adds	r7, #48	; 0x30
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	40013800 	.word	0x40013800
 80064c0:	40021000 	.word	0x40021000
 80064c4:	40010c00 	.word	0x40010c00
 80064c8:	40010000 	.word	0x40010000
 80064cc:	40004400 	.word	0x40004400
 80064d0:	40010800 	.word	0x40010800

080064d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80064d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80064d6:	e003      	b.n	80064e0 <LoopCopyDataInit>

080064d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80064d8:	4b0b      	ldr	r3, [pc, #44]	; (8006508 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80064da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80064dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80064de:	3104      	adds	r1, #4

080064e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80064e0:	480a      	ldr	r0, [pc, #40]	; (800650c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80064e2:	4b0b      	ldr	r3, [pc, #44]	; (8006510 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80064e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80064e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80064e8:	d3f6      	bcc.n	80064d8 <CopyDataInit>
  ldr r2, =_sbss
 80064ea:	4a0a      	ldr	r2, [pc, #40]	; (8006514 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80064ec:	e002      	b.n	80064f4 <LoopFillZerobss>

080064ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80064ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80064f0:	f842 3b04 	str.w	r3, [r2], #4

080064f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80064f4:	4b08      	ldr	r3, [pc, #32]	; (8006518 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80064f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80064f8:	d3f9      	bcc.n	80064ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80064fa:	f7ff fb8b 	bl	8005c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80064fe:	f000 f815 	bl	800652c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006502:	f7ff fa63 	bl	80059cc <main>
  bx lr
 8006506:	4770      	bx	lr
  ldr r3, =_sidata
 8006508:	080096c4 	.word	0x080096c4
  ldr r0, =_sdata
 800650c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006510:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 8006514:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 8006518:	20000b98 	.word	0x20000b98

0800651c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800651c:	e7fe      	b.n	800651c <ADC1_2_IRQHandler>
	...

08006520 <__errno>:
 8006520:	4b01      	ldr	r3, [pc, #4]	; (8006528 <__errno+0x8>)
 8006522:	6818      	ldr	r0, [r3, #0]
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	20000024 	.word	0x20000024

0800652c <__libc_init_array>:
 800652c:	b570      	push	{r4, r5, r6, lr}
 800652e:	2500      	movs	r5, #0
 8006530:	4e0c      	ldr	r6, [pc, #48]	; (8006564 <__libc_init_array+0x38>)
 8006532:	4c0d      	ldr	r4, [pc, #52]	; (8006568 <__libc_init_array+0x3c>)
 8006534:	1ba4      	subs	r4, r4, r6
 8006536:	10a4      	asrs	r4, r4, #2
 8006538:	42a5      	cmp	r5, r4
 800653a:	d109      	bne.n	8006550 <__libc_init_array+0x24>
 800653c:	f000 fc34 	bl	8006da8 <_init>
 8006540:	2500      	movs	r5, #0
 8006542:	4e0a      	ldr	r6, [pc, #40]	; (800656c <__libc_init_array+0x40>)
 8006544:	4c0a      	ldr	r4, [pc, #40]	; (8006570 <__libc_init_array+0x44>)
 8006546:	1ba4      	subs	r4, r4, r6
 8006548:	10a4      	asrs	r4, r4, #2
 800654a:	42a5      	cmp	r5, r4
 800654c:	d105      	bne.n	800655a <__libc_init_array+0x2e>
 800654e:	bd70      	pop	{r4, r5, r6, pc}
 8006550:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006554:	4798      	blx	r3
 8006556:	3501      	adds	r5, #1
 8006558:	e7ee      	b.n	8006538 <__libc_init_array+0xc>
 800655a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800655e:	4798      	blx	r3
 8006560:	3501      	adds	r5, #1
 8006562:	e7f2      	b.n	800654a <__libc_init_array+0x1e>
 8006564:	080096bc 	.word	0x080096bc
 8006568:	080096bc 	.word	0x080096bc
 800656c:	080096bc 	.word	0x080096bc
 8006570:	080096c0 	.word	0x080096c0

08006574 <memset>:
 8006574:	4603      	mov	r3, r0
 8006576:	4402      	add	r2, r0
 8006578:	4293      	cmp	r3, r2
 800657a:	d100      	bne.n	800657e <memset+0xa>
 800657c:	4770      	bx	lr
 800657e:	f803 1b01 	strb.w	r1, [r3], #1
 8006582:	e7f9      	b.n	8006578 <memset+0x4>

08006584 <siprintf>:
 8006584:	b40e      	push	{r1, r2, r3}
 8006586:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800658a:	b500      	push	{lr}
 800658c:	b09c      	sub	sp, #112	; 0x70
 800658e:	ab1d      	add	r3, sp, #116	; 0x74
 8006590:	9002      	str	r0, [sp, #8]
 8006592:	9006      	str	r0, [sp, #24]
 8006594:	9107      	str	r1, [sp, #28]
 8006596:	9104      	str	r1, [sp, #16]
 8006598:	4808      	ldr	r0, [pc, #32]	; (80065bc <siprintf+0x38>)
 800659a:	4909      	ldr	r1, [pc, #36]	; (80065c0 <siprintf+0x3c>)
 800659c:	f853 2b04 	ldr.w	r2, [r3], #4
 80065a0:	9105      	str	r1, [sp, #20]
 80065a2:	6800      	ldr	r0, [r0, #0]
 80065a4:	a902      	add	r1, sp, #8
 80065a6:	9301      	str	r3, [sp, #4]
 80065a8:	f000 f866 	bl	8006678 <_svfiprintf_r>
 80065ac:	2200      	movs	r2, #0
 80065ae:	9b02      	ldr	r3, [sp, #8]
 80065b0:	701a      	strb	r2, [r3, #0]
 80065b2:	b01c      	add	sp, #112	; 0x70
 80065b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80065b8:	b003      	add	sp, #12
 80065ba:	4770      	bx	lr
 80065bc:	20000024 	.word	0x20000024
 80065c0:	ffff0208 	.word	0xffff0208

080065c4 <__ssputs_r>:
 80065c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065c8:	688e      	ldr	r6, [r1, #8]
 80065ca:	4682      	mov	sl, r0
 80065cc:	429e      	cmp	r6, r3
 80065ce:	460c      	mov	r4, r1
 80065d0:	4690      	mov	r8, r2
 80065d2:	4699      	mov	r9, r3
 80065d4:	d837      	bhi.n	8006646 <__ssputs_r+0x82>
 80065d6:	898a      	ldrh	r2, [r1, #12]
 80065d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065dc:	d031      	beq.n	8006642 <__ssputs_r+0x7e>
 80065de:	2302      	movs	r3, #2
 80065e0:	6825      	ldr	r5, [r4, #0]
 80065e2:	6909      	ldr	r1, [r1, #16]
 80065e4:	1a6f      	subs	r7, r5, r1
 80065e6:	6965      	ldr	r5, [r4, #20]
 80065e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065ec:	fb95 f5f3 	sdiv	r5, r5, r3
 80065f0:	f109 0301 	add.w	r3, r9, #1
 80065f4:	443b      	add	r3, r7
 80065f6:	429d      	cmp	r5, r3
 80065f8:	bf38      	it	cc
 80065fa:	461d      	movcc	r5, r3
 80065fc:	0553      	lsls	r3, r2, #21
 80065fe:	d530      	bpl.n	8006662 <__ssputs_r+0x9e>
 8006600:	4629      	mov	r1, r5
 8006602:	f000 fb37 	bl	8006c74 <_malloc_r>
 8006606:	4606      	mov	r6, r0
 8006608:	b950      	cbnz	r0, 8006620 <__ssputs_r+0x5c>
 800660a:	230c      	movs	r3, #12
 800660c:	f04f 30ff 	mov.w	r0, #4294967295
 8006610:	f8ca 3000 	str.w	r3, [sl]
 8006614:	89a3      	ldrh	r3, [r4, #12]
 8006616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800661a:	81a3      	strh	r3, [r4, #12]
 800661c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006620:	463a      	mov	r2, r7
 8006622:	6921      	ldr	r1, [r4, #16]
 8006624:	f000 fab6 	bl	8006b94 <memcpy>
 8006628:	89a3      	ldrh	r3, [r4, #12]
 800662a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800662e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006632:	81a3      	strh	r3, [r4, #12]
 8006634:	6126      	str	r6, [r4, #16]
 8006636:	443e      	add	r6, r7
 8006638:	6026      	str	r6, [r4, #0]
 800663a:	464e      	mov	r6, r9
 800663c:	6165      	str	r5, [r4, #20]
 800663e:	1bed      	subs	r5, r5, r7
 8006640:	60a5      	str	r5, [r4, #8]
 8006642:	454e      	cmp	r6, r9
 8006644:	d900      	bls.n	8006648 <__ssputs_r+0x84>
 8006646:	464e      	mov	r6, r9
 8006648:	4632      	mov	r2, r6
 800664a:	4641      	mov	r1, r8
 800664c:	6820      	ldr	r0, [r4, #0]
 800664e:	f000 faac 	bl	8006baa <memmove>
 8006652:	68a3      	ldr	r3, [r4, #8]
 8006654:	2000      	movs	r0, #0
 8006656:	1b9b      	subs	r3, r3, r6
 8006658:	60a3      	str	r3, [r4, #8]
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	441e      	add	r6, r3
 800665e:	6026      	str	r6, [r4, #0]
 8006660:	e7dc      	b.n	800661c <__ssputs_r+0x58>
 8006662:	462a      	mov	r2, r5
 8006664:	f000 fb60 	bl	8006d28 <_realloc_r>
 8006668:	4606      	mov	r6, r0
 800666a:	2800      	cmp	r0, #0
 800666c:	d1e2      	bne.n	8006634 <__ssputs_r+0x70>
 800666e:	6921      	ldr	r1, [r4, #16]
 8006670:	4650      	mov	r0, sl
 8006672:	f000 fab3 	bl	8006bdc <_free_r>
 8006676:	e7c8      	b.n	800660a <__ssputs_r+0x46>

08006678 <_svfiprintf_r>:
 8006678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667c:	461d      	mov	r5, r3
 800667e:	898b      	ldrh	r3, [r1, #12]
 8006680:	b09d      	sub	sp, #116	; 0x74
 8006682:	061f      	lsls	r7, r3, #24
 8006684:	4680      	mov	r8, r0
 8006686:	460c      	mov	r4, r1
 8006688:	4616      	mov	r6, r2
 800668a:	d50f      	bpl.n	80066ac <_svfiprintf_r+0x34>
 800668c:	690b      	ldr	r3, [r1, #16]
 800668e:	b96b      	cbnz	r3, 80066ac <_svfiprintf_r+0x34>
 8006690:	2140      	movs	r1, #64	; 0x40
 8006692:	f000 faef 	bl	8006c74 <_malloc_r>
 8006696:	6020      	str	r0, [r4, #0]
 8006698:	6120      	str	r0, [r4, #16]
 800669a:	b928      	cbnz	r0, 80066a8 <_svfiprintf_r+0x30>
 800669c:	230c      	movs	r3, #12
 800669e:	f8c8 3000 	str.w	r3, [r8]
 80066a2:	f04f 30ff 	mov.w	r0, #4294967295
 80066a6:	e0c8      	b.n	800683a <_svfiprintf_r+0x1c2>
 80066a8:	2340      	movs	r3, #64	; 0x40
 80066aa:	6163      	str	r3, [r4, #20]
 80066ac:	2300      	movs	r3, #0
 80066ae:	9309      	str	r3, [sp, #36]	; 0x24
 80066b0:	2320      	movs	r3, #32
 80066b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066b6:	2330      	movs	r3, #48	; 0x30
 80066b8:	f04f 0b01 	mov.w	fp, #1
 80066bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066c0:	9503      	str	r5, [sp, #12]
 80066c2:	4637      	mov	r7, r6
 80066c4:	463d      	mov	r5, r7
 80066c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80066ca:	b10b      	cbz	r3, 80066d0 <_svfiprintf_r+0x58>
 80066cc:	2b25      	cmp	r3, #37	; 0x25
 80066ce:	d13e      	bne.n	800674e <_svfiprintf_r+0xd6>
 80066d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80066d4:	d00b      	beq.n	80066ee <_svfiprintf_r+0x76>
 80066d6:	4653      	mov	r3, sl
 80066d8:	4632      	mov	r2, r6
 80066da:	4621      	mov	r1, r4
 80066dc:	4640      	mov	r0, r8
 80066de:	f7ff ff71 	bl	80065c4 <__ssputs_r>
 80066e2:	3001      	adds	r0, #1
 80066e4:	f000 80a4 	beq.w	8006830 <_svfiprintf_r+0x1b8>
 80066e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ea:	4453      	add	r3, sl
 80066ec:	9309      	str	r3, [sp, #36]	; 0x24
 80066ee:	783b      	ldrb	r3, [r7, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 809d 	beq.w	8006830 <_svfiprintf_r+0x1b8>
 80066f6:	2300      	movs	r3, #0
 80066f8:	f04f 32ff 	mov.w	r2, #4294967295
 80066fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006700:	9304      	str	r3, [sp, #16]
 8006702:	9307      	str	r3, [sp, #28]
 8006704:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006708:	931a      	str	r3, [sp, #104]	; 0x68
 800670a:	462f      	mov	r7, r5
 800670c:	2205      	movs	r2, #5
 800670e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006712:	4850      	ldr	r0, [pc, #320]	; (8006854 <_svfiprintf_r+0x1dc>)
 8006714:	f000 fa30 	bl	8006b78 <memchr>
 8006718:	9b04      	ldr	r3, [sp, #16]
 800671a:	b9d0      	cbnz	r0, 8006752 <_svfiprintf_r+0xda>
 800671c:	06d9      	lsls	r1, r3, #27
 800671e:	bf44      	itt	mi
 8006720:	2220      	movmi	r2, #32
 8006722:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006726:	071a      	lsls	r2, r3, #28
 8006728:	bf44      	itt	mi
 800672a:	222b      	movmi	r2, #43	; 0x2b
 800672c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006730:	782a      	ldrb	r2, [r5, #0]
 8006732:	2a2a      	cmp	r2, #42	; 0x2a
 8006734:	d015      	beq.n	8006762 <_svfiprintf_r+0xea>
 8006736:	462f      	mov	r7, r5
 8006738:	2000      	movs	r0, #0
 800673a:	250a      	movs	r5, #10
 800673c:	9a07      	ldr	r2, [sp, #28]
 800673e:	4639      	mov	r1, r7
 8006740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006744:	3b30      	subs	r3, #48	; 0x30
 8006746:	2b09      	cmp	r3, #9
 8006748:	d94d      	bls.n	80067e6 <_svfiprintf_r+0x16e>
 800674a:	b1b8      	cbz	r0, 800677c <_svfiprintf_r+0x104>
 800674c:	e00f      	b.n	800676e <_svfiprintf_r+0xf6>
 800674e:	462f      	mov	r7, r5
 8006750:	e7b8      	b.n	80066c4 <_svfiprintf_r+0x4c>
 8006752:	4a40      	ldr	r2, [pc, #256]	; (8006854 <_svfiprintf_r+0x1dc>)
 8006754:	463d      	mov	r5, r7
 8006756:	1a80      	subs	r0, r0, r2
 8006758:	fa0b f000 	lsl.w	r0, fp, r0
 800675c:	4318      	orrs	r0, r3
 800675e:	9004      	str	r0, [sp, #16]
 8006760:	e7d3      	b.n	800670a <_svfiprintf_r+0x92>
 8006762:	9a03      	ldr	r2, [sp, #12]
 8006764:	1d11      	adds	r1, r2, #4
 8006766:	6812      	ldr	r2, [r2, #0]
 8006768:	9103      	str	r1, [sp, #12]
 800676a:	2a00      	cmp	r2, #0
 800676c:	db01      	blt.n	8006772 <_svfiprintf_r+0xfa>
 800676e:	9207      	str	r2, [sp, #28]
 8006770:	e004      	b.n	800677c <_svfiprintf_r+0x104>
 8006772:	4252      	negs	r2, r2
 8006774:	f043 0302 	orr.w	r3, r3, #2
 8006778:	9207      	str	r2, [sp, #28]
 800677a:	9304      	str	r3, [sp, #16]
 800677c:	783b      	ldrb	r3, [r7, #0]
 800677e:	2b2e      	cmp	r3, #46	; 0x2e
 8006780:	d10c      	bne.n	800679c <_svfiprintf_r+0x124>
 8006782:	787b      	ldrb	r3, [r7, #1]
 8006784:	2b2a      	cmp	r3, #42	; 0x2a
 8006786:	d133      	bne.n	80067f0 <_svfiprintf_r+0x178>
 8006788:	9b03      	ldr	r3, [sp, #12]
 800678a:	3702      	adds	r7, #2
 800678c:	1d1a      	adds	r2, r3, #4
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	9203      	str	r2, [sp, #12]
 8006792:	2b00      	cmp	r3, #0
 8006794:	bfb8      	it	lt
 8006796:	f04f 33ff 	movlt.w	r3, #4294967295
 800679a:	9305      	str	r3, [sp, #20]
 800679c:	4d2e      	ldr	r5, [pc, #184]	; (8006858 <_svfiprintf_r+0x1e0>)
 800679e:	2203      	movs	r2, #3
 80067a0:	7839      	ldrb	r1, [r7, #0]
 80067a2:	4628      	mov	r0, r5
 80067a4:	f000 f9e8 	bl	8006b78 <memchr>
 80067a8:	b138      	cbz	r0, 80067ba <_svfiprintf_r+0x142>
 80067aa:	2340      	movs	r3, #64	; 0x40
 80067ac:	1b40      	subs	r0, r0, r5
 80067ae:	fa03 f000 	lsl.w	r0, r3, r0
 80067b2:	9b04      	ldr	r3, [sp, #16]
 80067b4:	3701      	adds	r7, #1
 80067b6:	4303      	orrs	r3, r0
 80067b8:	9304      	str	r3, [sp, #16]
 80067ba:	7839      	ldrb	r1, [r7, #0]
 80067bc:	2206      	movs	r2, #6
 80067be:	4827      	ldr	r0, [pc, #156]	; (800685c <_svfiprintf_r+0x1e4>)
 80067c0:	1c7e      	adds	r6, r7, #1
 80067c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067c6:	f000 f9d7 	bl	8006b78 <memchr>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	d038      	beq.n	8006840 <_svfiprintf_r+0x1c8>
 80067ce:	4b24      	ldr	r3, [pc, #144]	; (8006860 <_svfiprintf_r+0x1e8>)
 80067d0:	bb13      	cbnz	r3, 8006818 <_svfiprintf_r+0x1a0>
 80067d2:	9b03      	ldr	r3, [sp, #12]
 80067d4:	3307      	adds	r3, #7
 80067d6:	f023 0307 	bic.w	r3, r3, #7
 80067da:	3308      	adds	r3, #8
 80067dc:	9303      	str	r3, [sp, #12]
 80067de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e0:	444b      	add	r3, r9
 80067e2:	9309      	str	r3, [sp, #36]	; 0x24
 80067e4:	e76d      	b.n	80066c2 <_svfiprintf_r+0x4a>
 80067e6:	fb05 3202 	mla	r2, r5, r2, r3
 80067ea:	2001      	movs	r0, #1
 80067ec:	460f      	mov	r7, r1
 80067ee:	e7a6      	b.n	800673e <_svfiprintf_r+0xc6>
 80067f0:	2300      	movs	r3, #0
 80067f2:	250a      	movs	r5, #10
 80067f4:	4619      	mov	r1, r3
 80067f6:	3701      	adds	r7, #1
 80067f8:	9305      	str	r3, [sp, #20]
 80067fa:	4638      	mov	r0, r7
 80067fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006800:	3a30      	subs	r2, #48	; 0x30
 8006802:	2a09      	cmp	r2, #9
 8006804:	d903      	bls.n	800680e <_svfiprintf_r+0x196>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d0c8      	beq.n	800679c <_svfiprintf_r+0x124>
 800680a:	9105      	str	r1, [sp, #20]
 800680c:	e7c6      	b.n	800679c <_svfiprintf_r+0x124>
 800680e:	fb05 2101 	mla	r1, r5, r1, r2
 8006812:	2301      	movs	r3, #1
 8006814:	4607      	mov	r7, r0
 8006816:	e7f0      	b.n	80067fa <_svfiprintf_r+0x182>
 8006818:	ab03      	add	r3, sp, #12
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	4622      	mov	r2, r4
 800681e:	4b11      	ldr	r3, [pc, #68]	; (8006864 <_svfiprintf_r+0x1ec>)
 8006820:	a904      	add	r1, sp, #16
 8006822:	4640      	mov	r0, r8
 8006824:	f3af 8000 	nop.w
 8006828:	f1b0 3fff 	cmp.w	r0, #4294967295
 800682c:	4681      	mov	r9, r0
 800682e:	d1d6      	bne.n	80067de <_svfiprintf_r+0x166>
 8006830:	89a3      	ldrh	r3, [r4, #12]
 8006832:	065b      	lsls	r3, r3, #25
 8006834:	f53f af35 	bmi.w	80066a2 <_svfiprintf_r+0x2a>
 8006838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800683a:	b01d      	add	sp, #116	; 0x74
 800683c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006840:	ab03      	add	r3, sp, #12
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	4622      	mov	r2, r4
 8006846:	4b07      	ldr	r3, [pc, #28]	; (8006864 <_svfiprintf_r+0x1ec>)
 8006848:	a904      	add	r1, sp, #16
 800684a:	4640      	mov	r0, r8
 800684c:	f000 f882 	bl	8006954 <_printf_i>
 8006850:	e7ea      	b.n	8006828 <_svfiprintf_r+0x1b0>
 8006852:	bf00      	nop
 8006854:	08009688 	.word	0x08009688
 8006858:	0800968e 	.word	0x0800968e
 800685c:	08009692 	.word	0x08009692
 8006860:	00000000 	.word	0x00000000
 8006864:	080065c5 	.word	0x080065c5

08006868 <_printf_common>:
 8006868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800686c:	4691      	mov	r9, r2
 800686e:	461f      	mov	r7, r3
 8006870:	688a      	ldr	r2, [r1, #8]
 8006872:	690b      	ldr	r3, [r1, #16]
 8006874:	4606      	mov	r6, r0
 8006876:	4293      	cmp	r3, r2
 8006878:	bfb8      	it	lt
 800687a:	4613      	movlt	r3, r2
 800687c:	f8c9 3000 	str.w	r3, [r9]
 8006880:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006884:	460c      	mov	r4, r1
 8006886:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800688a:	b112      	cbz	r2, 8006892 <_printf_common+0x2a>
 800688c:	3301      	adds	r3, #1
 800688e:	f8c9 3000 	str.w	r3, [r9]
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	0699      	lsls	r1, r3, #26
 8006896:	bf42      	ittt	mi
 8006898:	f8d9 3000 	ldrmi.w	r3, [r9]
 800689c:	3302      	addmi	r3, #2
 800689e:	f8c9 3000 	strmi.w	r3, [r9]
 80068a2:	6825      	ldr	r5, [r4, #0]
 80068a4:	f015 0506 	ands.w	r5, r5, #6
 80068a8:	d107      	bne.n	80068ba <_printf_common+0x52>
 80068aa:	f104 0a19 	add.w	sl, r4, #25
 80068ae:	68e3      	ldr	r3, [r4, #12]
 80068b0:	f8d9 2000 	ldr.w	r2, [r9]
 80068b4:	1a9b      	subs	r3, r3, r2
 80068b6:	42ab      	cmp	r3, r5
 80068b8:	dc29      	bgt.n	800690e <_printf_common+0xa6>
 80068ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80068be:	6822      	ldr	r2, [r4, #0]
 80068c0:	3300      	adds	r3, #0
 80068c2:	bf18      	it	ne
 80068c4:	2301      	movne	r3, #1
 80068c6:	0692      	lsls	r2, r2, #26
 80068c8:	d42e      	bmi.n	8006928 <_printf_common+0xc0>
 80068ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068ce:	4639      	mov	r1, r7
 80068d0:	4630      	mov	r0, r6
 80068d2:	47c0      	blx	r8
 80068d4:	3001      	adds	r0, #1
 80068d6:	d021      	beq.n	800691c <_printf_common+0xb4>
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	68e5      	ldr	r5, [r4, #12]
 80068dc:	f003 0306 	and.w	r3, r3, #6
 80068e0:	2b04      	cmp	r3, #4
 80068e2:	bf18      	it	ne
 80068e4:	2500      	movne	r5, #0
 80068e6:	f8d9 2000 	ldr.w	r2, [r9]
 80068ea:	f04f 0900 	mov.w	r9, #0
 80068ee:	bf08      	it	eq
 80068f0:	1aad      	subeq	r5, r5, r2
 80068f2:	68a3      	ldr	r3, [r4, #8]
 80068f4:	6922      	ldr	r2, [r4, #16]
 80068f6:	bf08      	it	eq
 80068f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068fc:	4293      	cmp	r3, r2
 80068fe:	bfc4      	itt	gt
 8006900:	1a9b      	subgt	r3, r3, r2
 8006902:	18ed      	addgt	r5, r5, r3
 8006904:	341a      	adds	r4, #26
 8006906:	454d      	cmp	r5, r9
 8006908:	d11a      	bne.n	8006940 <_printf_common+0xd8>
 800690a:	2000      	movs	r0, #0
 800690c:	e008      	b.n	8006920 <_printf_common+0xb8>
 800690e:	2301      	movs	r3, #1
 8006910:	4652      	mov	r2, sl
 8006912:	4639      	mov	r1, r7
 8006914:	4630      	mov	r0, r6
 8006916:	47c0      	blx	r8
 8006918:	3001      	adds	r0, #1
 800691a:	d103      	bne.n	8006924 <_printf_common+0xbc>
 800691c:	f04f 30ff 	mov.w	r0, #4294967295
 8006920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006924:	3501      	adds	r5, #1
 8006926:	e7c2      	b.n	80068ae <_printf_common+0x46>
 8006928:	2030      	movs	r0, #48	; 0x30
 800692a:	18e1      	adds	r1, r4, r3
 800692c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006936:	4422      	add	r2, r4
 8006938:	3302      	adds	r3, #2
 800693a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800693e:	e7c4      	b.n	80068ca <_printf_common+0x62>
 8006940:	2301      	movs	r3, #1
 8006942:	4622      	mov	r2, r4
 8006944:	4639      	mov	r1, r7
 8006946:	4630      	mov	r0, r6
 8006948:	47c0      	blx	r8
 800694a:	3001      	adds	r0, #1
 800694c:	d0e6      	beq.n	800691c <_printf_common+0xb4>
 800694e:	f109 0901 	add.w	r9, r9, #1
 8006952:	e7d8      	b.n	8006906 <_printf_common+0x9e>

08006954 <_printf_i>:
 8006954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006958:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800695c:	460c      	mov	r4, r1
 800695e:	7e09      	ldrb	r1, [r1, #24]
 8006960:	b085      	sub	sp, #20
 8006962:	296e      	cmp	r1, #110	; 0x6e
 8006964:	4617      	mov	r7, r2
 8006966:	4606      	mov	r6, r0
 8006968:	4698      	mov	r8, r3
 800696a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800696c:	f000 80b3 	beq.w	8006ad6 <_printf_i+0x182>
 8006970:	d822      	bhi.n	80069b8 <_printf_i+0x64>
 8006972:	2963      	cmp	r1, #99	; 0x63
 8006974:	d036      	beq.n	80069e4 <_printf_i+0x90>
 8006976:	d80a      	bhi.n	800698e <_printf_i+0x3a>
 8006978:	2900      	cmp	r1, #0
 800697a:	f000 80b9 	beq.w	8006af0 <_printf_i+0x19c>
 800697e:	2958      	cmp	r1, #88	; 0x58
 8006980:	f000 8083 	beq.w	8006a8a <_printf_i+0x136>
 8006984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006988:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800698c:	e032      	b.n	80069f4 <_printf_i+0xa0>
 800698e:	2964      	cmp	r1, #100	; 0x64
 8006990:	d001      	beq.n	8006996 <_printf_i+0x42>
 8006992:	2969      	cmp	r1, #105	; 0x69
 8006994:	d1f6      	bne.n	8006984 <_printf_i+0x30>
 8006996:	6820      	ldr	r0, [r4, #0]
 8006998:	6813      	ldr	r3, [r2, #0]
 800699a:	0605      	lsls	r5, r0, #24
 800699c:	f103 0104 	add.w	r1, r3, #4
 80069a0:	d52a      	bpl.n	80069f8 <_printf_i+0xa4>
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6011      	str	r1, [r2, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	da03      	bge.n	80069b2 <_printf_i+0x5e>
 80069aa:	222d      	movs	r2, #45	; 0x2d
 80069ac:	425b      	negs	r3, r3
 80069ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80069b2:	486f      	ldr	r0, [pc, #444]	; (8006b70 <_printf_i+0x21c>)
 80069b4:	220a      	movs	r2, #10
 80069b6:	e039      	b.n	8006a2c <_printf_i+0xd8>
 80069b8:	2973      	cmp	r1, #115	; 0x73
 80069ba:	f000 809d 	beq.w	8006af8 <_printf_i+0x1a4>
 80069be:	d808      	bhi.n	80069d2 <_printf_i+0x7e>
 80069c0:	296f      	cmp	r1, #111	; 0x6f
 80069c2:	d020      	beq.n	8006a06 <_printf_i+0xb2>
 80069c4:	2970      	cmp	r1, #112	; 0x70
 80069c6:	d1dd      	bne.n	8006984 <_printf_i+0x30>
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	f043 0320 	orr.w	r3, r3, #32
 80069ce:	6023      	str	r3, [r4, #0]
 80069d0:	e003      	b.n	80069da <_printf_i+0x86>
 80069d2:	2975      	cmp	r1, #117	; 0x75
 80069d4:	d017      	beq.n	8006a06 <_printf_i+0xb2>
 80069d6:	2978      	cmp	r1, #120	; 0x78
 80069d8:	d1d4      	bne.n	8006984 <_printf_i+0x30>
 80069da:	2378      	movs	r3, #120	; 0x78
 80069dc:	4865      	ldr	r0, [pc, #404]	; (8006b74 <_printf_i+0x220>)
 80069de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069e2:	e055      	b.n	8006a90 <_printf_i+0x13c>
 80069e4:	6813      	ldr	r3, [r2, #0]
 80069e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069ea:	1d19      	adds	r1, r3, #4
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6011      	str	r1, [r2, #0]
 80069f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069f4:	2301      	movs	r3, #1
 80069f6:	e08c      	b.n	8006b12 <_printf_i+0x1be>
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069fe:	6011      	str	r1, [r2, #0]
 8006a00:	bf18      	it	ne
 8006a02:	b21b      	sxthne	r3, r3
 8006a04:	e7cf      	b.n	80069a6 <_printf_i+0x52>
 8006a06:	6813      	ldr	r3, [r2, #0]
 8006a08:	6825      	ldr	r5, [r4, #0]
 8006a0a:	1d18      	adds	r0, r3, #4
 8006a0c:	6010      	str	r0, [r2, #0]
 8006a0e:	0628      	lsls	r0, r5, #24
 8006a10:	d501      	bpl.n	8006a16 <_printf_i+0xc2>
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	e002      	b.n	8006a1c <_printf_i+0xc8>
 8006a16:	0668      	lsls	r0, r5, #25
 8006a18:	d5fb      	bpl.n	8006a12 <_printf_i+0xbe>
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	296f      	cmp	r1, #111	; 0x6f
 8006a1e:	bf14      	ite	ne
 8006a20:	220a      	movne	r2, #10
 8006a22:	2208      	moveq	r2, #8
 8006a24:	4852      	ldr	r0, [pc, #328]	; (8006b70 <_printf_i+0x21c>)
 8006a26:	2100      	movs	r1, #0
 8006a28:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a2c:	6865      	ldr	r5, [r4, #4]
 8006a2e:	2d00      	cmp	r5, #0
 8006a30:	60a5      	str	r5, [r4, #8]
 8006a32:	f2c0 8095 	blt.w	8006b60 <_printf_i+0x20c>
 8006a36:	6821      	ldr	r1, [r4, #0]
 8006a38:	f021 0104 	bic.w	r1, r1, #4
 8006a3c:	6021      	str	r1, [r4, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d13d      	bne.n	8006abe <_printf_i+0x16a>
 8006a42:	2d00      	cmp	r5, #0
 8006a44:	f040 808e 	bne.w	8006b64 <_printf_i+0x210>
 8006a48:	4665      	mov	r5, ip
 8006a4a:	2a08      	cmp	r2, #8
 8006a4c:	d10b      	bne.n	8006a66 <_printf_i+0x112>
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	07db      	lsls	r3, r3, #31
 8006a52:	d508      	bpl.n	8006a66 <_printf_i+0x112>
 8006a54:	6923      	ldr	r3, [r4, #16]
 8006a56:	6862      	ldr	r2, [r4, #4]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	bfde      	ittt	le
 8006a5c:	2330      	movle	r3, #48	; 0x30
 8006a5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a62:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a66:	ebac 0305 	sub.w	r3, ip, r5
 8006a6a:	6123      	str	r3, [r4, #16]
 8006a6c:	f8cd 8000 	str.w	r8, [sp]
 8006a70:	463b      	mov	r3, r7
 8006a72:	aa03      	add	r2, sp, #12
 8006a74:	4621      	mov	r1, r4
 8006a76:	4630      	mov	r0, r6
 8006a78:	f7ff fef6 	bl	8006868 <_printf_common>
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	d14d      	bne.n	8006b1c <_printf_i+0x1c8>
 8006a80:	f04f 30ff 	mov.w	r0, #4294967295
 8006a84:	b005      	add	sp, #20
 8006a86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a8a:	4839      	ldr	r0, [pc, #228]	; (8006b70 <_printf_i+0x21c>)
 8006a8c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006a90:	6813      	ldr	r3, [r2, #0]
 8006a92:	6821      	ldr	r1, [r4, #0]
 8006a94:	1d1d      	adds	r5, r3, #4
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6015      	str	r5, [r2, #0]
 8006a9a:	060a      	lsls	r2, r1, #24
 8006a9c:	d50b      	bpl.n	8006ab6 <_printf_i+0x162>
 8006a9e:	07ca      	lsls	r2, r1, #31
 8006aa0:	bf44      	itt	mi
 8006aa2:	f041 0120 	orrmi.w	r1, r1, #32
 8006aa6:	6021      	strmi	r1, [r4, #0]
 8006aa8:	b91b      	cbnz	r3, 8006ab2 <_printf_i+0x15e>
 8006aaa:	6822      	ldr	r2, [r4, #0]
 8006aac:	f022 0220 	bic.w	r2, r2, #32
 8006ab0:	6022      	str	r2, [r4, #0]
 8006ab2:	2210      	movs	r2, #16
 8006ab4:	e7b7      	b.n	8006a26 <_printf_i+0xd2>
 8006ab6:	064d      	lsls	r5, r1, #25
 8006ab8:	bf48      	it	mi
 8006aba:	b29b      	uxthmi	r3, r3
 8006abc:	e7ef      	b.n	8006a9e <_printf_i+0x14a>
 8006abe:	4665      	mov	r5, ip
 8006ac0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ac4:	fb02 3311 	mls	r3, r2, r1, r3
 8006ac8:	5cc3      	ldrb	r3, [r0, r3]
 8006aca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006ace:	460b      	mov	r3, r1
 8006ad0:	2900      	cmp	r1, #0
 8006ad2:	d1f5      	bne.n	8006ac0 <_printf_i+0x16c>
 8006ad4:	e7b9      	b.n	8006a4a <_printf_i+0xf6>
 8006ad6:	6813      	ldr	r3, [r2, #0]
 8006ad8:	6825      	ldr	r5, [r4, #0]
 8006ada:	1d18      	adds	r0, r3, #4
 8006adc:	6961      	ldr	r1, [r4, #20]
 8006ade:	6010      	str	r0, [r2, #0]
 8006ae0:	0628      	lsls	r0, r5, #24
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	d501      	bpl.n	8006aea <_printf_i+0x196>
 8006ae6:	6019      	str	r1, [r3, #0]
 8006ae8:	e002      	b.n	8006af0 <_printf_i+0x19c>
 8006aea:	066a      	lsls	r2, r5, #25
 8006aec:	d5fb      	bpl.n	8006ae6 <_printf_i+0x192>
 8006aee:	8019      	strh	r1, [r3, #0]
 8006af0:	2300      	movs	r3, #0
 8006af2:	4665      	mov	r5, ip
 8006af4:	6123      	str	r3, [r4, #16]
 8006af6:	e7b9      	b.n	8006a6c <_printf_i+0x118>
 8006af8:	6813      	ldr	r3, [r2, #0]
 8006afa:	1d19      	adds	r1, r3, #4
 8006afc:	6011      	str	r1, [r2, #0]
 8006afe:	681d      	ldr	r5, [r3, #0]
 8006b00:	6862      	ldr	r2, [r4, #4]
 8006b02:	2100      	movs	r1, #0
 8006b04:	4628      	mov	r0, r5
 8006b06:	f000 f837 	bl	8006b78 <memchr>
 8006b0a:	b108      	cbz	r0, 8006b10 <_printf_i+0x1bc>
 8006b0c:	1b40      	subs	r0, r0, r5
 8006b0e:	6060      	str	r0, [r4, #4]
 8006b10:	6863      	ldr	r3, [r4, #4]
 8006b12:	6123      	str	r3, [r4, #16]
 8006b14:	2300      	movs	r3, #0
 8006b16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b1a:	e7a7      	b.n	8006a6c <_printf_i+0x118>
 8006b1c:	6923      	ldr	r3, [r4, #16]
 8006b1e:	462a      	mov	r2, r5
 8006b20:	4639      	mov	r1, r7
 8006b22:	4630      	mov	r0, r6
 8006b24:	47c0      	blx	r8
 8006b26:	3001      	adds	r0, #1
 8006b28:	d0aa      	beq.n	8006a80 <_printf_i+0x12c>
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	079b      	lsls	r3, r3, #30
 8006b2e:	d413      	bmi.n	8006b58 <_printf_i+0x204>
 8006b30:	68e0      	ldr	r0, [r4, #12]
 8006b32:	9b03      	ldr	r3, [sp, #12]
 8006b34:	4298      	cmp	r0, r3
 8006b36:	bfb8      	it	lt
 8006b38:	4618      	movlt	r0, r3
 8006b3a:	e7a3      	b.n	8006a84 <_printf_i+0x130>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	464a      	mov	r2, r9
 8006b40:	4639      	mov	r1, r7
 8006b42:	4630      	mov	r0, r6
 8006b44:	47c0      	blx	r8
 8006b46:	3001      	adds	r0, #1
 8006b48:	d09a      	beq.n	8006a80 <_printf_i+0x12c>
 8006b4a:	3501      	adds	r5, #1
 8006b4c:	68e3      	ldr	r3, [r4, #12]
 8006b4e:	9a03      	ldr	r2, [sp, #12]
 8006b50:	1a9b      	subs	r3, r3, r2
 8006b52:	42ab      	cmp	r3, r5
 8006b54:	dcf2      	bgt.n	8006b3c <_printf_i+0x1e8>
 8006b56:	e7eb      	b.n	8006b30 <_printf_i+0x1dc>
 8006b58:	2500      	movs	r5, #0
 8006b5a:	f104 0919 	add.w	r9, r4, #25
 8006b5e:	e7f5      	b.n	8006b4c <_printf_i+0x1f8>
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1ac      	bne.n	8006abe <_printf_i+0x16a>
 8006b64:	7803      	ldrb	r3, [r0, #0]
 8006b66:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b6e:	e76c      	b.n	8006a4a <_printf_i+0xf6>
 8006b70:	08009699 	.word	0x08009699
 8006b74:	080096aa 	.word	0x080096aa

08006b78 <memchr>:
 8006b78:	b510      	push	{r4, lr}
 8006b7a:	b2c9      	uxtb	r1, r1
 8006b7c:	4402      	add	r2, r0
 8006b7e:	4290      	cmp	r0, r2
 8006b80:	4603      	mov	r3, r0
 8006b82:	d101      	bne.n	8006b88 <memchr+0x10>
 8006b84:	2300      	movs	r3, #0
 8006b86:	e003      	b.n	8006b90 <memchr+0x18>
 8006b88:	781c      	ldrb	r4, [r3, #0]
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	428c      	cmp	r4, r1
 8006b8e:	d1f6      	bne.n	8006b7e <memchr+0x6>
 8006b90:	4618      	mov	r0, r3
 8006b92:	bd10      	pop	{r4, pc}

08006b94 <memcpy>:
 8006b94:	b510      	push	{r4, lr}
 8006b96:	1e43      	subs	r3, r0, #1
 8006b98:	440a      	add	r2, r1
 8006b9a:	4291      	cmp	r1, r2
 8006b9c:	d100      	bne.n	8006ba0 <memcpy+0xc>
 8006b9e:	bd10      	pop	{r4, pc}
 8006ba0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ba4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ba8:	e7f7      	b.n	8006b9a <memcpy+0x6>

08006baa <memmove>:
 8006baa:	4288      	cmp	r0, r1
 8006bac:	b510      	push	{r4, lr}
 8006bae:	eb01 0302 	add.w	r3, r1, r2
 8006bb2:	d807      	bhi.n	8006bc4 <memmove+0x1a>
 8006bb4:	1e42      	subs	r2, r0, #1
 8006bb6:	4299      	cmp	r1, r3
 8006bb8:	d00a      	beq.n	8006bd0 <memmove+0x26>
 8006bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bbe:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006bc2:	e7f8      	b.n	8006bb6 <memmove+0xc>
 8006bc4:	4283      	cmp	r3, r0
 8006bc6:	d9f5      	bls.n	8006bb4 <memmove+0xa>
 8006bc8:	1881      	adds	r1, r0, r2
 8006bca:	1ad2      	subs	r2, r2, r3
 8006bcc:	42d3      	cmn	r3, r2
 8006bce:	d100      	bne.n	8006bd2 <memmove+0x28>
 8006bd0:	bd10      	pop	{r4, pc}
 8006bd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bd6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006bda:	e7f7      	b.n	8006bcc <memmove+0x22>

08006bdc <_free_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	4605      	mov	r5, r0
 8006be0:	2900      	cmp	r1, #0
 8006be2:	d043      	beq.n	8006c6c <_free_r+0x90>
 8006be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006be8:	1f0c      	subs	r4, r1, #4
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	bfb8      	it	lt
 8006bee:	18e4      	addlt	r4, r4, r3
 8006bf0:	f000 f8d0 	bl	8006d94 <__malloc_lock>
 8006bf4:	4a1e      	ldr	r2, [pc, #120]	; (8006c70 <_free_r+0x94>)
 8006bf6:	6813      	ldr	r3, [r2, #0]
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	b933      	cbnz	r3, 8006c0a <_free_r+0x2e>
 8006bfc:	6063      	str	r3, [r4, #4]
 8006bfe:	6014      	str	r4, [r2, #0]
 8006c00:	4628      	mov	r0, r5
 8006c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c06:	f000 b8c6 	b.w	8006d96 <__malloc_unlock>
 8006c0a:	42a3      	cmp	r3, r4
 8006c0c:	d90b      	bls.n	8006c26 <_free_r+0x4a>
 8006c0e:	6821      	ldr	r1, [r4, #0]
 8006c10:	1862      	adds	r2, r4, r1
 8006c12:	4293      	cmp	r3, r2
 8006c14:	bf01      	itttt	eq
 8006c16:	681a      	ldreq	r2, [r3, #0]
 8006c18:	685b      	ldreq	r3, [r3, #4]
 8006c1a:	1852      	addeq	r2, r2, r1
 8006c1c:	6022      	streq	r2, [r4, #0]
 8006c1e:	6063      	str	r3, [r4, #4]
 8006c20:	6004      	str	r4, [r0, #0]
 8006c22:	e7ed      	b.n	8006c00 <_free_r+0x24>
 8006c24:	4613      	mov	r3, r2
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	b10a      	cbz	r2, 8006c2e <_free_r+0x52>
 8006c2a:	42a2      	cmp	r2, r4
 8006c2c:	d9fa      	bls.n	8006c24 <_free_r+0x48>
 8006c2e:	6819      	ldr	r1, [r3, #0]
 8006c30:	1858      	adds	r0, r3, r1
 8006c32:	42a0      	cmp	r0, r4
 8006c34:	d10b      	bne.n	8006c4e <_free_r+0x72>
 8006c36:	6820      	ldr	r0, [r4, #0]
 8006c38:	4401      	add	r1, r0
 8006c3a:	1858      	adds	r0, r3, r1
 8006c3c:	4282      	cmp	r2, r0
 8006c3e:	6019      	str	r1, [r3, #0]
 8006c40:	d1de      	bne.n	8006c00 <_free_r+0x24>
 8006c42:	6810      	ldr	r0, [r2, #0]
 8006c44:	6852      	ldr	r2, [r2, #4]
 8006c46:	4401      	add	r1, r0
 8006c48:	6019      	str	r1, [r3, #0]
 8006c4a:	605a      	str	r2, [r3, #4]
 8006c4c:	e7d8      	b.n	8006c00 <_free_r+0x24>
 8006c4e:	d902      	bls.n	8006c56 <_free_r+0x7a>
 8006c50:	230c      	movs	r3, #12
 8006c52:	602b      	str	r3, [r5, #0]
 8006c54:	e7d4      	b.n	8006c00 <_free_r+0x24>
 8006c56:	6820      	ldr	r0, [r4, #0]
 8006c58:	1821      	adds	r1, r4, r0
 8006c5a:	428a      	cmp	r2, r1
 8006c5c:	bf01      	itttt	eq
 8006c5e:	6811      	ldreq	r1, [r2, #0]
 8006c60:	6852      	ldreq	r2, [r2, #4]
 8006c62:	1809      	addeq	r1, r1, r0
 8006c64:	6021      	streq	r1, [r4, #0]
 8006c66:	6062      	str	r2, [r4, #4]
 8006c68:	605c      	str	r4, [r3, #4]
 8006c6a:	e7c9      	b.n	8006c00 <_free_r+0x24>
 8006c6c:	bd38      	pop	{r3, r4, r5, pc}
 8006c6e:	bf00      	nop
 8006c70:	200004dc 	.word	0x200004dc

08006c74 <_malloc_r>:
 8006c74:	b570      	push	{r4, r5, r6, lr}
 8006c76:	1ccd      	adds	r5, r1, #3
 8006c78:	f025 0503 	bic.w	r5, r5, #3
 8006c7c:	3508      	adds	r5, #8
 8006c7e:	2d0c      	cmp	r5, #12
 8006c80:	bf38      	it	cc
 8006c82:	250c      	movcc	r5, #12
 8006c84:	2d00      	cmp	r5, #0
 8006c86:	4606      	mov	r6, r0
 8006c88:	db01      	blt.n	8006c8e <_malloc_r+0x1a>
 8006c8a:	42a9      	cmp	r1, r5
 8006c8c:	d903      	bls.n	8006c96 <_malloc_r+0x22>
 8006c8e:	230c      	movs	r3, #12
 8006c90:	6033      	str	r3, [r6, #0]
 8006c92:	2000      	movs	r0, #0
 8006c94:	bd70      	pop	{r4, r5, r6, pc}
 8006c96:	f000 f87d 	bl	8006d94 <__malloc_lock>
 8006c9a:	4a21      	ldr	r2, [pc, #132]	; (8006d20 <_malloc_r+0xac>)
 8006c9c:	6814      	ldr	r4, [r2, #0]
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	b991      	cbnz	r1, 8006cc8 <_malloc_r+0x54>
 8006ca2:	4c20      	ldr	r4, [pc, #128]	; (8006d24 <_malloc_r+0xb0>)
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	b91b      	cbnz	r3, 8006cb0 <_malloc_r+0x3c>
 8006ca8:	4630      	mov	r0, r6
 8006caa:	f000 f863 	bl	8006d74 <_sbrk_r>
 8006cae:	6020      	str	r0, [r4, #0]
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	f000 f85e 	bl	8006d74 <_sbrk_r>
 8006cb8:	1c43      	adds	r3, r0, #1
 8006cba:	d124      	bne.n	8006d06 <_malloc_r+0x92>
 8006cbc:	230c      	movs	r3, #12
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	6033      	str	r3, [r6, #0]
 8006cc2:	f000 f868 	bl	8006d96 <__malloc_unlock>
 8006cc6:	e7e4      	b.n	8006c92 <_malloc_r+0x1e>
 8006cc8:	680b      	ldr	r3, [r1, #0]
 8006cca:	1b5b      	subs	r3, r3, r5
 8006ccc:	d418      	bmi.n	8006d00 <_malloc_r+0x8c>
 8006cce:	2b0b      	cmp	r3, #11
 8006cd0:	d90f      	bls.n	8006cf2 <_malloc_r+0x7e>
 8006cd2:	600b      	str	r3, [r1, #0]
 8006cd4:	18cc      	adds	r4, r1, r3
 8006cd6:	50cd      	str	r5, [r1, r3]
 8006cd8:	4630      	mov	r0, r6
 8006cda:	f000 f85c 	bl	8006d96 <__malloc_unlock>
 8006cde:	f104 000b 	add.w	r0, r4, #11
 8006ce2:	1d23      	adds	r3, r4, #4
 8006ce4:	f020 0007 	bic.w	r0, r0, #7
 8006ce8:	1ac3      	subs	r3, r0, r3
 8006cea:	d0d3      	beq.n	8006c94 <_malloc_r+0x20>
 8006cec:	425a      	negs	r2, r3
 8006cee:	50e2      	str	r2, [r4, r3]
 8006cf0:	e7d0      	b.n	8006c94 <_malloc_r+0x20>
 8006cf2:	684b      	ldr	r3, [r1, #4]
 8006cf4:	428c      	cmp	r4, r1
 8006cf6:	bf16      	itet	ne
 8006cf8:	6063      	strne	r3, [r4, #4]
 8006cfa:	6013      	streq	r3, [r2, #0]
 8006cfc:	460c      	movne	r4, r1
 8006cfe:	e7eb      	b.n	8006cd8 <_malloc_r+0x64>
 8006d00:	460c      	mov	r4, r1
 8006d02:	6849      	ldr	r1, [r1, #4]
 8006d04:	e7cc      	b.n	8006ca0 <_malloc_r+0x2c>
 8006d06:	1cc4      	adds	r4, r0, #3
 8006d08:	f024 0403 	bic.w	r4, r4, #3
 8006d0c:	42a0      	cmp	r0, r4
 8006d0e:	d005      	beq.n	8006d1c <_malloc_r+0xa8>
 8006d10:	1a21      	subs	r1, r4, r0
 8006d12:	4630      	mov	r0, r6
 8006d14:	f000 f82e 	bl	8006d74 <_sbrk_r>
 8006d18:	3001      	adds	r0, #1
 8006d1a:	d0cf      	beq.n	8006cbc <_malloc_r+0x48>
 8006d1c:	6025      	str	r5, [r4, #0]
 8006d1e:	e7db      	b.n	8006cd8 <_malloc_r+0x64>
 8006d20:	200004dc 	.word	0x200004dc
 8006d24:	200004e0 	.word	0x200004e0

08006d28 <_realloc_r>:
 8006d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2a:	4607      	mov	r7, r0
 8006d2c:	4614      	mov	r4, r2
 8006d2e:	460e      	mov	r6, r1
 8006d30:	b921      	cbnz	r1, 8006d3c <_realloc_r+0x14>
 8006d32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d36:	4611      	mov	r1, r2
 8006d38:	f7ff bf9c 	b.w	8006c74 <_malloc_r>
 8006d3c:	b922      	cbnz	r2, 8006d48 <_realloc_r+0x20>
 8006d3e:	f7ff ff4d 	bl	8006bdc <_free_r>
 8006d42:	4625      	mov	r5, r4
 8006d44:	4628      	mov	r0, r5
 8006d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d48:	f000 f826 	bl	8006d98 <_malloc_usable_size_r>
 8006d4c:	42a0      	cmp	r0, r4
 8006d4e:	d20f      	bcs.n	8006d70 <_realloc_r+0x48>
 8006d50:	4621      	mov	r1, r4
 8006d52:	4638      	mov	r0, r7
 8006d54:	f7ff ff8e 	bl	8006c74 <_malloc_r>
 8006d58:	4605      	mov	r5, r0
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d0f2      	beq.n	8006d44 <_realloc_r+0x1c>
 8006d5e:	4631      	mov	r1, r6
 8006d60:	4622      	mov	r2, r4
 8006d62:	f7ff ff17 	bl	8006b94 <memcpy>
 8006d66:	4631      	mov	r1, r6
 8006d68:	4638      	mov	r0, r7
 8006d6a:	f7ff ff37 	bl	8006bdc <_free_r>
 8006d6e:	e7e9      	b.n	8006d44 <_realloc_r+0x1c>
 8006d70:	4635      	mov	r5, r6
 8006d72:	e7e7      	b.n	8006d44 <_realloc_r+0x1c>

08006d74 <_sbrk_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	2300      	movs	r3, #0
 8006d78:	4c05      	ldr	r4, [pc, #20]	; (8006d90 <_sbrk_r+0x1c>)
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	4608      	mov	r0, r1
 8006d7e:	6023      	str	r3, [r4, #0]
 8006d80:	f7fe ff1c 	bl	8005bbc <_sbrk>
 8006d84:	1c43      	adds	r3, r0, #1
 8006d86:	d102      	bne.n	8006d8e <_sbrk_r+0x1a>
 8006d88:	6823      	ldr	r3, [r4, #0]
 8006d8a:	b103      	cbz	r3, 8006d8e <_sbrk_r+0x1a>
 8006d8c:	602b      	str	r3, [r5, #0]
 8006d8e:	bd38      	pop	{r3, r4, r5, pc}
 8006d90:	20000b94 	.word	0x20000b94

08006d94 <__malloc_lock>:
 8006d94:	4770      	bx	lr

08006d96 <__malloc_unlock>:
 8006d96:	4770      	bx	lr

08006d98 <_malloc_usable_size_r>:
 8006d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d9c:	1f18      	subs	r0, r3, #4
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	bfbc      	itt	lt
 8006da2:	580b      	ldrlt	r3, [r1, r0]
 8006da4:	18c0      	addlt	r0, r0, r3
 8006da6:	4770      	bx	lr

08006da8 <_init>:
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	bf00      	nop
 8006dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dae:	bc08      	pop	{r3}
 8006db0:	469e      	mov	lr, r3
 8006db2:	4770      	bx	lr

08006db4 <_fini>:
 8006db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db6:	bf00      	nop
 8006db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dba:	bc08      	pop	{r3}
 8006dbc:	469e      	mov	lr, r3
 8006dbe:	4770      	bx	lr
