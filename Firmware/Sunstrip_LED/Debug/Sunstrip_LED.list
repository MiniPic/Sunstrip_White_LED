
Sunstrip_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007020  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002940  08007130  08007130  00017130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a70  08009a70  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08009a70  08009a70  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a70  08009a70  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a70  08009a70  00019a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a74  08009a74  00019a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a44  20000090  08009b04  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001ad4  08009b04  00021ad4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae00  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000042ee  00000000  00000000  0003aeb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001798  00000000  00000000  0003f1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001590  00000000  00000000  00040940  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018fe7  00000000  00000000  00041ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014e74  00000000  00000000  0005aeb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008312b  00000000  00000000  0006fd2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f2e56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006340  00000000  00000000  000f2ed4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08007118 	.word	0x08007118

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08007118 	.word	0x08007118

08000150 <SSD1306_Init>:





uint8_t SSD1306_Init(I2C_HandleTypeDef* hi2c) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]

	ssd1306_i2c = hi2c;
 8000158:	4a5f      	ldr	r2, [pc, #380]	; (80002d8 <SSD1306_Init+0x188>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	6013      	str	r3, [r2, #0]

	/* Init I2C */
	ssd1306_I2C_Init();
 800015e:	f000 fa25 	bl	80005ac <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(ssd1306_i2c, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000162:	4b5d      	ldr	r3, [pc, #372]	; (80002d8 <SSD1306_Init+0x188>)
 8000164:	6818      	ldr	r0, [r3, #0]
 8000166:	f644 6320 	movw	r3, #20000	; 0x4e20
 800016a:	2201      	movs	r2, #1
 800016c:	2178      	movs	r1, #120	; 0x78
 800016e:	f001 fb65 	bl	800183c <HAL_I2C_IsDeviceReady>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d001      	beq.n	800017c <SSD1306_Init+0x2c>
		/* Return false */
		return 0;
 8000178:	2300      	movs	r3, #0
 800017a:	e0a9      	b.n	80002d0 <SSD1306_Init+0x180>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800017c:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000180:	60fb      	str	r3, [r7, #12]
	while(p>0)
 8000182:	e002      	b.n	800018a <SSD1306_Init+0x3a>
		p--;
 8000184:	68fb      	ldr	r3, [r7, #12]
 8000186:	3b01      	subs	r3, #1
 8000188:	60fb      	str	r3, [r7, #12]
	while(p>0)
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	2b00      	cmp	r3, #0
 800018e:	d1f9      	bne.n	8000184 <SSD1306_Init+0x34>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000190:	22ae      	movs	r2, #174	; 0xae
 8000192:	2100      	movs	r1, #0
 8000194:	2078      	movs	r0, #120	; 0x78
 8000196:	f000 fa67 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800019a:	2220      	movs	r2, #32
 800019c:	2100      	movs	r1, #0
 800019e:	2078      	movs	r0, #120	; 0x78
 80001a0:	f000 fa62 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80001a4:	2210      	movs	r2, #16
 80001a6:	2100      	movs	r1, #0
 80001a8:	2078      	movs	r0, #120	; 0x78
 80001aa:	f000 fa5d 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80001ae:	22b0      	movs	r2, #176	; 0xb0
 80001b0:	2100      	movs	r1, #0
 80001b2:	2078      	movs	r0, #120	; 0x78
 80001b4:	f000 fa58 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80001b8:	22c8      	movs	r2, #200	; 0xc8
 80001ba:	2100      	movs	r1, #0
 80001bc:	2078      	movs	r0, #120	; 0x78
 80001be:	f000 fa53 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80001c2:	2200      	movs	r2, #0
 80001c4:	2100      	movs	r1, #0
 80001c6:	2078      	movs	r0, #120	; 0x78
 80001c8:	f000 fa4e 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80001cc:	2210      	movs	r2, #16
 80001ce:	2100      	movs	r1, #0
 80001d0:	2078      	movs	r0, #120	; 0x78
 80001d2:	f000 fa49 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80001d6:	2240      	movs	r2, #64	; 0x40
 80001d8:	2100      	movs	r1, #0
 80001da:	2078      	movs	r0, #120	; 0x78
 80001dc:	f000 fa44 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80001e0:	2281      	movs	r2, #129	; 0x81
 80001e2:	2100      	movs	r1, #0
 80001e4:	2078      	movs	r0, #120	; 0x78
 80001e6:	f000 fa3f 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80001ea:	22ff      	movs	r2, #255	; 0xff
 80001ec:	2100      	movs	r1, #0
 80001ee:	2078      	movs	r0, #120	; 0x78
 80001f0:	f000 fa3a 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80001f4:	22a1      	movs	r2, #161	; 0xa1
 80001f6:	2100      	movs	r1, #0
 80001f8:	2078      	movs	r0, #120	; 0x78
 80001fa:	f000 fa35 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80001fe:	22a6      	movs	r2, #166	; 0xa6
 8000200:	2100      	movs	r1, #0
 8000202:	2078      	movs	r0, #120	; 0x78
 8000204:	f000 fa30 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000208:	22a8      	movs	r2, #168	; 0xa8
 800020a:	2100      	movs	r1, #0
 800020c:	2078      	movs	r0, #120	; 0x78
 800020e:	f000 fa2b 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000212:	223f      	movs	r2, #63	; 0x3f
 8000214:	2100      	movs	r1, #0
 8000216:	2078      	movs	r0, #120	; 0x78
 8000218:	f000 fa26 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800021c:	22a4      	movs	r2, #164	; 0xa4
 800021e:	2100      	movs	r1, #0
 8000220:	2078      	movs	r0, #120	; 0x78
 8000222:	f000 fa21 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //--set display offset
 8000226:	22d3      	movs	r2, #211	; 0xd3
 8000228:	2100      	movs	r1, #0
 800022a:	2078      	movs	r0, #120	; 0x78
 800022c:	f000 fa1c 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //--not offset
 8000230:	2200      	movs	r2, #0
 8000232:	2100      	movs	r1, #0
 8000234:	2078      	movs	r0, #120	; 0x78
 8000236:	f000 fa17 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800023a:	22d5      	movs	r2, #213	; 0xd5
 800023c:	2100      	movs	r1, #0
 800023e:	2078      	movs	r0, #120	; 0x78
 8000240:	f000 fa12 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000244:	22f0      	movs	r2, #240	; 0xf0
 8000246:	2100      	movs	r1, #0
 8000248:	2078      	movs	r0, #120	; 0x78
 800024a:	f000 fa0d 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800024e:	22d9      	movs	r2, #217	; 0xd9
 8000250:	2100      	movs	r1, #0
 8000252:	2078      	movs	r0, #120	; 0x78
 8000254:	f000 fa08 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000258:	2222      	movs	r2, #34	; 0x22
 800025a:	2100      	movs	r1, #0
 800025c:	2078      	movs	r0, #120	; 0x78
 800025e:	f000 fa03 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000262:	22da      	movs	r2, #218	; 0xda
 8000264:	2100      	movs	r1, #0
 8000266:	2078      	movs	r0, #120	; 0x78
 8000268:	f000 f9fe 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800026c:	2212      	movs	r2, #18
 800026e:	2100      	movs	r1, #0
 8000270:	2078      	movs	r0, #120	; 0x78
 8000272:	f000 f9f9 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000276:	22db      	movs	r2, #219	; 0xdb
 8000278:	2100      	movs	r1, #0
 800027a:	2078      	movs	r0, #120	; 0x78
 800027c:	f000 f9f4 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000280:	2220      	movs	r2, #32
 8000282:	2100      	movs	r1, #0
 8000284:	2078      	movs	r0, #120	; 0x78
 8000286:	f000 f9ef 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800028a:	228d      	movs	r2, #141	; 0x8d
 800028c:	2100      	movs	r1, #0
 800028e:	2078      	movs	r0, #120	; 0x78
 8000290:	f000 f9ea 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000294:	2214      	movs	r2, #20
 8000296:	2100      	movs	r1, #0
 8000298:	2078      	movs	r0, #120	; 0x78
 800029a:	f000 f9e5 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800029e:	22af      	movs	r2, #175	; 0xaf
 80002a0:	2100      	movs	r1, #0
 80002a2:	2078      	movs	r0, #120	; 0x78
 80002a4:	f000 f9e0 	bl	8000668 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80002a8:	222e      	movs	r2, #46	; 0x2e
 80002aa:	2100      	movs	r1, #0
 80002ac:	2078      	movs	r0, #120	; 0x78
 80002ae:	f000 f9db 	bl	8000668 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80002b2:	2000      	movs	r0, #0
 80002b4:	f000 f842 	bl	800033c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80002b8:	f000 f812 	bl	80002e0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <SSD1306_Init+0x18c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <SSD1306_Init+0x18c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80002c8:	4b04      	ldr	r3, [pc, #16]	; (80002dc <SSD1306_Init+0x18c>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80002ce:	2301      	movs	r3, #1
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	3710      	adds	r7, #16
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	2000146c 	.word	0x2000146c
 80002dc:	200004ac 	.word	0x200004ac

080002e0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80002e6:	2300      	movs	r3, #0
 80002e8:	71fb      	strb	r3, [r7, #7]
 80002ea:	e01d      	b.n	8000328 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	3b50      	subs	r3, #80	; 0x50
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	461a      	mov	r2, r3
 80002f4:	2100      	movs	r1, #0
 80002f6:	2078      	movs	r0, #120	; 0x78
 80002f8:	f000 f9b6 	bl	8000668 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2100      	movs	r1, #0
 8000300:	2078      	movs	r0, #120	; 0x78
 8000302:	f000 f9b1 	bl	8000668 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000306:	2210      	movs	r2, #16
 8000308:	2100      	movs	r1, #0
 800030a:	2078      	movs	r0, #120	; 0x78
 800030c:	f000 f9ac 	bl	8000668 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	01db      	lsls	r3, r3, #7
 8000314:	4a08      	ldr	r2, [pc, #32]	; (8000338 <SSD1306_UpdateScreen+0x58>)
 8000316:	441a      	add	r2, r3
 8000318:	2380      	movs	r3, #128	; 0x80
 800031a:	2140      	movs	r1, #64	; 0x40
 800031c:	2078      	movs	r0, #120	; 0x78
 800031e:	f000 f959 	bl	80005d4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	3301      	adds	r3, #1
 8000326:	71fb      	strb	r3, [r7, #7]
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	2b07      	cmp	r3, #7
 800032c:	d9de      	bls.n	80002ec <SSD1306_UpdateScreen+0xc>
	}
}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	200000ac 	.word	0x200000ac

0800033c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d101      	bne.n	8000350 <SSD1306_Fill+0x14>
 800034c:	2300      	movs	r3, #0
 800034e:	e000      	b.n	8000352 <SSD1306_Fill+0x16>
 8000350:	23ff      	movs	r3, #255	; 0xff
 8000352:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000356:	4619      	mov	r1, r3
 8000358:	4803      	ldr	r0, [pc, #12]	; (8000368 <SSD1306_Fill+0x2c>)
 800035a:	f006 facc 	bl	80068f6 <memset>
}
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	200000ac 	.word	0x200000ac

0800036c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	80fb      	strh	r3, [r7, #6]
 8000376:	460b      	mov	r3, r1
 8000378:	80bb      	strh	r3, [r7, #4]
 800037a:	4613      	mov	r3, r2
 800037c:	70fb      	strb	r3, [r7, #3]
	if (
 800037e:	88fb      	ldrh	r3, [r7, #6]
 8000380:	2b7f      	cmp	r3, #127	; 0x7f
 8000382:	d848      	bhi.n	8000416 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000384:	88bb      	ldrh	r3, [r7, #4]
 8000386:	2b3f      	cmp	r3, #63	; 0x3f
 8000388:	d845      	bhi.n	8000416 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800038a:	4b25      	ldr	r3, [pc, #148]	; (8000420 <SSD1306_DrawPixel+0xb4>)
 800038c:	791b      	ldrb	r3, [r3, #4]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d006      	beq.n	80003a0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000392:	78fb      	ldrb	r3, [r7, #3]
 8000394:	2b00      	cmp	r3, #0
 8000396:	bf0c      	ite	eq
 8000398:	2301      	moveq	r3, #1
 800039a:	2300      	movne	r3, #0
 800039c:	b2db      	uxtb	r3, r3
 800039e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80003a0:	78fb      	ldrb	r3, [r7, #3]
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d11a      	bne.n	80003dc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80003a6:	88fa      	ldrh	r2, [r7, #6]
 80003a8:	88bb      	ldrh	r3, [r7, #4]
 80003aa:	08db      	lsrs	r3, r3, #3
 80003ac:	b298      	uxth	r0, r3
 80003ae:	4603      	mov	r3, r0
 80003b0:	01db      	lsls	r3, r3, #7
 80003b2:	4413      	add	r3, r2
 80003b4:	4a1b      	ldr	r2, [pc, #108]	; (8000424 <SSD1306_DrawPixel+0xb8>)
 80003b6:	5cd3      	ldrb	r3, [r2, r3]
 80003b8:	b25a      	sxtb	r2, r3
 80003ba:	88bb      	ldrh	r3, [r7, #4]
 80003bc:	f003 0307 	and.w	r3, r3, #7
 80003c0:	2101      	movs	r1, #1
 80003c2:	fa01 f303 	lsl.w	r3, r1, r3
 80003c6:	b25b      	sxtb	r3, r3
 80003c8:	4313      	orrs	r3, r2
 80003ca:	b259      	sxtb	r1, r3
 80003cc:	88fa      	ldrh	r2, [r7, #6]
 80003ce:	4603      	mov	r3, r0
 80003d0:	01db      	lsls	r3, r3, #7
 80003d2:	4413      	add	r3, r2
 80003d4:	b2c9      	uxtb	r1, r1
 80003d6:	4a13      	ldr	r2, [pc, #76]	; (8000424 <SSD1306_DrawPixel+0xb8>)
 80003d8:	54d1      	strb	r1, [r2, r3]
 80003da:	e01d      	b.n	8000418 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80003dc:	88fa      	ldrh	r2, [r7, #6]
 80003de:	88bb      	ldrh	r3, [r7, #4]
 80003e0:	08db      	lsrs	r3, r3, #3
 80003e2:	b298      	uxth	r0, r3
 80003e4:	4603      	mov	r3, r0
 80003e6:	01db      	lsls	r3, r3, #7
 80003e8:	4413      	add	r3, r2
 80003ea:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <SSD1306_DrawPixel+0xb8>)
 80003ec:	5cd3      	ldrb	r3, [r2, r3]
 80003ee:	b25a      	sxtb	r2, r3
 80003f0:	88bb      	ldrh	r3, [r7, #4]
 80003f2:	f003 0307 	and.w	r3, r3, #7
 80003f6:	2101      	movs	r1, #1
 80003f8:	fa01 f303 	lsl.w	r3, r1, r3
 80003fc:	b25b      	sxtb	r3, r3
 80003fe:	43db      	mvns	r3, r3
 8000400:	b25b      	sxtb	r3, r3
 8000402:	4013      	ands	r3, r2
 8000404:	b259      	sxtb	r1, r3
 8000406:	88fa      	ldrh	r2, [r7, #6]
 8000408:	4603      	mov	r3, r0
 800040a:	01db      	lsls	r3, r3, #7
 800040c:	4413      	add	r3, r2
 800040e:	b2c9      	uxtb	r1, r1
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <SSD1306_DrawPixel+0xb8>)
 8000412:	54d1      	strb	r1, [r2, r3]
 8000414:	e000      	b.n	8000418 <SSD1306_DrawPixel+0xac>
		return;
 8000416:	bf00      	nop
	}
}
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr
 8000420:	200004ac 	.word	0x200004ac
 8000424:	200000ac 	.word	0x200000ac

08000428 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	460a      	mov	r2, r1
 8000432:	80fb      	strh	r3, [r7, #6]
 8000434:	4613      	mov	r3, r2
 8000436:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000438:	4a05      	ldr	r2, [pc, #20]	; (8000450 <SSD1306_GotoXY+0x28>)
 800043a:	88fb      	ldrh	r3, [r7, #6]
 800043c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800043e:	4a04      	ldr	r2, [pc, #16]	; (8000450 <SSD1306_GotoXY+0x28>)
 8000440:	88bb      	ldrh	r3, [r7, #4]
 8000442:	8053      	strh	r3, [r2, #2]
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	200004ac 	.word	0x200004ac

08000454 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	6039      	str	r1, [r7, #0]
 800045e:	71fb      	strb	r3, [r7, #7]
 8000460:	4613      	mov	r3, r2
 8000462:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000464:	4b3a      	ldr	r3, [pc, #232]	; (8000550 <SSD1306_Putc+0xfc>)
 8000466:	881b      	ldrh	r3, [r3, #0]
 8000468:	461a      	mov	r2, r3
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	4413      	add	r3, r2
	if (
 8000470:	2b7f      	cmp	r3, #127	; 0x7f
 8000472:	dc07      	bgt.n	8000484 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000474:	4b36      	ldr	r3, [pc, #216]	; (8000550 <SSD1306_Putc+0xfc>)
 8000476:	885b      	ldrh	r3, [r3, #2]
 8000478:	461a      	mov	r2, r3
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	785b      	ldrb	r3, [r3, #1]
 800047e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000480:	2b3f      	cmp	r3, #63	; 0x3f
 8000482:	dd01      	ble.n	8000488 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000484:	2300      	movs	r3, #0
 8000486:	e05e      	b.n	8000546 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]
 800048c:	e04b      	b.n	8000526 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	685a      	ldr	r2, [r3, #4]
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	3b20      	subs	r3, #32
 8000496:	6839      	ldr	r1, [r7, #0]
 8000498:	7849      	ldrb	r1, [r1, #1]
 800049a:	fb01 f303 	mul.w	r3, r1, r3
 800049e:	4619      	mov	r1, r3
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	440b      	add	r3, r1
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	4413      	add	r3, r2
 80004a8:	881b      	ldrh	r3, [r3, #0]
 80004aa:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80004ac:	2300      	movs	r3, #0
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	e030      	b.n	8000514 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80004b2:	68fa      	ldr	r2, [r7, #12]
 80004b4:	693b      	ldr	r3, [r7, #16]
 80004b6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d010      	beq.n	80004e4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80004c2:	4b23      	ldr	r3, [pc, #140]	; (8000550 <SSD1306_Putc+0xfc>)
 80004c4:	881a      	ldrh	r2, [r3, #0]
 80004c6:	693b      	ldr	r3, [r7, #16]
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	4413      	add	r3, r2
 80004cc:	b298      	uxth	r0, r3
 80004ce:	4b20      	ldr	r3, [pc, #128]	; (8000550 <SSD1306_Putc+0xfc>)
 80004d0:	885a      	ldrh	r2, [r3, #2]
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	4413      	add	r3, r2
 80004d8:	b29b      	uxth	r3, r3
 80004da:	79ba      	ldrb	r2, [r7, #6]
 80004dc:	4619      	mov	r1, r3
 80004de:	f7ff ff45 	bl	800036c <SSD1306_DrawPixel>
 80004e2:	e014      	b.n	800050e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80004e4:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <SSD1306_Putc+0xfc>)
 80004e6:	881a      	ldrh	r2, [r3, #0]
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	b29b      	uxth	r3, r3
 80004ec:	4413      	add	r3, r2
 80004ee:	b298      	uxth	r0, r3
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <SSD1306_Putc+0xfc>)
 80004f2:	885a      	ldrh	r2, [r3, #2]
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	4413      	add	r3, r2
 80004fa:	b299      	uxth	r1, r3
 80004fc:	79bb      	ldrb	r3, [r7, #6]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	bf0c      	ite	eq
 8000502:	2301      	moveq	r3, #1
 8000504:	2300      	movne	r3, #0
 8000506:	b2db      	uxtb	r3, r3
 8000508:	461a      	mov	r2, r3
 800050a:	f7ff ff2f 	bl	800036c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800050e:	693b      	ldr	r3, [r7, #16]
 8000510:	3301      	adds	r3, #1
 8000512:	613b      	str	r3, [r7, #16]
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	461a      	mov	r2, r3
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	4293      	cmp	r3, r2
 800051e:	d3c8      	bcc.n	80004b2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	3301      	adds	r3, #1
 8000524:	617b      	str	r3, [r7, #20]
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	785b      	ldrb	r3, [r3, #1]
 800052a:	461a      	mov	r2, r3
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	4293      	cmp	r3, r2
 8000530:	d3ad      	bcc.n	800048e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <SSD1306_Putc+0xfc>)
 8000534:	881a      	ldrh	r2, [r3, #0]
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	b29b      	uxth	r3, r3
 800053c:	4413      	add	r3, r2
 800053e:	b29a      	uxth	r2, r3
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <SSD1306_Putc+0xfc>)
 8000542:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000544:	79fb      	ldrb	r3, [r7, #7]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3718      	adds	r7, #24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200004ac 	.word	0x200004ac

08000554 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	4613      	mov	r3, r2
 8000560:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000562:	e012      	b.n	800058a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	79fa      	ldrb	r2, [r7, #7]
 800056a:	68b9      	ldr	r1, [r7, #8]
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ff71 	bl	8000454 <SSD1306_Putc>
 8000572:	4603      	mov	r3, r0
 8000574:	461a      	mov	r2, r3
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	429a      	cmp	r2, r3
 800057c:	d002      	beq.n	8000584 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	e008      	b.n	8000596 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	3301      	adds	r3, #1
 8000588:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d1e8      	bne.n	8000564 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	781b      	ldrb	r3, [r3, #0]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f7ff feca 	bl	800033c <SSD1306_Fill>
    //SSD1306_UpdateScreen();
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80005b2:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <ssd1306_I2C_Init+0x24>)
 80005b4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005b6:	e002      	b.n	80005be <ssd1306_I2C_Init+0x12>
		p--;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3b01      	subs	r3, #1
 80005bc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d1f9      	bne.n	80005b8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	0003d090 	.word	0x0003d090

080005d4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b0c7      	sub	sp, #284	; 0x11c
 80005d8:	af02      	add	r7, sp, #8
 80005da:	4604      	mov	r4, r0
 80005dc:	4608      	mov	r0, r1
 80005de:	4639      	mov	r1, r7
 80005e0:	600a      	str	r2, [r1, #0]
 80005e2:	4619      	mov	r1, r3
 80005e4:	1dfb      	adds	r3, r7, #7
 80005e6:	4622      	mov	r2, r4
 80005e8:	701a      	strb	r2, [r3, #0]
 80005ea:	1dbb      	adds	r3, r7, #6
 80005ec:	4602      	mov	r2, r0
 80005ee:	701a      	strb	r2, [r3, #0]
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	460a      	mov	r2, r1
 80005f4:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	1dba      	adds	r2, r7, #6
 80005fc:	7812      	ldrb	r2, [r2, #0]
 80005fe:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8000600:	2300      	movs	r3, #0
 8000602:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000606:	e010      	b.n	800062a <ssd1306_I2C_WriteMulti+0x56>
		dt[i+1] = data[i];
 8000608:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800060c:	463a      	mov	r2, r7
 800060e:	6812      	ldr	r2, [r2, #0]
 8000610:	441a      	add	r2, r3
 8000612:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000616:	3301      	adds	r3, #1
 8000618:	7811      	ldrb	r1, [r2, #0]
 800061a:	f107 020c 	add.w	r2, r7, #12
 800061e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8000620:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000624:	3301      	adds	r3, #1
 8000626:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800062a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800062e:	b29b      	uxth	r3, r3
 8000630:	1d3a      	adds	r2, r7, #4
 8000632:	8812      	ldrh	r2, [r2, #0]
 8000634:	429a      	cmp	r2, r3
 8000636:	d8e7      	bhi.n	8000608 <ssd1306_I2C_WriteMulti+0x34>
	HAL_I2C_Master_Transmit(ssd1306_i2c, address, dt, count+1, 10);
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <ssd1306_I2C_WriteMulti+0x90>)
 800063a:	6818      	ldr	r0, [r3, #0]
 800063c:	1dfb      	adds	r3, r7, #7
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b299      	uxth	r1, r3
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	b29c      	uxth	r4, r3
 800064a:	f107 020c 	add.w	r2, r7, #12
 800064e:	230a      	movs	r3, #10
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	4623      	mov	r3, r4
 8000654:	f000 fff4 	bl	8001640 <HAL_I2C_Master_Transmit>
}
 8000658:	bf00      	nop
 800065a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800065e:	46bd      	mov	sp, r7
 8000660:	bd90      	pop	{r4, r7, pc}
 8000662:	bf00      	nop
 8000664:	2000146c 	.word	0x2000146c

08000668 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af02      	add	r7, sp, #8
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
 8000672:	460b      	mov	r3, r1
 8000674:	71bb      	strb	r3, [r7, #6]
 8000676:	4613      	mov	r3, r2
 8000678:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800067a:	79bb      	ldrb	r3, [r7, #6]
 800067c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800067e:	797b      	ldrb	r3, [r7, #5]
 8000680:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(ssd1306_i2c, address, dt, 2, 10);
 8000682:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <ssd1306_I2C_Write+0x38>)
 8000684:	6818      	ldr	r0, [r3, #0]
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	b299      	uxth	r1, r3
 800068a:	f107 020c 	add.w	r2, r7, #12
 800068e:	230a      	movs	r3, #10
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2302      	movs	r3, #2
 8000694:	f000 ffd4 	bl	8001640 <HAL_I2C_Master_Transmit>
}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	2000146c 	.word	0x2000146c

080006a4 <PWM_SetPWM>:
/* Private function -----------------------------------------------*/


/* Public function -----------------------------------------------*/
void PWM_SetPWM(TIM_HandleTypeDef* timer, uint32_t channel, uint16_t period,uint16_t pulse)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08c      	sub	sp, #48	; 0x30
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	4611      	mov	r1, r2
 80006b0:	461a      	mov	r2, r3
 80006b2:	460b      	mov	r3, r1
 80006b4:	80fb      	strh	r3, [r7, #6]
 80006b6:	4613      	mov	r3, r2
 80006b8:	80bb      	strh	r3, [r7, #4]
	 HAL_TIM_PWM_Stop(timer, channel); // stop generation of pwm
 80006ba:	68b9      	ldr	r1, [r7, #8]
 80006bc:	68f8      	ldr	r0, [r7, #12]
 80006be:	f002 f93f 	bl	8002940 <HAL_TIM_PWM_Stop>
	 TIM_OC_InitTypeDef sConfigOC;
	 timer->Init.Period = period; // set the period duration
 80006c2:	88fa      	ldrh	r2, [r7, #6]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	60da      	str	r2, [r3, #12]
	 HAL_TIM_PWM_Init(timer); // reinititialise with new period value
 80006c8:	68f8      	ldr	r0, [r7, #12]
 80006ca:	f002 f8d2 	bl	8002872 <HAL_TIM_PWM_Init>
	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ce:	2360      	movs	r3, #96	; 0x60
 80006d0:	617b      	str	r3, [r7, #20]
	 sConfigOC.Pulse = pulse; // set the pulse duration
 80006d2:	88bb      	ldrh	r3, [r7, #4]
 80006d4:	61bb      	str	r3, [r7, #24]
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
	 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_TIM_PWM_ConfigChannel(timer, &sConfigOC, channel);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	4619      	mov	r1, r3
 80006e6:	68f8      	ldr	r0, [r7, #12]
 80006e8:	f002 f976 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_Start(timer, channel); // start pwm generation
 80006ec:	68b9      	ldr	r1, [r7, #8]
 80006ee:	68f8      	ldr	r0, [r7, #12]
 80006f0:	f002 f8f4 	bl	80028dc <HAL_TIM_PWM_Start>
}
 80006f4:	bf00      	nop
 80006f6:	3730      	adds	r7, #48	; 0x30
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <PWM_SetDuty>:

void PWM_SetDuty(TIM_HandleTypeDef* timer, uint32_t channel, uint16_t pulse)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	4613      	mov	r3, r2
 8000708:	80fb      	strh	r3, [r7, #6]
	 __HAL_TIM_SET_COMPARE(timer, channel, pulse);
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d104      	bne.n	800071a <PWM_SetDuty+0x1e>
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	88fa      	ldrh	r2, [r7, #6]
 8000716:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000718:	e013      	b.n	8000742 <PWM_SetDuty+0x46>
	 __HAL_TIM_SET_COMPARE(timer, channel, pulse);
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	2b04      	cmp	r3, #4
 800071e:	d104      	bne.n	800072a <PWM_SetDuty+0x2e>
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	88fa      	ldrh	r2, [r7, #6]
 8000726:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000728:	e00b      	b.n	8000742 <PWM_SetDuty+0x46>
	 __HAL_TIM_SET_COMPARE(timer, channel, pulse);
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	2b08      	cmp	r3, #8
 800072e:	d104      	bne.n	800073a <PWM_SetDuty+0x3e>
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	88fa      	ldrh	r2, [r7, #6]
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000738:	e003      	b.n	8000742 <PWM_SetDuty+0x46>
	 __HAL_TIM_SET_COMPARE(timer, channel, pulse);
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	88fa      	ldrh	r2, [r7, #6]
 8000740:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_Init+0x28>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a07      	ldr	r2, [pc, #28]	; (8000774 <HAL_Init+0x28>)
 8000756:	f043 0310 	orr.w	r3, r3, #16
 800075a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800075c:	2003      	movs	r0, #3
 800075e:	f000 fb2d 	bl	8000dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000762:	200f      	movs	r0, #15
 8000764:	f000 f808 	bl	8000778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000768:	f005 fbd4 	bl	8005f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40022000 	.word	0x40022000

08000778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_InitTick+0x54>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_InitTick+0x58>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4619      	mov	r1, r3
 800078a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000792:	fbb2 f3f3 	udiv	r3, r2, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fb45 	bl	8000e26 <HAL_SYSTICK_Config>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
 80007a4:	e00e      	b.n	80007c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b0f      	cmp	r3, #15
 80007aa:	d80a      	bhi.n	80007c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ac:	2200      	movs	r2, #0
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	f04f 30ff 	mov.w	r0, #4294967295
 80007b4:	f000 fb0d 	bl	8000dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b8:	4a06      	ldr	r2, [pc, #24]	; (80007d4 <HAL_InitTick+0x5c>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007be:	2300      	movs	r3, #0
 80007c0:	e000      	b.n	80007c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000024 	.word	0x20000024
 80007d0:	2000001c 	.word	0x2000001c
 80007d4:	20000018 	.word	0x20000018

080007d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <HAL_IncTick+0x1c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_IncTick+0x20>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4413      	add	r3, r2
 80007e8:	4a03      	ldr	r2, [pc, #12]	; (80007f8 <HAL_IncTick+0x20>)
 80007ea:	6013      	str	r3, [r2, #0]
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr
 80007f4:	2000001c 	.word	0x2000001c
 80007f8:	20001470 	.word	0x20001470

080007fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000800:	4b02      	ldr	r3, [pc, #8]	; (800080c <HAL_GetTick+0x10>)
 8000802:	681b      	ldr	r3, [r3, #0]
}
 8000804:	4618      	mov	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	20001470 	.word	0x20001470

08000810 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000818:	2300      	movs	r3, #0
 800081a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800081c:	2300      	movs	r3, #0
 800081e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d101      	bne.n	8000832 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	e0be      	b.n	80009b0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800083c:	2b00      	cmp	r3, #0
 800083e:	d109      	bne.n	8000854 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2200      	movs	r2, #0
 8000844:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2200      	movs	r2, #0
 800084a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f005 f962 	bl	8005b18 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f000 f9ab 	bl	8000bb0 <ADC_ConversionStop_Disable>
 800085a:	4603      	mov	r3, r0
 800085c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000862:	f003 0310 	and.w	r3, r3, #16
 8000866:	2b00      	cmp	r3, #0
 8000868:	f040 8099 	bne.w	800099e <HAL_ADC_Init+0x18e>
 800086c:	7dfb      	ldrb	r3, [r7, #23]
 800086e:	2b00      	cmp	r3, #0
 8000870:	f040 8095 	bne.w	800099e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000878:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800087c:	f023 0302 	bic.w	r3, r3, #2
 8000880:	f043 0202 	orr.w	r2, r3, #2
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000890:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	7b1b      	ldrb	r3, [r3, #12]
 8000896:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000898:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800089a:	68ba      	ldr	r2, [r7, #8]
 800089c:	4313      	orrs	r3, r2
 800089e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008a8:	d003      	beq.n	80008b2 <HAL_ADC_Init+0xa2>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d102      	bne.n	80008b8 <HAL_ADC_Init+0xa8>
 80008b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b6:	e000      	b.n	80008ba <HAL_ADC_Init+0xaa>
 80008b8:	2300      	movs	r3, #0
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4313      	orrs	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	7d1b      	ldrb	r3, [r3, #20]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d119      	bne.n	80008fc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	7b1b      	ldrb	r3, [r3, #12]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d109      	bne.n	80008e4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	3b01      	subs	r3, #1
 80008d6:	035a      	lsls	r2, r3, #13
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	4313      	orrs	r3, r2
 80008dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	e00b      	b.n	80008fc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e8:	f043 0220 	orr.w	r2, r3, #32
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f4:	f043 0201 	orr.w	r2, r3, #1
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	430a      	orrs	r2, r1
 800090e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	689a      	ldr	r2, [r3, #8]
 8000916:	4b28      	ldr	r3, [pc, #160]	; (80009b8 <HAL_ADC_Init+0x1a8>)
 8000918:	4013      	ands	r3, r2
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	6812      	ldr	r2, [r2, #0]
 800091e:	68b9      	ldr	r1, [r7, #8]
 8000920:	430b      	orrs	r3, r1
 8000922:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800092c:	d003      	beq.n	8000936 <HAL_ADC_Init+0x126>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d104      	bne.n	8000940 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	691b      	ldr	r3, [r3, #16]
 800093a:	3b01      	subs	r3, #1
 800093c:	051b      	lsls	r3, r3, #20
 800093e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000946:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	430a      	orrs	r2, r1
 8000952:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	689a      	ldr	r2, [r3, #8]
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <HAL_ADC_Init+0x1ac>)
 800095c:	4013      	ands	r3, r2
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	429a      	cmp	r2, r3
 8000962:	d10b      	bne.n	800097c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800096e:	f023 0303 	bic.w	r3, r3, #3
 8000972:	f043 0201 	orr.w	r2, r3, #1
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800097a:	e018      	b.n	80009ae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000980:	f023 0312 	bic.w	r3, r3, #18
 8000984:	f043 0210 	orr.w	r2, r3, #16
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000990:	f043 0201 	orr.w	r2, r3, #1
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800099c:	e007      	b.n	80009ae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a2:	f043 0210 	orr.w	r2, r3, #16
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80009ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	ffe1f7fd 	.word	0xffe1f7fd
 80009bc:	ff1f0efe 	.word	0xff1f0efe

080009c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009ca:	2300      	movs	r3, #0
 80009cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d101      	bne.n	80009e0 <HAL_ADC_ConfigChannel+0x20>
 80009dc:	2302      	movs	r3, #2
 80009de:	e0dc      	b.n	8000b9a <HAL_ADC_ConfigChannel+0x1da>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2201      	movs	r2, #1
 80009e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	2b06      	cmp	r3, #6
 80009ee:	d81c      	bhi.n	8000a2a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685a      	ldr	r2, [r3, #4]
 80009fa:	4613      	mov	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	3b05      	subs	r3, #5
 8000a02:	221f      	movs	r2, #31
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	4019      	ands	r1, r3
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	6818      	ldr	r0, [r3, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685a      	ldr	r2, [r3, #4]
 8000a14:	4613      	mov	r3, r2
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4413      	add	r3, r2
 8000a1a:	3b05      	subs	r3, #5
 8000a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	430a      	orrs	r2, r1
 8000a26:	635a      	str	r2, [r3, #52]	; 0x34
 8000a28:	e03c      	b.n	8000aa4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	2b0c      	cmp	r3, #12
 8000a30:	d81c      	bhi.n	8000a6c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685a      	ldr	r2, [r3, #4]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	4413      	add	r3, r2
 8000a42:	3b23      	subs	r3, #35	; 0x23
 8000a44:	221f      	movs	r2, #31
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	4019      	ands	r1, r3
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	6818      	ldr	r0, [r3, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685a      	ldr	r2, [r3, #4]
 8000a56:	4613      	mov	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4413      	add	r3, r2
 8000a5c:	3b23      	subs	r3, #35	; 0x23
 8000a5e:	fa00 f203 	lsl.w	r2, r0, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	430a      	orrs	r2, r1
 8000a68:	631a      	str	r2, [r3, #48]	; 0x30
 8000a6a:	e01b      	b.n	8000aa4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685a      	ldr	r2, [r3, #4]
 8000a76:	4613      	mov	r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	4413      	add	r3, r2
 8000a7c:	3b41      	subs	r3, #65	; 0x41
 8000a7e:	221f      	movs	r2, #31
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	43db      	mvns	r3, r3
 8000a86:	4019      	ands	r1, r3
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	6818      	ldr	r0, [r3, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	4613      	mov	r3, r2
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	4413      	add	r3, r2
 8000a96:	3b41      	subs	r3, #65	; 0x41
 8000a98:	fa00 f203 	lsl.w	r2, r0, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b09      	cmp	r3, #9
 8000aaa:	d91c      	bls.n	8000ae6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	68d9      	ldr	r1, [r3, #12]
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	3b1e      	subs	r3, #30
 8000abe:	2207      	movs	r2, #7
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	4019      	ands	r1, r3
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	6898      	ldr	r0, [r3, #8]
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	4413      	add	r3, r2
 8000ad6:	3b1e      	subs	r3, #30
 8000ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	e019      	b.n	8000b1a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6919      	ldr	r1, [r3, #16]
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4613      	mov	r3, r2
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	4413      	add	r3, r2
 8000af6:	2207      	movs	r2, #7
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	43db      	mvns	r3, r3
 8000afe:	4019      	ands	r1, r3
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	6898      	ldr	r0, [r3, #8]
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	fa00 f203 	lsl.w	r2, r0, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	430a      	orrs	r2, r1
 8000b18:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b10      	cmp	r3, #16
 8000b20:	d003      	beq.n	8000b2a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b26:	2b11      	cmp	r3, #17
 8000b28:	d132      	bne.n	8000b90 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <HAL_ADC_ConfigChannel+0x1e4>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d125      	bne.n	8000b80 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d126      	bne.n	8000b90 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	689a      	ldr	r2, [r3, #8]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000b50:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b10      	cmp	r3, #16
 8000b58:	d11a      	bne.n	8000b90 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b5a:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <HAL_ADC_ConfigChannel+0x1e8>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a13      	ldr	r2, [pc, #76]	; (8000bac <HAL_ADC_ConfigChannel+0x1ec>)
 8000b60:	fba2 2303 	umull	r2, r3, r2, r3
 8000b64:	0c9a      	lsrs	r2, r3, #18
 8000b66:	4613      	mov	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	4413      	add	r3, r2
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b70:	e002      	b.n	8000b78 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	3b01      	subs	r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1f9      	bne.n	8000b72 <HAL_ADC_ConfigChannel+0x1b2>
 8000b7e:	e007      	b.n	8000b90 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b84:	f043 0220 	orr.w	r2, r3, #32
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	40012400 	.word	0x40012400
 8000ba8:	20000024 	.word	0x20000024
 8000bac:	431bde83 	.word	0x431bde83

08000bb0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d127      	bne.n	8000c1a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f022 0201 	bic.w	r2, r2, #1
 8000bd8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000bda:	f7ff fe0f 	bl	80007fc <HAL_GetTick>
 8000bde:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000be0:	e014      	b.n	8000c0c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000be2:	f7ff fe0b 	bl	80007fc <HAL_GetTick>
 8000be6:	4602      	mov	r2, r0
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d90d      	bls.n	8000c0c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf4:	f043 0210 	orr.w	r2, r3, #16
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c00:	f043 0201 	orr.w	r2, r3, #1
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e007      	b.n	8000c1c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d0e3      	beq.n	8000be2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c56:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	60d3      	str	r3, [r2, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <__NVIC_GetPriorityGrouping+0x18>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	f003 0307 	and.w	r3, r3, #7
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db0b      	blt.n	8000cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f003 021f 	and.w	r2, r3, #31
 8000ca0:	4906      	ldr	r1, [pc, #24]	; (8000cbc <__NVIC_EnableIRQ+0x34>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	095b      	lsrs	r3, r3, #5
 8000ca8:	2001      	movs	r0, #1
 8000caa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100

08000cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db0a      	blt.n	8000cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	490c      	ldr	r1, [pc, #48]	; (8000d0c <__NVIC_SetPriority+0x4c>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce8:	e00a      	b.n	8000d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4908      	ldr	r1, [pc, #32]	; (8000d10 <__NVIC_SetPriority+0x50>)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	0112      	lsls	r2, r2, #4
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	761a      	strb	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	; 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f1c3 0307 	rsb	r3, r3, #7
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	bf28      	it	cs
 8000d32:	2304      	movcs	r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d902      	bls.n	8000d44 <NVIC_EncodePriority+0x30>
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3b03      	subs	r3, #3
 8000d42:	e000      	b.n	8000d46 <NVIC_EncodePriority+0x32>
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43d9      	mvns	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	4313      	orrs	r3, r2
         );
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3724      	adds	r7, #36	; 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d88:	d301      	bcc.n	8000d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00f      	b.n	8000dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <SysTick_Config+0x40>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d96:	210f      	movs	r1, #15
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f7ff ff90 	bl	8000cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <SysTick_Config+0x40>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da6:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <SysTick_Config+0x40>)
 8000da8:	2207      	movs	r2, #7
 8000daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	e000e010 	.word	0xe000e010

08000dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ff2d 	bl	8000c24 <__NVIC_SetPriorityGrouping>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de4:	f7ff ff42 	bl	8000c6c <__NVIC_GetPriorityGrouping>
 8000de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	6978      	ldr	r0, [r7, #20]
 8000df0:	f7ff ff90 	bl	8000d14 <NVIC_EncodePriority>
 8000df4:	4602      	mov	r2, r0
 8000df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff5f 	bl	8000cc0 <__NVIC_SetPriority>
}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff35 	bl	8000c88 <__NVIC_EnableIRQ>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ffa2 	bl	8000d78 <SysTick_Config>
 8000e34:	4603      	mov	r3, r0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d005      	beq.n	8000e62 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2204      	movs	r2, #4
 8000e5a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
 8000e60:	e051      	b.n	8000f06 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 020e 	bic.w	r2, r2, #14
 8000e70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 0201 	bic.w	r2, r2, #1
 8000e80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a22      	ldr	r2, [pc, #136]	; (8000f10 <HAL_DMA_Abort_IT+0xd0>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d029      	beq.n	8000ee0 <HAL_DMA_Abort_IT+0xa0>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a20      	ldr	r2, [pc, #128]	; (8000f14 <HAL_DMA_Abort_IT+0xd4>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d022      	beq.n	8000edc <HAL_DMA_Abort_IT+0x9c>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a1f      	ldr	r2, [pc, #124]	; (8000f18 <HAL_DMA_Abort_IT+0xd8>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d01a      	beq.n	8000ed6 <HAL_DMA_Abort_IT+0x96>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a1d      	ldr	r2, [pc, #116]	; (8000f1c <HAL_DMA_Abort_IT+0xdc>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d012      	beq.n	8000ed0 <HAL_DMA_Abort_IT+0x90>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a1c      	ldr	r2, [pc, #112]	; (8000f20 <HAL_DMA_Abort_IT+0xe0>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d00a      	beq.n	8000eca <HAL_DMA_Abort_IT+0x8a>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a1a      	ldr	r2, [pc, #104]	; (8000f24 <HAL_DMA_Abort_IT+0xe4>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d102      	bne.n	8000ec4 <HAL_DMA_Abort_IT+0x84>
 8000ebe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ec2:	e00e      	b.n	8000ee2 <HAL_DMA_Abort_IT+0xa2>
 8000ec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ec8:	e00b      	b.n	8000ee2 <HAL_DMA_Abort_IT+0xa2>
 8000eca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ece:	e008      	b.n	8000ee2 <HAL_DMA_Abort_IT+0xa2>
 8000ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed4:	e005      	b.n	8000ee2 <HAL_DMA_Abort_IT+0xa2>
 8000ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eda:	e002      	b.n	8000ee2 <HAL_DMA_Abort_IT+0xa2>
 8000edc:	2310      	movs	r3, #16
 8000ede:	e000      	b.n	8000ee2 <HAL_DMA_Abort_IT+0xa2>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	4a11      	ldr	r2, [pc, #68]	; (8000f28 <HAL_DMA_Abort_IT+0xe8>)
 8000ee4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	4798      	blx	r3
    } 
  }
  return status;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40020008 	.word	0x40020008
 8000f14:	4002001c 	.word	0x4002001c
 8000f18:	40020030 	.word	0x40020030
 8000f1c:	40020044 	.word	0x40020044
 8000f20:	40020058 	.word	0x40020058
 8000f24:	4002006c 	.word	0x4002006c
 8000f28:	40020000 	.word	0x40020000

08000f2c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f46:	4b2f      	ldr	r3, [pc, #188]	; (8001004 <HAL_FLASH_Program+0xd8>)
 8000f48:	7e1b      	ldrb	r3, [r3, #24]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d101      	bne.n	8000f52 <HAL_FLASH_Program+0x26>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e054      	b.n	8000ffc <HAL_FLASH_Program+0xd0>
 8000f52:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <HAL_FLASH_Program+0xd8>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f5c:	f000 f8a8 	bl	80010b0 <FLASH_WaitForLastOperation>
 8000f60:	4603      	mov	r3, r0
 8000f62:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000f64:	7dfb      	ldrb	r3, [r7, #23]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d144      	bne.n	8000ff4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d102      	bne.n	8000f76 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000f70:	2301      	movs	r3, #1
 8000f72:	757b      	strb	r3, [r7, #21]
 8000f74:	e007      	b.n	8000f86 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d102      	bne.n	8000f82 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	757b      	strb	r3, [r7, #21]
 8000f80:	e001      	b.n	8000f86 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000f82:	2304      	movs	r3, #4
 8000f84:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	75bb      	strb	r3, [r7, #22]
 8000f8a:	e02d      	b.n	8000fe8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000f8c:	7dbb      	ldrb	r3, [r7, #22]
 8000f8e:	005a      	lsls	r2, r3, #1
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	eb02 0c03 	add.w	ip, r2, r3
 8000f96:	7dbb      	ldrb	r3, [r7, #22]
 8000f98:	0119      	lsls	r1, r3, #4
 8000f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f9e:	f1c1 0620 	rsb	r6, r1, #32
 8000fa2:	f1a1 0020 	sub.w	r0, r1, #32
 8000fa6:	fa22 f401 	lsr.w	r4, r2, r1
 8000faa:	fa03 f606 	lsl.w	r6, r3, r6
 8000fae:	4334      	orrs	r4, r6
 8000fb0:	fa23 f000 	lsr.w	r0, r3, r0
 8000fb4:	4304      	orrs	r4, r0
 8000fb6:	fa23 f501 	lsr.w	r5, r3, r1
 8000fba:	b2a3      	uxth	r3, r4
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4660      	mov	r0, ip
 8000fc0:	f000 f85a 	bl	8001078 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000fc4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fc8:	f000 f872 	bl	80010b0 <FLASH_WaitForLastOperation>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_FLASH_Program+0xdc>)
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	4a0c      	ldr	r2, [pc, #48]	; (8001008 <HAL_FLASH_Program+0xdc>)
 8000fd6:	f023 0301 	bic.w	r3, r3, #1
 8000fda:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000fdc:	7dfb      	ldrb	r3, [r7, #23]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d107      	bne.n	8000ff2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000fe2:	7dbb      	ldrb	r3, [r7, #22]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	75bb      	strb	r3, [r7, #22]
 8000fe8:	7dba      	ldrb	r2, [r7, #22]
 8000fea:	7d7b      	ldrb	r3, [r7, #21]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d3cd      	bcc.n	8000f8c <HAL_FLASH_Program+0x60>
 8000ff0:	e000      	b.n	8000ff4 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000ff2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_FLASH_Program+0xd8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	761a      	strb	r2, [r3, #24]

  return status;
 8000ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	371c      	adds	r7, #28
 8001000:	46bd      	mov	sp, r7
 8001002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001004:	20001478 	.word	0x20001478
 8001008:	40022000 	.word	0x40022000

0800100c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_FLASH_Unlock+0x40>)
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00d      	beq.n	800103e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_FLASH_Unlock+0x40>)
 8001024:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <HAL_FLASH_Unlock+0x44>)
 8001026:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_FLASH_Unlock+0x40>)
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <HAL_FLASH_Unlock+0x48>)
 800102c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <HAL_FLASH_Unlock+0x40>)
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800103e:	79fb      	ldrb	r3, [r7, #7]
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40022000 	.word	0x40022000
 8001050:	45670123 	.word	0x45670123
 8001054:	cdef89ab 	.word	0xcdef89ab

08001058 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <HAL_FLASH_Lock+0x1c>)
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_FLASH_Lock+0x1c>)
 8001062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001066:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40022000 	.word	0x40022000

08001078 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <FLASH_Program_HalfWord+0x30>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <FLASH_Program_HalfWord+0x34>)
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	4a07      	ldr	r2, [pc, #28]	; (80010ac <FLASH_Program_HalfWord+0x34>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	887a      	ldrh	r2, [r7, #2]
 800109a:	801a      	strh	r2, [r3, #0]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20001478 	.word	0x20001478
 80010ac:	40022000 	.word	0x40022000

080010b0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff fba0 	bl	80007fc <HAL_GetTick>
 80010bc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80010be:	e010      	b.n	80010e2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c6:	d00c      	beq.n	80010e2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d007      	beq.n	80010de <FLASH_WaitForLastOperation+0x2e>
 80010ce:	f7ff fb95 	bl	80007fc <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d201      	bcs.n	80010e2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e025      	b.n	800112e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <FLASH_WaitForLastOperation+0x88>)
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1e8      	bne.n	80010c0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <FLASH_WaitForLastOperation+0x88>)
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	f003 0320 	and.w	r3, r3, #32
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d002      	beq.n	8001100 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <FLASH_WaitForLastOperation+0x88>)
 80010fc:	2220      	movs	r2, #32
 80010fe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <FLASH_WaitForLastOperation+0x88>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	f003 0310 	and.w	r3, r3, #16
 8001108:	2b00      	cmp	r3, #0
 800110a:	d10b      	bne.n	8001124 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <FLASH_WaitForLastOperation+0x88>)
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001114:	2b00      	cmp	r3, #0
 8001116:	d105      	bne.n	8001124 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <FLASH_WaitForLastOperation+0x88>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001124:	f000 f80a 	bl	800113c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e000      	b.n	800112e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40022000 	.word	0x40022000

0800113c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <FLASH_SetErrorCode+0x98>)
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	2b00      	cmp	r3, #0
 8001150:	d009      	beq.n	8001166 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <FLASH_SetErrorCode+0x9c>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	4a1f      	ldr	r2, [pc, #124]	; (80011d8 <FLASH_SetErrorCode+0x9c>)
 800115c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f043 0310 	orr.w	r3, r3, #16
 8001164:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <FLASH_SetErrorCode+0x98>)
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	2b00      	cmp	r3, #0
 8001170:	d009      	beq.n	8001186 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <FLASH_SetErrorCode+0x9c>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <FLASH_SetErrorCode+0x9c>)
 800117c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <FLASH_SetErrorCode+0x98>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00b      	beq.n	80011aa <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <FLASH_SetErrorCode+0x9c>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <FLASH_SetErrorCode+0x9c>)
 800119c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <FLASH_SetErrorCode+0x98>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <FLASH_SetErrorCode+0x98>)
 80011a4:	f023 0301 	bic.w	r3, r3, #1
 80011a8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f240 1201 	movw	r2, #257	; 0x101
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d106      	bne.n	80011c2 <FLASH_SetErrorCode+0x86>
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <FLASH_SetErrorCode+0x98>)
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <FLASH_SetErrorCode+0x98>)
 80011ba:	f023 0301 	bic.w	r3, r3, #1
 80011be:	61d3      	str	r3, [r2, #28]
}  
 80011c0:	e002      	b.n	80011c8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80011c2:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <FLASH_SetErrorCode+0x98>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	60d3      	str	r3, [r2, #12]
}  
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40022000 	.word	0x40022000
 80011d8:	20001478 	.word	0x20001478

080011dc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80011ee:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <HAL_FLASHEx_Erase+0xd0>)
 80011f0:	7e1b      	ldrb	r3, [r3, #24]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <HAL_FLASHEx_Erase+0x1e>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e053      	b.n	80012a2 <HAL_FLASHEx_Erase+0xc6>
 80011fa:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <HAL_FLASHEx_Erase+0xd0>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d116      	bne.n	8001236 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001208:	f24c 3050 	movw	r0, #50000	; 0xc350
 800120c:	f7ff ff50 	bl	80010b0 <FLASH_WaitForLastOperation>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d141      	bne.n	800129a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001216:	2001      	movs	r0, #1
 8001218:	f000 f84c 	bl	80012b4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800121c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001220:	f7ff ff46 	bl	80010b0 <FLASH_WaitForLastOperation>
 8001224:	4603      	mov	r3, r0
 8001226:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001228:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <HAL_FLASHEx_Erase+0xd4>)
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	4a20      	ldr	r2, [pc, #128]	; (80012b0 <HAL_FLASHEx_Erase+0xd4>)
 800122e:	f023 0304 	bic.w	r3, r3, #4
 8001232:	6113      	str	r3, [r2, #16]
 8001234:	e031      	b.n	800129a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001236:	f24c 3050 	movw	r0, #50000	; 0xc350
 800123a:	f7ff ff39 	bl	80010b0 <FLASH_WaitForLastOperation>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d12a      	bne.n	800129a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	f04f 32ff 	mov.w	r2, #4294967295
 800124a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	e019      	b.n	8001288 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001254:	68b8      	ldr	r0, [r7, #8]
 8001256:	f000 f849 	bl	80012ec <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800125a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800125e:	f7ff ff27 	bl	80010b0 <FLASH_WaitForLastOperation>
 8001262:	4603      	mov	r3, r0
 8001264:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_FLASHEx_Erase+0xd4>)
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	4a11      	ldr	r2, [pc, #68]	; (80012b0 <HAL_FLASHEx_Erase+0xd4>)
 800126c:	f023 0302 	bic.w	r3, r3, #2
 8001270:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	601a      	str	r2, [r3, #0]
            break;
 800127e:	e00c      	b.n	800129a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001286:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	029a      	lsls	r2, r3, #10
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001294:	68ba      	ldr	r2, [r7, #8]
 8001296:	429a      	cmp	r2, r3
 8001298:	d3dc      	bcc.n	8001254 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <HAL_FLASHEx_Erase+0xd0>)
 800129c:	2200      	movs	r2, #0
 800129e:	761a      	strb	r2, [r3, #24]

  return status;
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20001478 	.word	0x20001478
 80012b0:	40022000 	.word	0x40022000

080012b4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <FLASH_MassErase+0x30>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <FLASH_MassErase+0x34>)
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <FLASH_MassErase+0x34>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <FLASH_MassErase+0x34>)
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <FLASH_MassErase+0x34>)
 80012d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	20001478 	.word	0x20001478
 80012e8:	40022000 	.word	0x40022000

080012ec <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <FLASH_PageErase+0x38>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <FLASH_PageErase+0x3c>)
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <FLASH_PageErase+0x3c>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001306:	4a08      	ldr	r2, [pc, #32]	; (8001328 <FLASH_PageErase+0x3c>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <FLASH_PageErase+0x3c>)
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	4a05      	ldr	r2, [pc, #20]	; (8001328 <FLASH_PageErase+0x3c>)
 8001312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001316:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20001478 	.word	0x20001478
 8001328:	40022000 	.word	0x40022000

0800132c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800132c:	b480      	push	{r7}
 800132e:	b08b      	sub	sp, #44	; 0x2c
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133e:	e127      	b.n	8001590 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001340:	2201      	movs	r2, #1
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	69fa      	ldr	r2, [r7, #28]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	429a      	cmp	r2, r3
 800135a:	f040 8116 	bne.w	800158a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b12      	cmp	r3, #18
 8001364:	d034      	beq.n	80013d0 <HAL_GPIO_Init+0xa4>
 8001366:	2b12      	cmp	r3, #18
 8001368:	d80d      	bhi.n	8001386 <HAL_GPIO_Init+0x5a>
 800136a:	2b02      	cmp	r3, #2
 800136c:	d02b      	beq.n	80013c6 <HAL_GPIO_Init+0x9a>
 800136e:	2b02      	cmp	r3, #2
 8001370:	d804      	bhi.n	800137c <HAL_GPIO_Init+0x50>
 8001372:	2b00      	cmp	r3, #0
 8001374:	d031      	beq.n	80013da <HAL_GPIO_Init+0xae>
 8001376:	2b01      	cmp	r3, #1
 8001378:	d01c      	beq.n	80013b4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800137a:	e048      	b.n	800140e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800137c:	2b03      	cmp	r3, #3
 800137e:	d043      	beq.n	8001408 <HAL_GPIO_Init+0xdc>
 8001380:	2b11      	cmp	r3, #17
 8001382:	d01b      	beq.n	80013bc <HAL_GPIO_Init+0x90>
          break;
 8001384:	e043      	b.n	800140e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001386:	4a89      	ldr	r2, [pc, #548]	; (80015ac <HAL_GPIO_Init+0x280>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d026      	beq.n	80013da <HAL_GPIO_Init+0xae>
 800138c:	4a87      	ldr	r2, [pc, #540]	; (80015ac <HAL_GPIO_Init+0x280>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d806      	bhi.n	80013a0 <HAL_GPIO_Init+0x74>
 8001392:	4a87      	ldr	r2, [pc, #540]	; (80015b0 <HAL_GPIO_Init+0x284>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d020      	beq.n	80013da <HAL_GPIO_Init+0xae>
 8001398:	4a86      	ldr	r2, [pc, #536]	; (80015b4 <HAL_GPIO_Init+0x288>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d01d      	beq.n	80013da <HAL_GPIO_Init+0xae>
          break;
 800139e:	e036      	b.n	800140e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013a0:	4a85      	ldr	r2, [pc, #532]	; (80015b8 <HAL_GPIO_Init+0x28c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d019      	beq.n	80013da <HAL_GPIO_Init+0xae>
 80013a6:	4a85      	ldr	r2, [pc, #532]	; (80015bc <HAL_GPIO_Init+0x290>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d016      	beq.n	80013da <HAL_GPIO_Init+0xae>
 80013ac:	4a84      	ldr	r2, [pc, #528]	; (80015c0 <HAL_GPIO_Init+0x294>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d013      	beq.n	80013da <HAL_GPIO_Init+0xae>
          break;
 80013b2:	e02c      	b.n	800140e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	623b      	str	r3, [r7, #32]
          break;
 80013ba:	e028      	b.n	800140e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	3304      	adds	r3, #4
 80013c2:	623b      	str	r3, [r7, #32]
          break;
 80013c4:	e023      	b.n	800140e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	3308      	adds	r3, #8
 80013cc:	623b      	str	r3, [r7, #32]
          break;
 80013ce:	e01e      	b.n	800140e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	330c      	adds	r3, #12
 80013d6:	623b      	str	r3, [r7, #32]
          break;
 80013d8:	e019      	b.n	800140e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d102      	bne.n	80013e8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013e2:	2304      	movs	r3, #4
 80013e4:	623b      	str	r3, [r7, #32]
          break;
 80013e6:	e012      	b.n	800140e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d105      	bne.n	80013fc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013f0:	2308      	movs	r3, #8
 80013f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	611a      	str	r2, [r3, #16]
          break;
 80013fa:	e008      	b.n	800140e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013fc:	2308      	movs	r3, #8
 80013fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69fa      	ldr	r2, [r7, #28]
 8001404:	615a      	str	r2, [r3, #20]
          break;
 8001406:	e002      	b.n	800140e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
          break;
 800140c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	2bff      	cmp	r3, #255	; 0xff
 8001412:	d801      	bhi.n	8001418 <HAL_GPIO_Init+0xec>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	e001      	b.n	800141c <HAL_GPIO_Init+0xf0>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3304      	adds	r3, #4
 800141c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	2bff      	cmp	r3, #255	; 0xff
 8001422:	d802      	bhi.n	800142a <HAL_GPIO_Init+0xfe>
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	e002      	b.n	8001430 <HAL_GPIO_Init+0x104>
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	3b08      	subs	r3, #8
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	210f      	movs	r1, #15
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	401a      	ands	r2, r3
 8001442:	6a39      	ldr	r1, [r7, #32]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	431a      	orrs	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 8096 	beq.w	800158a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800145e:	4b59      	ldr	r3, [pc, #356]	; (80015c4 <HAL_GPIO_Init+0x298>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	4a58      	ldr	r2, [pc, #352]	; (80015c4 <HAL_GPIO_Init+0x298>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6193      	str	r3, [r2, #24]
 800146a:	4b56      	ldr	r3, [pc, #344]	; (80015c4 <HAL_GPIO_Init+0x298>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001476:	4a54      	ldr	r2, [pc, #336]	; (80015c8 <HAL_GPIO_Init+0x29c>)
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3302      	adds	r3, #2
 800147e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001482:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	220f      	movs	r2, #15
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	4013      	ands	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4b      	ldr	r2, [pc, #300]	; (80015cc <HAL_GPIO_Init+0x2a0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d013      	beq.n	80014ca <HAL_GPIO_Init+0x19e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4a      	ldr	r2, [pc, #296]	; (80015d0 <HAL_GPIO_Init+0x2a4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d00d      	beq.n	80014c6 <HAL_GPIO_Init+0x19a>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a49      	ldr	r2, [pc, #292]	; (80015d4 <HAL_GPIO_Init+0x2a8>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d007      	beq.n	80014c2 <HAL_GPIO_Init+0x196>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a48      	ldr	r2, [pc, #288]	; (80015d8 <HAL_GPIO_Init+0x2ac>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d101      	bne.n	80014be <HAL_GPIO_Init+0x192>
 80014ba:	2303      	movs	r3, #3
 80014bc:	e006      	b.n	80014cc <HAL_GPIO_Init+0x1a0>
 80014be:	2304      	movs	r3, #4
 80014c0:	e004      	b.n	80014cc <HAL_GPIO_Init+0x1a0>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e002      	b.n	80014cc <HAL_GPIO_Init+0x1a0>
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <HAL_GPIO_Init+0x1a0>
 80014ca:	2300      	movs	r3, #0
 80014cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ce:	f002 0203 	and.w	r2, r2, #3
 80014d2:	0092      	lsls	r2, r2, #2
 80014d4:	4093      	lsls	r3, r2
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	4313      	orrs	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014dc:	493a      	ldr	r1, [pc, #232]	; (80015c8 <HAL_GPIO_Init+0x29c>)
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	089b      	lsrs	r3, r3, #2
 80014e2:	3302      	adds	r3, #2
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d006      	beq.n	8001504 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014f6:	4b39      	ldr	r3, [pc, #228]	; (80015dc <HAL_GPIO_Init+0x2b0>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4938      	ldr	r1, [pc, #224]	; (80015dc <HAL_GPIO_Init+0x2b0>)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
 8001502:	e006      	b.n	8001512 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001504:	4b35      	ldr	r3, [pc, #212]	; (80015dc <HAL_GPIO_Init+0x2b0>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	43db      	mvns	r3, r3
 800150c:	4933      	ldr	r1, [pc, #204]	; (80015dc <HAL_GPIO_Init+0x2b0>)
 800150e:	4013      	ands	r3, r2
 8001510:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d006      	beq.n	800152c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800151e:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <HAL_GPIO_Init+0x2b0>)
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	492e      	ldr	r1, [pc, #184]	; (80015dc <HAL_GPIO_Init+0x2b0>)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	604b      	str	r3, [r1, #4]
 800152a:	e006      	b.n	800153a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800152c:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <HAL_GPIO_Init+0x2b0>)
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	43db      	mvns	r3, r3
 8001534:	4929      	ldr	r1, [pc, #164]	; (80015dc <HAL_GPIO_Init+0x2b0>)
 8001536:	4013      	ands	r3, r2
 8001538:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d006      	beq.n	8001554 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001546:	4b25      	ldr	r3, [pc, #148]	; (80015dc <HAL_GPIO_Init+0x2b0>)
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	4924      	ldr	r1, [pc, #144]	; (80015dc <HAL_GPIO_Init+0x2b0>)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	4313      	orrs	r3, r2
 8001550:	608b      	str	r3, [r1, #8]
 8001552:	e006      	b.n	8001562 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001554:	4b21      	ldr	r3, [pc, #132]	; (80015dc <HAL_GPIO_Init+0x2b0>)
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	43db      	mvns	r3, r3
 800155c:	491f      	ldr	r1, [pc, #124]	; (80015dc <HAL_GPIO_Init+0x2b0>)
 800155e:	4013      	ands	r3, r2
 8001560:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d006      	beq.n	800157c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <HAL_GPIO_Init+0x2b0>)
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	491a      	ldr	r1, [pc, #104]	; (80015dc <HAL_GPIO_Init+0x2b0>)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	60cb      	str	r3, [r1, #12]
 800157a:	e006      	b.n	800158a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800157c:	4b17      	ldr	r3, [pc, #92]	; (80015dc <HAL_GPIO_Init+0x2b0>)
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	43db      	mvns	r3, r3
 8001584:	4915      	ldr	r1, [pc, #84]	; (80015dc <HAL_GPIO_Init+0x2b0>)
 8001586:	4013      	ands	r3, r2
 8001588:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	3301      	adds	r3, #1
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	fa22 f303 	lsr.w	r3, r2, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	f47f aed0 	bne.w	8001340 <HAL_GPIO_Init+0x14>
  }
}
 80015a0:	bf00      	nop
 80015a2:	372c      	adds	r7, #44	; 0x2c
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	10210000 	.word	0x10210000
 80015b0:	10110000 	.word	0x10110000
 80015b4:	10120000 	.word	0x10120000
 80015b8:	10310000 	.word	0x10310000
 80015bc:	10320000 	.word	0x10320000
 80015c0:	10220000 	.word	0x10220000
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40010000 	.word	0x40010000
 80015cc:	40010800 	.word	0x40010800
 80015d0:	40010c00 	.word	0x40010c00
 80015d4:	40011000 	.word	0x40011000
 80015d8:	40011400 	.word	0x40011400
 80015dc:	40010400 	.word	0x40010400

080015e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	887b      	ldrh	r3, [r7, #2]
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015f8:	2301      	movs	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	e001      	b.n	8001602 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001602:	7bfb      	ldrb	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr

0800160e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	460b      	mov	r3, r1
 8001618:	807b      	strh	r3, [r7, #2]
 800161a:	4613      	mov	r3, r2
 800161c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800161e:	787b      	ldrb	r3, [r7, #1]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001624:	887a      	ldrh	r2, [r7, #2]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800162a:	e003      	b.n	8001634 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800162c:	887b      	ldrh	r3, [r7, #2]
 800162e:	041a      	lsls	r2, r3, #16
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	611a      	str	r2, [r3, #16]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
	...

08001640 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af02      	add	r7, sp, #8
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	461a      	mov	r2, r3
 800164c:	460b      	mov	r3, r1
 800164e:	817b      	strh	r3, [r7, #10]
 8001650:	4613      	mov	r3, r2
 8001652:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001654:	f7ff f8d2 	bl	80007fc <HAL_GetTick>
 8001658:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b20      	cmp	r3, #32
 8001664:	f040 80e0 	bne.w	8001828 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2319      	movs	r3, #25
 800166e:	2201      	movs	r2, #1
 8001670:	4970      	ldr	r1, [pc, #448]	; (8001834 <HAL_I2C_Master_Transmit+0x1f4>)
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 fa7a 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800167e:	2302      	movs	r3, #2
 8001680:	e0d3      	b.n	800182a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001688:	2b01      	cmp	r3, #1
 800168a:	d101      	bne.n	8001690 <HAL_I2C_Master_Transmit+0x50>
 800168c:	2302      	movs	r3, #2
 800168e:	e0cc      	b.n	800182a <HAL_I2C_Master_Transmit+0x1ea>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d007      	beq.n	80016b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f042 0201 	orr.w	r2, r2, #1
 80016b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2221      	movs	r2, #33	; 0x21
 80016ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2210      	movs	r2, #16
 80016d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	893a      	ldrh	r2, [r7, #8]
 80016e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4a50      	ldr	r2, [pc, #320]	; (8001838 <HAL_I2C_Master_Transmit+0x1f8>)
 80016f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016f8:	8979      	ldrh	r1, [r7, #10]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	6a3a      	ldr	r2, [r7, #32]
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 f9be 	bl	8001a80 <I2C_MasterRequestWrite>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e08d      	b.n	800182a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001724:	e066      	b.n	80017f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	6a39      	ldr	r1, [r7, #32]
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f000 faf4 	bl	8001d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00d      	beq.n	8001752 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	2b04      	cmp	r3, #4
 800173c:	d107      	bne.n	800174e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800174c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e06b      	b.n	800182a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	781a      	ldrb	r2, [r3, #0]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176c:	b29b      	uxth	r3, r3
 800176e:	3b01      	subs	r3, #1
 8001770:	b29a      	uxth	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177a:	3b01      	subs	r3, #1
 800177c:	b29a      	uxth	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b04      	cmp	r3, #4
 800178e:	d11b      	bne.n	80017c8 <HAL_I2C_Master_Transmit+0x188>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001794:	2b00      	cmp	r3, #0
 8001796:	d017      	beq.n	80017c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	781a      	ldrb	r2, [r3, #0]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	3b01      	subs	r3, #1
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c0:	3b01      	subs	r3, #1
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	6a39      	ldr	r1, [r7, #32]
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 fae4 	bl	8001d9a <I2C_WaitOnBTFFlagUntilTimeout>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00d      	beq.n	80017f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d107      	bne.n	80017f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e01a      	b.n	800182a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d194      	bne.n	8001726 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800180a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2220      	movs	r2, #32
 8001810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	e000      	b.n	800182a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001828:	2302      	movs	r3, #2
  }
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	00100002 	.word	0x00100002
 8001838:	ffff0000 	.word	0xffff0000

0800183c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af02      	add	r7, sp, #8
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	607a      	str	r2, [r7, #4]
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	460b      	mov	r3, r1
 800184a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800184c:	f7fe ffd6 	bl	80007fc <HAL_GetTick>
 8001850:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001852:	2301      	movs	r3, #1
 8001854:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b20      	cmp	r3, #32
 8001860:	f040 8105 	bne.w	8001a6e <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2319      	movs	r3, #25
 800186a:	2201      	movs	r2, #1
 800186c:	4982      	ldr	r1, [pc, #520]	; (8001a78 <HAL_I2C_IsDeviceReady+0x23c>)
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 f97c 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800187a:	2302      	movs	r3, #2
 800187c:	e0f8      	b.n	8001a70 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <HAL_I2C_IsDeviceReady+0x50>
 8001888:	2302      	movs	r3, #2
 800188a:	e0f1      	b.n	8001a70 <HAL_I2C_IsDeviceReady+0x234>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d007      	beq.n	80018b2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 0201 	orr.w	r2, r2, #1
 80018b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2224      	movs	r2, #36	; 0x24
 80018c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4a6a      	ldr	r2, [pc, #424]	; (8001a7c <HAL_I2C_IsDeviceReady+0x240>)
 80018d4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018e4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f93a 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e0b6      	b.n	8001a70 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001902:	897b      	ldrh	r3, [r7, #10]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001910:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001912:	f7fe ff73 	bl	80007fc <HAL_GetTick>
 8001916:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b02      	cmp	r3, #2
 8001924:	bf0c      	ite	eq
 8001926:	2301      	moveq	r3, #1
 8001928:	2300      	movne	r3, #0
 800192a:	b2db      	uxtb	r3, r3
 800192c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800193c:	bf0c      	ite	eq
 800193e:	2301      	moveq	r3, #1
 8001940:	2300      	movne	r3, #0
 8001942:	b2db      	uxtb	r3, r3
 8001944:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001946:	e025      	b.n	8001994 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001948:	f7fe ff58 	bl	80007fc <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d302      	bcc.n	800195e <HAL_I2C_IsDeviceReady+0x122>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d103      	bne.n	8001966 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	22a0      	movs	r2, #160	; 0xa0
 8001962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b02      	cmp	r3, #2
 8001972:	bf0c      	ite	eq
 8001974:	2301      	moveq	r3, #1
 8001976:	2300      	movne	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2ba0      	cmp	r3, #160	; 0xa0
 800199e:	d005      	beq.n	80019ac <HAL_I2C_IsDeviceReady+0x170>
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d102      	bne.n	80019ac <HAL_I2C_IsDeviceReady+0x170>
 80019a6:	7dbb      	ldrb	r3, [r7, #22]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0cd      	beq.n	8001948 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2220      	movs	r2, #32
 80019b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d129      	bne.n	8001a16 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019d0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	2319      	movs	r3, #25
 80019ee:	2201      	movs	r2, #1
 80019f0:	4921      	ldr	r1, [pc, #132]	; (8001a78 <HAL_I2C_IsDeviceReady+0x23c>)
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 f8ba 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e036      	b.n	8001a70 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2220      	movs	r2, #32
 8001a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e02c      	b.n	8001a70 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a24:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a2e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	2319      	movs	r3, #25
 8001a36:	2201      	movs	r2, #1
 8001a38:	490f      	ldr	r1, [pc, #60]	; (8001a78 <HAL_I2C_IsDeviceReady+0x23c>)
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 f896 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e012      	b.n	8001a70 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	f4ff af3e 	bcc.w	80018d6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8001a6e:	2302      	movs	r3, #2
  }
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3720      	adds	r7, #32
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	00100002 	.word	0x00100002
 8001a7c:	ffff0000 	.word	0xffff0000

08001a80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af02      	add	r7, sp, #8
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d006      	beq.n	8001aaa <I2C_MasterRequestWrite+0x2a>
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d003      	beq.n	8001aaa <I2C_MasterRequestWrite+0x2a>
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001aa8:	d108      	bne.n	8001abc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	e00b      	b.n	8001ad4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	2b12      	cmp	r3, #18
 8001ac2:	d107      	bne.n	8001ad4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ad2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f000 f843 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e035      	b.n	8001b5c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001af8:	d108      	bne.n	8001b0c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001afa:	897b      	ldrh	r3, [r7, #10]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b08:	611a      	str	r2, [r3, #16]
 8001b0a:	e01b      	b.n	8001b44 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b0c:	897b      	ldrh	r3, [r7, #10]
 8001b0e:	11db      	asrs	r3, r3, #7
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	f003 0306 	and.w	r3, r3, #6
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f063 030f 	orn	r3, r3, #15
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	490e      	ldr	r1, [pc, #56]	; (8001b64 <I2C_MasterRequestWrite+0xe4>)
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 f875 	bl	8001c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e010      	b.n	8001b5c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b3a:	897b      	ldrh	r3, [r7, #10]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	4907      	ldr	r1, [pc, #28]	; (8001b68 <I2C_MasterRequestWrite+0xe8>)
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f865 	bl	8001c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	00010008 	.word	0x00010008
 8001b68:	00010002 	.word	0x00010002

08001b6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b7c:	e025      	b.n	8001bca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b84:	d021      	beq.n	8001bca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b86:	f7fe fe39 	bl	80007fc <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d302      	bcc.n	8001b9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d116      	bne.n	8001bca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f043 0220 	orr.w	r2, r3, #32
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e023      	b.n	8001c12 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	0c1b      	lsrs	r3, r3, #16
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d10d      	bne.n	8001bf0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	4013      	ands	r3, r2
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	bf0c      	ite	eq
 8001be6:	2301      	moveq	r3, #1
 8001be8:	2300      	movne	r3, #0
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	e00c      	b.n	8001c0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	bf0c      	ite	eq
 8001c02:	2301      	moveq	r3, #1
 8001c04:	2300      	movne	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d0b6      	beq.n	8001b7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c28:	e051      	b.n	8001cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c38:	d123      	bne.n	8001c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c48:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c52:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f043 0204 	orr.w	r2, r3, #4
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e046      	b.n	8001d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	d021      	beq.n	8001cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c8a:	f7fe fdb7 	bl	80007fc <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d302      	bcc.n	8001ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d116      	bne.n	8001cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f043 0220 	orr.w	r2, r3, #32
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e020      	b.n	8001d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	0c1b      	lsrs	r3, r3, #16
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d10c      	bne.n	8001cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	bf14      	ite	ne
 8001cea:	2301      	movne	r3, #1
 8001cec:	2300      	moveq	r3, #0
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	e00b      	b.n	8001d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	43da      	mvns	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bf14      	ite	ne
 8001d04:	2301      	movne	r3, #1
 8001d06:	2300      	moveq	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d18d      	bne.n	8001c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d24:	e02d      	b.n	8001d82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f878 	bl	8001e1c <I2C_IsAcknowledgeFailed>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e02d      	b.n	8001d92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3c:	d021      	beq.n	8001d82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d3e:	f7fe fd5d 	bl	80007fc <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d302      	bcc.n	8001d54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d116      	bne.n	8001d82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f043 0220 	orr.w	r2, r3, #32
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e007      	b.n	8001d92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8c:	2b80      	cmp	r3, #128	; 0x80
 8001d8e:	d1ca      	bne.n	8001d26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001da6:	e02d      	b.n	8001e04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 f837 	bl	8001e1c <I2C_IsAcknowledgeFailed>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e02d      	b.n	8001e14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbe:	d021      	beq.n	8001e04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dc0:	f7fe fd1c 	bl	80007fc <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d302      	bcc.n	8001dd6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d116      	bne.n	8001e04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f043 0220 	orr.w	r2, r3, #32
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e007      	b.n	8001e14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d1ca      	bne.n	8001da8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e32:	d11b      	bne.n	8001e6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	f043 0204 	orr.w	r2, r3, #4
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e26c      	b.n	8002364 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 8087 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e98:	4b92      	ldr	r3, [pc, #584]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d00c      	beq.n	8001ebe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ea4:	4b8f      	ldr	r3, [pc, #572]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d112      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x5e>
 8001eb0:	4b8c      	ldr	r3, [pc, #560]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ebc:	d10b      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebe:	4b89      	ldr	r3, [pc, #548]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d06c      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x12c>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d168      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e246      	b.n	8002364 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ede:	d106      	bne.n	8001eee <HAL_RCC_OscConfig+0x76>
 8001ee0:	4b80      	ldr	r3, [pc, #512]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a7f      	ldr	r2, [pc, #508]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	e02e      	b.n	8001f4c <HAL_RCC_OscConfig+0xd4>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x98>
 8001ef6:	4b7b      	ldr	r3, [pc, #492]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a7a      	ldr	r2, [pc, #488]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b78      	ldr	r3, [pc, #480]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a77      	ldr	r2, [pc, #476]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e01d      	b.n	8001f4c <HAL_RCC_OscConfig+0xd4>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0xbc>
 8001f1a:	4b72      	ldr	r3, [pc, #456]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a71      	ldr	r2, [pc, #452]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b6f      	ldr	r3, [pc, #444]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a6e      	ldr	r2, [pc, #440]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_OscConfig+0xd4>
 8001f34:	4b6b      	ldr	r3, [pc, #428]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a6a      	ldr	r2, [pc, #424]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	4b68      	ldr	r3, [pc, #416]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a67      	ldr	r2, [pc, #412]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d013      	beq.n	8001f7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7fe fc52 	bl	80007fc <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7fe fc4e 	bl	80007fc <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e1fa      	b.n	8002364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b5d      	ldr	r3, [pc, #372]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0xe4>
 8001f7a:	e014      	b.n	8001fa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7fe fc3e 	bl	80007fc <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f84:	f7fe fc3a 	bl	80007fc <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e1e6      	b.n	8002364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	4b53      	ldr	r3, [pc, #332]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x10c>
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d063      	beq.n	800207a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fb2:	4b4c      	ldr	r3, [pc, #304]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fbe:	4b49      	ldr	r3, [pc, #292]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d11c      	bne.n	8002004 <HAL_RCC_OscConfig+0x18c>
 8001fca:	4b46      	ldr	r3, [pc, #280]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d116      	bne.n	8002004 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	4b43      	ldr	r3, [pc, #268]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_RCC_OscConfig+0x176>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e1ba      	b.n	8002364 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fee:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4939      	ldr	r1, [pc, #228]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002002:	e03a      	b.n	800207a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d020      	beq.n	800204e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800200c:	4b36      	ldr	r3, [pc, #216]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7fe fbf3 	bl	80007fc <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800201a:	f7fe fbef 	bl	80007fc <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e19b      	b.n	8002364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202c:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002038:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4927      	ldr	r1, [pc, #156]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]
 800204c:	e015      	b.n	800207a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204e:	4b26      	ldr	r3, [pc, #152]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7fe fbd2 	bl	80007fc <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205c:	f7fe fbce 	bl	80007fc <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e17a      	b.n	8002364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206e:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d03a      	beq.n	80020fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d019      	beq.n	80020c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208e:	4b17      	ldr	r3, [pc, #92]	; (80020ec <HAL_RCC_OscConfig+0x274>)
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002094:	f7fe fbb2 	bl	80007fc <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800209c:	f7fe fbae 	bl	80007fc <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e15a      	b.n	8002364 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f000 fada 	bl	8002674 <RCC_Delay>
 80020c0:	e01c      	b.n	80020fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_RCC_OscConfig+0x274>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c8:	f7fe fb98 	bl	80007fc <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ce:	e00f      	b.n	80020f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d0:	f7fe fb94 	bl	80007fc <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d908      	bls.n	80020f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e140      	b.n	8002364 <HAL_RCC_OscConfig+0x4ec>
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	42420000 	.word	0x42420000
 80020ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f0:	4b9e      	ldr	r3, [pc, #632]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1e9      	bne.n	80020d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80a6 	beq.w	8002256 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210e:	4b97      	ldr	r3, [pc, #604]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10d      	bne.n	8002136 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	4b94      	ldr	r3, [pc, #592]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4a93      	ldr	r2, [pc, #588]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002124:	61d3      	str	r3, [r2, #28]
 8002126:	4b91      	ldr	r3, [pc, #580]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002132:	2301      	movs	r3, #1
 8002134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002136:	4b8e      	ldr	r3, [pc, #568]	; (8002370 <HAL_RCC_OscConfig+0x4f8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d118      	bne.n	8002174 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002142:	4b8b      	ldr	r3, [pc, #556]	; (8002370 <HAL_RCC_OscConfig+0x4f8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a8a      	ldr	r2, [pc, #552]	; (8002370 <HAL_RCC_OscConfig+0x4f8>)
 8002148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214e:	f7fe fb55 	bl	80007fc <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002156:	f7fe fb51 	bl	80007fc <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b64      	cmp	r3, #100	; 0x64
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e0fd      	b.n	8002364 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002168:	4b81      	ldr	r3, [pc, #516]	; (8002370 <HAL_RCC_OscConfig+0x4f8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x312>
 800217c:	4b7b      	ldr	r3, [pc, #492]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4a7a      	ldr	r2, [pc, #488]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6213      	str	r3, [r2, #32]
 8002188:	e02d      	b.n	80021e6 <HAL_RCC_OscConfig+0x36e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x334>
 8002192:	4b76      	ldr	r3, [pc, #472]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	4a75      	ldr	r2, [pc, #468]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	6213      	str	r3, [r2, #32]
 800219e:	4b73      	ldr	r3, [pc, #460]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4a72      	ldr	r2, [pc, #456]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 80021a4:	f023 0304 	bic.w	r3, r3, #4
 80021a8:	6213      	str	r3, [r2, #32]
 80021aa:	e01c      	b.n	80021e6 <HAL_RCC_OscConfig+0x36e>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	d10c      	bne.n	80021ce <HAL_RCC_OscConfig+0x356>
 80021b4:	4b6d      	ldr	r3, [pc, #436]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	4a6c      	ldr	r2, [pc, #432]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	f043 0304 	orr.w	r3, r3, #4
 80021be:	6213      	str	r3, [r2, #32]
 80021c0:	4b6a      	ldr	r3, [pc, #424]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4a69      	ldr	r2, [pc, #420]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6213      	str	r3, [r2, #32]
 80021cc:	e00b      	b.n	80021e6 <HAL_RCC_OscConfig+0x36e>
 80021ce:	4b67      	ldr	r3, [pc, #412]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4a66      	ldr	r2, [pc, #408]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	f023 0301 	bic.w	r3, r3, #1
 80021d8:	6213      	str	r3, [r2, #32]
 80021da:	4b64      	ldr	r3, [pc, #400]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	4a63      	ldr	r2, [pc, #396]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 80021e0:	f023 0304 	bic.w	r3, r3, #4
 80021e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d015      	beq.n	800221a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ee:	f7fe fb05 	bl	80007fc <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f4:	e00a      	b.n	800220c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	f7fe fb01 	bl	80007fc <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f241 3288 	movw	r2, #5000	; 0x1388
 8002204:	4293      	cmp	r3, r2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e0ab      	b.n	8002364 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220c:	4b57      	ldr	r3, [pc, #348]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0ee      	beq.n	80021f6 <HAL_RCC_OscConfig+0x37e>
 8002218:	e014      	b.n	8002244 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221a:	f7fe faef 	bl	80007fc <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002220:	e00a      	b.n	8002238 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7fe faeb 	bl	80007fc <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002230:	4293      	cmp	r3, r2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e095      	b.n	8002364 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002238:	4b4c      	ldr	r3, [pc, #304]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1ee      	bne.n	8002222 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002244:	7dfb      	ldrb	r3, [r7, #23]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d105      	bne.n	8002256 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800224a:	4b48      	ldr	r3, [pc, #288]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	4a47      	ldr	r2, [pc, #284]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 8002250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002254:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 8081 	beq.w	8002362 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002260:	4b42      	ldr	r3, [pc, #264]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 030c 	and.w	r3, r3, #12
 8002268:	2b08      	cmp	r3, #8
 800226a:	d061      	beq.n	8002330 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d146      	bne.n	8002302 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002274:	4b3f      	ldr	r3, [pc, #252]	; (8002374 <HAL_RCC_OscConfig+0x4fc>)
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7fe fabf 	bl	80007fc <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002282:	f7fe fabb 	bl	80007fc <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e067      	b.n	8002364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002294:	4b35      	ldr	r3, [pc, #212]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f0      	bne.n	8002282 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a8:	d108      	bne.n	80022bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022aa:	4b30      	ldr	r3, [pc, #192]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	492d      	ldr	r1, [pc, #180]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022bc:	4b2b      	ldr	r3, [pc, #172]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a19      	ldr	r1, [r3, #32]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	430b      	orrs	r3, r1
 80022ce:	4927      	ldr	r1, [pc, #156]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d4:	4b27      	ldr	r3, [pc, #156]	; (8002374 <HAL_RCC_OscConfig+0x4fc>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7fe fa8f 	bl	80007fc <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e2:	f7fe fa8b 	bl	80007fc <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e037      	b.n	8002364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f4:	4b1d      	ldr	r3, [pc, #116]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x46a>
 8002300:	e02f      	b.n	8002362 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002302:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <HAL_RCC_OscConfig+0x4fc>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7fe fa78 	bl	80007fc <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002310:	f7fe fa74 	bl	80007fc <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e020      	b.n	8002364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002322:	4b12      	ldr	r3, [pc, #72]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x498>
 800232e:	e018      	b.n	8002362 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e013      	b.n	8002364 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_RCC_OscConfig+0x4f4>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	429a      	cmp	r2, r3
 800234e:	d106      	bne.n	800235e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235a:	429a      	cmp	r2, r3
 800235c:	d001      	beq.n	8002362 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	40007000 	.word	0x40007000
 8002374:	42420060 	.word	0x42420060

08002378 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0d0      	b.n	800252e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800238c:	4b6a      	ldr	r3, [pc, #424]	; (8002538 <HAL_RCC_ClockConfig+0x1c0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d910      	bls.n	80023bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239a:	4b67      	ldr	r3, [pc, #412]	; (8002538 <HAL_RCC_ClockConfig+0x1c0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 0207 	bic.w	r2, r3, #7
 80023a2:	4965      	ldr	r1, [pc, #404]	; (8002538 <HAL_RCC_ClockConfig+0x1c0>)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b63      	ldr	r3, [pc, #396]	; (8002538 <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0b8      	b.n	800252e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d020      	beq.n	800240a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d4:	4b59      	ldr	r3, [pc, #356]	; (800253c <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4a58      	ldr	r2, [pc, #352]	; (800253c <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023ec:	4b53      	ldr	r3, [pc, #332]	; (800253c <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4a52      	ldr	r2, [pc, #328]	; (800253c <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f8:	4b50      	ldr	r3, [pc, #320]	; (800253c <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	494d      	ldr	r1, [pc, #308]	; (800253c <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d040      	beq.n	8002498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d107      	bne.n	800242e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	4b47      	ldr	r3, [pc, #284]	; (800253c <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d115      	bne.n	8002456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e07f      	b.n	800252e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d107      	bne.n	8002446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002436:	4b41      	ldr	r3, [pc, #260]	; (800253c <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d109      	bne.n	8002456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e073      	b.n	800252e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002446:	4b3d      	ldr	r3, [pc, #244]	; (800253c <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e06b      	b.n	800252e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002456:	4b39      	ldr	r3, [pc, #228]	; (800253c <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f023 0203 	bic.w	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4936      	ldr	r1, [pc, #216]	; (800253c <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	4313      	orrs	r3, r2
 8002466:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002468:	f7fe f9c8 	bl	80007fc <HAL_GetTick>
 800246c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246e:	e00a      	b.n	8002486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002470:	f7fe f9c4 	bl	80007fc <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 3288 	movw	r2, #5000	; 0x1388
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e053      	b.n	800252e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	4b2d      	ldr	r3, [pc, #180]	; (800253c <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 020c 	and.w	r2, r3, #12
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	429a      	cmp	r2, r3
 8002496:	d1eb      	bne.n	8002470 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002498:	4b27      	ldr	r3, [pc, #156]	; (8002538 <HAL_RCC_ClockConfig+0x1c0>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d210      	bcs.n	80024c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b24      	ldr	r3, [pc, #144]	; (8002538 <HAL_RCC_ClockConfig+0x1c0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 0207 	bic.w	r2, r3, #7
 80024ae:	4922      	ldr	r1, [pc, #136]	; (8002538 <HAL_RCC_ClockConfig+0x1c0>)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	4b20      	ldr	r3, [pc, #128]	; (8002538 <HAL_RCC_ClockConfig+0x1c0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e032      	b.n	800252e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d4:	4b19      	ldr	r3, [pc, #100]	; (800253c <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4916      	ldr	r1, [pc, #88]	; (800253c <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d009      	beq.n	8002506 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024f2:	4b12      	ldr	r3, [pc, #72]	; (800253c <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	490e      	ldr	r1, [pc, #56]	; (800253c <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	4313      	orrs	r3, r2
 8002504:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002506:	f000 f821 	bl	800254c <HAL_RCC_GetSysClockFreq>
 800250a:	4601      	mov	r1, r0
 800250c:	4b0b      	ldr	r3, [pc, #44]	; (800253c <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <HAL_RCC_ClockConfig+0x1c8>)
 8002518:	5cd3      	ldrb	r3, [r2, r3]
 800251a:	fa21 f303 	lsr.w	r3, r1, r3
 800251e:	4a09      	ldr	r2, [pc, #36]	; (8002544 <HAL_RCC_ClockConfig+0x1cc>)
 8002520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_RCC_ClockConfig+0x1d0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe f926 	bl	8000778 <HAL_InitTick>

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40022000 	.word	0x40022000
 800253c:	40021000 	.word	0x40021000
 8002540:	08009a24 	.word	0x08009a24
 8002544:	20000024 	.word	0x20000024
 8002548:	20000018 	.word	0x20000018

0800254c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800254c:	b490      	push	{r4, r7}
 800254e:	b08a      	sub	sp, #40	; 0x28
 8002550:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002552:	4b2a      	ldr	r3, [pc, #168]	; (80025fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002554:	1d3c      	adds	r4, r7, #4
 8002556:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800255c:	4b28      	ldr	r3, [pc, #160]	; (8002600 <HAL_RCC_GetSysClockFreq+0xb4>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
 800256a:	2300      	movs	r3, #0
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002576:	4b23      	ldr	r3, [pc, #140]	; (8002604 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b04      	cmp	r3, #4
 8002584:	d002      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x40>
 8002586:	2b08      	cmp	r3, #8
 8002588:	d003      	beq.n	8002592 <HAL_RCC_GetSysClockFreq+0x46>
 800258a:	e02d      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800258c:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <HAL_RCC_GetSysClockFreq+0xbc>)
 800258e:	623b      	str	r3, [r7, #32]
      break;
 8002590:	e02d      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	0c9b      	lsrs	r3, r3, #18
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800259e:	4413      	add	r3, r2
 80025a0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025a4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d013      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025b0:	4b14      	ldr	r3, [pc, #80]	; (8002604 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	0c5b      	lsrs	r3, r3, #17
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025be:	4413      	add	r3, r2
 80025c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	4a0f      	ldr	r2, [pc, #60]	; (8002608 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025ca:	fb02 f203 	mul.w	r2, r2, r3
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
 80025d6:	e004      	b.n	80025e2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	4a0c      	ldr	r2, [pc, #48]	; (800260c <HAL_RCC_GetSysClockFreq+0xc0>)
 80025dc:	fb02 f303 	mul.w	r3, r2, r3
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	623b      	str	r3, [r7, #32]
      break;
 80025e6:	e002      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025e8:	4b07      	ldr	r3, [pc, #28]	; (8002608 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025ea:	623b      	str	r3, [r7, #32]
      break;
 80025ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ee:	6a3b      	ldr	r3, [r7, #32]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3728      	adds	r7, #40	; 0x28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc90      	pop	{r4, r7}
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	08007130 	.word	0x08007130
 8002600:	08007140 	.word	0x08007140
 8002604:	40021000 	.word	0x40021000
 8002608:	007a1200 	.word	0x007a1200
 800260c:	003d0900 	.word	0x003d0900

08002610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002614:	4b02      	ldr	r3, [pc, #8]	; (8002620 <HAL_RCC_GetHCLKFreq+0x10>)
 8002616:	681b      	ldr	r3, [r3, #0]
}
 8002618:	4618      	mov	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	20000024 	.word	0x20000024

08002624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002628:	f7ff fff2 	bl	8002610 <HAL_RCC_GetHCLKFreq>
 800262c:	4601      	mov	r1, r0
 800262e:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	0a1b      	lsrs	r3, r3, #8
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	4a03      	ldr	r2, [pc, #12]	; (8002648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800263a:	5cd3      	ldrb	r3, [r2, r3]
 800263c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40021000 	.word	0x40021000
 8002648:	08009a34 	.word	0x08009a34

0800264c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002650:	f7ff ffde 	bl	8002610 <HAL_RCC_GetHCLKFreq>
 8002654:	4601      	mov	r1, r0
 8002656:	4b05      	ldr	r3, [pc, #20]	; (800266c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	0adb      	lsrs	r3, r3, #11
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	4a03      	ldr	r2, [pc, #12]	; (8002670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002662:	5cd3      	ldrb	r3, [r2, r3]
 8002664:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002668:	4618      	mov	r0, r3
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000
 8002670:	08009a34 	.word	0x08009a34

08002674 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800267c:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <RCC_Delay+0x34>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <RCC_Delay+0x38>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	0a5b      	lsrs	r3, r3, #9
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	fb02 f303 	mul.w	r3, r2, r3
 800268e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002690:	bf00      	nop
  }
  while (Delay --);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1e5a      	subs	r2, r3, #1
 8002696:	60fa      	str	r2, [r7, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f9      	bne.n	8002690 <RCC_Delay+0x1c>
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000024 	.word	0x20000024
 80026ac:	10624dd3 	.word	0x10624dd3

080026b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d07d      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80026cc:	2300      	movs	r3, #0
 80026ce:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d0:	4b4f      	ldr	r3, [pc, #316]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10d      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026dc:	4b4c      	ldr	r3, [pc, #304]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	4a4b      	ldr	r2, [pc, #300]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e6:	61d3      	str	r3, [r2, #28]
 80026e8:	4b49      	ldr	r3, [pc, #292]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f4:	2301      	movs	r3, #1
 80026f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f8:	4b46      	ldr	r3, [pc, #280]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d118      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002704:	4b43      	ldr	r3, [pc, #268]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a42      	ldr	r2, [pc, #264]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800270a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002710:	f7fe f874 	bl	80007fc <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002716:	e008      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002718:	f7fe f870 	bl	80007fc <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	; 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e06d      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272a:	4b3a      	ldr	r3, [pc, #232]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002736:	4b36      	ldr	r3, [pc, #216]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d02e      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	429a      	cmp	r2, r3
 8002752:	d027      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002754:	4b2e      	ldr	r3, [pc, #184]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800275c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800275e:	4b2e      	ldr	r3, [pc, #184]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002760:	2201      	movs	r2, #1
 8002762:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002764:	4b2c      	ldr	r3, [pc, #176]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800276a:	4a29      	ldr	r2, [pc, #164]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d014      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277a:	f7fe f83f 	bl	80007fc <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002780:	e00a      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002782:	f7fe f83b 	bl	80007fc <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002790:	4293      	cmp	r3, r2
 8002792:	d901      	bls.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e036      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002798:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0ee      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027a4:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4917      	ldr	r1, [pc, #92]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027b6:	7dfb      	ldrb	r3, [r7, #23]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d105      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027bc:	4b14      	ldr	r3, [pc, #80]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	4a13      	ldr	r2, [pc, #76]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027d4:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	490b      	ldr	r1, [pc, #44]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d008      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027f2:	4b07      	ldr	r3, [pc, #28]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4904      	ldr	r1, [pc, #16]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40021000 	.word	0x40021000
 8002814:	40007000 	.word	0x40007000
 8002818:	42420440 	.word	0x42420440

0800281c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e01d      	b.n	800286a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f003 fe14 	bl	8006470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3304      	adds	r3, #4
 8002858:	4619      	mov	r1, r3
 800285a:	4610      	mov	r0, r2
 800285c:	f000 fa3a 	bl	8002cd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e01d      	b.n	80028c0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d106      	bne.n	800289e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f815 	bl	80028c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2202      	movs	r2, #2
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3304      	adds	r3, #4
 80028ae:	4619      	mov	r1, r3
 80028b0:	4610      	mov	r0, r2
 80028b2:	f000 fa0f 	bl	8002cd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr
	...

080028dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2201      	movs	r2, #1
 80028ec:	6839      	ldr	r1, [r7, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fc70 	bl	80031d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a10      	ldr	r2, [pc, #64]	; (800293c <HAL_TIM_PWM_Start+0x60>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d107      	bne.n	800290e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800290c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2b06      	cmp	r3, #6
 800291e:	d007      	beq.n	8002930 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40012c00 	.word	0x40012c00

08002940 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2200      	movs	r2, #0
 8002950:	6839      	ldr	r1, [r7, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fc3e 	bl	80031d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1d      	ldr	r2, [pc, #116]	; (80029d4 <HAL_TIM_PWM_Stop+0x94>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d117      	bne.n	8002992 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6a1a      	ldr	r2, [r3, #32]
 8002968:	f241 1311 	movw	r3, #4369	; 0x1111
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10f      	bne.n	8002992 <HAL_TIM_PWM_Stop+0x52>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6a1a      	ldr	r2, [r3, #32]
 8002978:	f240 4344 	movw	r3, #1092	; 0x444
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d107      	bne.n	8002992 <HAL_TIM_PWM_Stop+0x52>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002990:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6a1a      	ldr	r2, [r3, #32]
 8002998:	f241 1311 	movw	r3, #4369	; 0x1111
 800299c:	4013      	ands	r3, r2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10f      	bne.n	80029c2 <HAL_TIM_PWM_Stop+0x82>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6a1a      	ldr	r2, [r3, #32]
 80029a8:	f240 4344 	movw	r3, #1092	; 0x444
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d107      	bne.n	80029c2 <HAL_TIM_PWM_Stop+0x82>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0201 	bic.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40012c00 	.word	0x40012c00

080029d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e0b4      	b.n	8002b5c <HAL_TIM_PWM_ConfigChannel+0x184>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2202      	movs	r2, #2
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b0c      	cmp	r3, #12
 8002a06:	f200 809f 	bhi.w	8002b48 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002a0a:	a201      	add	r2, pc, #4	; (adr r2, 8002a10 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a10:	08002a45 	.word	0x08002a45
 8002a14:	08002b49 	.word	0x08002b49
 8002a18:	08002b49 	.word	0x08002b49
 8002a1c:	08002b49 	.word	0x08002b49
 8002a20:	08002a85 	.word	0x08002a85
 8002a24:	08002b49 	.word	0x08002b49
 8002a28:	08002b49 	.word	0x08002b49
 8002a2c:	08002b49 	.word	0x08002b49
 8002a30:	08002ac7 	.word	0x08002ac7
 8002a34:	08002b49 	.word	0x08002b49
 8002a38:	08002b49 	.word	0x08002b49
 8002a3c:	08002b49 	.word	0x08002b49
 8002a40:	08002b07 	.word	0x08002b07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 f9a4 	bl	8002d98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699a      	ldr	r2, [r3, #24]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0208 	orr.w	r2, r2, #8
 8002a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699a      	ldr	r2, [r3, #24]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0204 	bic.w	r2, r2, #4
 8002a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6999      	ldr	r1, [r3, #24]
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	619a      	str	r2, [r3, #24]
      break;
 8002a82:	e062      	b.n	8002b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f9ea 	bl	8002e64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699a      	ldr	r2, [r3, #24]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6999      	ldr	r1, [r3, #24]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	021a      	lsls	r2, r3, #8
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	619a      	str	r2, [r3, #24]
      break;
 8002ac4:	e041      	b.n	8002b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68b9      	ldr	r1, [r7, #8]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 fa33 	bl	8002f38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	69da      	ldr	r2, [r3, #28]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 0208 	orr.w	r2, r2, #8
 8002ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69da      	ldr	r2, [r3, #28]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0204 	bic.w	r2, r2, #4
 8002af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	69d9      	ldr	r1, [r3, #28]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	61da      	str	r2, [r3, #28]
      break;
 8002b04:	e021      	b.n	8002b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68b9      	ldr	r1, [r7, #8]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fa7d 	bl	800300c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	69da      	ldr	r2, [r3, #28]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	69da      	ldr	r2, [r3, #28]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69d9      	ldr	r1, [r3, #28]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	021a      	lsls	r2, r3, #8
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	61da      	str	r2, [r3, #28]
      break;
 8002b46:	e000      	b.n	8002b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002b48:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_TIM_ConfigClockSource+0x18>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e0a6      	b.n	8002cca <HAL_TIM_ConfigClockSource+0x166>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ba2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b40      	cmp	r3, #64	; 0x40
 8002bb2:	d067      	beq.n	8002c84 <HAL_TIM_ConfigClockSource+0x120>
 8002bb4:	2b40      	cmp	r3, #64	; 0x40
 8002bb6:	d80b      	bhi.n	8002bd0 <HAL_TIM_ConfigClockSource+0x6c>
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d073      	beq.n	8002ca4 <HAL_TIM_ConfigClockSource+0x140>
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	d802      	bhi.n	8002bc6 <HAL_TIM_ConfigClockSource+0x62>
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d06f      	beq.n	8002ca4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002bc4:	e078      	b.n	8002cb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d06c      	beq.n	8002ca4 <HAL_TIM_ConfigClockSource+0x140>
 8002bca:	2b30      	cmp	r3, #48	; 0x30
 8002bcc:	d06a      	beq.n	8002ca4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002bce:	e073      	b.n	8002cb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002bd0:	2b70      	cmp	r3, #112	; 0x70
 8002bd2:	d00d      	beq.n	8002bf0 <HAL_TIM_ConfigClockSource+0x8c>
 8002bd4:	2b70      	cmp	r3, #112	; 0x70
 8002bd6:	d804      	bhi.n	8002be2 <HAL_TIM_ConfigClockSource+0x7e>
 8002bd8:	2b50      	cmp	r3, #80	; 0x50
 8002bda:	d033      	beq.n	8002c44 <HAL_TIM_ConfigClockSource+0xe0>
 8002bdc:	2b60      	cmp	r3, #96	; 0x60
 8002bde:	d041      	beq.n	8002c64 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002be0:	e06a      	b.n	8002cb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be6:	d066      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x152>
 8002be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bec:	d017      	beq.n	8002c1e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002bee:	e063      	b.n	8002cb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	6899      	ldr	r1, [r3, #8]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f000 fac9 	bl	8003196 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c12:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	609a      	str	r2, [r3, #8]
      break;
 8002c1c:	e04c      	b.n	8002cb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6899      	ldr	r1, [r3, #8]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f000 fab2 	bl	8003196 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c40:	609a      	str	r2, [r3, #8]
      break;
 8002c42:	e039      	b.n	8002cb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6818      	ldr	r0, [r3, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	6859      	ldr	r1, [r3, #4]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	461a      	mov	r2, r3
 8002c52:	f000 fa29 	bl	80030a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2150      	movs	r1, #80	; 0x50
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 fa80 	bl	8003162 <TIM_ITRx_SetConfig>
      break;
 8002c62:	e029      	b.n	8002cb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6818      	ldr	r0, [r3, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	6859      	ldr	r1, [r3, #4]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	461a      	mov	r2, r3
 8002c72:	f000 fa47 	bl	8003104 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2160      	movs	r1, #96	; 0x60
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fa70 	bl	8003162 <TIM_ITRx_SetConfig>
      break;
 8002c82:	e019      	b.n	8002cb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	6859      	ldr	r1, [r3, #4]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	461a      	mov	r2, r3
 8002c92:	f000 fa09 	bl	80030a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2140      	movs	r1, #64	; 0x40
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fa60 	bl	8003162 <TIM_ITRx_SetConfig>
      break;
 8002ca2:	e009      	b.n	8002cb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4619      	mov	r1, r3
 8002cae:	4610      	mov	r0, r2
 8002cb0:	f000 fa57 	bl	8003162 <TIM_ITRx_SetConfig>
      break;
 8002cb4:	e000      	b.n	8002cb8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002cb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a29      	ldr	r2, [pc, #164]	; (8002d8c <TIM_Base_SetConfig+0xb8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d00b      	beq.n	8002d04 <TIM_Base_SetConfig+0x30>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf2:	d007      	beq.n	8002d04 <TIM_Base_SetConfig+0x30>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a26      	ldr	r2, [pc, #152]	; (8002d90 <TIM_Base_SetConfig+0xbc>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d003      	beq.n	8002d04 <TIM_Base_SetConfig+0x30>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a25      	ldr	r2, [pc, #148]	; (8002d94 <TIM_Base_SetConfig+0xc0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d108      	bne.n	8002d16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a1c      	ldr	r2, [pc, #112]	; (8002d8c <TIM_Base_SetConfig+0xb8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00b      	beq.n	8002d36 <TIM_Base_SetConfig+0x62>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d24:	d007      	beq.n	8002d36 <TIM_Base_SetConfig+0x62>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a19      	ldr	r2, [pc, #100]	; (8002d90 <TIM_Base_SetConfig+0xbc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d003      	beq.n	8002d36 <TIM_Base_SetConfig+0x62>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a18      	ldr	r2, [pc, #96]	; (8002d94 <TIM_Base_SetConfig+0xc0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d108      	bne.n	8002d48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a07      	ldr	r2, [pc, #28]	; (8002d8c <TIM_Base_SetConfig+0xb8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d103      	bne.n	8002d7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	615a      	str	r2, [r3, #20]
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	40012c00 	.word	0x40012c00
 8002d90:	40000400 	.word	0x40000400
 8002d94:	40000800 	.word	0x40000800

08002d98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	f023 0201 	bic.w	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0303 	bic.w	r3, r3, #3
 8002dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f023 0302 	bic.w	r3, r3, #2
 8002de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a1c      	ldr	r2, [pc, #112]	; (8002e60 <TIM_OC1_SetConfig+0xc8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d10c      	bne.n	8002e0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f023 0308 	bic.w	r3, r3, #8
 8002dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f023 0304 	bic.w	r3, r3, #4
 8002e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a13      	ldr	r2, [pc, #76]	; (8002e60 <TIM_OC1_SetConfig+0xc8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d111      	bne.n	8002e3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	621a      	str	r2, [r3, #32]
}
 8002e54:	bf00      	nop
 8002e56:	371c      	adds	r7, #28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40012c00 	.word	0x40012c00

08002e64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	f023 0210 	bic.w	r2, r3, #16
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f023 0320 	bic.w	r3, r3, #32
 8002eae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a1d      	ldr	r2, [pc, #116]	; (8002f34 <TIM_OC2_SetConfig+0xd0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d10d      	bne.n	8002ee0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ede:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a14      	ldr	r2, [pc, #80]	; (8002f34 <TIM_OC2_SetConfig+0xd0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d113      	bne.n	8002f10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	621a      	str	r2, [r3, #32]
}
 8002f2a:	bf00      	nop
 8002f2c:	371c      	adds	r7, #28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr
 8002f34:	40012c00 	.word	0x40012c00

08002f38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0303 	bic.w	r3, r3, #3
 8002f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	021b      	lsls	r3, r3, #8
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a1d      	ldr	r2, [pc, #116]	; (8003008 <TIM_OC3_SetConfig+0xd0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d10d      	bne.n	8002fb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	021b      	lsls	r3, r3, #8
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a14      	ldr	r2, [pc, #80]	; (8003008 <TIM_OC3_SetConfig+0xd0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d113      	bne.n	8002fe2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	621a      	str	r2, [r3, #32]
}
 8002ffc:	bf00      	nop
 8002ffe:	371c      	adds	r7, #28
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40012c00 	.word	0x40012c00

0800300c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800303a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	031b      	lsls	r3, r3, #12
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a0f      	ldr	r2, [pc, #60]	; (80030a4 <TIM_OC4_SetConfig+0x98>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d109      	bne.n	8003080 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003072:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	019b      	lsls	r3, r3, #6
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	621a      	str	r2, [r3, #32]
}
 800309a:	bf00      	nop
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr
 80030a4:	40012c00 	.word	0x40012c00

080030a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	f023 0201 	bic.w	r2, r3, #1
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f023 030a 	bic.w	r3, r3, #10
 80030e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	621a      	str	r2, [r3, #32]
}
 80030fa:	bf00      	nop
 80030fc:	371c      	adds	r7, #28
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	f023 0210 	bic.w	r2, r3, #16
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800312e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	031b      	lsls	r3, r3, #12
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	4313      	orrs	r3, r2
 8003138:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003140:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	621a      	str	r2, [r3, #32]
}
 8003158:	bf00      	nop
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr

08003162 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003162:	b480      	push	{r7}
 8003164:	b085      	sub	sp, #20
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003178:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	f043 0307 	orr.w	r3, r3, #7
 8003184:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	609a      	str	r2, [r3, #8]
}
 800318c:	bf00      	nop
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr

08003196 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003196:	b480      	push	{r7}
 8003198:	b087      	sub	sp, #28
 800319a:	af00      	add	r7, sp, #0
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	021a      	lsls	r2, r3, #8
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	431a      	orrs	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4313      	orrs	r3, r2
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	609a      	str	r2, [r3, #8]
}
 80031ca:	bf00      	nop
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f003 031f 	and.w	r3, r3, #31
 80031e6:	2201      	movs	r2, #1
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a1a      	ldr	r2, [r3, #32]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	401a      	ands	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a1a      	ldr	r2, [r3, #32]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	431a      	orrs	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	621a      	str	r2, [r3, #32]
}
 8003212:	bf00      	nop
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003230:	2302      	movs	r3, #2
 8003232:	e032      	b.n	800329a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800326c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	4313      	orrs	r3, r2
 8003276:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80032bc:	2302      	movs	r3, #2
 80032be:	e03d      	b.n	800333c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e03f      	b.n	80033d8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d106      	bne.n	8003372 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f003 f9cb 	bl	8006708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2224      	movs	r2, #36	; 0x24
 8003376:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003388:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 faaa 	bl	80038e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800339e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033ae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033be:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	4613      	mov	r3, r2
 80033ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d140      	bne.n	800347c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <HAL_UART_Receive_IT+0x26>
 8003400:	88fb      	ldrh	r3, [r7, #6]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e039      	b.n	800347e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_UART_Receive_IT+0x38>
 8003414:	2302      	movs	r3, #2
 8003416:	e032      	b.n	800347e <HAL_UART_Receive_IT+0x9e>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	88fa      	ldrh	r2, [r7, #6]
 800342a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	88fa      	ldrh	r2, [r7, #6]
 8003430:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2222      	movs	r2, #34	; 0x22
 800343c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003456:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
 8003466:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0220 	orr.w	r2, r2, #32
 8003476:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	e000      	b.n	800347e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800347c:	2302      	movs	r3, #2
  }
}
 800347e:	4618      	mov	r0, r3
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr

08003488 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10d      	bne.n	80034da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_UART_IRQHandler+0x52>
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f984 	bl	80037e0 <UART_Receive_IT>
      return;
 80034d8:	e0cc      	b.n	8003674 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80ab 	beq.w	8003638 <HAL_UART_IRQHandler+0x1b0>
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <HAL_UART_IRQHandler+0x70>
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80a0 	beq.w	8003638 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_UART_IRQHandler+0x90>
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003510:	f043 0201 	orr.w	r2, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_UART_IRQHandler+0xb0>
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003530:	f043 0202 	orr.w	r2, r3, #2
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_UART_IRQHandler+0xd0>
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	f043 0204 	orr.w	r2, r3, #4
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_UART_IRQHandler+0xf0>
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003570:	f043 0208 	orr.w	r2, r3, #8
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357c:	2b00      	cmp	r3, #0
 800357e:	d078      	beq.n	8003672 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b00      	cmp	r3, #0
 8003588:	d007      	beq.n	800359a <HAL_UART_IRQHandler+0x112>
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f923 	bl	80037e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf14      	ite	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	2300      	moveq	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d102      	bne.n	80035c2 <HAL_UART_IRQHandler+0x13a>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d031      	beq.n	8003626 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f86e 	bl	80036a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d023      	beq.n	800361e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035e4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d013      	beq.n	8003616 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f2:	4a22      	ldr	r2, [pc, #136]	; (800367c <HAL_UART_IRQHandler+0x1f4>)
 80035f4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fd fc20 	bl	8000e40 <HAL_DMA_Abort_IT>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d016      	beq.n	8003634 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003610:	4610      	mov	r0, r2
 8003612:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003614:	e00e      	b.n	8003634 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f83b 	bl	8003692 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800361c:	e00a      	b.n	8003634 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f837 	bl	8003692 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003624:	e006      	b.n	8003634 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f833 	bl	8003692 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003632:	e01e      	b.n	8003672 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003634:	bf00      	nop
    return;
 8003636:	e01c      	b.n	8003672 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363e:	2b00      	cmp	r3, #0
 8003640:	d008      	beq.n	8003654 <HAL_UART_IRQHandler+0x1cc>
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f85a 	bl	8003706 <UART_Transmit_IT>
    return;
 8003652:	e00f      	b.n	8003674 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <HAL_UART_IRQHandler+0x1ec>
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f8a1 	bl	80037b0 <UART_EndTransmit_IT>
    return;
 800366e:	bf00      	nop
 8003670:	e000      	b.n	8003674 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003672:	bf00      	nop
  }
}
 8003674:	3720      	adds	r7, #32
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	080036df 	.word	0x080036df

08003680 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr

08003692 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr

080036a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036ba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr

080036de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7ff ffca 	bl	8003692 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036fe:	bf00      	nop
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003706:	b480      	push	{r7}
 8003708:	b085      	sub	sp, #20
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b21      	cmp	r3, #33	; 0x21
 8003718:	d144      	bne.n	80037a4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003722:	d11a      	bne.n	800375a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003738:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d105      	bne.n	800374e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	1c9a      	adds	r2, r3, #2
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	621a      	str	r2, [r3, #32]
 800374c:	e00e      	b.n	800376c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	621a      	str	r2, [r3, #32]
 8003758:	e008      	b.n	800376c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	1c59      	adds	r1, r3, #1
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6211      	str	r1, [r2, #32]
 8003764:	781a      	ldrb	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29b      	uxth	r3, r3
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	4619      	mov	r1, r3
 800377a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10f      	bne.n	80037a0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800378e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800379e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	e000      	b.n	80037a6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80037a4:	2302      	movs	r3, #2
  }
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff ff55 	bl	8003680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b22      	cmp	r3, #34	; 0x22
 80037f2:	d171      	bne.n	80038d8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037fc:	d123      	bne.n	8003846 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003802:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10e      	bne.n	800382a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	b29b      	uxth	r3, r3
 8003814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	1c9a      	adds	r2, r3, #2
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	629a      	str	r2, [r3, #40]	; 0x28
 8003828:	e029      	b.n	800387e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	b29b      	uxth	r3, r3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	629a      	str	r2, [r3, #40]	; 0x28
 8003844:	e01b      	b.n	800387e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10a      	bne.n	8003864 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6858      	ldr	r0, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	1c59      	adds	r1, r3, #1
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6291      	str	r1, [r2, #40]	; 0x28
 800385e:	b2c2      	uxtb	r2, r0
 8003860:	701a      	strb	r2, [r3, #0]
 8003862:	e00c      	b.n	800387e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	b2da      	uxtb	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	1c58      	adds	r0, r3, #1
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	6288      	str	r0, [r1, #40]	; 0x28
 8003876:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003882:	b29b      	uxth	r3, r3
 8003884:	3b01      	subs	r3, #1
 8003886:	b29b      	uxth	r3, r3
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	4619      	mov	r1, r3
 800388c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800388e:	2b00      	cmp	r3, #0
 8003890:	d120      	bne.n	80038d4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0220 	bic.w	r2, r2, #32
 80038a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695a      	ldr	r2, [r3, #20]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0201 	bic.w	r2, r2, #1
 80038c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f002 f8da 	bl	8005a84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e002      	b.n	80038da <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	e000      	b.n	80038da <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80038d8:	2302      	movs	r3, #2
  }
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800391e:	f023 030c 	bic.w	r3, r3, #12
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6812      	ldr	r2, [r2, #0]
 8003926:	68f9      	ldr	r1, [r7, #12]
 8003928:	430b      	orrs	r3, r1
 800392a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a52      	ldr	r2, [pc, #328]	; (8003a90 <UART_SetConfig+0x1ac>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d14e      	bne.n	80039ea <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800394c:	f7fe fe7e 	bl	800264c <HAL_RCC_GetPCLK2Freq>
 8003950:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	009a      	lsls	r2, r3, #2
 800395c:	441a      	add	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	fbb2 f3f3 	udiv	r3, r2, r3
 8003968:	4a4a      	ldr	r2, [pc, #296]	; (8003a94 <UART_SetConfig+0x1b0>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	0119      	lsls	r1, r3, #4
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	009a      	lsls	r2, r3, #2
 800397c:	441a      	add	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	fbb2 f2f3 	udiv	r2, r2, r3
 8003988:	4b42      	ldr	r3, [pc, #264]	; (8003a94 <UART_SetConfig+0x1b0>)
 800398a:	fba3 0302 	umull	r0, r3, r3, r2
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	2064      	movs	r0, #100	; 0x64
 8003992:	fb00 f303 	mul.w	r3, r0, r3
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	3332      	adds	r3, #50	; 0x32
 800399c:	4a3d      	ldr	r2, [pc, #244]	; (8003a94 <UART_SetConfig+0x1b0>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a8:	4419      	add	r1, r3
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	009a      	lsls	r2, r3, #2
 80039b4:	441a      	add	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80039c0:	4b34      	ldr	r3, [pc, #208]	; (8003a94 <UART_SetConfig+0x1b0>)
 80039c2:	fba3 0302 	umull	r0, r3, r3, r2
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	2064      	movs	r0, #100	; 0x64
 80039ca:	fb00 f303 	mul.w	r3, r0, r3
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	3332      	adds	r3, #50	; 0x32
 80039d4:	4a2f      	ldr	r2, [pc, #188]	; (8003a94 <UART_SetConfig+0x1b0>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	f003 020f 	and.w	r2, r3, #15
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	440a      	add	r2, r1
 80039e6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80039e8:	e04d      	b.n	8003a86 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80039ea:	f7fe fe1b 	bl	8002624 <HAL_RCC_GetPCLK1Freq>
 80039ee:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	009a      	lsls	r2, r3, #2
 80039fa:	441a      	add	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a06:	4a23      	ldr	r2, [pc, #140]	; (8003a94 <UART_SetConfig+0x1b0>)
 8003a08:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	0119      	lsls	r1, r3, #4
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	009a      	lsls	r2, r3, #2
 8003a1a:	441a      	add	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a26:	4b1b      	ldr	r3, [pc, #108]	; (8003a94 <UART_SetConfig+0x1b0>)
 8003a28:	fba3 0302 	umull	r0, r3, r3, r2
 8003a2c:	095b      	lsrs	r3, r3, #5
 8003a2e:	2064      	movs	r0, #100	; 0x64
 8003a30:	fb00 f303 	mul.w	r3, r0, r3
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	3332      	adds	r3, #50	; 0x32
 8003a3a:	4a16      	ldr	r2, [pc, #88]	; (8003a94 <UART_SetConfig+0x1b0>)
 8003a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a46:	4419      	add	r1, r3
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	009a      	lsls	r2, r3, #2
 8003a52:	441a      	add	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a5e:	4b0d      	ldr	r3, [pc, #52]	; (8003a94 <UART_SetConfig+0x1b0>)
 8003a60:	fba3 0302 	umull	r0, r3, r3, r2
 8003a64:	095b      	lsrs	r3, r3, #5
 8003a66:	2064      	movs	r0, #100	; 0x64
 8003a68:	fb00 f303 	mul.w	r3, r0, r3
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	3332      	adds	r3, #50	; 0x32
 8003a72:	4a08      	ldr	r2, [pc, #32]	; (8003a94 <UART_SetConfig+0x1b0>)
 8003a74:	fba2 2303 	umull	r2, r3, r2, r3
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	f003 020f 	and.w	r2, r3, #15
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	440a      	add	r2, r1
 8003a84:	609a      	str	r2, [r3, #8]
}
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40013800 	.word	0x40013800
 8003a94:	51eb851f 	.word	0x51eb851f

08003a98 <FlashManager_PageAddress>:
/* Private variables ---------------------------------------------------------*/
uint32_t flash_temp_data[FLASH_PAGE_SIZE/4];

/* Private function -----------------------------------------------*/
uint32_t FlashManager_PageAddress(uint32_t address)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
	uint32_t begin_page_address;
	uint32_t offset_page_address;

	if(address>=SYSTEM_FLASH_ADDRESS_BEGIN && address<SYSTEM_FLASH_ADDRESS_END)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aa6:	d30d      	bcc.n	8003ac4 <FlashManager_PageAddress+0x2c>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a09      	ldr	r2, [pc, #36]	; (8003ad0 <FlashManager_PageAddress+0x38>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d809      	bhi.n	8003ac4 <FlashManager_PageAddress+0x2c>
	{
		offset_page_address=address%FLASH_PAGE_SIZE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ab6:	60fb      	str	r3, [r7, #12]
		begin_page_address=address-offset_page_address;
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	60bb      	str	r3, [r7, #8]
		return begin_page_address;
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	e000      	b.n	8003ac6 <FlashManager_PageAddress+0x2e>
	}
	else
		return FLASH_ERROR_ADDRESS;
 8003ac4:	2302      	movs	r3, #2
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr
 8003ad0:	0800ffff 	.word	0x0800ffff

08003ad4 <FlashManager_ErasePage>:

/* Public function -----------------------------------------------*/
FlashManager_Error_Code FlashManager_ErasePage(uint32_t address)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
	uint32_t errorcode;
	uint32_t SectorError = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitTypeDef EraseInitStruct;

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.Banks = FLASH_BANK_1;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.PageAddress = FlashManager_PageAddress(address);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff ffd5 	bl	8003a98 <FlashManager_PageAddress>
 8003aee:	4603      	mov	r3, r0
 8003af0:	613b      	str	r3, [r7, #16]
	EraseInitStruct.NbPages = 1;
 8003af2:	2301      	movs	r3, #1
 8003af4:	617b      	str	r3, [r7, #20]

	errorcode=HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8003af6:	f107 0218 	add.w	r2, r7, #24
 8003afa:	f107 0308 	add.w	r3, r7, #8
 8003afe:	4611      	mov	r1, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fd fb6b 	bl	80011dc <HAL_FLASHEx_Erase>
 8003b06:	4603      	mov	r3, r0
 8003b08:	61fb      	str	r3, [r7, #28]
	if(errorcode!=HAL_OK)
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <FlashManager_ErasePage+0x40>
		return FLASH_ERASE_ERROR;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e000      	b.n	8003b16 <FlashManager_ErasePage+0x42>
	else
		return FLASH_NO_ERROR;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3720      	adds	r7, #32
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <FlashManager_WriteMulti>:
	else
		return FLASH_ERROR_ADDRESS;
}

FlashManager_Error_Code FlashManager_WriteMulti(uint32_t address, uint32_t NbWord, uint32_t* data)
{
 8003b20:	b590      	push	{r4, r7, lr}
 8003b22:	b08b      	sub	sp, #44	; 0x2c
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
	uint32_t begin_page_address;
	uint32_t offset_page_address;
	uint32_t pWriteFlash;
	__IO uint32_t* pReadFlash;

	if(address>=SYSTEM_FLASH_ADDRESS_BEGIN && address<SYSTEM_FLASH_ADDRESS_END && address%4==0)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b32:	d362      	bcc.n	8003bfa <FlashManager_WriteMulti+0xda>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4a33      	ldr	r2, [pc, #204]	; (8003c04 <FlashManager_WriteMulti+0xe4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d85e      	bhi.n	8003bfa <FlashManager_WriteMulti+0xda>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d159      	bne.n	8003bfa <FlashManager_WriteMulti+0xda>
	{
		offset_page_address=address%FLASH_PAGE_SIZE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b4c:	623b      	str	r3, [r7, #32]
		begin_page_address=address-offset_page_address;
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	61fb      	str	r3, [r7, #28]

		//Read page
		for(cpt_address=0; cpt_address<(FLASH_PAGE_SIZE/4) ;cpt_address++)
 8003b56:	2300      	movs	r3, #0
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5a:	e00d      	b.n	8003b78 <FlashManager_WriteMulti+0x58>
		{
			pReadFlash = begin_page_address+(cpt_address*4);
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	009a      	lsls	r2, r3, #2
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	4413      	add	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]
			flash_temp_data[cpt_address]=*pReadFlash;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	4927      	ldr	r1, [pc, #156]	; (8003c08 <FlashManager_WriteMulti+0xe8>)
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(cpt_address=0; cpt_address<(FLASH_PAGE_SIZE/4) ;cpt_address++)
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	3301      	adds	r3, #1
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	2bff      	cmp	r3, #255	; 0xff
 8003b7c:	d9ee      	bls.n	8003b5c <FlashManager_WriteMulti+0x3c>
		}

		//Erase page
		HAL_FLASH_Unlock();
 8003b7e:	f7fd fa45 	bl	800100c <HAL_FLASH_Unlock>
		FlashManager_ErasePage(address);
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f7ff ffa6 	bl	8003ad4 <FlashManager_ErasePage>

		//Change Data
		for(cpt_address=0; cpt_address<NbWord ;cpt_address++)
 8003b88:	2300      	movs	r3, #0
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8c:	e00e      	b.n	8003bac <FlashManager_WriteMulti+0x8c>
		{
			flash_temp_data[(offset_page_address/4)+cpt_address]=data[cpt_address];
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	441a      	add	r2, r3
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	0899      	lsrs	r1, r3, #2
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	440b      	add	r3, r1
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	4919      	ldr	r1, [pc, #100]	; (8003c08 <FlashManager_WriteMulti+0xe8>)
 8003ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(cpt_address=0; cpt_address<NbWord ;cpt_address++)
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	3301      	adds	r3, #1
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
 8003bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d3ec      	bcc.n	8003b8e <FlashManager_WriteMulti+0x6e>
		}

		//Write page
		for(cpt_address=0; cpt_address<(FLASH_PAGE_SIZE/4) ;cpt_address++)
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb8:	e018      	b.n	8003bec <FlashManager_WriteMulti+0xcc>
		{
			pWriteFlash = begin_page_address+(cpt_address*4);
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	69fa      	ldr	r2, [r7, #28]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pWriteFlash, flash_temp_data[cpt_address]) != HAL_OK)
 8003bc4:	4a10      	ldr	r2, [pc, #64]	; (8003c08 <FlashManager_WriteMulti+0xe8>)
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bcc:	f04f 0400 	mov.w	r4, #0
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4623      	mov	r3, r4
 8003bd4:	69b9      	ldr	r1, [r7, #24]
 8003bd6:	2002      	movs	r0, #2
 8003bd8:	f7fd f9a8 	bl	8000f2c <HAL_FLASH_Program>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <FlashManager_WriteMulti+0xc6>
				return FLASH_WRITE_ERROR;
 8003be2:	2304      	movs	r3, #4
 8003be4:	e00a      	b.n	8003bfc <FlashManager_WriteMulti+0xdc>
		for(cpt_address=0; cpt_address<(FLASH_PAGE_SIZE/4) ;cpt_address++)
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	3301      	adds	r3, #1
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	2bff      	cmp	r3, #255	; 0xff
 8003bf0:	d9e3      	bls.n	8003bba <FlashManager_WriteMulti+0x9a>
		}

		HAL_FLASH_Lock();
 8003bf2:	f7fd fa31 	bl	8001058 <HAL_FLASH_Lock>

		return FLASH_NO_ERROR;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e000      	b.n	8003bfc <FlashManager_WriteMulti+0xdc>
	}
	else
		return FLASH_ERROR_ADDRESS;
 8003bfa:	2302      	movs	r3, #2
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	372c      	adds	r7, #44	; 0x2c
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd90      	pop	{r4, r7, pc}
 8003c04:	0800ffff 	.word	0x0800ffff
 8003c08:	20001498 	.word	0x20001498

08003c0c <FlashManager_ReadInt32>:

uint32_t FlashManager_ReadInt32(uint32_t address)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
	__IO uint32_t* pReadFlash;

	pReadFlash = address;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	60fb      	str	r3, [r7, #12]
	return *pReadFlash;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr
	...

08003c28 <Protocol_DMX_init>:
/* Private function -----------------------------------------------*/

/* Public function -----------------------------------------------*/

void Protocol_DMX_init(uint16_t address,UART_HandleTypeDef *ref_uart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	6039      	str	r1, [r7, #0]
 8003c32:	80fb      	strh	r3, [r7, #6]
	uint8_t i;

	//init variables
	dmx_Last_Error=DMX_NO_ERROR;
 8003c34:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <Protocol_DMX_init+0x90>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]
	dmx_rx_buff[0]=0;
 8003c3a:	4b20      	ldr	r3, [pc, #128]	; (8003cbc <Protocol_DMX_init+0x94>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	701a      	strb	r2, [r3, #0]
	dmx_cptAddress=0;
 8003c40:	4b1f      	ldr	r3, [pc, #124]	; (8003cc0 <Protocol_DMX_init+0x98>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	801a      	strh	r2, [r3, #0]
	dmx_cptByte=0;
 8003c46:	4b1f      	ldr	r3, [pc, #124]	; (8003cc4 <Protocol_DMX_init+0x9c>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	801a      	strh	r2, [r3, #0]
	dmx_ref_buffer=1;
 8003c4c:	4b1e      	ldr	r3, [pc, #120]	; (8003cc8 <Protocol_DMX_init+0xa0>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	701a      	strb	r2, [r3, #0]
	dmx_address_begin = address;
 8003c52:	88fb      	ldrh	r3, [r7, #6]
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <Protocol_DMX_init+0xa4>)
 8003c58:	701a      	strb	r2, [r3, #0]
	dmx_address_end = address + DMX_SIZE_CHANNEL - 1;
 8003c5a:	88fb      	ldrh	r3, [r7, #6]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	330b      	adds	r3, #11
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <Protocol_DMX_init+0xa8>)
 8003c64:	701a      	strb	r2, [r3, #0]
	for (i=0; i<DMX_SIZE_CHANNEL; i++)
 8003c66:	2300      	movs	r3, #0
 8003c68:	73fb      	strb	r3, [r7, #15]
 8003c6a:	e00e      	b.n	8003c8a <Protocol_DMX_init+0x62>
	{
		dmx_buff1[i]=0;
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	4a19      	ldr	r2, [pc, #100]	; (8003cd4 <Protocol_DMX_init+0xac>)
 8003c70:	2100      	movs	r1, #0
 8003c72:	54d1      	strb	r1, [r2, r3]
		dmx_buff2[i]=0;
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	4a18      	ldr	r2, [pc, #96]	; (8003cd8 <Protocol_DMX_init+0xb0>)
 8003c78:	2100      	movs	r1, #0
 8003c7a:	54d1      	strb	r1, [r2, r3]
		dmx_buff_valid[i]=0;
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	4a17      	ldr	r2, [pc, #92]	; (8003cdc <Protocol_DMX_init+0xb4>)
 8003c80:	2100      	movs	r1, #0
 8003c82:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<DMX_SIZE_CHANNEL; i++)
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	3301      	adds	r3, #1
 8003c88:	73fb      	strb	r3, [r7, #15]
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	2b0b      	cmp	r3, #11
 8003c8e:	d9ed      	bls.n	8003c6c <Protocol_DMX_init+0x44>
	}

	dmx_LastTick = HAL_GetTick();
 8003c90:	f7fc fdb4 	bl	80007fc <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b12      	ldr	r3, [pc, #72]	; (8003ce0 <Protocol_DMX_init+0xb8>)
 8003c98:	601a      	str	r2, [r3, #0]

	/* Receive one byte in interrupt mode */
	dmx_ref_uart = ref_uart;
 8003c9a:	4a12      	ldr	r2, [pc, #72]	; (8003ce4 <Protocol_DMX_init+0xbc>)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(dmx_ref_uart, dmx_rx_buff, 1);
 8003ca0:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <Protocol_DMX_init+0xbc>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	4905      	ldr	r1, [pc, #20]	; (8003cbc <Protocol_DMX_init+0x94>)
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff fb99 	bl	80033e0 <HAL_UART_Receive_IT>

}
 8003cae:	bf00      	nop
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	200018b0 	.word	0x200018b0
 8003cbc:	200018b4 	.word	0x200018b4
 8003cc0:	200018b6 	.word	0x200018b6
 8003cc4:	200018d0 	.word	0x200018d0
 8003cc8:	200018b5 	.word	0x200018b5
 8003ccc:	200018b1 	.word	0x200018b1
 8003cd0:	2000189c 	.word	0x2000189c
 8003cd4:	200018b8 	.word	0x200018b8
 8003cd8:	200018c4 	.word	0x200018c4
 8003cdc:	200018a0 	.word	0x200018a0
 8003ce0:	20001898 	.word	0x20001898
 8003ce4:	200018ac 	.word	0x200018ac

08003ce8 <Protocol_DMX_UartCallback>:


void Protocol_DMX_UartCallback(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	uint32_t err_code;
	err_code = huart->ErrorCode;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf4:	60fb      	str	r3, [r7, #12]
	if (huart->Instance == dmx_ref_uart->Instance)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <Protocol_DMX_UartCallback+0xb8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d148      	bne.n	8003d96 <Protocol_DMX_UartCallback+0xae>
	{
		/* Receive one byte in interrupt mode */
		HAL_UART_Receive_IT(dmx_ref_uart, dmx_rx_buff, 1);
 8003d04:	4b26      	ldr	r3, [pc, #152]	; (8003da0 <Protocol_DMX_UartCallback+0xb8>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	4926      	ldr	r1, [pc, #152]	; (8003da4 <Protocol_DMX_UartCallback+0xbc>)
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff fb67 	bl	80033e0 <HAL_UART_Receive_IT>

		//Load buffer
		if(dmx_cptAddress>=dmx_address_begin && dmx_cptAddress<=dmx_address_end)
 8003d12:	4b25      	ldr	r3, [pc, #148]	; (8003da8 <Protocol_DMX_UartCallback+0xc0>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	4b24      	ldr	r3, [pc, #144]	; (8003dac <Protocol_DMX_UartCallback+0xc4>)
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d813      	bhi.n	8003d48 <Protocol_DMX_UartCallback+0x60>
 8003d20:	4b23      	ldr	r3, [pc, #140]	; (8003db0 <Protocol_DMX_UartCallback+0xc8>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	4b21      	ldr	r3, [pc, #132]	; (8003dac <Protocol_DMX_UartCallback+0xc4>)
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d30c      	bcc.n	8003d48 <Protocol_DMX_UartCallback+0x60>
				dmx_Last_Error=DMX_ERROR_BUFF;

			if(dmx_buff1[dmx_cptByte] == dmx_buff2[dmx_cptByte])
				dmx_buff_valid[dmx_cptByte] = dmx_buff1[dmx_cptByte];
#else
			dmx_buff_valid[dmx_cptByte]=dmx_rx_buff[0];
 8003d2e:	4b21      	ldr	r3, [pc, #132]	; (8003db4 <Protocol_DMX_UartCallback+0xcc>)
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	4b1b      	ldr	r3, [pc, #108]	; (8003da4 <Protocol_DMX_UartCallback+0xbc>)
 8003d36:	7819      	ldrb	r1, [r3, #0]
 8003d38:	4b1f      	ldr	r3, [pc, #124]	; (8003db8 <Protocol_DMX_UartCallback+0xd0>)
 8003d3a:	5499      	strb	r1, [r3, r2]
#endif

			dmx_cptByte++;
 8003d3c:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <Protocol_DMX_UartCallback+0xcc>)
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	3301      	adds	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <Protocol_DMX_UartCallback+0xcc>)
 8003d46:	801a      	strh	r2, [r3, #0]
		}
		dmx_cptAddress++;
 8003d48:	4b18      	ldr	r3, [pc, #96]	; (8003dac <Protocol_DMX_UartCallback+0xc4>)
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	4b16      	ldr	r3, [pc, #88]	; (8003dac <Protocol_DMX_UartCallback+0xc4>)
 8003d52:	801a      	strh	r2, [r3, #0]

		//New frame detection
		if(err_code==HAL_UART_ERROR_FE)// && rx_buff[0]==0)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d11d      	bne.n	8003d96 <Protocol_DMX_UartCallback+0xae>
		{
			dmx_LastTick = HAL_GetTick();
 8003d5a:	f7fc fd4f 	bl	80007fc <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	4b16      	ldr	r3, [pc, #88]	; (8003dbc <Protocol_DMX_UartCallback+0xd4>)
 8003d62:	601a      	str	r2, [r3, #0]

			dmx_cptAddress=0;
 8003d64:	4b11      	ldr	r3, [pc, #68]	; (8003dac <Protocol_DMX_UartCallback+0xc4>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	801a      	strh	r2, [r3, #0]
			dmx_cptByte=0;
 8003d6a:	4b12      	ldr	r3, [pc, #72]	; (8003db4 <Protocol_DMX_UartCallback+0xcc>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	801a      	strh	r2, [r3, #0]

			if (dmx_ref_buffer==1)
 8003d70:	4b13      	ldr	r3, [pc, #76]	; (8003dc0 <Protocol_DMX_UartCallback+0xd8>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d103      	bne.n	8003d80 <Protocol_DMX_UartCallback+0x98>
				dmx_ref_buffer=2;
 8003d78:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <Protocol_DMX_UartCallback+0xd8>)
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	701a      	strb	r2, [r3, #0]
				dmx_ref_buffer=1;
			else
				dmx_Last_Error=DMX_ERROR_BUFF;
		}
	}
}
 8003d7e:	e00a      	b.n	8003d96 <Protocol_DMX_UartCallback+0xae>
			else if (dmx_ref_buffer==2)
 8003d80:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <Protocol_DMX_UartCallback+0xd8>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d103      	bne.n	8003d90 <Protocol_DMX_UartCallback+0xa8>
				dmx_ref_buffer=1;
 8003d88:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <Protocol_DMX_UartCallback+0xd8>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	701a      	strb	r2, [r3, #0]
}
 8003d8e:	e002      	b.n	8003d96 <Protocol_DMX_UartCallback+0xae>
				dmx_Last_Error=DMX_ERROR_BUFF;
 8003d90:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <Protocol_DMX_UartCallback+0xdc>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	701a      	strb	r2, [r3, #0]
}
 8003d96:	bf00      	nop
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	200018ac 	.word	0x200018ac
 8003da4:	200018b4 	.word	0x200018b4
 8003da8:	200018b1 	.word	0x200018b1
 8003dac:	200018b6 	.word	0x200018b6
 8003db0:	2000189c 	.word	0x2000189c
 8003db4:	200018d0 	.word	0x200018d0
 8003db8:	200018a0 	.word	0x200018a0
 8003dbc:	20001898 	.word	0x20001898
 8003dc0:	200018b5 	.word	0x200018b5
 8003dc4:	200018b0 	.word	0x200018b0

08003dc8 <Protocol_DMX_GetValue>:


uint8_t Protocol_DMX_GetValue (uint8_t channel)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	71fb      	strb	r3, [r7, #7]
	if(channel==0 || channel>DMX_SIZE_CHANNEL)
 8003dd2:	79fb      	ldrb	r3, [r7, #7]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <Protocol_DMX_GetValue+0x16>
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	2b0c      	cmp	r3, #12
 8003ddc:	d901      	bls.n	8003de2 <Protocol_DMX_GetValue+0x1a>
		return 0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	e003      	b.n	8003dea <Protocol_DMX_GetValue+0x22>
	else
		return dmx_buff_valid[channel-1];
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	3b01      	subs	r3, #1
 8003de6:	4a03      	ldr	r2, [pc, #12]	; (8003df4 <Protocol_DMX_GetValue+0x2c>)
 8003de8:	5cd3      	ldrb	r3, [r2, r3]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr
 8003df4:	200018a0 	.word	0x200018a0

08003df8 <Protocol_DMX_GetLastTickFrame>:


uint32_t Protocol_DMX_GetLastTickFrame (void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
	return dmx_LastTick;
 8003dfc:	4b02      	ldr	r3, [pc, #8]	; (8003e08 <Protocol_DMX_GetLastTickFrame+0x10>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr
 8003e08:	20001898 	.word	0x20001898

08003e0c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e1e:	2b84      	cmp	r3, #132	; 0x84
 8003e20:	d005      	beq.n	8003e2e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4413      	add	r3, r2
 8003e2a:	3303      	adds	r3, #3
 8003e2c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr

08003e3a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e3e:	f000 facd 	bl	80043dc <vTaskStartScheduler>
  
  return osOK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e4a:	b089      	sub	sp, #36	; 0x24
 8003e4c:	af04      	add	r7, sp, #16
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d020      	beq.n	8003e9c <osThreadCreate+0x54>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d01c      	beq.n	8003e9c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685c      	ldr	r4, [r3, #4]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681d      	ldr	r5, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691e      	ldr	r6, [r3, #16]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff ffc9 	bl	8003e0c <makeFreeRtosPriority>
 8003e7a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e84:	9202      	str	r2, [sp, #8]
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	9100      	str	r1, [sp, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	4632      	mov	r2, r6
 8003e8e:	4629      	mov	r1, r5
 8003e90:	4620      	mov	r0, r4
 8003e92:	f000 f8e8 	bl	8004066 <xTaskCreateStatic>
 8003e96:	4603      	mov	r3, r0
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	e01c      	b.n	8003ed6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685c      	ldr	r4, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ea8:	b29e      	uxth	r6, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff ffab 	bl	8003e0c <makeFreeRtosPriority>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	f107 030c 	add.w	r3, r7, #12
 8003ebc:	9301      	str	r3, [sp, #4]
 8003ebe:	9200      	str	r2, [sp, #0]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	4632      	mov	r2, r6
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	f000 f926 	bl	8004118 <xTaskCreate>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d001      	beq.n	8003ed6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e000      	b.n	8003ed8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ee0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <osDelay+0x16>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	e000      	b.n	8003ef8 <osDelay+0x18>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fa3b 	bl	8004374 <vTaskDelay>
  
  return osOK;
 8003efe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f103 0208 	add.w	r2, r3, #8
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f103 0208 	add.w	r2, r3, #8
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f103 0208 	add.w	r2, r3, #8
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr

08003f46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr

08003f5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b085      	sub	sp, #20
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	601a      	str	r2, [r3, #0]
}
 8003f9a:	bf00      	nop
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fba:	d103      	bne.n	8003fc4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	e00c      	b.n	8003fde <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	e002      	b.n	8003fd2 <vListInsert+0x2e>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d2f6      	bcs.n	8003fcc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	601a      	str	r2, [r3, #0]
}
 800400a:	bf00      	nop
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6892      	ldr	r2, [r2, #8]
 800402a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6852      	ldr	r2, [r2, #4]
 8004034:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	429a      	cmp	r2, r3
 800403e:	d103      	bne.n	8004048 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	1e5a      	subs	r2, r3, #1
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr

08004066 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004066:	b580      	push	{r7, lr}
 8004068:	b08e      	sub	sp, #56	; 0x38
 800406a:	af04      	add	r7, sp, #16
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	607a      	str	r2, [r7, #4]
 8004072:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004076:	2b00      	cmp	r3, #0
 8004078:	d109      	bne.n	800408e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	623b      	str	r3, [r7, #32]
 800408c:	e7fe      	b.n	800408c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800408e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004090:	2b00      	cmp	r3, #0
 8004092:	d109      	bne.n	80040a8 <xTaskCreateStatic+0x42>
 8004094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	e7fe      	b.n	80040a6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040a8:	2354      	movs	r3, #84	; 0x54
 80040aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	2b54      	cmp	r3, #84	; 0x54
 80040b0:	d009      	beq.n	80040c6 <xTaskCreateStatic+0x60>
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	61bb      	str	r3, [r7, #24]
 80040c4:	e7fe      	b.n	80040c4 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d01e      	beq.n	800410a <xTaskCreateStatic+0xa4>
 80040cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d01b      	beq.n	800410a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040da:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040e4:	2300      	movs	r3, #0
 80040e6:	9303      	str	r3, [sp, #12]
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	9302      	str	r3, [sp, #8]
 80040ec:	f107 0314 	add.w	r3, r7, #20
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f850 	bl	80041a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004102:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004104:	f000 f8cc 	bl	80042a0 <prvAddNewTaskToReadyList>
 8004108:	e001      	b.n	800410e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800410a:	2300      	movs	r3, #0
 800410c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800410e:	697b      	ldr	r3, [r7, #20]
	}
 8004110:	4618      	mov	r0, r3
 8004112:	3728      	adds	r7, #40	; 0x28
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08c      	sub	sp, #48	; 0x30
 800411c:	af04      	add	r7, sp, #16
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	4613      	mov	r3, r2
 8004126:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004128:	88fb      	ldrh	r3, [r7, #6]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fe75 	bl	8004e1c <pvPortMalloc>
 8004132:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00e      	beq.n	8004158 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800413a:	2054      	movs	r0, #84	; 0x54
 800413c:	f000 fe6e 	bl	8004e1c <pvPortMalloc>
 8004140:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	631a      	str	r2, [r3, #48]	; 0x30
 800414e:	e005      	b.n	800415c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004150:	6978      	ldr	r0, [r7, #20]
 8004152:	f000 ff25 	bl	8004fa0 <vPortFree>
 8004156:	e001      	b.n	800415c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004158:	2300      	movs	r3, #0
 800415a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d017      	beq.n	8004192 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800416a:	88fa      	ldrh	r2, [r7, #6]
 800416c:	2300      	movs	r3, #0
 800416e:	9303      	str	r3, [sp, #12]
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	9302      	str	r3, [sp, #8]
 8004174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004176:	9301      	str	r3, [sp, #4]
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	68b9      	ldr	r1, [r7, #8]
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f80e 	bl	80041a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004186:	69f8      	ldr	r0, [r7, #28]
 8004188:	f000 f88a 	bl	80042a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800418c:	2301      	movs	r3, #1
 800418e:	61bb      	str	r3, [r7, #24]
 8004190:	e002      	b.n	8004198 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004192:	f04f 33ff 	mov.w	r3, #4294967295
 8004196:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004198:	69bb      	ldr	r3, [r7, #24]
	}
 800419a:	4618      	mov	r0, r3
 800419c:	3720      	adds	r7, #32
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b088      	sub	sp, #32
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	607a      	str	r2, [r7, #4]
 80041ae:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041ba:	3b01      	subs	r3, #1
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	f023 0307 	bic.w	r3, r3, #7
 80041c8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d009      	beq.n	80041e8 <prvInitialiseNewTask+0x46>
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	617b      	str	r3, [r7, #20]
 80041e6:	e7fe      	b.n	80041e6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041e8:	2300      	movs	r3, #0
 80041ea:	61fb      	str	r3, [r7, #28]
 80041ec:	e012      	b.n	8004214 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	4413      	add	r3, r2
 80041f4:	7819      	ldrb	r1, [r3, #0]
 80041f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	4413      	add	r3, r2
 80041fc:	3334      	adds	r3, #52	; 0x34
 80041fe:	460a      	mov	r2, r1
 8004200:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	4413      	add	r3, r2
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d006      	beq.n	800421c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	3301      	adds	r3, #1
 8004212:	61fb      	str	r3, [r7, #28]
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	2b0f      	cmp	r3, #15
 8004218:	d9e9      	bls.n	80041ee <prvInitialiseNewTask+0x4c>
 800421a:	e000      	b.n	800421e <prvInitialiseNewTask+0x7c>
		{
			break;
 800421c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004228:	2b06      	cmp	r3, #6
 800422a:	d901      	bls.n	8004230 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800422c:	2306      	movs	r3, #6
 800422e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004234:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800423a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	2200      	movs	r2, #0
 8004240:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	3304      	adds	r3, #4
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff fe7d 	bl	8003f46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424e:	3318      	adds	r3, #24
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff fe78 	bl	8003f46 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800425a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	f1c3 0207 	rsb	r2, r3, #7
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800426a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426e:	2200      	movs	r2, #0
 8004270:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	68f9      	ldr	r1, [r7, #12]
 800427e:	69b8      	ldr	r0, [r7, #24]
 8004280:	f000 fc24 	bl	8004acc <pxPortInitialiseStack>
 8004284:	4602      	mov	r2, r0
 8004286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004288:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800428a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004294:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004296:	bf00      	nop
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042a8:	f000 fcfe 	bl	8004ca8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042ac:	4b2a      	ldr	r3, [pc, #168]	; (8004358 <prvAddNewTaskToReadyList+0xb8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3301      	adds	r3, #1
 80042b2:	4a29      	ldr	r2, [pc, #164]	; (8004358 <prvAddNewTaskToReadyList+0xb8>)
 80042b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042b6:	4b29      	ldr	r3, [pc, #164]	; (800435c <prvAddNewTaskToReadyList+0xbc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042be:	4a27      	ldr	r2, [pc, #156]	; (800435c <prvAddNewTaskToReadyList+0xbc>)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042c4:	4b24      	ldr	r3, [pc, #144]	; (8004358 <prvAddNewTaskToReadyList+0xb8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d110      	bne.n	80042ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042cc:	f000 fabc 	bl	8004848 <prvInitialiseTaskLists>
 80042d0:	e00d      	b.n	80042ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042d2:	4b23      	ldr	r3, [pc, #140]	; (8004360 <prvAddNewTaskToReadyList+0xc0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d109      	bne.n	80042ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042da:	4b20      	ldr	r3, [pc, #128]	; (800435c <prvAddNewTaskToReadyList+0xbc>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d802      	bhi.n	80042ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80042e8:	4a1c      	ldr	r2, [pc, #112]	; (800435c <prvAddNewTaskToReadyList+0xbc>)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042ee:	4b1d      	ldr	r3, [pc, #116]	; (8004364 <prvAddNewTaskToReadyList+0xc4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3301      	adds	r3, #1
 80042f4:	4a1b      	ldr	r2, [pc, #108]	; (8004364 <prvAddNewTaskToReadyList+0xc4>)
 80042f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	2201      	movs	r2, #1
 80042fe:	409a      	lsls	r2, r3
 8004300:	4b19      	ldr	r3, [pc, #100]	; (8004368 <prvAddNewTaskToReadyList+0xc8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4313      	orrs	r3, r2
 8004306:	4a18      	ldr	r2, [pc, #96]	; (8004368 <prvAddNewTaskToReadyList+0xc8>)
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4a15      	ldr	r2, [pc, #84]	; (800436c <prvAddNewTaskToReadyList+0xcc>)
 8004318:	441a      	add	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3304      	adds	r3, #4
 800431e:	4619      	mov	r1, r3
 8004320:	4610      	mov	r0, r2
 8004322:	f7ff fe1c 	bl	8003f5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004326:	f000 fced 	bl	8004d04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800432a:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <prvAddNewTaskToReadyList+0xc0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00e      	beq.n	8004350 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004332:	4b0a      	ldr	r3, [pc, #40]	; (800435c <prvAddNewTaskToReadyList+0xbc>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	429a      	cmp	r2, r3
 800433e:	d207      	bcs.n	8004350 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <prvAddNewTaskToReadyList+0xd0>)
 8004342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004350:	bf00      	nop
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	200005b4 	.word	0x200005b4
 800435c:	200004b4 	.word	0x200004b4
 8004360:	200005c0 	.word	0x200005c0
 8004364:	200005d0 	.word	0x200005d0
 8004368:	200005bc 	.word	0x200005bc
 800436c:	200004b8 	.word	0x200004b8
 8004370:	e000ed04 	.word	0xe000ed04

08004374 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800437c:	2300      	movs	r3, #0
 800437e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d016      	beq.n	80043b4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004386:	4b13      	ldr	r3, [pc, #76]	; (80043d4 <vTaskDelay+0x60>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d009      	beq.n	80043a2 <vTaskDelay+0x2e>
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	60bb      	str	r3, [r7, #8]
 80043a0:	e7fe      	b.n	80043a0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80043a2:	f000 f879 	bl	8004498 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043a6:	2100      	movs	r1, #0
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fb29 	bl	8004a00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043ae:	f000 f881 	bl	80044b4 <xTaskResumeAll>
 80043b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d107      	bne.n	80043ca <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80043ba:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <vTaskDelay+0x64>)
 80043bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	200005dc 	.word	0x200005dc
 80043d8:	e000ed04 	.word	0xe000ed04

080043dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08a      	sub	sp, #40	; 0x28
 80043e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80043e2:	2300      	movs	r3, #0
 80043e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80043ea:	463a      	mov	r2, r7
 80043ec:	1d39      	adds	r1, r7, #4
 80043ee:	f107 0308 	add.w	r3, r7, #8
 80043f2:	4618      	mov	r0, r3
 80043f4:	f001 fbe4 	bl	8005bc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80043f8:	6839      	ldr	r1, [r7, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	9202      	str	r2, [sp, #8]
 8004400:	9301      	str	r3, [sp, #4]
 8004402:	2300      	movs	r3, #0
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	2300      	movs	r3, #0
 8004408:	460a      	mov	r2, r1
 800440a:	491d      	ldr	r1, [pc, #116]	; (8004480 <vTaskStartScheduler+0xa4>)
 800440c:	481d      	ldr	r0, [pc, #116]	; (8004484 <vTaskStartScheduler+0xa8>)
 800440e:	f7ff fe2a 	bl	8004066 <xTaskCreateStatic>
 8004412:	4602      	mov	r2, r0
 8004414:	4b1c      	ldr	r3, [pc, #112]	; (8004488 <vTaskStartScheduler+0xac>)
 8004416:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004418:	4b1b      	ldr	r3, [pc, #108]	; (8004488 <vTaskStartScheduler+0xac>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004420:	2301      	movs	r3, #1
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	e001      	b.n	800442a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d115      	bne.n	800445c <vTaskStartScheduler+0x80>
 8004430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004442:	4b12      	ldr	r3, [pc, #72]	; (800448c <vTaskStartScheduler+0xb0>)
 8004444:	f04f 32ff 	mov.w	r2, #4294967295
 8004448:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800444a:	4b11      	ldr	r3, [pc, #68]	; (8004490 <vTaskStartScheduler+0xb4>)
 800444c:	2201      	movs	r2, #1
 800444e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004450:	4b10      	ldr	r3, [pc, #64]	; (8004494 <vTaskStartScheduler+0xb8>)
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004456:	f000 fbb7 	bl	8004bc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800445a:	e00d      	b.n	8004478 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004462:	d109      	bne.n	8004478 <vTaskStartScheduler+0x9c>
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	e7fe      	b.n	8004476 <vTaskStartScheduler+0x9a>
}
 8004478:	bf00      	nop
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	08007144 	.word	0x08007144
 8004484:	08004819 	.word	0x08004819
 8004488:	200005d8 	.word	0x200005d8
 800448c:	200005d4 	.word	0x200005d4
 8004490:	200005c0 	.word	0x200005c0
 8004494:	200005b8 	.word	0x200005b8

08004498 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800449c:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <vTaskSuspendAll+0x18>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3301      	adds	r3, #1
 80044a2:	4a03      	ldr	r2, [pc, #12]	; (80044b0 <vTaskSuspendAll+0x18>)
 80044a4:	6013      	str	r3, [r2, #0]
}
 80044a6:	bf00      	nop
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	200005dc 	.word	0x200005dc

080044b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044be:	2300      	movs	r3, #0
 80044c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044c2:	4b41      	ldr	r3, [pc, #260]	; (80045c8 <xTaskResumeAll+0x114>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d109      	bne.n	80044de <xTaskResumeAll+0x2a>
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	e7fe      	b.n	80044dc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80044de:	f000 fbe3 	bl	8004ca8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80044e2:	4b39      	ldr	r3, [pc, #228]	; (80045c8 <xTaskResumeAll+0x114>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	4a37      	ldr	r2, [pc, #220]	; (80045c8 <xTaskResumeAll+0x114>)
 80044ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044ec:	4b36      	ldr	r3, [pc, #216]	; (80045c8 <xTaskResumeAll+0x114>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d161      	bne.n	80045b8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80044f4:	4b35      	ldr	r3, [pc, #212]	; (80045cc <xTaskResumeAll+0x118>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d05d      	beq.n	80045b8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044fc:	e02e      	b.n	800455c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80044fe:	4b34      	ldr	r3, [pc, #208]	; (80045d0 <xTaskResumeAll+0x11c>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3318      	adds	r3, #24
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff fd82 	bl	8004014 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3304      	adds	r3, #4
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff fd7d 	bl	8004014 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	2201      	movs	r2, #1
 8004520:	409a      	lsls	r2, r3
 8004522:	4b2c      	ldr	r3, [pc, #176]	; (80045d4 <xTaskResumeAll+0x120>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4313      	orrs	r3, r2
 8004528:	4a2a      	ldr	r2, [pc, #168]	; (80045d4 <xTaskResumeAll+0x120>)
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4a27      	ldr	r2, [pc, #156]	; (80045d8 <xTaskResumeAll+0x124>)
 800453a:	441a      	add	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3304      	adds	r3, #4
 8004540:	4619      	mov	r1, r3
 8004542:	4610      	mov	r0, r2
 8004544:	f7ff fd0b 	bl	8003f5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454c:	4b23      	ldr	r3, [pc, #140]	; (80045dc <xTaskResumeAll+0x128>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004552:	429a      	cmp	r2, r3
 8004554:	d302      	bcc.n	800455c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004556:	4b22      	ldr	r3, [pc, #136]	; (80045e0 <xTaskResumeAll+0x12c>)
 8004558:	2201      	movs	r2, #1
 800455a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800455c:	4b1c      	ldr	r3, [pc, #112]	; (80045d0 <xTaskResumeAll+0x11c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1cc      	bne.n	80044fe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800456a:	f000 fa07 	bl	800497c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800456e:	4b1d      	ldr	r3, [pc, #116]	; (80045e4 <xTaskResumeAll+0x130>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d010      	beq.n	800459c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800457a:	f000 f837 	bl	80045ec <xTaskIncrementTick>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004584:	4b16      	ldr	r3, [pc, #88]	; (80045e0 <xTaskResumeAll+0x12c>)
 8004586:	2201      	movs	r2, #1
 8004588:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3b01      	subs	r3, #1
 800458e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f1      	bne.n	800457a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004596:	4b13      	ldr	r3, [pc, #76]	; (80045e4 <xTaskResumeAll+0x130>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800459c:	4b10      	ldr	r3, [pc, #64]	; (80045e0 <xTaskResumeAll+0x12c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d009      	beq.n	80045b8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045a4:	2301      	movs	r3, #1
 80045a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045a8:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <xTaskResumeAll+0x134>)
 80045aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045b8:	f000 fba4 	bl	8004d04 <vPortExitCritical>

	return xAlreadyYielded;
 80045bc:	68bb      	ldr	r3, [r7, #8]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	200005dc 	.word	0x200005dc
 80045cc:	200005b4 	.word	0x200005b4
 80045d0:	20000574 	.word	0x20000574
 80045d4:	200005bc 	.word	0x200005bc
 80045d8:	200004b8 	.word	0x200004b8
 80045dc:	200004b4 	.word	0x200004b4
 80045e0:	200005c8 	.word	0x200005c8
 80045e4:	200005c4 	.word	0x200005c4
 80045e8:	e000ed04 	.word	0xe000ed04

080045ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80045f2:	2300      	movs	r3, #0
 80045f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045f6:	4b50      	ldr	r3, [pc, #320]	; (8004738 <xTaskIncrementTick+0x14c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f040 808c 	bne.w	8004718 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004600:	4b4e      	ldr	r3, [pc, #312]	; (800473c <xTaskIncrementTick+0x150>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3301      	adds	r3, #1
 8004606:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004608:	4a4c      	ldr	r2, [pc, #304]	; (800473c <xTaskIncrementTick+0x150>)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d11f      	bne.n	8004654 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004614:	4b4a      	ldr	r3, [pc, #296]	; (8004740 <xTaskIncrementTick+0x154>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <xTaskIncrementTick+0x46>
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	e7fe      	b.n	8004630 <xTaskIncrementTick+0x44>
 8004632:	4b43      	ldr	r3, [pc, #268]	; (8004740 <xTaskIncrementTick+0x154>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	4b42      	ldr	r3, [pc, #264]	; (8004744 <xTaskIncrementTick+0x158>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a40      	ldr	r2, [pc, #256]	; (8004740 <xTaskIncrementTick+0x154>)
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	4a40      	ldr	r2, [pc, #256]	; (8004744 <xTaskIncrementTick+0x158>)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	4b40      	ldr	r3, [pc, #256]	; (8004748 <xTaskIncrementTick+0x15c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3301      	adds	r3, #1
 800464c:	4a3e      	ldr	r2, [pc, #248]	; (8004748 <xTaskIncrementTick+0x15c>)
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	f000 f994 	bl	800497c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004654:	4b3d      	ldr	r3, [pc, #244]	; (800474c <xTaskIncrementTick+0x160>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	429a      	cmp	r2, r3
 800465c:	d34d      	bcc.n	80046fa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800465e:	4b38      	ldr	r3, [pc, #224]	; (8004740 <xTaskIncrementTick+0x154>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <xTaskIncrementTick+0x80>
 8004668:	2301      	movs	r3, #1
 800466a:	e000      	b.n	800466e <xTaskIncrementTick+0x82>
 800466c:	2300      	movs	r3, #0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d004      	beq.n	800467c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004672:	4b36      	ldr	r3, [pc, #216]	; (800474c <xTaskIncrementTick+0x160>)
 8004674:	f04f 32ff 	mov.w	r2, #4294967295
 8004678:	601a      	str	r2, [r3, #0]
					break;
 800467a:	e03e      	b.n	80046fa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800467c:	4b30      	ldr	r3, [pc, #192]	; (8004740 <xTaskIncrementTick+0x154>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	429a      	cmp	r2, r3
 8004692:	d203      	bcs.n	800469c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004694:	4a2d      	ldr	r2, [pc, #180]	; (800474c <xTaskIncrementTick+0x160>)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6013      	str	r3, [r2, #0]
						break;
 800469a:	e02e      	b.n	80046fa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	3304      	adds	r3, #4
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff fcb7 	bl	8004014 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d004      	beq.n	80046b8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	3318      	adds	r3, #24
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff fcae 	bl	8004014 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	2201      	movs	r2, #1
 80046be:	409a      	lsls	r2, r3
 80046c0:	4b23      	ldr	r3, [pc, #140]	; (8004750 <xTaskIncrementTick+0x164>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	4a22      	ldr	r2, [pc, #136]	; (8004750 <xTaskIncrementTick+0x164>)
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ce:	4613      	mov	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4a1f      	ldr	r2, [pc, #124]	; (8004754 <xTaskIncrementTick+0x168>)
 80046d8:	441a      	add	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	3304      	adds	r3, #4
 80046de:	4619      	mov	r1, r3
 80046e0:	4610      	mov	r0, r2
 80046e2:	f7ff fc3c 	bl	8003f5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ea:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <xTaskIncrementTick+0x16c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d3b4      	bcc.n	800465e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80046f4:	2301      	movs	r3, #1
 80046f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046f8:	e7b1      	b.n	800465e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046fa:	4b17      	ldr	r3, [pc, #92]	; (8004758 <xTaskIncrementTick+0x16c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004700:	4914      	ldr	r1, [pc, #80]	; (8004754 <xTaskIncrementTick+0x168>)
 8004702:	4613      	mov	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	440b      	add	r3, r1
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d907      	bls.n	8004722 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004712:	2301      	movs	r3, #1
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	e004      	b.n	8004722 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004718:	4b10      	ldr	r3, [pc, #64]	; (800475c <xTaskIncrementTick+0x170>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3301      	adds	r3, #1
 800471e:	4a0f      	ldr	r2, [pc, #60]	; (800475c <xTaskIncrementTick+0x170>)
 8004720:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004722:	4b0f      	ldr	r3, [pc, #60]	; (8004760 <xTaskIncrementTick+0x174>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800472a:	2301      	movs	r3, #1
 800472c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800472e:	697b      	ldr	r3, [r7, #20]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	200005dc 	.word	0x200005dc
 800473c:	200005b8 	.word	0x200005b8
 8004740:	2000056c 	.word	0x2000056c
 8004744:	20000570 	.word	0x20000570
 8004748:	200005cc 	.word	0x200005cc
 800474c:	200005d4 	.word	0x200005d4
 8004750:	200005bc 	.word	0x200005bc
 8004754:	200004b8 	.word	0x200004b8
 8004758:	200004b4 	.word	0x200004b4
 800475c:	200005c4 	.word	0x200005c4
 8004760:	200005c8 	.word	0x200005c8

08004764 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800476a:	4b26      	ldr	r3, [pc, #152]	; (8004804 <vTaskSwitchContext+0xa0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004772:	4b25      	ldr	r3, [pc, #148]	; (8004808 <vTaskSwitchContext+0xa4>)
 8004774:	2201      	movs	r2, #1
 8004776:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004778:	e03e      	b.n	80047f8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800477a:	4b23      	ldr	r3, [pc, #140]	; (8004808 <vTaskSwitchContext+0xa4>)
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004780:	4b22      	ldr	r3, [pc, #136]	; (800480c <vTaskSwitchContext+0xa8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	fab3 f383 	clz	r3, r3
 800478c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800478e:	7afb      	ldrb	r3, [r7, #11]
 8004790:	f1c3 031f 	rsb	r3, r3, #31
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	491e      	ldr	r1, [pc, #120]	; (8004810 <vTaskSwitchContext+0xac>)
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4613      	mov	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	440b      	add	r3, r1
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d109      	bne.n	80047be <vTaskSwitchContext+0x5a>
	__asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	607b      	str	r3, [r7, #4]
 80047bc:	e7fe      	b.n	80047bc <vTaskSwitchContext+0x58>
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4a11      	ldr	r2, [pc, #68]	; (8004810 <vTaskSwitchContext+0xac>)
 80047ca:	4413      	add	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	605a      	str	r2, [r3, #4]
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	3308      	adds	r3, #8
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d104      	bne.n	80047ee <vTaskSwitchContext+0x8a>
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	605a      	str	r2, [r3, #4]
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	4a07      	ldr	r2, [pc, #28]	; (8004814 <vTaskSwitchContext+0xb0>)
 80047f6:	6013      	str	r3, [r2, #0]
}
 80047f8:	bf00      	nop
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	200005dc 	.word	0x200005dc
 8004808:	200005c8 	.word	0x200005c8
 800480c:	200005bc 	.word	0x200005bc
 8004810:	200004b8 	.word	0x200004b8
 8004814:	200004b4 	.word	0x200004b4

08004818 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004820:	f000 f852 	bl	80048c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004824:	4b06      	ldr	r3, [pc, #24]	; (8004840 <prvIdleTask+0x28>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d9f9      	bls.n	8004820 <prvIdleTask+0x8>
			{
				taskYIELD();
 800482c:	4b05      	ldr	r3, [pc, #20]	; (8004844 <prvIdleTask+0x2c>)
 800482e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800483c:	e7f0      	b.n	8004820 <prvIdleTask+0x8>
 800483e:	bf00      	nop
 8004840:	200004b8 	.word	0x200004b8
 8004844:	e000ed04 	.word	0xe000ed04

08004848 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800484e:	2300      	movs	r3, #0
 8004850:	607b      	str	r3, [r7, #4]
 8004852:	e00c      	b.n	800486e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	4613      	mov	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4a12      	ldr	r2, [pc, #72]	; (80048a8 <prvInitialiseTaskLists+0x60>)
 8004860:	4413      	add	r3, r2
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff fb50 	bl	8003f08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3301      	adds	r3, #1
 800486c:	607b      	str	r3, [r7, #4]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b06      	cmp	r3, #6
 8004872:	d9ef      	bls.n	8004854 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004874:	480d      	ldr	r0, [pc, #52]	; (80048ac <prvInitialiseTaskLists+0x64>)
 8004876:	f7ff fb47 	bl	8003f08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800487a:	480d      	ldr	r0, [pc, #52]	; (80048b0 <prvInitialiseTaskLists+0x68>)
 800487c:	f7ff fb44 	bl	8003f08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004880:	480c      	ldr	r0, [pc, #48]	; (80048b4 <prvInitialiseTaskLists+0x6c>)
 8004882:	f7ff fb41 	bl	8003f08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004886:	480c      	ldr	r0, [pc, #48]	; (80048b8 <prvInitialiseTaskLists+0x70>)
 8004888:	f7ff fb3e 	bl	8003f08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800488c:	480b      	ldr	r0, [pc, #44]	; (80048bc <prvInitialiseTaskLists+0x74>)
 800488e:	f7ff fb3b 	bl	8003f08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004892:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <prvInitialiseTaskLists+0x78>)
 8004894:	4a05      	ldr	r2, [pc, #20]	; (80048ac <prvInitialiseTaskLists+0x64>)
 8004896:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004898:	4b0a      	ldr	r3, [pc, #40]	; (80048c4 <prvInitialiseTaskLists+0x7c>)
 800489a:	4a05      	ldr	r2, [pc, #20]	; (80048b0 <prvInitialiseTaskLists+0x68>)
 800489c:	601a      	str	r2, [r3, #0]
}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	200004b8 	.word	0x200004b8
 80048ac:	20000544 	.word	0x20000544
 80048b0:	20000558 	.word	0x20000558
 80048b4:	20000574 	.word	0x20000574
 80048b8:	20000588 	.word	0x20000588
 80048bc:	200005a0 	.word	0x200005a0
 80048c0:	2000056c 	.word	0x2000056c
 80048c4:	20000570 	.word	0x20000570

080048c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048ce:	e019      	b.n	8004904 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80048d0:	f000 f9ea 	bl	8004ca8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80048d4:	4b0f      	ldr	r3, [pc, #60]	; (8004914 <prvCheckTasksWaitingTermination+0x4c>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3304      	adds	r3, #4
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff fb97 	bl	8004014 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80048e6:	4b0c      	ldr	r3, [pc, #48]	; (8004918 <prvCheckTasksWaitingTermination+0x50>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	4a0a      	ldr	r2, [pc, #40]	; (8004918 <prvCheckTasksWaitingTermination+0x50>)
 80048ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80048f0:	4b0a      	ldr	r3, [pc, #40]	; (800491c <prvCheckTasksWaitingTermination+0x54>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	4a09      	ldr	r2, [pc, #36]	; (800491c <prvCheckTasksWaitingTermination+0x54>)
 80048f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80048fa:	f000 fa03 	bl	8004d04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f80e 	bl	8004920 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <prvCheckTasksWaitingTermination+0x54>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1e1      	bne.n	80048d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800490c:	bf00      	nop
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	20000588 	.word	0x20000588
 8004918:	200005b4 	.word	0x200005b4
 800491c:	2000059c 	.word	0x2000059c

08004920 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800492e:	2b00      	cmp	r3, #0
 8004930:	d108      	bne.n	8004944 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fb32 	bl	8004fa0 <vPortFree>
				vPortFree( pxTCB );
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fb2f 	bl	8004fa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004942:	e017      	b.n	8004974 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800494a:	2b01      	cmp	r3, #1
 800494c:	d103      	bne.n	8004956 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fb26 	bl	8004fa0 <vPortFree>
	}
 8004954:	e00e      	b.n	8004974 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800495c:	2b02      	cmp	r3, #2
 800495e:	d009      	beq.n	8004974 <prvDeleteTCB+0x54>
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	e7fe      	b.n	8004972 <prvDeleteTCB+0x52>
	}
 8004974:	bf00      	nop
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004982:	4b0e      	ldr	r3, [pc, #56]	; (80049bc <prvResetNextTaskUnblockTime+0x40>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <prvResetNextTaskUnblockTime+0x14>
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <prvResetNextTaskUnblockTime+0x16>
 8004990:	2300      	movs	r3, #0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d004      	beq.n	80049a0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004996:	4b0a      	ldr	r3, [pc, #40]	; (80049c0 <prvResetNextTaskUnblockTime+0x44>)
 8004998:	f04f 32ff 	mov.w	r2, #4294967295
 800499c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800499e:	e008      	b.n	80049b2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049a0:	4b06      	ldr	r3, [pc, #24]	; (80049bc <prvResetNextTaskUnblockTime+0x40>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	4a04      	ldr	r2, [pc, #16]	; (80049c0 <prvResetNextTaskUnblockTime+0x44>)
 80049b0:	6013      	str	r3, [r2, #0]
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr
 80049bc:	2000056c 	.word	0x2000056c
 80049c0:	200005d4 	.word	0x200005d4

080049c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80049ca:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <xTaskGetSchedulerState+0x34>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d102      	bne.n	80049d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80049d2:	2301      	movs	r3, #1
 80049d4:	607b      	str	r3, [r7, #4]
 80049d6:	e008      	b.n	80049ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049d8:	4b08      	ldr	r3, [pc, #32]	; (80049fc <xTaskGetSchedulerState+0x38>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d102      	bne.n	80049e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80049e0:	2302      	movs	r3, #2
 80049e2:	607b      	str	r3, [r7, #4]
 80049e4:	e001      	b.n	80049ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049e6:	2300      	movs	r3, #0
 80049e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80049ea:	687b      	ldr	r3, [r7, #4]
	}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	200005c0 	.word	0x200005c0
 80049fc:	200005dc 	.word	0x200005dc

08004a00 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a0a:	4b29      	ldr	r3, [pc, #164]	; (8004ab0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a10:	4b28      	ldr	r3, [pc, #160]	; (8004ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3304      	adds	r3, #4
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7ff fafc 	bl	8004014 <uxListRemove>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10b      	bne.n	8004a3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004a22:	4b24      	ldr	r3, [pc, #144]	; (8004ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a28:	2201      	movs	r2, #1
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43da      	mvns	r2, r3
 8004a30:	4b21      	ldr	r3, [pc, #132]	; (8004ab8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4013      	ands	r3, r2
 8004a36:	4a20      	ldr	r2, [pc, #128]	; (8004ab8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a40:	d10a      	bne.n	8004a58 <prvAddCurrentTaskToDelayedList+0x58>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d007      	beq.n	8004a58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a48:	4b1a      	ldr	r3, [pc, #104]	; (8004ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	4619      	mov	r1, r3
 8004a50:	481a      	ldr	r0, [pc, #104]	; (8004abc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004a52:	f7ff fa84 	bl	8003f5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a56:	e026      	b.n	8004aa6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a60:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d209      	bcs.n	8004a84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a70:	4b13      	ldr	r3, [pc, #76]	; (8004ac0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	4b0f      	ldr	r3, [pc, #60]	; (8004ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	f7ff fa91 	bl	8003fa4 <vListInsert>
}
 8004a82:	e010      	b.n	8004aa6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a84:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4610      	mov	r0, r2
 8004a92:	f7ff fa87 	bl	8003fa4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a96:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d202      	bcs.n	8004aa6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004aa0:	4a09      	ldr	r2, [pc, #36]	; (8004ac8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	6013      	str	r3, [r2, #0]
}
 8004aa6:	bf00      	nop
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	200005b8 	.word	0x200005b8
 8004ab4:	200004b4 	.word	0x200004b4
 8004ab8:	200005bc 	.word	0x200005bc
 8004abc:	200005a0 	.word	0x200005a0
 8004ac0:	20000570 	.word	0x20000570
 8004ac4:	2000056c 	.word	0x2000056c
 8004ac8:	200005d4 	.word	0x200005d4

08004acc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	3b04      	subs	r3, #4
 8004adc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3b04      	subs	r3, #4
 8004aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f023 0201 	bic.w	r2, r3, #1
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	3b04      	subs	r3, #4
 8004afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004afc:	4a08      	ldr	r2, [pc, #32]	; (8004b20 <pxPortInitialiseStack+0x54>)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3b14      	subs	r3, #20
 8004b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3b20      	subs	r3, #32
 8004b12:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b14:	68fb      	ldr	r3, [r7, #12]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr
 8004b20:	08004b25 	.word	0x08004b25

08004b24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b2e:	4b10      	ldr	r3, [pc, #64]	; (8004b70 <prvTaskExitError+0x4c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b36:	d009      	beq.n	8004b4c <prvTaskExitError+0x28>
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	e7fe      	b.n	8004b4a <prvTaskExitError+0x26>
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b5e:	bf00      	nop
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0fc      	beq.n	8004b60 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b66:	bf00      	nop
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr
 8004b70:	20000020 	.word	0x20000020
	...

08004b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b80:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <pxCurrentTCBConst2>)
 8004b82:	6819      	ldr	r1, [r3, #0]
 8004b84:	6808      	ldr	r0, [r1, #0]
 8004b86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b8a:	f380 8809 	msr	PSP, r0
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f04f 0000 	mov.w	r0, #0
 8004b96:	f380 8811 	msr	BASEPRI, r0
 8004b9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004b9e:	4770      	bx	lr

08004ba0 <pxCurrentTCBConst2>:
 8004ba0:	200004b4 	.word	0x200004b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop

08004ba8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004ba8:	4806      	ldr	r0, [pc, #24]	; (8004bc4 <prvPortStartFirstTask+0x1c>)
 8004baa:	6800      	ldr	r0, [r0, #0]
 8004bac:	6800      	ldr	r0, [r0, #0]
 8004bae:	f380 8808 	msr	MSP, r0
 8004bb2:	b662      	cpsie	i
 8004bb4:	b661      	cpsie	f
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	df00      	svc	0
 8004bc0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bc2:	bf00      	nop
 8004bc4:	e000ed08 	.word	0xe000ed08

08004bc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004bce:	4b31      	ldr	r3, [pc, #196]	; (8004c94 <xPortStartScheduler+0xcc>)
 8004bd0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	22ff      	movs	r2, #255	; 0xff
 8004bde:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004be8:	78fb      	ldrb	r3, [r7, #3]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	4b29      	ldr	r3, [pc, #164]	; (8004c98 <xPortStartScheduler+0xd0>)
 8004bf4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bf6:	4b29      	ldr	r3, [pc, #164]	; (8004c9c <xPortStartScheduler+0xd4>)
 8004bf8:	2207      	movs	r2, #7
 8004bfa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bfc:	e009      	b.n	8004c12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004bfe:	4b27      	ldr	r3, [pc, #156]	; (8004c9c <xPortStartScheduler+0xd4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	4a25      	ldr	r2, [pc, #148]	; (8004c9c <xPortStartScheduler+0xd4>)
 8004c06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c12:	78fb      	ldrb	r3, [r7, #3]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1a:	2b80      	cmp	r3, #128	; 0x80
 8004c1c:	d0ef      	beq.n	8004bfe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c1e:	4b1f      	ldr	r3, [pc, #124]	; (8004c9c <xPortStartScheduler+0xd4>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f1c3 0307 	rsb	r3, r3, #7
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d009      	beq.n	8004c3e <xPortStartScheduler+0x76>
 8004c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	60bb      	str	r3, [r7, #8]
 8004c3c:	e7fe      	b.n	8004c3c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c3e:	4b17      	ldr	r3, [pc, #92]	; (8004c9c <xPortStartScheduler+0xd4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	021b      	lsls	r3, r3, #8
 8004c44:	4a15      	ldr	r2, [pc, #84]	; (8004c9c <xPortStartScheduler+0xd4>)
 8004c46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c48:	4b14      	ldr	r3, [pc, #80]	; (8004c9c <xPortStartScheduler+0xd4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c50:	4a12      	ldr	r2, [pc, #72]	; (8004c9c <xPortStartScheduler+0xd4>)
 8004c52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c5c:	4b10      	ldr	r3, [pc, #64]	; (8004ca0 <xPortStartScheduler+0xd8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a0f      	ldr	r2, [pc, #60]	; (8004ca0 <xPortStartScheduler+0xd8>)
 8004c62:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c68:	4b0d      	ldr	r3, [pc, #52]	; (8004ca0 <xPortStartScheduler+0xd8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a0c      	ldr	r2, [pc, #48]	; (8004ca0 <xPortStartScheduler+0xd8>)
 8004c6e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c74:	f000 f8b0 	bl	8004dd8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c78:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <xPortStartScheduler+0xdc>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c7e:	f7ff ff93 	bl	8004ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c82:	f7ff fd6f 	bl	8004764 <vTaskSwitchContext>
	prvTaskExitError();
 8004c86:	f7ff ff4d 	bl	8004b24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	e000e400 	.word	0xe000e400
 8004c98:	200005e0 	.word	0x200005e0
 8004c9c:	200005e4 	.word	0x200005e4
 8004ca0:	e000ed20 	.word	0xe000ed20
 8004ca4:	20000020 	.word	0x20000020

08004ca8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004cc0:	4b0e      	ldr	r3, [pc, #56]	; (8004cfc <vPortEnterCritical+0x54>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	4a0d      	ldr	r2, [pc, #52]	; (8004cfc <vPortEnterCritical+0x54>)
 8004cc8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004cca:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <vPortEnterCritical+0x54>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d10e      	bne.n	8004cf0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004cd2:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <vPortEnterCritical+0x58>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d009      	beq.n	8004cf0 <vPortEnterCritical+0x48>
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	603b      	str	r3, [r7, #0]
 8004cee:	e7fe      	b.n	8004cee <vPortEnterCritical+0x46>
	}
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc80      	pop	{r7}
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	20000020 	.word	0x20000020
 8004d00:	e000ed04 	.word	0xe000ed04

08004d04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d0a:	4b10      	ldr	r3, [pc, #64]	; (8004d4c <vPortExitCritical+0x48>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d109      	bne.n	8004d26 <vPortExitCritical+0x22>
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	607b      	str	r3, [r7, #4]
 8004d24:	e7fe      	b.n	8004d24 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004d26:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <vPortExitCritical+0x48>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	4a07      	ldr	r2, [pc, #28]	; (8004d4c <vPortExitCritical+0x48>)
 8004d2e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d30:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <vPortExitCritical+0x48>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d104      	bne.n	8004d42 <vPortExitCritical+0x3e>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr
 8004d4c:	20000020 	.word	0x20000020

08004d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d50:	f3ef 8009 	mrs	r0, PSP
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	4b0d      	ldr	r3, [pc, #52]	; (8004d90 <pxCurrentTCBConst>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d60:	6010      	str	r0, [r2, #0]
 8004d62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004d66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d6a:	f380 8811 	msr	BASEPRI, r0
 8004d6e:	f7ff fcf9 	bl	8004764 <vTaskSwitchContext>
 8004d72:	f04f 0000 	mov.w	r0, #0
 8004d76:	f380 8811 	msr	BASEPRI, r0
 8004d7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004d7e:	6819      	ldr	r1, [r3, #0]
 8004d80:	6808      	ldr	r0, [r1, #0]
 8004d82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d86:	f380 8809 	msr	PSP, r0
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	4770      	bx	lr

08004d90 <pxCurrentTCBConst>:
 8004d90:	200004b4 	.word	0x200004b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop

08004d98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004db0:	f7ff fc1c 	bl	80045ec <xTaskIncrementTick>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004dba:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <xPortSysTickHandler+0x3c>)
 8004dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004dcc:	bf00      	nop
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	e000ed04 	.word	0xe000ed04

08004dd8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <vPortSetupTimerInterrupt+0x30>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004de2:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <vPortSetupTimerInterrupt+0x34>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004de8:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <vPortSetupTimerInterrupt+0x38>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a09      	ldr	r2, [pc, #36]	; (8004e14 <vPortSetupTimerInterrupt+0x3c>)
 8004dee:	fba2 2303 	umull	r2, r3, r2, r3
 8004df2:	099b      	lsrs	r3, r3, #6
 8004df4:	4a08      	ldr	r2, [pc, #32]	; (8004e18 <vPortSetupTimerInterrupt+0x40>)
 8004df6:	3b01      	subs	r3, #1
 8004df8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dfa:	4b03      	ldr	r3, [pc, #12]	; (8004e08 <vPortSetupTimerInterrupt+0x30>)
 8004dfc:	2207      	movs	r2, #7
 8004dfe:	601a      	str	r2, [r3, #0]
}
 8004e00:	bf00      	nop
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr
 8004e08:	e000e010 	.word	0xe000e010
 8004e0c:	e000e018 	.word	0xe000e018
 8004e10:	20000024 	.word	0x20000024
 8004e14:	10624dd3 	.word	0x10624dd3
 8004e18:	e000e014 	.word	0xe000e014

08004e1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b08a      	sub	sp, #40	; 0x28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e24:	2300      	movs	r3, #0
 8004e26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e28:	f7ff fb36 	bl	8004498 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e2c:	4b57      	ldr	r3, [pc, #348]	; (8004f8c <pvPortMalloc+0x170>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e34:	f000 f90c 	bl	8005050 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e38:	4b55      	ldr	r3, [pc, #340]	; (8004f90 <pvPortMalloc+0x174>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f040 808c 	bne.w	8004f5e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01c      	beq.n	8004e86 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004e4c:	2208      	movs	r2, #8
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4413      	add	r3, r2
 8004e52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f003 0307 	and.w	r3, r3, #7
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d013      	beq.n	8004e86 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f023 0307 	bic.w	r3, r3, #7
 8004e64:	3308      	adds	r3, #8
 8004e66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d009      	beq.n	8004e86 <pvPortMalloc+0x6a>
	__asm volatile
 8004e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	e7fe      	b.n	8004e84 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d068      	beq.n	8004f5e <pvPortMalloc+0x142>
 8004e8c:	4b41      	ldr	r3, [pc, #260]	; (8004f94 <pvPortMalloc+0x178>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d863      	bhi.n	8004f5e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e96:	4b40      	ldr	r3, [pc, #256]	; (8004f98 <pvPortMalloc+0x17c>)
 8004e98:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e9a:	4b3f      	ldr	r3, [pc, #252]	; (8004f98 <pvPortMalloc+0x17c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ea0:	e004      	b.n	8004eac <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d903      	bls.n	8004ebe <pvPortMalloc+0xa2>
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f1      	bne.n	8004ea2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ebe:	4b33      	ldr	r3, [pc, #204]	; (8004f8c <pvPortMalloc+0x170>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d04a      	beq.n	8004f5e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2208      	movs	r2, #8
 8004ece:	4413      	add	r3, r2
 8004ed0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	1ad2      	subs	r2, r2, r3
 8004ee2:	2308      	movs	r3, #8
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d91e      	bls.n	8004f28 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4413      	add	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d009      	beq.n	8004f10 <pvPortMalloc+0xf4>
 8004efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	e7fe      	b.n	8004f0e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	1ad2      	subs	r2, r2, r3
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f22:	69b8      	ldr	r0, [r7, #24]
 8004f24:	f000 f8f6 	bl	8005114 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f28:	4b1a      	ldr	r3, [pc, #104]	; (8004f94 <pvPortMalloc+0x178>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	4a18      	ldr	r2, [pc, #96]	; (8004f94 <pvPortMalloc+0x178>)
 8004f34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f36:	4b17      	ldr	r3, [pc, #92]	; (8004f94 <pvPortMalloc+0x178>)
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	4b18      	ldr	r3, [pc, #96]	; (8004f9c <pvPortMalloc+0x180>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d203      	bcs.n	8004f4a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f42:	4b14      	ldr	r3, [pc, #80]	; (8004f94 <pvPortMalloc+0x178>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a15      	ldr	r2, [pc, #84]	; (8004f9c <pvPortMalloc+0x180>)
 8004f48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	4b10      	ldr	r3, [pc, #64]	; (8004f90 <pvPortMalloc+0x174>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	431a      	orrs	r2, r3
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f5e:	f7ff faa9 	bl	80044b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d009      	beq.n	8004f80 <pvPortMalloc+0x164>
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	e7fe      	b.n	8004f7e <pvPortMalloc+0x162>
	return pvReturn;
 8004f80:	69fb      	ldr	r3, [r7, #28]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3728      	adds	r7, #40	; 0x28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	200011f0 	.word	0x200011f0
 8004f90:	200011fc 	.word	0x200011fc
 8004f94:	200011f4 	.word	0x200011f4
 8004f98:	200011e8 	.word	0x200011e8
 8004f9c:	200011f8 	.word	0x200011f8

08004fa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d046      	beq.n	8005040 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004fb2:	2308      	movs	r3, #8
 8004fb4:	425b      	negs	r3, r3
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4413      	add	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	4b20      	ldr	r3, [pc, #128]	; (8005048 <vPortFree+0xa8>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d109      	bne.n	8004fe2 <vPortFree+0x42>
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	e7fe      	b.n	8004fe0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d009      	beq.n	8004ffe <vPortFree+0x5e>
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	60bb      	str	r3, [r7, #8]
 8004ffc:	e7fe      	b.n	8004ffc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	4b11      	ldr	r3, [pc, #68]	; (8005048 <vPortFree+0xa8>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4013      	ands	r3, r2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d019      	beq.n	8005040 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d115      	bne.n	8005040 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <vPortFree+0xa8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	43db      	mvns	r3, r3
 800501e:	401a      	ands	r2, r3
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005024:	f7ff fa38 	bl	8004498 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	4b07      	ldr	r3, [pc, #28]	; (800504c <vPortFree+0xac>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4413      	add	r3, r2
 8005032:	4a06      	ldr	r2, [pc, #24]	; (800504c <vPortFree+0xac>)
 8005034:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005036:	6938      	ldr	r0, [r7, #16]
 8005038:	f000 f86c 	bl	8005114 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800503c:	f7ff fa3a 	bl	80044b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005040:	bf00      	nop
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	200011fc 	.word	0x200011fc
 800504c:	200011f4 	.word	0x200011f4

08005050 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005056:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800505a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800505c:	4b27      	ldr	r3, [pc, #156]	; (80050fc <prvHeapInit+0xac>)
 800505e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00c      	beq.n	8005084 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	3307      	adds	r3, #7
 800506e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0307 	bic.w	r3, r3, #7
 8005076:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	4a1f      	ldr	r2, [pc, #124]	; (80050fc <prvHeapInit+0xac>)
 8005080:	4413      	add	r3, r2
 8005082:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005088:	4a1d      	ldr	r2, [pc, #116]	; (8005100 <prvHeapInit+0xb0>)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800508e:	4b1c      	ldr	r3, [pc, #112]	; (8005100 <prvHeapInit+0xb0>)
 8005090:	2200      	movs	r2, #0
 8005092:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	4413      	add	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800509c:	2208      	movs	r2, #8
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0307 	bic.w	r3, r3, #7
 80050aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4a15      	ldr	r2, [pc, #84]	; (8005104 <prvHeapInit+0xb4>)
 80050b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80050b2:	4b14      	ldr	r3, [pc, #80]	; (8005104 <prvHeapInit+0xb4>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2200      	movs	r2, #0
 80050b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80050ba:	4b12      	ldr	r3, [pc, #72]	; (8005104 <prvHeapInit+0xb4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	1ad2      	subs	r2, r2, r3
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050d0:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <prvHeapInit+0xb4>)
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <prvHeapInit+0xb8>)
 80050de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	4a09      	ldr	r2, [pc, #36]	; (800510c <prvHeapInit+0xbc>)
 80050e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050e8:	4b09      	ldr	r3, [pc, #36]	; (8005110 <prvHeapInit+0xc0>)
 80050ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80050ee:	601a      	str	r2, [r3, #0]
}
 80050f0:	bf00      	nop
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bc80      	pop	{r7}
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	200005e8 	.word	0x200005e8
 8005100:	200011e8 	.word	0x200011e8
 8005104:	200011f0 	.word	0x200011f0
 8005108:	200011f8 	.word	0x200011f8
 800510c:	200011f4 	.word	0x200011f4
 8005110:	200011fc 	.word	0x200011fc

08005114 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800511c:	4b27      	ldr	r3, [pc, #156]	; (80051bc <prvInsertBlockIntoFreeList+0xa8>)
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	e002      	b.n	8005128 <prvInsertBlockIntoFreeList+0x14>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	429a      	cmp	r2, r3
 8005130:	d8f7      	bhi.n	8005122 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	4413      	add	r3, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	429a      	cmp	r2, r3
 8005142:	d108      	bne.n	8005156 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	441a      	add	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	441a      	add	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d118      	bne.n	800519c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	4b14      	ldr	r3, [pc, #80]	; (80051c0 <prvInsertBlockIntoFreeList+0xac>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d00d      	beq.n	8005192 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	441a      	add	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	e008      	b.n	80051a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005192:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <prvInsertBlockIntoFreeList+0xac>)
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	e003      	b.n	80051a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d002      	beq.n	80051b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051b2:	bf00      	nop
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr
 80051bc:	200011e8 	.word	0x200011e8
 80051c0:	200011f0 	.word	0x200011f0

080051c4 <Load_Param>:
BP_Status 			Bp_Down;
BP_Status 			Bp_Ok;

/* Private function -----------------------------------------------*/
uint8_t Load_Param()
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
	uint32_t val_param;

	if(ParamExist())
 80051ca:	4814      	ldr	r0, [pc, #80]	; (800521c <Load_Param+0x58>)
 80051cc:	f7fe fd1e 	bl	8003c0c <FlashManager_ReadInt32>
 80051d0:	4602      	mov	r2, r0
 80051d2:	4b13      	ldr	r3, [pc, #76]	; (8005220 <Load_Param+0x5c>)
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d113      	bne.n	8005200 <Load_Param+0x3c>
	{
		val_param = 	FlashManager_ReadInt32(PARAM_DMX_PARAM);
 80051d8:	4812      	ldr	r0, [pc, #72]	; (8005224 <Load_Param+0x60>)
 80051da:	f7fe fd17 	bl	8003c0c <FlashManager_ReadInt32>
 80051de:	6078      	str	r0, [r7, #4]
		Current_Mode = 	(val_param&0xFF000000)>>24;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	0e1b      	lsrs	r3, r3, #24
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	4b10      	ldr	r3, [pc, #64]	; (8005228 <Load_Param+0x64>)
 80051e8:	701a      	strb	r2, [r3, #0]
		Manu_value = 	(val_param&0x00FF0000)>>16;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	0c1b      	lsrs	r3, r3, #16
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	4b0e      	ldr	r3, [pc, #56]	; (800522c <Load_Param+0x68>)
 80051f2:	701a      	strb	r2, [r3, #0]
		DMX_Adress = 	(val_param&0x0000FFFF);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	4b0d      	ldr	r3, [pc, #52]	; (8005230 <Load_Param+0x6c>)
 80051fa:	801a      	strh	r2, [r3, #0]
		return __TRUE;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e009      	b.n	8005214 <Load_Param+0x50>
	}
	else
	{
		Current_Mode = MODE_OFF;
 8005200:	4b09      	ldr	r3, [pc, #36]	; (8005228 <Load_Param+0x64>)
 8005202:	2200      	movs	r2, #0
 8005204:	701a      	strb	r2, [r3, #0]
		Manu_value = 100;
 8005206:	4b09      	ldr	r3, [pc, #36]	; (800522c <Load_Param+0x68>)
 8005208:	2264      	movs	r2, #100	; 0x64
 800520a:	701a      	strb	r2, [r3, #0]
		DMX_Adress = 1;
 800520c:	4b08      	ldr	r3, [pc, #32]	; (8005230 <Load_Param+0x6c>)
 800520e:	2201      	movs	r2, #1
 8005210:	801a      	strh	r2, [r3, #0]
		return __FALSE;
 8005212:	2300      	movs	r3, #0
	}
}
 8005214:	4618      	mov	r0, r3
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	0800f800 	.word	0x0800f800
 8005220:	55aa00ff 	.word	0x55aa00ff
 8005224:	0800f804 	.word	0x0800f804
 8005228:	20001910 	.word	0x20001910
 800522c:	200018e0 	.word	0x200018e0
 8005230:	20001950 	.word	0x20001950

08005234 <Write_Param>:

uint8_t Write_Param()
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
	uint32_t data[2];
	data[0] = PARAM_EXIST_CODE;
 800523a:	4b10      	ldr	r3, [pc, #64]	; (800527c <Write_Param+0x48>)
 800523c:	603b      	str	r3, [r7, #0]
	data[1] = 0x00;
 800523e:	2300      	movs	r3, #0
 8005240:	607b      	str	r3, [r7, #4]
	data[1] |= (Current_Mode<<24);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a0e      	ldr	r2, [pc, #56]	; (8005280 <Write_Param+0x4c>)
 8005246:	7812      	ldrb	r2, [r2, #0]
 8005248:	0612      	lsls	r2, r2, #24
 800524a:	4313      	orrs	r3, r2
 800524c:	607b      	str	r3, [r7, #4]
	data[1] |= (Manu_value<<16);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a0c      	ldr	r2, [pc, #48]	; (8005284 <Write_Param+0x50>)
 8005252:	7812      	ldrb	r2, [r2, #0]
 8005254:	0412      	lsls	r2, r2, #16
 8005256:	4313      	orrs	r3, r2
 8005258:	607b      	str	r3, [r7, #4]
	data[1] |= (DMX_Adress);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a0a      	ldr	r2, [pc, #40]	; (8005288 <Write_Param+0x54>)
 800525e:	8812      	ldrh	r2, [r2, #0]
 8005260:	4313      	orrs	r3, r2
 8005262:	607b      	str	r3, [r7, #4]

	FlashManager_WriteMulti(PARAM_EXIST_ADDRESS,2,data);
 8005264:	463b      	mov	r3, r7
 8005266:	461a      	mov	r2, r3
 8005268:	2102      	movs	r1, #2
 800526a:	4808      	ldr	r0, [pc, #32]	; (800528c <Write_Param+0x58>)
 800526c:	f7fe fc58 	bl	8003b20 <FlashManager_WriteMulti>
}
 8005270:	bf00      	nop
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	55aa00ff 	.word	0x55aa00ff
 8005280:	20001910 	.word	0x20001910
 8005284:	200018e0 	.word	0x200018e0
 8005288:	20001950 	.word	0x20001950
 800528c:	0800f800 	.word	0x0800f800

08005290 <Update_Display>:

void Update_Display()
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
	char Str_percent[]="000";
 8005296:	4b61      	ldr	r3, [pc, #388]	; (800541c <Update_Display+0x18c>)
 8005298:	60bb      	str	r3, [r7, #8]
    char Str_dmx[]="000";
 800529a:	4b60      	ldr	r3, [pc, #384]	; (800541c <Update_Display+0x18c>)
 800529c:	607b      	str	r3, [r7, #4]
    char Str_add[]="000";
 800529e:	4b5f      	ldr	r3, [pc, #380]	; (800541c <Update_Display+0x18c>)
 80052a0:	603b      	str	r3, [r7, #0]
    uint8_t percent_value;

    SSD1306_Clear();
 80052a2:	f7fb f97c 	bl	800059e <SSD1306_Clear>

    if(Current_Mode == MODE_OFF)			//OFF
 80052a6:	4b5e      	ldr	r3, [pc, #376]	; (8005420 <Update_Display+0x190>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d109      	bne.n	80052c2 <Update_Display+0x32>
    {
    	SSD1306_GotoXY (40,0);
 80052ae:	2100      	movs	r1, #0
 80052b0:	2028      	movs	r0, #40	; 0x28
 80052b2:	f7fb f8b9 	bl	8000428 <SSD1306_GotoXY>
    	SSD1306_Puts ("OFF", &Font_16x26, 1);
 80052b6:	2201      	movs	r2, #1
 80052b8:	495a      	ldr	r1, [pc, #360]	; (8005424 <Update_Display+0x194>)
 80052ba:	485b      	ldr	r0, [pc, #364]	; (8005428 <Update_Display+0x198>)
 80052bc:	f7fb f94a 	bl	8000554 <SSD1306_Puts>
 80052c0:	e0a5      	b.n	800540e <Update_Display+0x17e>
    }
    else if(Current_Mode == MODE_MANU)		//MANU
 80052c2:	4b57      	ldr	r3, [pc, #348]	; (8005420 <Update_Display+0x190>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d127      	bne.n	800531a <Update_Display+0x8a>
    {
    	percent_value = Manu_value;
 80052ca:	4b58      	ldr	r3, [pc, #352]	; (800542c <Update_Display+0x19c>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	73fb      	strb	r3, [r7, #15]
    	sprintf(Str_percent,"%03d",percent_value);
 80052d0:	7bfa      	ldrb	r2, [r7, #15]
 80052d2:	f107 0308 	add.w	r3, r7, #8
 80052d6:	4956      	ldr	r1, [pc, #344]	; (8005430 <Update_Display+0x1a0>)
 80052d8:	4618      	mov	r0, r3
 80052da:	f001 fb15 	bl	8006908 <siprintf>
    	SSD1306_GotoXY (25,0);
 80052de:	2100      	movs	r1, #0
 80052e0:	2019      	movs	r0, #25
 80052e2:	f7fb f8a1 	bl	8000428 <SSD1306_GotoXY>
    	SSD1306_Puts (Str_percent, &Font_16x26, 1);
 80052e6:	f107 0308 	add.w	r3, r7, #8
 80052ea:	2201      	movs	r2, #1
 80052ec:	494d      	ldr	r1, [pc, #308]	; (8005424 <Update_Display+0x194>)
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fb f930 	bl	8000554 <SSD1306_Puts>
    	SSD1306_GotoXY (74,0);
 80052f4:	2100      	movs	r1, #0
 80052f6:	204a      	movs	r0, #74	; 0x4a
 80052f8:	f7fb f896 	bl	8000428 <SSD1306_GotoXY>
    	SSD1306_Puts ("%", &Font_16x26, 1);
 80052fc:	2201      	movs	r2, #1
 80052fe:	4949      	ldr	r1, [pc, #292]	; (8005424 <Update_Display+0x194>)
 8005300:	484c      	ldr	r0, [pc, #304]	; (8005434 <Update_Display+0x1a4>)
 8005302:	f7fb f927 	bl	8000554 <SSD1306_Puts>
    	SSD1306_GotoXY (0, 45);
 8005306:	212d      	movs	r1, #45	; 0x2d
 8005308:	2000      	movs	r0, #0
 800530a:	f7fb f88d 	bl	8000428 <SSD1306_GotoXY>
    	SSD1306_Puts ("MODE:MANUAL", &Font_11x18, 1);
 800530e:	2201      	movs	r2, #1
 8005310:	4949      	ldr	r1, [pc, #292]	; (8005438 <Update_Display+0x1a8>)
 8005312:	484a      	ldr	r0, [pc, #296]	; (800543c <Update_Display+0x1ac>)
 8005314:	f7fb f91e 	bl	8000554 <SSD1306_Puts>
 8005318:	e079      	b.n	800540e <Update_Display+0x17e>
    }
    else								//DMX
    {
    	percent_value = (DMX_values[0]*100/255);
 800531a:	4b49      	ldr	r3, [pc, #292]	; (8005440 <Update_Display+0x1b0>)
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	2364      	movs	r3, #100	; 0x64
 8005322:	fb03 f302 	mul.w	r3, r3, r2
 8005326:	4a47      	ldr	r2, [pc, #284]	; (8005444 <Update_Display+0x1b4>)
 8005328:	fb82 1203 	smull	r1, r2, r2, r3
 800532c:	441a      	add	r2, r3
 800532e:	11d2      	asrs	r2, r2, #7
 8005330:	17db      	asrs	r3, r3, #31
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	73fb      	strb	r3, [r7, #15]
    	sprintf(Str_add,"%03d",DMX_Adress);
 8005336:	4b44      	ldr	r3, [pc, #272]	; (8005448 <Update_Display+0x1b8>)
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	463b      	mov	r3, r7
 800533e:	493c      	ldr	r1, [pc, #240]	; (8005430 <Update_Display+0x1a0>)
 8005340:	4618      	mov	r0, r3
 8005342:	f001 fae1 	bl	8006908 <siprintf>
    	if(DMX_signal_OK)
 8005346:	4b41      	ldr	r3, [pc, #260]	; (800544c <Update_Display+0x1bc>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d018      	beq.n	8005380 <Update_Display+0xf0>
		{
			SSD1306_GotoXY (0, 45);
 800534e:	212d      	movs	r1, #45	; 0x2d
 8005350:	2000      	movs	r0, #0
 8005352:	f7fb f869 	bl	8000428 <SSD1306_GotoXY>
			SSD1306_Puts ("SIGNAL :OK", &Font_11x18, 1);
 8005356:	2201      	movs	r2, #1
 8005358:	4937      	ldr	r1, [pc, #220]	; (8005438 <Update_Display+0x1a8>)
 800535a:	483d      	ldr	r0, [pc, #244]	; (8005450 <Update_Display+0x1c0>)
 800535c:	f7fb f8fa 	bl	8000554 <SSD1306_Puts>
			sprintf(Str_percent,"%03d",percent_value);
 8005360:	7bfa      	ldrb	r2, [r7, #15]
 8005362:	f107 0308 	add.w	r3, r7, #8
 8005366:	4932      	ldr	r1, [pc, #200]	; (8005430 <Update_Display+0x1a0>)
 8005368:	4618      	mov	r0, r3
 800536a:	f001 facd 	bl	8006908 <siprintf>
			sprintf(Str_dmx,"%03d",DMX_values[0]);
 800536e:	4b34      	ldr	r3, [pc, #208]	; (8005440 <Update_Display+0x1b0>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	1d3b      	adds	r3, r7, #4
 8005376:	492e      	ldr	r1, [pc, #184]	; (8005430 <Update_Display+0x1a0>)
 8005378:	4618      	mov	r0, r3
 800537a:	f001 fac5 	bl	8006908 <siprintf>
 800537e:	e00c      	b.n	800539a <Update_Display+0x10a>
		}
		else
		{
			SSD1306_GotoXY (0, 45);
 8005380:	212d      	movs	r1, #45	; 0x2d
 8005382:	2000      	movs	r0, #0
 8005384:	f7fb f850 	bl	8000428 <SSD1306_GotoXY>
			SSD1306_Puts ("SIGNAL :ERR", &Font_11x18, 1);
 8005388:	2201      	movs	r2, #1
 800538a:	492b      	ldr	r1, [pc, #172]	; (8005438 <Update_Display+0x1a8>)
 800538c:	4831      	ldr	r0, [pc, #196]	; (8005454 <Update_Display+0x1c4>)
 800538e:	f7fb f8e1 	bl	8000554 <SSD1306_Puts>
			sprintf(Str_percent,"---");
 8005392:	4b31      	ldr	r3, [pc, #196]	; (8005458 <Update_Display+0x1c8>)
 8005394:	60bb      	str	r3, [r7, #8]
			sprintf(Str_dmx,"---");
 8005396:	4b30      	ldr	r3, [pc, #192]	; (8005458 <Update_Display+0x1c8>)
 8005398:	607b      	str	r3, [r7, #4]
		}
    	SSD1306_GotoXY (25,0);
 800539a:	2100      	movs	r1, #0
 800539c:	2019      	movs	r0, #25
 800539e:	f7fb f843 	bl	8000428 <SSD1306_GotoXY>
		SSD1306_Puts (Str_percent, &Font_16x26, 1);
 80053a2:	f107 0308 	add.w	r3, r7, #8
 80053a6:	2201      	movs	r2, #1
 80053a8:	491e      	ldr	r1, [pc, #120]	; (8005424 <Update_Display+0x194>)
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fb f8d2 	bl	8000554 <SSD1306_Puts>
		SSD1306_GotoXY (74,0);
 80053b0:	2100      	movs	r1, #0
 80053b2:	204a      	movs	r0, #74	; 0x4a
 80053b4:	f7fb f838 	bl	8000428 <SSD1306_GotoXY>
		SSD1306_Puts ("%", &Font_16x26, 1);
 80053b8:	2201      	movs	r2, #1
 80053ba:	491a      	ldr	r1, [pc, #104]	; (8005424 <Update_Display+0x194>)
 80053bc:	481d      	ldr	r0, [pc, #116]	; (8005434 <Update_Display+0x1a4>)
 80053be:	f7fb f8c9 	bl	8000554 <SSD1306_Puts>
		SSD1306_GotoXY (0, 27);
 80053c2:	211b      	movs	r1, #27
 80053c4:	2000      	movs	r0, #0
 80053c6:	f7fb f82f 	bl	8000428 <SSD1306_GotoXY>
		SSD1306_Puts ("DMX ADD:", &Font_11x18, 1);
 80053ca:	2201      	movs	r2, #1
 80053cc:	491a      	ldr	r1, [pc, #104]	; (8005438 <Update_Display+0x1a8>)
 80053ce:	4823      	ldr	r0, [pc, #140]	; (800545c <Update_Display+0x1cc>)
 80053d0:	f7fb f8c0 	bl	8000554 <SSD1306_Puts>
		SSD1306_GotoXY (89, 27);
 80053d4:	211b      	movs	r1, #27
 80053d6:	2059      	movs	r0, #89	; 0x59
 80053d8:	f7fb f826 	bl	8000428 <SSD1306_GotoXY>
		SSD1306_Puts (Str_add, &Font_11x18, 1);
 80053dc:	463b      	mov	r3, r7
 80053de:	2201      	movs	r2, #1
 80053e0:	4915      	ldr	r1, [pc, #84]	; (8005438 <Update_Display+0x1a8>)
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fb f8b6 	bl	8000554 <SSD1306_Puts>
		SSD1306_GotoXY (105, 0);
 80053e8:	2100      	movs	r1, #0
 80053ea:	2069      	movs	r0, #105	; 0x69
 80053ec:	f7fb f81c 	bl	8000428 <SSD1306_GotoXY>
		SSD1306_Puts ("DMX", &Font_7x10, 1);
 80053f0:	2201      	movs	r2, #1
 80053f2:	491b      	ldr	r1, [pc, #108]	; (8005460 <Update_Display+0x1d0>)
 80053f4:	481b      	ldr	r0, [pc, #108]	; (8005464 <Update_Display+0x1d4>)
 80053f6:	f7fb f8ad 	bl	8000554 <SSD1306_Puts>
		SSD1306_GotoXY (105, 10);
 80053fa:	210a      	movs	r1, #10
 80053fc:	2069      	movs	r0, #105	; 0x69
 80053fe:	f7fb f813 	bl	8000428 <SSD1306_GotoXY>
		SSD1306_Puts (Str_dmx, &Font_7x10, 1);
 8005402:	1d3b      	adds	r3, r7, #4
 8005404:	2201      	movs	r2, #1
 8005406:	4916      	ldr	r1, [pc, #88]	; (8005460 <Update_Display+0x1d0>)
 8005408:	4618      	mov	r0, r3
 800540a:	f7fb f8a3 	bl	8000554 <SSD1306_Puts>
    }
	SSD1306_UpdateScreen(); //display
 800540e:	f7fa ff67 	bl	80002e0 <SSD1306_UpdateScreen>
}
 8005412:	bf00      	nop
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	00303030 	.word	0x00303030
 8005420:	20001910 	.word	0x20001910
 8005424:	20000010 	.word	0x20000010
 8005428:	0800714c 	.word	0x0800714c
 800542c:	200018e0 	.word	0x200018e0
 8005430:	08007150 	.word	0x08007150
 8005434:	08007158 	.word	0x08007158
 8005438:	20000008 	.word	0x20000008
 800543c:	0800715c 	.word	0x0800715c
 8005440:	20001940 	.word	0x20001940
 8005444:	80808081 	.word	0x80808081
 8005448:	20001950 	.word	0x20001950
 800544c:	200018e1 	.word	0x200018e1
 8005450:	08007168 	.word	0x08007168
 8005454:	08007174 	.word	0x08007174
 8005458:	002d2d2d 	.word	0x002d2d2d
 800545c:	08007180 	.word	0x08007180
 8005460:	20000000 	.word	0x20000000
 8005464:	0800718c 	.word	0x0800718c

08005468 <Manage_Button>:

void Manage_Button()
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
	static uint32_t time_BpUp=0;
	static uint32_t time_BpDown=0;
	static uint32_t time_BpOk=0;

	//UP
	if(!HAL_GPIO_ReadPin(T1_GPIO_Port, T1_Pin))
 800546c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005470:	484a      	ldr	r0, [pc, #296]	; (800559c <Manage_Button+0x134>)
 8005472:	f7fc f8b5 	bl	80015e0 <HAL_GPIO_ReadPin>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d126      	bne.n	80054ca <Manage_Button+0x62>
	{
		if(Bp_Up==BP_OFF)
 800547c:	4b48      	ldr	r3, [pc, #288]	; (80055a0 <Manage_Button+0x138>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d108      	bne.n	8005496 <Manage_Button+0x2e>
		{
			Bp_Up=BP_CLICK;
 8005484:	4b46      	ldr	r3, [pc, #280]	; (80055a0 <Manage_Button+0x138>)
 8005486:	2201      	movs	r2, #1
 8005488:	701a      	strb	r2, [r3, #0]
			time_BpUp = HAL_GetTick();
 800548a:	f7fb f9b7 	bl	80007fc <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	4b44      	ldr	r3, [pc, #272]	; (80055a4 <Manage_Button+0x13c>)
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	e01c      	b.n	80054d0 <Manage_Button+0x68>
		}
		else if((HAL_GetTick() > time_BpUp+TIME_LONG_BP) && Bp_Up==BP_IDLE)
 8005496:	f7fb f9b1 	bl	80007fc <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	4b41      	ldr	r3, [pc, #260]	; (80055a4 <Manage_Button+0x13c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d90c      	bls.n	80054c2 <Manage_Button+0x5a>
 80054a8:	4b3d      	ldr	r3, [pc, #244]	; (80055a0 <Manage_Button+0x138>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b03      	cmp	r3, #3
 80054ae:	d108      	bne.n	80054c2 <Manage_Button+0x5a>
		{
			time_BpUp = HAL_GetTick();
 80054b0:	f7fb f9a4 	bl	80007fc <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	4b3b      	ldr	r3, [pc, #236]	; (80055a4 <Manage_Button+0x13c>)
 80054b8:	601a      	str	r2, [r3, #0]
			Bp_Up=BP_1s;
 80054ba:	4b39      	ldr	r3, [pc, #228]	; (80055a0 <Manage_Button+0x138>)
 80054bc:	2202      	movs	r2, #2
 80054be:	701a      	strb	r2, [r3, #0]
 80054c0:	e006      	b.n	80054d0 <Manage_Button+0x68>
		}
		else
			Bp_Up = BP_IDLE;
 80054c2:	4b37      	ldr	r3, [pc, #220]	; (80055a0 <Manage_Button+0x138>)
 80054c4:	2203      	movs	r2, #3
 80054c6:	701a      	strb	r2, [r3, #0]
 80054c8:	e002      	b.n	80054d0 <Manage_Button+0x68>
	}
	else
		Bp_Up=BP_OFF;
 80054ca:	4b35      	ldr	r3, [pc, #212]	; (80055a0 <Manage_Button+0x138>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	701a      	strb	r2, [r3, #0]

	//DOWN
	if(!HAL_GPIO_ReadPin(T3_GPIO_Port, T3_Pin))
 80054d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80054d4:	4834      	ldr	r0, [pc, #208]	; (80055a8 <Manage_Button+0x140>)
 80054d6:	f7fc f883 	bl	80015e0 <HAL_GPIO_ReadPin>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d126      	bne.n	800552e <Manage_Button+0xc6>
	{
		if(Bp_Down==BP_OFF)
 80054e0:	4b32      	ldr	r3, [pc, #200]	; (80055ac <Manage_Button+0x144>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d108      	bne.n	80054fa <Manage_Button+0x92>
		{
			Bp_Down=BP_CLICK;
 80054e8:	4b30      	ldr	r3, [pc, #192]	; (80055ac <Manage_Button+0x144>)
 80054ea:	2201      	movs	r2, #1
 80054ec:	701a      	strb	r2, [r3, #0]
			time_BpDown = HAL_GetTick();
 80054ee:	f7fb f985 	bl	80007fc <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	4b2e      	ldr	r3, [pc, #184]	; (80055b0 <Manage_Button+0x148>)
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	e01c      	b.n	8005534 <Manage_Button+0xcc>
		}
		else if((HAL_GetTick() > time_BpDown+TIME_LONG_BP) && Bp_Down==BP_IDLE)
 80054fa:	f7fb f97f 	bl	80007fc <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	4b2b      	ldr	r3, [pc, #172]	; (80055b0 <Manage_Button+0x148>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005508:	429a      	cmp	r2, r3
 800550a:	d90c      	bls.n	8005526 <Manage_Button+0xbe>
 800550c:	4b27      	ldr	r3, [pc, #156]	; (80055ac <Manage_Button+0x144>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b03      	cmp	r3, #3
 8005512:	d108      	bne.n	8005526 <Manage_Button+0xbe>
		{
			time_BpDown = HAL_GetTick();
 8005514:	f7fb f972 	bl	80007fc <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	4b25      	ldr	r3, [pc, #148]	; (80055b0 <Manage_Button+0x148>)
 800551c:	601a      	str	r2, [r3, #0]
			Bp_Down=BP_1s;
 800551e:	4b23      	ldr	r3, [pc, #140]	; (80055ac <Manage_Button+0x144>)
 8005520:	2202      	movs	r2, #2
 8005522:	701a      	strb	r2, [r3, #0]
 8005524:	e006      	b.n	8005534 <Manage_Button+0xcc>
		}
		else
			Bp_Down = BP_IDLE;
 8005526:	4b21      	ldr	r3, [pc, #132]	; (80055ac <Manage_Button+0x144>)
 8005528:	2203      	movs	r2, #3
 800552a:	701a      	strb	r2, [r3, #0]
 800552c:	e002      	b.n	8005534 <Manage_Button+0xcc>
	}
	else
		Bp_Down=BP_OFF;
 800552e:	4b1f      	ldr	r3, [pc, #124]	; (80055ac <Manage_Button+0x144>)
 8005530:	2200      	movs	r2, #0
 8005532:	701a      	strb	r2, [r3, #0]

	//OK
	if(!HAL_GPIO_ReadPin(T2_GPIO_Port, T2_Pin))
 8005534:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005538:	481b      	ldr	r0, [pc, #108]	; (80055a8 <Manage_Button+0x140>)
 800553a:	f7fc f851 	bl	80015e0 <HAL_GPIO_ReadPin>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d126      	bne.n	8005592 <Manage_Button+0x12a>
	{
		if(Bp_Ok==BP_OFF)
 8005544:	4b1b      	ldr	r3, [pc, #108]	; (80055b4 <Manage_Button+0x14c>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d108      	bne.n	800555e <Manage_Button+0xf6>
		{
			Bp_Ok=BP_CLICK;
 800554c:	4b19      	ldr	r3, [pc, #100]	; (80055b4 <Manage_Button+0x14c>)
 800554e:	2201      	movs	r2, #1
 8005550:	701a      	strb	r2, [r3, #0]
			time_BpOk = HAL_GetTick();
 8005552:	f7fb f953 	bl	80007fc <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	4b17      	ldr	r3, [pc, #92]	; (80055b8 <Manage_Button+0x150>)
 800555a:	601a      	str	r2, [r3, #0]
		else
			Bp_Ok = BP_IDLE;
	}
	else
		Bp_Ok=BP_OFF;
}
 800555c:	e01c      	b.n	8005598 <Manage_Button+0x130>
		else if((HAL_GetTick()>time_BpOk+TIME_LONG_BP) && Bp_Ok==BP_IDLE)
 800555e:	f7fb f94d 	bl	80007fc <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	4b14      	ldr	r3, [pc, #80]	; (80055b8 <Manage_Button+0x150>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800556c:	429a      	cmp	r2, r3
 800556e:	d90c      	bls.n	800558a <Manage_Button+0x122>
 8005570:	4b10      	ldr	r3, [pc, #64]	; (80055b4 <Manage_Button+0x14c>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b03      	cmp	r3, #3
 8005576:	d108      	bne.n	800558a <Manage_Button+0x122>
			time_BpOk = HAL_GetTick();
 8005578:	f7fb f940 	bl	80007fc <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	4b0e      	ldr	r3, [pc, #56]	; (80055b8 <Manage_Button+0x150>)
 8005580:	601a      	str	r2, [r3, #0]
			Bp_Ok=BP_1s;
 8005582:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <Manage_Button+0x14c>)
 8005584:	2202      	movs	r2, #2
 8005586:	701a      	strb	r2, [r3, #0]
}
 8005588:	e006      	b.n	8005598 <Manage_Button+0x130>
			Bp_Ok = BP_IDLE;
 800558a:	4b0a      	ldr	r3, [pc, #40]	; (80055b4 <Manage_Button+0x14c>)
 800558c:	2203      	movs	r2, #3
 800558e:	701a      	strb	r2, [r3, #0]
}
 8005590:	e002      	b.n	8005598 <Manage_Button+0x130>
		Bp_Ok=BP_OFF;
 8005592:	4b08      	ldr	r3, [pc, #32]	; (80055b4 <Manage_Button+0x14c>)
 8005594:	2200      	movs	r2, #0
 8005596:	701a      	strb	r2, [r3, #0]
}
 8005598:	bf00      	nop
 800559a:	bd80      	pop	{r7, pc}
 800559c:	40011000 	.word	0x40011000
 80055a0:	2000194a 	.word	0x2000194a
 80055a4:	20001200 	.word	0x20001200
 80055a8:	40010c00 	.word	0x40010c00
 80055ac:	200018f4 	.word	0x200018f4
 80055b0:	20001204 	.word	0x20001204
 80055b4:	2000192c 	.word	0x2000192c
 80055b8:	20001208 	.word	0x20001208

080055bc <AppLEDTask>:

void AppLEDTask(void const * argument)
{
 80055bc:	b590      	push	{r4, r7, lr}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		osDelay(TASK_DELAY_LED);
 80055c4:	2032      	movs	r0, #50	; 0x32
 80055c6:	f7fe fc8b 	bl	8003ee0 <osDelay>

		if(Current_Mode == MODE_OFF)
 80055ca:	4b25      	ldr	r3, [pc, #148]	; (8005660 <AppLEDTask+0xa4>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d108      	bne.n	80055e4 <AppLEDTask+0x28>
			PWM_SetDuty(LED1_pwmtimer,LED1_PWMchannel,0);
 80055d2:	4b24      	ldr	r3, [pc, #144]	; (8005664 <AppLEDTask+0xa8>)
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	4b24      	ldr	r3, [pc, #144]	; (8005668 <AppLEDTask+0xac>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2200      	movs	r2, #0
 80055dc:	4619      	mov	r1, r3
 80055de:	f7fb f88d 	bl	80006fc <PWM_SetDuty>
 80055e2:	e7ef      	b.n	80055c4 <AppLEDTask+0x8>
		else if(Current_Mode == MODE_MANU)
 80055e4:	4b1e      	ldr	r3, [pc, #120]	; (8005660 <AppLEDTask+0xa4>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d112      	bne.n	8005612 <AppLEDTask+0x56>
			PWM_SetDuty(LED1_pwmtimer,LED1_PWMchannel,(uint32_t)Manu_value*255/100);
 80055ec:	4b1d      	ldr	r3, [pc, #116]	; (8005664 <AppLEDTask+0xa8>)
 80055ee:	6818      	ldr	r0, [r3, #0]
 80055f0:	4b1d      	ldr	r3, [pc, #116]	; (8005668 <AppLEDTask+0xac>)
 80055f2:	6819      	ldr	r1, [r3, #0]
 80055f4:	4b1d      	ldr	r3, [pc, #116]	; (800566c <AppLEDTask+0xb0>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	461a      	mov	r2, r3
 80055fa:	4613      	mov	r3, r2
 80055fc:	021b      	lsls	r3, r3, #8
 80055fe:	1a9b      	subs	r3, r3, r2
 8005600:	4a1b      	ldr	r2, [pc, #108]	; (8005670 <AppLEDTask+0xb4>)
 8005602:	fba2 2303 	umull	r2, r3, r2, r3
 8005606:	095b      	lsrs	r3, r3, #5
 8005608:	b29b      	uxth	r3, r3
 800560a:	461a      	mov	r2, r3
 800560c:	f7fb f876 	bl	80006fc <PWM_SetDuty>
 8005610:	e7d8      	b.n	80055c4 <AppLEDTask+0x8>
		else
		{
			DMX_values[0] = Protocol_DMX_GetValue(1);									//CHANNEL 1
 8005612:	2001      	movs	r0, #1
 8005614:	f7fe fbd8 	bl	8003dc8 <Protocol_DMX_GetValue>
 8005618:	4603      	mov	r3, r0
 800561a:	461a      	mov	r2, r3
 800561c:	4b15      	ldr	r3, [pc, #84]	; (8005674 <AppLEDTask+0xb8>)
 800561e:	701a      	strb	r2, [r3, #0]
			if(HAL_GetTick()>Protocol_DMX_GetLastTickFrame()+TIMOUT_DMX_SIGNAL)
 8005620:	f7fb f8ec 	bl	80007fc <HAL_GetTick>
 8005624:	4604      	mov	r4, r0
 8005626:	f7fe fbe7 	bl	8003df8 <Protocol_DMX_GetLastTickFrame>
 800562a:	4603      	mov	r3, r0
 800562c:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8005630:	429c      	cmp	r4, r3
 8005632:	d906      	bls.n	8005642 <AppLEDTask+0x86>
			{
				DMX_values[0]=0;				//OFF LED if no signal
 8005634:	4b0f      	ldr	r3, [pc, #60]	; (8005674 <AppLEDTask+0xb8>)
 8005636:	2200      	movs	r2, #0
 8005638:	701a      	strb	r2, [r3, #0]
				DMX_signal_OK = __FALSE;
 800563a:	4b0f      	ldr	r3, [pc, #60]	; (8005678 <AppLEDTask+0xbc>)
 800563c:	2200      	movs	r2, #0
 800563e:	701a      	strb	r2, [r3, #0]
 8005640:	e002      	b.n	8005648 <AppLEDTask+0x8c>
			}
			else
			{
				DMX_signal_OK = __TRUE;
 8005642:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <AppLEDTask+0xbc>)
 8005644:	2201      	movs	r2, #1
 8005646:	701a      	strb	r2, [r3, #0]
			}
			PWM_SetDuty(LED1_pwmtimer,LED1_PWMchannel,(uint32_t)DMX_values[0]);
 8005648:	4b06      	ldr	r3, [pc, #24]	; (8005664 <AppLEDTask+0xa8>)
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	4b06      	ldr	r3, [pc, #24]	; (8005668 <AppLEDTask+0xac>)
 800564e:	6819      	ldr	r1, [r3, #0]
 8005650:	4b08      	ldr	r3, [pc, #32]	; (8005674 <AppLEDTask+0xb8>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	b29b      	uxth	r3, r3
 8005656:	461a      	mov	r2, r3
 8005658:	f7fb f850 	bl	80006fc <PWM_SetDuty>
		osDelay(TASK_DELAY_LED);
 800565c:	e7b2      	b.n	80055c4 <AppLEDTask+0x8>
 800565e:	bf00      	nop
 8005660:	20001910 	.word	0x20001910
 8005664:	20001908 	.word	0x20001908
 8005668:	200018dc 	.word	0x200018dc
 800566c:	200018e0 	.word	0x200018e0
 8005670:	51eb851f 	.word	0x51eb851f
 8005674:	20001940 	.word	0x20001940
 8005678:	200018e1 	.word	0x200018e1

0800567c <AppIHMTask>:
		}
	}
}

void AppIHMTask(void const * argument)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
	uint32_t cpt_refresh=0;
 8005684:	2300      	movs	r3, #0
 8005686:	617b      	str	r3, [r7, #20]
	uint32_t tick_save_param;
	uint32_t param_changed = __FALSE;
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		osDelay(TASK_DELAY_IHM);
 800568c:	2032      	movs	r0, #50	; 0x32
 800568e:	f7fe fc27 	bl	8003ee0 <osDelay>

		cpt_refresh++;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	3301      	adds	r3, #1
 8005696:	617b      	str	r3, [r7, #20]
		if(cpt_refresh>=REFRESH_DISPLAY)
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2b04      	cmp	r3, #4
 800569c:	d903      	bls.n	80056a6 <AppIHMTask+0x2a>
		{
			Update_Display();
 800569e:	f7ff fdf7 	bl	8005290 <Update_Display>
			cpt_refresh=0;
 80056a2:	2300      	movs	r3, #0
 80056a4:	617b      	str	r3, [r7, #20]
		}

		Manage_Button();
 80056a6:	f7ff fedf 	bl	8005468 <Manage_Button>

		if(Bp_Ok == BP_CLICK)
 80056aa:	4b81      	ldr	r3, [pc, #516]	; (80058b0 <AppIHMTask+0x234>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d117      	bne.n	80056e2 <AppIHMTask+0x66>
		{
			if(Current_Mode==MODE_OFF)
 80056b2:	4b80      	ldr	r3, [pc, #512]	; (80058b4 <AppIHMTask+0x238>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d103      	bne.n	80056c2 <AppIHMTask+0x46>
				Current_Mode=MODE_MANU;
 80056ba:	4b7e      	ldr	r3, [pc, #504]	; (80058b4 <AppIHMTask+0x238>)
 80056bc:	2202      	movs	r2, #2
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	e00a      	b.n	80056d8 <AppIHMTask+0x5c>
			else if(Current_Mode==MODE_MANU)
 80056c2:	4b7c      	ldr	r3, [pc, #496]	; (80058b4 <AppIHMTask+0x238>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d103      	bne.n	80056d2 <AppIHMTask+0x56>
				Current_Mode=MODE_DMX;
 80056ca:	4b7a      	ldr	r3, [pc, #488]	; (80058b4 <AppIHMTask+0x238>)
 80056cc:	2201      	movs	r2, #1
 80056ce:	701a      	strb	r2, [r3, #0]
 80056d0:	e002      	b.n	80056d8 <AppIHMTask+0x5c>
			else
				Current_Mode=MODE_OFF;
 80056d2:	4b78      	ldr	r3, [pc, #480]	; (80058b4 <AppIHMTask+0x238>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	701a      	strb	r2, [r3, #0]

			param_changed = __TRUE;
 80056d8:	2301      	movs	r3, #1
 80056da:	60fb      	str	r3, [r7, #12]
			tick_save_param = HAL_GetTick();
 80056dc:	f7fb f88e 	bl	80007fc <HAL_GetTick>
 80056e0:	6138      	str	r0, [r7, #16]
		}

		if(Current_Mode==MODE_MANU)
 80056e2:	4b74      	ldr	r3, [pc, #464]	; (80058b4 <AppIHMTask+0x238>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d153      	bne.n	8005792 <AppIHMTask+0x116>
		{
			if(Bp_Up == BP_CLICK)
 80056ea:	4b73      	ldr	r3, [pc, #460]	; (80058b8 <AppIHMTask+0x23c>)
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d10e      	bne.n	8005710 <AppIHMTask+0x94>
			{
				if(Manu_value<100)
 80056f2:	4b72      	ldr	r3, [pc, #456]	; (80058bc <AppIHMTask+0x240>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b63      	cmp	r3, #99	; 0x63
 80056f8:	d805      	bhi.n	8005706 <AppIHMTask+0x8a>
					Manu_value++;
 80056fa:	4b70      	ldr	r3, [pc, #448]	; (80058bc <AppIHMTask+0x240>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	3301      	adds	r3, #1
 8005700:	b2da      	uxtb	r2, r3
 8005702:	4b6e      	ldr	r3, [pc, #440]	; (80058bc <AppIHMTask+0x240>)
 8005704:	701a      	strb	r2, [r3, #0]
				param_changed = __TRUE;
 8005706:	2301      	movs	r3, #1
 8005708:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 800570a:	f7fb f877 	bl	80007fc <HAL_GetTick>
 800570e:	6138      	str	r0, [r7, #16]
			}
			if(Bp_Up == BP_1s)
 8005710:	4b69      	ldr	r3, [pc, #420]	; (80058b8 <AppIHMTask+0x23c>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b02      	cmp	r3, #2
 8005716:	d112      	bne.n	800573e <AppIHMTask+0xc2>
			{
				if(Manu_value<=90)
 8005718:	4b68      	ldr	r3, [pc, #416]	; (80058bc <AppIHMTask+0x240>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b5a      	cmp	r3, #90	; 0x5a
 800571e:	d806      	bhi.n	800572e <AppIHMTask+0xb2>
					Manu_value+=10;
 8005720:	4b66      	ldr	r3, [pc, #408]	; (80058bc <AppIHMTask+0x240>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	330a      	adds	r3, #10
 8005726:	b2da      	uxtb	r2, r3
 8005728:	4b64      	ldr	r3, [pc, #400]	; (80058bc <AppIHMTask+0x240>)
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	e002      	b.n	8005734 <AppIHMTask+0xb8>
				else
					Manu_value=100;
 800572e:	4b63      	ldr	r3, [pc, #396]	; (80058bc <AppIHMTask+0x240>)
 8005730:	2264      	movs	r2, #100	; 0x64
 8005732:	701a      	strb	r2, [r3, #0]
				param_changed = __TRUE;
 8005734:	2301      	movs	r3, #1
 8005736:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 8005738:	f7fb f860 	bl	80007fc <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]
			}
			if(Bp_Down == BP_CLICK)
 800573e:	4b60      	ldr	r3, [pc, #384]	; (80058c0 <AppIHMTask+0x244>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d10e      	bne.n	8005764 <AppIHMTask+0xe8>
			{
				if(Manu_value>0)
 8005746:	4b5d      	ldr	r3, [pc, #372]	; (80058bc <AppIHMTask+0x240>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d005      	beq.n	800575a <AppIHMTask+0xde>
					Manu_value--;
 800574e:	4b5b      	ldr	r3, [pc, #364]	; (80058bc <AppIHMTask+0x240>)
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	3b01      	subs	r3, #1
 8005754:	b2da      	uxtb	r2, r3
 8005756:	4b59      	ldr	r3, [pc, #356]	; (80058bc <AppIHMTask+0x240>)
 8005758:	701a      	strb	r2, [r3, #0]
				param_changed = __TRUE;
 800575a:	2301      	movs	r3, #1
 800575c:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 800575e:	f7fb f84d 	bl	80007fc <HAL_GetTick>
 8005762:	6138      	str	r0, [r7, #16]
			}
			if(Bp_Down == BP_1s)
 8005764:	4b56      	ldr	r3, [pc, #344]	; (80058c0 <AppIHMTask+0x244>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d112      	bne.n	8005792 <AppIHMTask+0x116>
			{
				if(Manu_value>=10)
 800576c:	4b53      	ldr	r3, [pc, #332]	; (80058bc <AppIHMTask+0x240>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b09      	cmp	r3, #9
 8005772:	d906      	bls.n	8005782 <AppIHMTask+0x106>
					Manu_value-=10;
 8005774:	4b51      	ldr	r3, [pc, #324]	; (80058bc <AppIHMTask+0x240>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	3b0a      	subs	r3, #10
 800577a:	b2da      	uxtb	r2, r3
 800577c:	4b4f      	ldr	r3, [pc, #316]	; (80058bc <AppIHMTask+0x240>)
 800577e:	701a      	strb	r2, [r3, #0]
 8005780:	e002      	b.n	8005788 <AppIHMTask+0x10c>
				else
					Manu_value=0;
 8005782:	4b4e      	ldr	r3, [pc, #312]	; (80058bc <AppIHMTask+0x240>)
 8005784:	2200      	movs	r2, #0
 8005786:	701a      	strb	r2, [r3, #0]
				param_changed = __TRUE;
 8005788:	2301      	movs	r3, #1
 800578a:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 800578c:	f7fb f836 	bl	80007fc <HAL_GetTick>
 8005790:	6138      	str	r0, [r7, #16]
			}
		}

		if(Current_Mode==MODE_DMX)
 8005792:	4b48      	ldr	r3, [pc, #288]	; (80058b4 <AppIHMTask+0x238>)
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d176      	bne.n	8005888 <AppIHMTask+0x20c>
		{
			if(Bp_Up == BP_CLICK)
 800579a:	4b47      	ldr	r3, [pc, #284]	; (80058b8 <AppIHMTask+0x23c>)
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d117      	bne.n	80057d2 <AppIHMTask+0x156>
			{
				if(DMX_Adress<512)
 80057a2:	4b48      	ldr	r3, [pc, #288]	; (80058c4 <AppIHMTask+0x248>)
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057aa:	d205      	bcs.n	80057b8 <AppIHMTask+0x13c>
					DMX_Adress++;
 80057ac:	4b45      	ldr	r3, [pc, #276]	; (80058c4 <AppIHMTask+0x248>)
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	3301      	adds	r3, #1
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	4b43      	ldr	r3, [pc, #268]	; (80058c4 <AppIHMTask+0x248>)
 80057b6:	801a      	strh	r2, [r3, #0]
				param_changed = __TRUE;
 80057b8:	2301      	movs	r3, #1
 80057ba:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 80057bc:	f7fb f81e 	bl	80007fc <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]
				Protocol_DMX_init(DMX_Adress,DMX_uart);
 80057c2:	4b40      	ldr	r3, [pc, #256]	; (80058c4 <AppIHMTask+0x248>)
 80057c4:	881a      	ldrh	r2, [r3, #0]
 80057c6:	4b40      	ldr	r3, [pc, #256]	; (80058c8 <AppIHMTask+0x24c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4619      	mov	r1, r3
 80057cc:	4610      	mov	r0, r2
 80057ce:	f7fe fa2b 	bl	8003c28 <Protocol_DMX_init>
			}
			if(Bp_Up == BP_1s)
 80057d2:	4b39      	ldr	r3, [pc, #228]	; (80058b8 <AppIHMTask+0x23c>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d11c      	bne.n	8005814 <AppIHMTask+0x198>
			{
				if(DMX_Adress<=502)
 80057da:	4b3a      	ldr	r3, [pc, #232]	; (80058c4 <AppIHMTask+0x248>)
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 80057e2:	d806      	bhi.n	80057f2 <AppIHMTask+0x176>
					DMX_Adress+=10;
 80057e4:	4b37      	ldr	r3, [pc, #220]	; (80058c4 <AppIHMTask+0x248>)
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	330a      	adds	r3, #10
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	4b35      	ldr	r3, [pc, #212]	; (80058c4 <AppIHMTask+0x248>)
 80057ee:	801a      	strh	r2, [r3, #0]
 80057f0:	e003      	b.n	80057fa <AppIHMTask+0x17e>
				else
					DMX_Adress=512;
 80057f2:	4b34      	ldr	r3, [pc, #208]	; (80058c4 <AppIHMTask+0x248>)
 80057f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057f8:	801a      	strh	r2, [r3, #0]
				param_changed = __TRUE;
 80057fa:	2301      	movs	r3, #1
 80057fc:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 80057fe:	f7fa fffd 	bl	80007fc <HAL_GetTick>
 8005802:	6138      	str	r0, [r7, #16]
				Protocol_DMX_init(DMX_Adress,DMX_uart);
 8005804:	4b2f      	ldr	r3, [pc, #188]	; (80058c4 <AppIHMTask+0x248>)
 8005806:	881a      	ldrh	r2, [r3, #0]
 8005808:	4b2f      	ldr	r3, [pc, #188]	; (80058c8 <AppIHMTask+0x24c>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4619      	mov	r1, r3
 800580e:	4610      	mov	r0, r2
 8005810:	f7fe fa0a 	bl	8003c28 <Protocol_DMX_init>
			}
			if(Bp_Down == BP_CLICK)
 8005814:	4b2a      	ldr	r3, [pc, #168]	; (80058c0 <AppIHMTask+0x244>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d116      	bne.n	800584a <AppIHMTask+0x1ce>
			{
				if(DMX_Adress>1)
 800581c:	4b29      	ldr	r3, [pc, #164]	; (80058c4 <AppIHMTask+0x248>)
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d905      	bls.n	8005830 <AppIHMTask+0x1b4>
					DMX_Adress--;
 8005824:	4b27      	ldr	r3, [pc, #156]	; (80058c4 <AppIHMTask+0x248>)
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	3b01      	subs	r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	4b25      	ldr	r3, [pc, #148]	; (80058c4 <AppIHMTask+0x248>)
 800582e:	801a      	strh	r2, [r3, #0]
				param_changed = __TRUE;
 8005830:	2301      	movs	r3, #1
 8005832:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 8005834:	f7fa ffe2 	bl	80007fc <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]
				Protocol_DMX_init(DMX_Adress,DMX_uart);
 800583a:	4b22      	ldr	r3, [pc, #136]	; (80058c4 <AppIHMTask+0x248>)
 800583c:	881a      	ldrh	r2, [r3, #0]
 800583e:	4b22      	ldr	r3, [pc, #136]	; (80058c8 <AppIHMTask+0x24c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4619      	mov	r1, r3
 8005844:	4610      	mov	r0, r2
 8005846:	f7fe f9ef 	bl	8003c28 <Protocol_DMX_init>
			}
			if(Bp_Down == BP_1s)
 800584a:	4b1d      	ldr	r3, [pc, #116]	; (80058c0 <AppIHMTask+0x244>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	2b02      	cmp	r3, #2
 8005850:	d11a      	bne.n	8005888 <AppIHMTask+0x20c>
			{
				if(DMX_Adress>=11)
 8005852:	4b1c      	ldr	r3, [pc, #112]	; (80058c4 <AppIHMTask+0x248>)
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	2b0a      	cmp	r3, #10
 8005858:	d906      	bls.n	8005868 <AppIHMTask+0x1ec>
					DMX_Adress-=10;
 800585a:	4b1a      	ldr	r3, [pc, #104]	; (80058c4 <AppIHMTask+0x248>)
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	3b0a      	subs	r3, #10
 8005860:	b29a      	uxth	r2, r3
 8005862:	4b18      	ldr	r3, [pc, #96]	; (80058c4 <AppIHMTask+0x248>)
 8005864:	801a      	strh	r2, [r3, #0]
 8005866:	e002      	b.n	800586e <AppIHMTask+0x1f2>
				else
					DMX_Adress=1;
 8005868:	4b16      	ldr	r3, [pc, #88]	; (80058c4 <AppIHMTask+0x248>)
 800586a:	2201      	movs	r2, #1
 800586c:	801a      	strh	r2, [r3, #0]
				param_changed = __TRUE;
 800586e:	2301      	movs	r3, #1
 8005870:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 8005872:	f7fa ffc3 	bl	80007fc <HAL_GetTick>
 8005876:	6138      	str	r0, [r7, #16]
				Protocol_DMX_init(DMX_Adress,DMX_uart);
 8005878:	4b12      	ldr	r3, [pc, #72]	; (80058c4 <AppIHMTask+0x248>)
 800587a:	881a      	ldrh	r2, [r3, #0]
 800587c:	4b12      	ldr	r3, [pc, #72]	; (80058c8 <AppIHMTask+0x24c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4619      	mov	r1, r3
 8005882:	4610      	mov	r0, r2
 8005884:	f7fe f9d0 	bl	8003c28 <Protocol_DMX_init>
			}
		}

		if(HAL_GetTick()>tick_save_param+DELAY_SAVE_PARAM && param_changed==__TRUE)
 8005888:	f7fa ffb8 	bl	80007fc <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8005894:	3308      	adds	r3, #8
 8005896:	429a      	cmp	r2, r3
 8005898:	f67f aef8 	bls.w	800568c <AppIHMTask+0x10>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	f47f aef4 	bne.w	800568c <AppIHMTask+0x10>
		{
			param_changed = __FALSE;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]
			Write_Param();
 80058a8:	f7ff fcc4 	bl	8005234 <Write_Param>
		osDelay(TASK_DELAY_IHM);
 80058ac:	e6ee      	b.n	800568c <AppIHMTask+0x10>
 80058ae:	bf00      	nop
 80058b0:	2000192c 	.word	0x2000192c
 80058b4:	20001910 	.word	0x20001910
 80058b8:	2000194a 	.word	0x2000194a
 80058bc:	200018e0 	.word	0x200018e0
 80058c0:	200018f4 	.word	0x200018f4
 80058c4:	20001950 	.word	0x20001950
 80058c8:	20001900 	.word	0x20001900

080058cc <App_Init>:
	}
}

/* Public function -----------------------------------------------*/
void App_Init()
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
	Load_Param();
 80058d0:	f7ff fc78 	bl	80051c4 <Load_Param>

	DMX_signal_OK = __FALSE;
 80058d4:	4b36      	ldr	r3, [pc, #216]	; (80059b0 <App_Init+0xe4>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	701a      	strb	r2, [r3, #0]

	PWM_SetPWM(LED1_pwmtimer,LED1_PWMchannel,LED_PWM_PERIOD_VALUE,0);		//PWM Off
 80058da:	4b36      	ldr	r3, [pc, #216]	; (80059b4 <App_Init+0xe8>)
 80058dc:	6818      	ldr	r0, [r3, #0]
 80058de:	4b36      	ldr	r3, [pc, #216]	; (80059b8 <App_Init+0xec>)
 80058e0:	6819      	ldr	r1, [r3, #0]
 80058e2:	2300      	movs	r3, #0
 80058e4:	22ff      	movs	r2, #255	; 0xff
 80058e6:	f7fa fedd 	bl	80006a4 <PWM_SetPWM>
	PWM_SetPWM(LED2_pwmtimer,LED2_PWMchannel,LED_PWM_PERIOD_VALUE,0);		//PWM Off
 80058ea:	4b34      	ldr	r3, [pc, #208]	; (80059bc <App_Init+0xf0>)
 80058ec:	6818      	ldr	r0, [r3, #0]
 80058ee:	4b34      	ldr	r3, [pc, #208]	; (80059c0 <App_Init+0xf4>)
 80058f0:	6819      	ldr	r1, [r3, #0]
 80058f2:	2300      	movs	r3, #0
 80058f4:	22ff      	movs	r2, #255	; 0xff
 80058f6:	f7fa fed5 	bl	80006a4 <PWM_SetPWM>
	PWM_SetPWM(LED3_pwmtimer,LED3_PWMchannel,LED_PWM_PERIOD_VALUE,0);		//PWM Off
 80058fa:	4b32      	ldr	r3, [pc, #200]	; (80059c4 <App_Init+0xf8>)
 80058fc:	6818      	ldr	r0, [r3, #0]
 80058fe:	4b32      	ldr	r3, [pc, #200]	; (80059c8 <App_Init+0xfc>)
 8005900:	6819      	ldr	r1, [r3, #0]
 8005902:	2300      	movs	r3, #0
 8005904:	22ff      	movs	r2, #255	; 0xff
 8005906:	f7fa fecd 	bl	80006a4 <PWM_SetPWM>
	PWM_SetPWM(LED4_pwmtimer,LED4_PWMchannel,LED_PWM_PERIOD_VALUE,0);		//PWM Off
 800590a:	4b30      	ldr	r3, [pc, #192]	; (80059cc <App_Init+0x100>)
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	4b30      	ldr	r3, [pc, #192]	; (80059d0 <App_Init+0x104>)
 8005910:	6819      	ldr	r1, [r3, #0]
 8005912:	2300      	movs	r3, #0
 8005914:	22ff      	movs	r2, #255	; 0xff
 8005916:	f7fa fec5 	bl	80006a4 <PWM_SetPWM>
	PWM_SetPWM(LED5_pwmtimer,LED5_PWMchannel,LED_PWM_PERIOD_VALUE,0);		//PWM Off
 800591a:	4b2e      	ldr	r3, [pc, #184]	; (80059d4 <App_Init+0x108>)
 800591c:	6818      	ldr	r0, [r3, #0]
 800591e:	4b2e      	ldr	r3, [pc, #184]	; (80059d8 <App_Init+0x10c>)
 8005920:	6819      	ldr	r1, [r3, #0]
 8005922:	2300      	movs	r3, #0
 8005924:	22ff      	movs	r2, #255	; 0xff
 8005926:	f7fa febd 	bl	80006a4 <PWM_SetPWM>
	PWM_SetPWM(LED6_pwmtimer,LED6_PWMchannel,LED_PWM_PERIOD_VALUE,0);		//PWM Off
 800592a:	4b2c      	ldr	r3, [pc, #176]	; (80059dc <App_Init+0x110>)
 800592c:	6818      	ldr	r0, [r3, #0]
 800592e:	4b2c      	ldr	r3, [pc, #176]	; (80059e0 <App_Init+0x114>)
 8005930:	6819      	ldr	r1, [r3, #0]
 8005932:	2300      	movs	r3, #0
 8005934:	22ff      	movs	r2, #255	; 0xff
 8005936:	f7fa feb5 	bl	80006a4 <PWM_SetPWM>
	PWM_SetPWM(LED7_pwmtimer,LED7_PWMchannel,LED_PWM_PERIOD_VALUE,0);		//PWM Off
 800593a:	4b2a      	ldr	r3, [pc, #168]	; (80059e4 <App_Init+0x118>)
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	4b2a      	ldr	r3, [pc, #168]	; (80059e8 <App_Init+0x11c>)
 8005940:	6819      	ldr	r1, [r3, #0]
 8005942:	2300      	movs	r3, #0
 8005944:	22ff      	movs	r2, #255	; 0xff
 8005946:	f7fa fead 	bl	80006a4 <PWM_SetPWM>
	PWM_SetPWM(LED8_pwmtimer,LED8_PWMchannel,LED_PWM_PERIOD_VALUE,0);		//PWM Off
 800594a:	4b28      	ldr	r3, [pc, #160]	; (80059ec <App_Init+0x120>)
 800594c:	6818      	ldr	r0, [r3, #0]
 800594e:	4b28      	ldr	r3, [pc, #160]	; (80059f0 <App_Init+0x124>)
 8005950:	6819      	ldr	r1, [r3, #0]
 8005952:	2300      	movs	r3, #0
 8005954:	22ff      	movs	r2, #255	; 0xff
 8005956:	f7fa fea5 	bl	80006a4 <PWM_SetPWM>
	PWM_SetPWM(LED9_pwmtimer,LED9_PWMchannel,LED_PWM_PERIOD_VALUE,0);		//PWM Off*/
 800595a:	4b26      	ldr	r3, [pc, #152]	; (80059f4 <App_Init+0x128>)
 800595c:	6818      	ldr	r0, [r3, #0]
 800595e:	4b26      	ldr	r3, [pc, #152]	; (80059f8 <App_Init+0x12c>)
 8005960:	6819      	ldr	r1, [r3, #0]
 8005962:	2300      	movs	r3, #0
 8005964:	22ff      	movs	r2, #255	; 0xff
 8005966:	f7fa fe9d 	bl	80006a4 <PWM_SetPWM>
	PWM_SetPWM(LED10_pwmtimer,LED10_PWMchannel,LED_PWM_PERIOD_VALUE,10);		//PWM Off
 800596a:	4b24      	ldr	r3, [pc, #144]	; (80059fc <App_Init+0x130>)
 800596c:	6818      	ldr	r0, [r3, #0]
 800596e:	4b24      	ldr	r3, [pc, #144]	; (8005a00 <App_Init+0x134>)
 8005970:	6819      	ldr	r1, [r3, #0]
 8005972:	230a      	movs	r3, #10
 8005974:	22ff      	movs	r2, #255	; 0xff
 8005976:	f7fa fe95 	bl	80006a4 <PWM_SetPWM>

	Protocol_DMX_init(DMX_Adress,DMX_uart);
 800597a:	4b22      	ldr	r3, [pc, #136]	; (8005a04 <App_Init+0x138>)
 800597c:	881a      	ldrh	r2, [r3, #0]
 800597e:	4b22      	ldr	r3, [pc, #136]	; (8005a08 <App_Init+0x13c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4619      	mov	r1, r3
 8005984:	4610      	mov	r0, r2
 8005986:	f7fe f94f 	bl	8003c28 <Protocol_DMX_init>
	SSD1306_Init(hi2c_display);  // initialise
 800598a:	4b20      	ldr	r3, [pc, #128]	; (8005a0c <App_Init+0x140>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4618      	mov	r0, r3
 8005990:	f7fa fbde 	bl	8000150 <SSD1306_Init>

	Bp_Up = BP_OFF;
 8005994:	4b1e      	ldr	r3, [pc, #120]	; (8005a10 <App_Init+0x144>)
 8005996:	2200      	movs	r2, #0
 8005998:	701a      	strb	r2, [r3, #0]
	Bp_Down = BP_OFF;
 800599a:	4b1e      	ldr	r3, [pc, #120]	; (8005a14 <App_Init+0x148>)
 800599c:	2200      	movs	r2, #0
 800599e:	701a      	strb	r2, [r3, #0]
	Bp_Ok = BP_OFF;
 80059a0:	4b1d      	ldr	r3, [pc, #116]	; (8005a18 <App_Init+0x14c>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	701a      	strb	r2, [r3, #0]

	CreatAppTasks();
 80059a6:	f000 f839 	bl	8005a1c <CreatAppTasks>
}
 80059aa:	bf00      	nop
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	200018e1 	.word	0x200018e1
 80059b4:	20001908 	.word	0x20001908
 80059b8:	200018dc 	.word	0x200018dc
 80059bc:	20001934 	.word	0x20001934
 80059c0:	200018ec 	.word	0x200018ec
 80059c4:	200018f8 	.word	0x200018f8
 80059c8:	20001914 	.word	0x20001914
 80059cc:	20001924 	.word	0x20001924
 80059d0:	20001938 	.word	0x20001938
 80059d4:	200018d4 	.word	0x200018d4
 80059d8:	2000194c 	.word	0x2000194c
 80059dc:	2000190c 	.word	0x2000190c
 80059e0:	200018fc 	.word	0x200018fc
 80059e4:	20001918 	.word	0x20001918
 80059e8:	2000191c 	.word	0x2000191c
 80059ec:	20001954 	.word	0x20001954
 80059f0:	20001928 	.word	0x20001928
 80059f4:	20001930 	.word	0x20001930
 80059f8:	200018d8 	.word	0x200018d8
 80059fc:	200018e4 	.word	0x200018e4
 8005a00:	20001920 	.word	0x20001920
 8005a04:	20001950 	.word	0x20001950
 8005a08:	20001900 	.word	0x20001900
 8005a0c:	200018f0 	.word	0x200018f0
 8005a10:	2000194a 	.word	0x2000194a
 8005a14:	200018f4 	.word	0x200018f4
 8005a18:	2000192c 	.word	0x2000192c

08005a1c <CreatAppTasks>:

void CreatAppTasks (void)
{
 8005a1c:	b5b0      	push	{r4, r5, r7, lr}
 8005a1e:	b08e      	sub	sp, #56	; 0x38
 8005a20:	af00      	add	r7, sp, #0
	osThreadDef(App_LED_Task, AppLEDTask, osPriorityHigh, 0, 128);
 8005a22:	4b14      	ldr	r3, [pc, #80]	; (8005a74 <CreatAppTasks+0x58>)
 8005a24:	f107 041c 	add.w	r4, r7, #28
 8005a28:	461d      	mov	r5, r3
 8005a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005a32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	AppLEDTaskHandle = osThreadCreate(osThread(App_LED_Task), NULL);
 8005a36:	f107 031c 	add.w	r3, r7, #28
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fe fa03 	bl	8003e48 <osThreadCreate>
 8005a42:	4602      	mov	r2, r0
 8005a44:	4b0c      	ldr	r3, [pc, #48]	; (8005a78 <CreatAppTasks+0x5c>)
 8005a46:	601a      	str	r2, [r3, #0]

	osThreadDef(App_IHM_Task, AppIHMTask, osPriorityNormal, 0, 256);
 8005a48:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <CreatAppTasks+0x60>)
 8005a4a:	463c      	mov	r4, r7
 8005a4c:	461d      	mov	r5, r3
 8005a4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005a56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	AppIHMTaskHandle = osThreadCreate(osThread(App_IHM_Task), NULL);
 8005a5a:	463b      	mov	r3, r7
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fe f9f2 	bl	8003e48 <osThreadCreate>
 8005a64:	4602      	mov	r2, r0
 8005a66:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <CreatAppTasks+0x64>)
 8005a68:	601a      	str	r2, [r3, #0]
}
 8005a6a:	bf00      	nop
 8005a6c:	3738      	adds	r7, #56	; 0x38
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bdb0      	pop	{r4, r5, r7, pc}
 8005a72:	bf00      	nop
 8005a74:	080071a0 	.word	0x080071a0
 8005a78:	20001958 	.word	0x20001958
 8005a7c:	080071cc 	.word	0x080071cc
 8005a80:	20001904 	.word	0x20001904

08005a84 <HAL_UART_RxCpltCallback>:


HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
	Protocol_DMX_UartCallback(huart);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7fe f92b 	bl	8003ce8 <Protocol_DMX_UartCallback>
}
 8005a92:	bf00      	nop
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
	...

08005a9c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8005aa2:	1d3b      	adds	r3, r7, #4
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	605a      	str	r2, [r3, #4]
 8005aaa:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8005aac:	4b18      	ldr	r3, [pc, #96]	; (8005b10 <MX_ADC1_Init+0x74>)
 8005aae:	4a19      	ldr	r2, [pc, #100]	; (8005b14 <MX_ADC1_Init+0x78>)
 8005ab0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005ab2:	4b17      	ldr	r3, [pc, #92]	; (8005b10 <MX_ADC1_Init+0x74>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005ab8:	4b15      	ldr	r3, [pc, #84]	; (8005b10 <MX_ADC1_Init+0x74>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005abe:	4b14      	ldr	r3, [pc, #80]	; (8005b10 <MX_ADC1_Init+0x74>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005ac4:	4b12      	ldr	r3, [pc, #72]	; (8005b10 <MX_ADC1_Init+0x74>)
 8005ac6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005aca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005acc:	4b10      	ldr	r3, [pc, #64]	; (8005b10 <MX_ADC1_Init+0x74>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8005ad2:	4b0f      	ldr	r3, [pc, #60]	; (8005b10 <MX_ADC1_Init+0x74>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005ad8:	480d      	ldr	r0, [pc, #52]	; (8005b10 <MX_ADC1_Init+0x74>)
 8005ada:	f7fa fe99 	bl	8000810 <HAL_ADC_Init>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8005ae4:	f000 fa10 	bl	8005f08 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005ae8:	2309      	movs	r3, #9
 8005aea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005aec:	2301      	movs	r3, #1
 8005aee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005af0:	2300      	movs	r3, #0
 8005af2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005af4:	1d3b      	adds	r3, r7, #4
 8005af6:	4619      	mov	r1, r3
 8005af8:	4805      	ldr	r0, [pc, #20]	; (8005b10 <MX_ADC1_Init+0x74>)
 8005afa:	f7fa ff61 	bl	80009c0 <HAL_ADC_ConfigChannel>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8005b04:	f000 fa00 	bl	8005f08 <Error_Handler>
  }

}
 8005b08:	bf00      	nop
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	2000195c 	.word	0x2000195c
 8005b14:	40012400 	.word	0x40012400

08005b18 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b08a      	sub	sp, #40	; 0x28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b20:	f107 0318 	add.w	r3, r7, #24
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	605a      	str	r2, [r3, #4]
 8005b2a:	609a      	str	r2, [r3, #8]
 8005b2c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a1f      	ldr	r2, [pc, #124]	; (8005bb0 <HAL_ADC_MspInit+0x98>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d137      	bne.n	8005ba8 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005b38:	4b1e      	ldr	r3, [pc, #120]	; (8005bb4 <HAL_ADC_MspInit+0x9c>)
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	4a1d      	ldr	r2, [pc, #116]	; (8005bb4 <HAL_ADC_MspInit+0x9c>)
 8005b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b42:	6193      	str	r3, [r2, #24]
 8005b44:	4b1b      	ldr	r3, [pc, #108]	; (8005bb4 <HAL_ADC_MspInit+0x9c>)
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b50:	4b18      	ldr	r3, [pc, #96]	; (8005bb4 <HAL_ADC_MspInit+0x9c>)
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	4a17      	ldr	r2, [pc, #92]	; (8005bb4 <HAL_ADC_MspInit+0x9c>)
 8005b56:	f043 0304 	orr.w	r3, r3, #4
 8005b5a:	6193      	str	r3, [r2, #24]
 8005b5c:	4b15      	ldr	r3, [pc, #84]	; (8005bb4 <HAL_ADC_MspInit+0x9c>)
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	613b      	str	r3, [r7, #16]
 8005b66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b68:	4b12      	ldr	r3, [pc, #72]	; (8005bb4 <HAL_ADC_MspInit+0x9c>)
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	4a11      	ldr	r2, [pc, #68]	; (8005bb4 <HAL_ADC_MspInit+0x9c>)
 8005b6e:	f043 0308 	orr.w	r3, r3, #8
 8005b72:	6193      	str	r3, [r2, #24]
 8005b74:	4b0f      	ldr	r3, [pc, #60]	; (8005bb4 <HAL_ADC_MspInit+0x9c>)
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = CTN_Pin;
 8005b80:	2380      	movs	r3, #128	; 0x80
 8005b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b84:	2303      	movs	r3, #3
 8005b86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CTN_GPIO_Port, &GPIO_InitStruct);
 8005b88:	f107 0318 	add.w	r3, r7, #24
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	480a      	ldr	r0, [pc, #40]	; (8005bb8 <HAL_ADC_MspInit+0xa0>)
 8005b90:	f7fb fbcc 	bl	800132c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VOLTAGE_Pin;
 8005b94:	2302      	movs	r3, #2
 8005b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8005b9c:	f107 0318 	add.w	r3, r7, #24
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	4806      	ldr	r0, [pc, #24]	; (8005bbc <HAL_ADC_MspInit+0xa4>)
 8005ba4:	f7fb fbc2 	bl	800132c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005ba8:	bf00      	nop
 8005baa:	3728      	adds	r7, #40	; 0x28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40012400 	.word	0x40012400
 8005bb4:	40021000 	.word	0x40021000
 8005bb8:	40010800 	.word	0x40010800
 8005bbc:	40010c00 	.word	0x40010c00

08005bc0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4a06      	ldr	r2, [pc, #24]	; (8005be8 <vApplicationGetIdleTaskMemory+0x28>)
 8005bd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	4a05      	ldr	r2, [pc, #20]	; (8005bec <vApplicationGetIdleTaskMemory+0x2c>)
 8005bd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2280      	movs	r2, #128	; 0x80
 8005bdc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8005bde:	bf00      	nop
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bc80      	pop	{r7}
 8005be6:	4770      	bx	lr
 8005be8:	2000120c 	.word	0x2000120c
 8005bec:	20001260 	.word	0x20001260

08005bf0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8005bf0:	b5b0      	push	{r4, r5, r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8005bf6:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <MX_FREERTOS_Init+0x30>)
 8005bf8:	1d3c      	adds	r4, r7, #4
 8005bfa:	461d      	mov	r5, r3
 8005bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005c04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8005c08:	1d3b      	adds	r3, r7, #4
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fe f91b 	bl	8003e48 <osThreadCreate>
 8005c12:	4602      	mov	r2, r0
 8005c14:	4b03      	ldr	r3, [pc, #12]	; (8005c24 <MX_FREERTOS_Init+0x34>)
 8005c16:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8005c18:	bf00      	nop
 8005c1a:	3720      	adds	r7, #32
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bdb0      	pop	{r4, r5, r7, pc}
 8005c20:	080071f4 	.word	0x080071f4
 8005c24:	2000198c 	.word	0x2000198c

08005c28 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8005c30:	2001      	movs	r0, #1
 8005c32:	f7fe f955 	bl	8003ee0 <osDelay>
 8005c36:	e7fb      	b.n	8005c30 <StartDefaultTask+0x8>

08005c38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b088      	sub	sp, #32
 8005c3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c3e:	f107 0310 	add.w	r3, r7, #16
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	605a      	str	r2, [r3, #4]
 8005c48:	609a      	str	r2, [r3, #8]
 8005c4a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c4c:	4b31      	ldr	r3, [pc, #196]	; (8005d14 <MX_GPIO_Init+0xdc>)
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	4a30      	ldr	r2, [pc, #192]	; (8005d14 <MX_GPIO_Init+0xdc>)
 8005c52:	f043 0310 	orr.w	r3, r3, #16
 8005c56:	6193      	str	r3, [r2, #24]
 8005c58:	4b2e      	ldr	r3, [pc, #184]	; (8005d14 <MX_GPIO_Init+0xdc>)
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	f003 0310 	and.w	r3, r3, #16
 8005c60:	60fb      	str	r3, [r7, #12]
 8005c62:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c64:	4b2b      	ldr	r3, [pc, #172]	; (8005d14 <MX_GPIO_Init+0xdc>)
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	4a2a      	ldr	r2, [pc, #168]	; (8005d14 <MX_GPIO_Init+0xdc>)
 8005c6a:	f043 0320 	orr.w	r3, r3, #32
 8005c6e:	6193      	str	r3, [r2, #24]
 8005c70:	4b28      	ldr	r3, [pc, #160]	; (8005d14 <MX_GPIO_Init+0xdc>)
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	f003 0320 	and.w	r3, r3, #32
 8005c78:	60bb      	str	r3, [r7, #8]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c7c:	4b25      	ldr	r3, [pc, #148]	; (8005d14 <MX_GPIO_Init+0xdc>)
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	4a24      	ldr	r2, [pc, #144]	; (8005d14 <MX_GPIO_Init+0xdc>)
 8005c82:	f043 0304 	orr.w	r3, r3, #4
 8005c86:	6193      	str	r3, [r2, #24]
 8005c88:	4b22      	ldr	r3, [pc, #136]	; (8005d14 <MX_GPIO_Init+0xdc>)
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	f003 0304 	and.w	r3, r3, #4
 8005c90:	607b      	str	r3, [r7, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c94:	4b1f      	ldr	r3, [pc, #124]	; (8005d14 <MX_GPIO_Init+0xdc>)
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	4a1e      	ldr	r2, [pc, #120]	; (8005d14 <MX_GPIO_Init+0xdc>)
 8005c9a:	f043 0308 	orr.w	r3, r3, #8
 8005c9e:	6193      	str	r3, [r2, #24]
 8005ca0:	4b1c      	ldr	r3, [pc, #112]	; (8005d14 <MX_GPIO_Init+0xdc>)
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	f003 0308 	and.w	r3, r3, #8
 8005ca8:	603b      	str	r3, [r7, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_V_Pin|RE_DE_Pin, GPIO_PIN_RESET);
 8005cac:	2200      	movs	r2, #0
 8005cae:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8005cb2:	4819      	ldr	r0, [pc, #100]	; (8005d18 <MX_GPIO_Init+0xe0>)
 8005cb4:	f7fb fcab 	bl	800160e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_V_Pin|RE_DE_Pin;
 8005cb8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005cbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cca:	f107 0310 	add.w	r3, r7, #16
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4811      	ldr	r0, [pc, #68]	; (8005d18 <MX_GPIO_Init+0xe0>)
 8005cd2:	f7fb fb2b 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T1_Pin;
 8005cd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005cda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(T1_GPIO_Port, &GPIO_InitStruct);
 8005ce4:	f107 0310 	add.w	r3, r7, #16
 8005ce8:	4619      	mov	r1, r3
 8005cea:	480b      	ldr	r0, [pc, #44]	; (8005d18 <MX_GPIO_Init+0xe0>)
 8005cec:	f7fb fb1e 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = T2_Pin|T3_Pin;
 8005cf0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005cf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cfe:	f107 0310 	add.w	r3, r7, #16
 8005d02:	4619      	mov	r1, r3
 8005d04:	4805      	ldr	r0, [pc, #20]	; (8005d1c <MX_GPIO_Init+0xe4>)
 8005d06:	f7fb fb11 	bl	800132c <HAL_GPIO_Init>

}
 8005d0a:	bf00      	nop
 8005d0c:	3720      	adds	r7, #32
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	40021000 	.word	0x40021000
 8005d18:	40011000 	.word	0x40011000
 8005d1c:	40010c00 	.word	0x40010c00

08005d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005d24:	f7fa fd12 	bl	800074c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005d28:	f000 f896 	bl	8005e58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005d2c:	f7ff ff84 	bl	8005c38 <MX_GPIO_Init>
  MX_TIM2_Init();
 8005d30:	f000 fa7c 	bl	800622c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8005d34:	f000 fc92 	bl	800665c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8005d38:	f000 fcba 	bl	80066b0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8005d3c:	f000 fb0c 	bl	8006358 <MX_TIM3_Init>
  MX_ADC1_Init();
 8005d40:	f7ff feac 	bl	8005a9c <MX_ADC1_Init>
  MX_TIM1_Init();
 8005d44:	f000 f9ae 	bl	80060a4 <MX_TIM1_Init>
  //MX_I2C1_Init();
  /* USER CODE BEGIN 2 */

  DMX_uart = &huart2;
 8005d48:	4b27      	ldr	r3, [pc, #156]	; (8005de8 <main+0xc8>)
 8005d4a:	4a28      	ldr	r2, [pc, #160]	; (8005dec <main+0xcc>)
 8005d4c:	601a      	str	r2, [r3, #0]

  LED1_pwmtimer = &htim1;
 8005d4e:	4b28      	ldr	r3, [pc, #160]	; (8005df0 <main+0xd0>)
 8005d50:	4a28      	ldr	r2, [pc, #160]	; (8005df4 <main+0xd4>)
 8005d52:	601a      	str	r2, [r3, #0]
  LED1_PWMchannel = TIM_CHANNEL_1;
 8005d54:	4b28      	ldr	r3, [pc, #160]	; (8005df8 <main+0xd8>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]
  LED2_pwmtimer = &htim1;
 8005d5a:	4b28      	ldr	r3, [pc, #160]	; (8005dfc <main+0xdc>)
 8005d5c:	4a25      	ldr	r2, [pc, #148]	; (8005df4 <main+0xd4>)
 8005d5e:	601a      	str	r2, [r3, #0]
  LED2_PWMchannel = TIM_CHANNEL_2;
 8005d60:	4b27      	ldr	r3, [pc, #156]	; (8005e00 <main+0xe0>)
 8005d62:	2204      	movs	r2, #4
 8005d64:	601a      	str	r2, [r3, #0]
  LED3_pwmtimer = &htim1;
 8005d66:	4b27      	ldr	r3, [pc, #156]	; (8005e04 <main+0xe4>)
 8005d68:	4a22      	ldr	r2, [pc, #136]	; (8005df4 <main+0xd4>)
 8005d6a:	601a      	str	r2, [r3, #0]
  LED3_PWMchannel = TIM_CHANNEL_3;
 8005d6c:	4b26      	ldr	r3, [pc, #152]	; (8005e08 <main+0xe8>)
 8005d6e:	2208      	movs	r2, #8
 8005d70:	601a      	str	r2, [r3, #0]
  LED4_pwmtimer = &htim1;
 8005d72:	4b26      	ldr	r3, [pc, #152]	; (8005e0c <main+0xec>)
 8005d74:	4a1f      	ldr	r2, [pc, #124]	; (8005df4 <main+0xd4>)
 8005d76:	601a      	str	r2, [r3, #0]
  LED4_PWMchannel = TIM_CHANNEL_4;
 8005d78:	4b25      	ldr	r3, [pc, #148]	; (8005e10 <main+0xf0>)
 8005d7a:	220c      	movs	r2, #12
 8005d7c:	601a      	str	r2, [r3, #0]
  LED5_pwmtimer = &htim2;
 8005d7e:	4b25      	ldr	r3, [pc, #148]	; (8005e14 <main+0xf4>)
 8005d80:	4a25      	ldr	r2, [pc, #148]	; (8005e18 <main+0xf8>)
 8005d82:	601a      	str	r2, [r3, #0]
  LED5_PWMchannel = TIM_CHANNEL_1;
 8005d84:	4b25      	ldr	r3, [pc, #148]	; (8005e1c <main+0xfc>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]
  LED6_pwmtimer = &htim2;
 8005d8a:	4b25      	ldr	r3, [pc, #148]	; (8005e20 <main+0x100>)
 8005d8c:	4a22      	ldr	r2, [pc, #136]	; (8005e18 <main+0xf8>)
 8005d8e:	601a      	str	r2, [r3, #0]
  LED6_PWMchannel = TIM_CHANNEL_2;
 8005d90:	4b24      	ldr	r3, [pc, #144]	; (8005e24 <main+0x104>)
 8005d92:	2204      	movs	r2, #4
 8005d94:	601a      	str	r2, [r3, #0]
  LED7_pwmtimer = &htim2;
 8005d96:	4b24      	ldr	r3, [pc, #144]	; (8005e28 <main+0x108>)
 8005d98:	4a1f      	ldr	r2, [pc, #124]	; (8005e18 <main+0xf8>)
 8005d9a:	601a      	str	r2, [r3, #0]
  LED7_PWMchannel = TIM_CHANNEL_3;
 8005d9c:	4b23      	ldr	r3, [pc, #140]	; (8005e2c <main+0x10c>)
 8005d9e:	2208      	movs	r2, #8
 8005da0:	601a      	str	r2, [r3, #0]
  LED8_pwmtimer = &htim2;
 8005da2:	4b23      	ldr	r3, [pc, #140]	; (8005e30 <main+0x110>)
 8005da4:	4a1c      	ldr	r2, [pc, #112]	; (8005e18 <main+0xf8>)
 8005da6:	601a      	str	r2, [r3, #0]
  LED8_PWMchannel = TIM_CHANNEL_4;
 8005da8:	4b22      	ldr	r3, [pc, #136]	; (8005e34 <main+0x114>)
 8005daa:	220c      	movs	r2, #12
 8005dac:	601a      	str	r2, [r3, #0]
  LED9_pwmtimer = &htim3;
 8005dae:	4b22      	ldr	r3, [pc, #136]	; (8005e38 <main+0x118>)
 8005db0:	4a22      	ldr	r2, [pc, #136]	; (8005e3c <main+0x11c>)
 8005db2:	601a      	str	r2, [r3, #0]
  LED9_PWMchannel = TIM_CHANNEL_1;
 8005db4:	4b22      	ldr	r3, [pc, #136]	; (8005e40 <main+0x120>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]
  LED10_pwmtimer = &htim3;
 8005dba:	4b22      	ldr	r3, [pc, #136]	; (8005e44 <main+0x124>)
 8005dbc:	4a1f      	ldr	r2, [pc, #124]	; (8005e3c <main+0x11c>)
 8005dbe:	601a      	str	r2, [r3, #0]
  LED10_PWMchannel = TIM_CHANNEL_2;
 8005dc0:	4b21      	ldr	r3, [pc, #132]	; (8005e48 <main+0x128>)
 8005dc2:	2204      	movs	r2, #4
 8005dc4:	601a      	str	r2, [r3, #0]

  FAN_pwmtimer = &htim3;
 8005dc6:	4b21      	ldr	r3, [pc, #132]	; (8005e4c <main+0x12c>)
 8005dc8:	4a1c      	ldr	r2, [pc, #112]	; (8005e3c <main+0x11c>)
 8005dca:	601a      	str	r2, [r3, #0]
  FAN_PWMchannel = TIM_CHANNEL_3;
 8005dcc:	4b20      	ldr	r3, [pc, #128]	; (8005e50 <main+0x130>)
 8005dce:	2208      	movs	r2, #8
 8005dd0:	601a      	str	r2, [r3, #0]

  hi2c_display = 0;//&hi2c1;
 8005dd2:	4b20      	ldr	r3, [pc, #128]	; (8005e54 <main+0x134>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]

  App_Init();
 8005dd8:	f7ff fd78 	bl	80058cc <App_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8005ddc:	f7ff ff08 	bl	8005bf0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8005de0:	f7fe f82b 	bl	8003e3a <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8005de4:	e7fe      	b.n	8005de4 <main+0xc4>
 8005de6:	bf00      	nop
 8005de8:	20001900 	.word	0x20001900
 8005dec:	20001a90 	.word	0x20001a90
 8005df0:	20001908 	.word	0x20001908
 8005df4:	200019d0 	.word	0x200019d0
 8005df8:	200018dc 	.word	0x200018dc
 8005dfc:	20001934 	.word	0x20001934
 8005e00:	200018ec 	.word	0x200018ec
 8005e04:	200018f8 	.word	0x200018f8
 8005e08:	20001914 	.word	0x20001914
 8005e0c:	20001924 	.word	0x20001924
 8005e10:	20001938 	.word	0x20001938
 8005e14:	200018d4 	.word	0x200018d4
 8005e18:	20001a10 	.word	0x20001a10
 8005e1c:	2000194c 	.word	0x2000194c
 8005e20:	2000190c 	.word	0x2000190c
 8005e24:	200018fc 	.word	0x200018fc
 8005e28:	20001918 	.word	0x20001918
 8005e2c:	2000191c 	.word	0x2000191c
 8005e30:	20001954 	.word	0x20001954
 8005e34:	20001928 	.word	0x20001928
 8005e38:	20001930 	.word	0x20001930
 8005e3c:	20001990 	.word	0x20001990
 8005e40:	200018d8 	.word	0x200018d8
 8005e44:	200018e4 	.word	0x200018e4
 8005e48:	20001920 	.word	0x20001920
 8005e4c:	2000193c 	.word	0x2000193c
 8005e50:	200018e8 	.word	0x200018e8
 8005e54:	200018f0 	.word	0x200018f0

08005e58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b094      	sub	sp, #80	; 0x50
 8005e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e62:	2228      	movs	r2, #40	; 0x28
 8005e64:	2100      	movs	r1, #0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fd45 	bl	80068f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e6c:	f107 0314 	add.w	r3, r7, #20
 8005e70:	2200      	movs	r2, #0
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	605a      	str	r2, [r3, #4]
 8005e76:	609a      	str	r2, [r3, #8]
 8005e78:	60da      	str	r2, [r3, #12]
 8005e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005e7c:	1d3b      	adds	r3, r7, #4
 8005e7e:	2200      	movs	r2, #0
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	605a      	str	r2, [r3, #4]
 8005e84:	609a      	str	r2, [r3, #8]
 8005e86:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005e8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005e92:	2300      	movs	r3, #0
 8005e94:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005e96:	2301      	movs	r3, #1
 8005e98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005e9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ea8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fb ffe3 	bl	8001e78 <HAL_RCC_OscConfig>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <SystemClock_Config+0x64>
  {
    Error_Handler();
 8005eb8:	f000 f826 	bl	8005f08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005ebc:	230f      	movs	r3, #15
 8005ebe:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005ed0:	f107 0314 	add.w	r3, r7, #20
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fc fa4e 	bl	8002378 <HAL_RCC_ClockConfig>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8005ee2:	f000 f811 	bl	8005f08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8005eea:	2300      	movs	r3, #0
 8005eec:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005eee:	1d3b      	adds	r3, r7, #4
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fc fbdd 	bl	80026b0 <HAL_RCCEx_PeriphCLKConfig>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8005efc:	f000 f804 	bl	8005f08 <Error_Handler>
  }
}
 8005f00:	bf00      	nop
 8005f02:	3750      	adds	r7, #80	; 0x50
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005f0c:	bf00      	nop
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bc80      	pop	{r7}
 8005f12:	4770      	bx	lr

08005f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005f1a:	4b18      	ldr	r3, [pc, #96]	; (8005f7c <HAL_MspInit+0x68>)
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	4a17      	ldr	r2, [pc, #92]	; (8005f7c <HAL_MspInit+0x68>)
 8005f20:	f043 0301 	orr.w	r3, r3, #1
 8005f24:	6193      	str	r3, [r2, #24]
 8005f26:	4b15      	ldr	r3, [pc, #84]	; (8005f7c <HAL_MspInit+0x68>)
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	60bb      	str	r3, [r7, #8]
 8005f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f32:	4b12      	ldr	r3, [pc, #72]	; (8005f7c <HAL_MspInit+0x68>)
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	4a11      	ldr	r2, [pc, #68]	; (8005f7c <HAL_MspInit+0x68>)
 8005f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f3c:	61d3      	str	r3, [r2, #28]
 8005f3e:	4b0f      	ldr	r3, [pc, #60]	; (8005f7c <HAL_MspInit+0x68>)
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f46:	607b      	str	r3, [r7, #4]
 8005f48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	210f      	movs	r1, #15
 8005f4e:	f06f 0001 	mvn.w	r0, #1
 8005f52:	f7fa ff3e 	bl	8000dd2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005f56:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <HAL_MspInit+0x6c>)
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	4a04      	ldr	r2, [pc, #16]	; (8005f80 <HAL_MspInit+0x6c>)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f72:	bf00      	nop
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	40021000 	.word	0x40021000
 8005f80:	40010000 	.word	0x40010000

08005f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005f84:	b480      	push	{r7}
 8005f86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005f88:	bf00      	nop
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bc80      	pop	{r7}
 8005f8e:	4770      	bx	lr

08005f90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f90:	b480      	push	{r7}
 8005f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f94:	e7fe      	b.n	8005f94 <HardFault_Handler+0x4>

08005f96 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005f96:	b480      	push	{r7}
 8005f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005f9a:	e7fe      	b.n	8005f9a <MemManage_Handler+0x4>

08005f9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005fa0:	e7fe      	b.n	8005fa0 <BusFault_Handler+0x4>

08005fa2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005fa6:	e7fe      	b.n	8005fa6 <UsageFault_Handler+0x4>

08005fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005fac:	bf00      	nop
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr

08005fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005fb8:	f7fa fc0e 	bl	80007d8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005fbc:	f7fe fd02 	bl	80049c4 <xTaskGetSchedulerState>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d001      	beq.n	8005fca <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8005fc6:	f7fe fee7 	bl	8004d98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005fca:	bf00      	nop
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005fd4:	4802      	ldr	r0, [pc, #8]	; (8005fe0 <USART2_IRQHandler+0x10>)
 8005fd6:	f7fd fa57 	bl	8003488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005fda:	bf00      	nop
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20001a90 	.word	0x20001a90

08005fe4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005fec:	4b11      	ldr	r3, [pc, #68]	; (8006034 <_sbrk+0x50>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d102      	bne.n	8005ffa <_sbrk+0x16>
		heap_end = &end;
 8005ff4:	4b0f      	ldr	r3, [pc, #60]	; (8006034 <_sbrk+0x50>)
 8005ff6:	4a10      	ldr	r2, [pc, #64]	; (8006038 <_sbrk+0x54>)
 8005ff8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005ffa:	4b0e      	ldr	r3, [pc, #56]	; (8006034 <_sbrk+0x50>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006000:	4b0c      	ldr	r3, [pc, #48]	; (8006034 <_sbrk+0x50>)
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4413      	add	r3, r2
 8006008:	466a      	mov	r2, sp
 800600a:	4293      	cmp	r3, r2
 800600c:	d907      	bls.n	800601e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800600e:	f000 fc3d 	bl	800688c <__errno>
 8006012:	4602      	mov	r2, r0
 8006014:	230c      	movs	r3, #12
 8006016:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006018:	f04f 33ff 	mov.w	r3, #4294967295
 800601c:	e006      	b.n	800602c <_sbrk+0x48>
	}

	heap_end += incr;
 800601e:	4b05      	ldr	r3, [pc, #20]	; (8006034 <_sbrk+0x50>)
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4413      	add	r3, r2
 8006026:	4a03      	ldr	r2, [pc, #12]	; (8006034 <_sbrk+0x50>)
 8006028:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800602a:	68fb      	ldr	r3, [r7, #12]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	20001460 	.word	0x20001460
 8006038:	20001ad8 	.word	0x20001ad8

0800603c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800603c:	b480      	push	{r7}
 800603e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006040:	4b15      	ldr	r3, [pc, #84]	; (8006098 <SystemInit+0x5c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a14      	ldr	r2, [pc, #80]	; (8006098 <SystemInit+0x5c>)
 8006046:	f043 0301 	orr.w	r3, r3, #1
 800604a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800604c:	4b12      	ldr	r3, [pc, #72]	; (8006098 <SystemInit+0x5c>)
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	4911      	ldr	r1, [pc, #68]	; (8006098 <SystemInit+0x5c>)
 8006052:	4b12      	ldr	r3, [pc, #72]	; (800609c <SystemInit+0x60>)
 8006054:	4013      	ands	r3, r2
 8006056:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006058:	4b0f      	ldr	r3, [pc, #60]	; (8006098 <SystemInit+0x5c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a0e      	ldr	r2, [pc, #56]	; (8006098 <SystemInit+0x5c>)
 800605e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006066:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006068:	4b0b      	ldr	r3, [pc, #44]	; (8006098 <SystemInit+0x5c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a0a      	ldr	r2, [pc, #40]	; (8006098 <SystemInit+0x5c>)
 800606e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006072:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006074:	4b08      	ldr	r3, [pc, #32]	; (8006098 <SystemInit+0x5c>)
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	4a07      	ldr	r2, [pc, #28]	; (8006098 <SystemInit+0x5c>)
 800607a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800607e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006080:	4b05      	ldr	r3, [pc, #20]	; (8006098 <SystemInit+0x5c>)
 8006082:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006086:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006088:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <SystemInit+0x64>)
 800608a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800608e:	609a      	str	r2, [r3, #8]
#endif 
}
 8006090:	bf00      	nop
 8006092:	46bd      	mov	sp, r7
 8006094:	bc80      	pop	{r7}
 8006096:	4770      	bx	lr
 8006098:	40021000 	.word	0x40021000
 800609c:	f8ff0000 	.word	0xf8ff0000
 80060a0:	e000ed00 	.word	0xe000ed00

080060a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b096      	sub	sp, #88	; 0x58
 80060a8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80060aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80060ae:	2200      	movs	r2, #0
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	605a      	str	r2, [r3, #4]
 80060b4:	609a      	str	r2, [r3, #8]
 80060b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80060b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80060c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	605a      	str	r2, [r3, #4]
 80060cc:	609a      	str	r2, [r3, #8]
 80060ce:	60da      	str	r2, [r3, #12]
 80060d0:	611a      	str	r2, [r3, #16]
 80060d2:	615a      	str	r2, [r3, #20]
 80060d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80060d6:	1d3b      	adds	r3, r7, #4
 80060d8:	2220      	movs	r2, #32
 80060da:	2100      	movs	r1, #0
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 fc0a 	bl	80068f6 <memset>

  htim1.Instance = TIM1;
 80060e2:	4b50      	ldr	r3, [pc, #320]	; (8006224 <MX_TIM1_Init+0x180>)
 80060e4:	4a50      	ldr	r2, [pc, #320]	; (8006228 <MX_TIM1_Init+0x184>)
 80060e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 300;
 80060e8:	4b4e      	ldr	r3, [pc, #312]	; (8006224 <MX_TIM1_Init+0x180>)
 80060ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80060ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060f0:	4b4c      	ldr	r3, [pc, #304]	; (8006224 <MX_TIM1_Init+0x180>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 80060f6:	4b4b      	ldr	r3, [pc, #300]	; (8006224 <MX_TIM1_Init+0x180>)
 80060f8:	22ff      	movs	r2, #255	; 0xff
 80060fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060fc:	4b49      	ldr	r3, [pc, #292]	; (8006224 <MX_TIM1_Init+0x180>)
 80060fe:	2200      	movs	r2, #0
 8006100:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006102:	4b48      	ldr	r3, [pc, #288]	; (8006224 <MX_TIM1_Init+0x180>)
 8006104:	2200      	movs	r2, #0
 8006106:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006108:	4b46      	ldr	r3, [pc, #280]	; (8006224 <MX_TIM1_Init+0x180>)
 800610a:	2200      	movs	r2, #0
 800610c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800610e:	4845      	ldr	r0, [pc, #276]	; (8006224 <MX_TIM1_Init+0x180>)
 8006110:	f7fc fb84 	bl	800281c <HAL_TIM_Base_Init>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800611a:	f7ff fef5 	bl	8005f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800611e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006122:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006124:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006128:	4619      	mov	r1, r3
 800612a:	483e      	ldr	r0, [pc, #248]	; (8006224 <MX_TIM1_Init+0x180>)
 800612c:	f7fc fd1a 	bl	8002b64 <HAL_TIM_ConfigClockSource>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8006136:	f7ff fee7 	bl	8005f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800613a:	483a      	ldr	r0, [pc, #232]	; (8006224 <MX_TIM1_Init+0x180>)
 800613c:	f7fc fb99 	bl	8002872 <HAL_TIM_PWM_Init>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8006146:	f7ff fedf 	bl	8005f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800614a:	2300      	movs	r3, #0
 800614c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800614e:	2300      	movs	r3, #0
 8006150:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006152:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006156:	4619      	mov	r1, r3
 8006158:	4832      	ldr	r0, [pc, #200]	; (8006224 <MX_TIM1_Init+0x180>)
 800615a:	f7fd f85f 	bl	800321c <HAL_TIMEx_MasterConfigSynchronization>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8006164:	f7ff fed0 	bl	8005f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006168:	2360      	movs	r3, #96	; 0x60
 800616a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800616c:	2300      	movs	r3, #0
 800616e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006170:	2300      	movs	r3, #0
 8006172:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006174:	2300      	movs	r3, #0
 8006176:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006178:	2300      	movs	r3, #0
 800617a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800617c:	2300      	movs	r3, #0
 800617e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006180:	2300      	movs	r3, #0
 8006182:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006188:	2200      	movs	r2, #0
 800618a:	4619      	mov	r1, r3
 800618c:	4825      	ldr	r0, [pc, #148]	; (8006224 <MX_TIM1_Init+0x180>)
 800618e:	f7fc fc23 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8006198:	f7ff feb6 	bl	8005f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800619c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061a0:	2204      	movs	r2, #4
 80061a2:	4619      	mov	r1, r3
 80061a4:	481f      	ldr	r0, [pc, #124]	; (8006224 <MX_TIM1_Init+0x180>)
 80061a6:	f7fc fc17 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80061b0:	f7ff feaa 	bl	8005f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80061b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061b8:	2208      	movs	r2, #8
 80061ba:	4619      	mov	r1, r3
 80061bc:	4819      	ldr	r0, [pc, #100]	; (8006224 <MX_TIM1_Init+0x180>)
 80061be:	f7fc fc0b 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80061c8:	f7ff fe9e 	bl	8005f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80061cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061d0:	220c      	movs	r2, #12
 80061d2:	4619      	mov	r1, r3
 80061d4:	4813      	ldr	r0, [pc, #76]	; (8006224 <MX_TIM1_Init+0x180>)
 80061d6:	f7fc fbff 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80061e0:	f7ff fe92 	bl	8005f08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80061e4:	2300      	movs	r3, #0
 80061e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80061e8:	2300      	movs	r3, #0
 80061ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80061ec:	2300      	movs	r3, #0
 80061ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80061f0:	2300      	movs	r3, #0
 80061f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80061f4:	2300      	movs	r3, #0
 80061f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80061f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80061fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80061fe:	2300      	movs	r3, #0
 8006200:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006202:	1d3b      	adds	r3, r7, #4
 8006204:	4619      	mov	r1, r3
 8006206:	4807      	ldr	r0, [pc, #28]	; (8006224 <MX_TIM1_Init+0x180>)
 8006208:	f7fd f84c 	bl	80032a4 <HAL_TIMEx_ConfigBreakDeadTime>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8006212:	f7ff fe79 	bl	8005f08 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8006216:	4803      	ldr	r0, [pc, #12]	; (8006224 <MX_TIM1_Init+0x180>)
 8006218:	f000 f96e 	bl	80064f8 <HAL_TIM_MspPostInit>

}
 800621c:	bf00      	nop
 800621e:	3758      	adds	r7, #88	; 0x58
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	200019d0 	.word	0x200019d0
 8006228:	40012c00 	.word	0x40012c00

0800622c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b08e      	sub	sp, #56	; 0x38
 8006230:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006236:	2200      	movs	r2, #0
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	605a      	str	r2, [r3, #4]
 800623c:	609a      	str	r2, [r3, #8]
 800623e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006240:	f107 0320 	add.w	r3, r7, #32
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800624a:	1d3b      	adds	r3, r7, #4
 800624c:	2200      	movs	r2, #0
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	605a      	str	r2, [r3, #4]
 8006252:	609a      	str	r2, [r3, #8]
 8006254:	60da      	str	r2, [r3, #12]
 8006256:	611a      	str	r2, [r3, #16]
 8006258:	615a      	str	r2, [r3, #20]
 800625a:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800625c:	4b3d      	ldr	r3, [pc, #244]	; (8006354 <MX_TIM2_Init+0x128>)
 800625e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006262:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 300;
 8006264:	4b3b      	ldr	r3, [pc, #236]	; (8006354 <MX_TIM2_Init+0x128>)
 8006266:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800626a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800626c:	4b39      	ldr	r3, [pc, #228]	; (8006354 <MX_TIM2_Init+0x128>)
 800626e:	2200      	movs	r2, #0
 8006270:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8006272:	4b38      	ldr	r3, [pc, #224]	; (8006354 <MX_TIM2_Init+0x128>)
 8006274:	22ff      	movs	r2, #255	; 0xff
 8006276:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006278:	4b36      	ldr	r3, [pc, #216]	; (8006354 <MX_TIM2_Init+0x128>)
 800627a:	2200      	movs	r2, #0
 800627c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800627e:	4b35      	ldr	r3, [pc, #212]	; (8006354 <MX_TIM2_Init+0x128>)
 8006280:	2200      	movs	r2, #0
 8006282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006284:	4833      	ldr	r0, [pc, #204]	; (8006354 <MX_TIM2_Init+0x128>)
 8006286:	f7fc fac9 	bl	800281c <HAL_TIM_Base_Init>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8006290:	f7ff fe3a 	bl	8005f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006298:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800629a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800629e:	4619      	mov	r1, r3
 80062a0:	482c      	ldr	r0, [pc, #176]	; (8006354 <MX_TIM2_Init+0x128>)
 80062a2:	f7fc fc5f 	bl	8002b64 <HAL_TIM_ConfigClockSource>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80062ac:	f7ff fe2c 	bl	8005f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80062b0:	4828      	ldr	r0, [pc, #160]	; (8006354 <MX_TIM2_Init+0x128>)
 80062b2:	f7fc fade 	bl	8002872 <HAL_TIM_PWM_Init>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80062bc:	f7ff fe24 	bl	8005f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062c0:	2300      	movs	r3, #0
 80062c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062c4:	2300      	movs	r3, #0
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80062c8:	f107 0320 	add.w	r3, r7, #32
 80062cc:	4619      	mov	r1, r3
 80062ce:	4821      	ldr	r0, [pc, #132]	; (8006354 <MX_TIM2_Init+0x128>)
 80062d0:	f7fc ffa4 	bl	800321c <HAL_TIMEx_MasterConfigSynchronization>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80062da:	f7ff fe15 	bl	8005f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80062de:	2360      	movs	r3, #96	; 0x60
 80062e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80062e2:	2300      	movs	r3, #0
 80062e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80062ea:	2300      	movs	r3, #0
 80062ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80062ee:	1d3b      	adds	r3, r7, #4
 80062f0:	2200      	movs	r2, #0
 80062f2:	4619      	mov	r1, r3
 80062f4:	4817      	ldr	r0, [pc, #92]	; (8006354 <MX_TIM2_Init+0x128>)
 80062f6:	f7fc fb6f 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8006300:	f7ff fe02 	bl	8005f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006304:	1d3b      	adds	r3, r7, #4
 8006306:	2204      	movs	r2, #4
 8006308:	4619      	mov	r1, r3
 800630a:	4812      	ldr	r0, [pc, #72]	; (8006354 <MX_TIM2_Init+0x128>)
 800630c:	f7fc fb64 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8006316:	f7ff fdf7 	bl	8005f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800631a:	1d3b      	adds	r3, r7, #4
 800631c:	2208      	movs	r2, #8
 800631e:	4619      	mov	r1, r3
 8006320:	480c      	ldr	r0, [pc, #48]	; (8006354 <MX_TIM2_Init+0x128>)
 8006322:	f7fc fb59 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800632c:	f7ff fdec 	bl	8005f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006330:	1d3b      	adds	r3, r7, #4
 8006332:	220c      	movs	r2, #12
 8006334:	4619      	mov	r1, r3
 8006336:	4807      	ldr	r0, [pc, #28]	; (8006354 <MX_TIM2_Init+0x128>)
 8006338:	f7fc fb4e 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8006342:	f7ff fde1 	bl	8005f08 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8006346:	4803      	ldr	r0, [pc, #12]	; (8006354 <MX_TIM2_Init+0x128>)
 8006348:	f000 f8d6 	bl	80064f8 <HAL_TIM_MspPostInit>

}
 800634c:	bf00      	nop
 800634e:	3738      	adds	r7, #56	; 0x38
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	20001a10 	.word	0x20001a10

08006358 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08e      	sub	sp, #56	; 0x38
 800635c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800635e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	605a      	str	r2, [r3, #4]
 8006368:	609a      	str	r2, [r3, #8]
 800636a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800636c:	f107 0320 	add.w	r3, r7, #32
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006376:	1d3b      	adds	r3, r7, #4
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	605a      	str	r2, [r3, #4]
 800637e:	609a      	str	r2, [r3, #8]
 8006380:	60da      	str	r2, [r3, #12]
 8006382:	611a      	str	r2, [r3, #16]
 8006384:	615a      	str	r2, [r3, #20]
 8006386:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8006388:	4b37      	ldr	r3, [pc, #220]	; (8006468 <MX_TIM3_Init+0x110>)
 800638a:	4a38      	ldr	r2, [pc, #224]	; (800646c <MX_TIM3_Init+0x114>)
 800638c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 300;
 800638e:	4b36      	ldr	r3, [pc, #216]	; (8006468 <MX_TIM3_Init+0x110>)
 8006390:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006394:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006396:	4b34      	ldr	r3, [pc, #208]	; (8006468 <MX_TIM3_Init+0x110>)
 8006398:	2200      	movs	r2, #0
 800639a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 800639c:	4b32      	ldr	r3, [pc, #200]	; (8006468 <MX_TIM3_Init+0x110>)
 800639e:	22ff      	movs	r2, #255	; 0xff
 80063a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063a2:	4b31      	ldr	r3, [pc, #196]	; (8006468 <MX_TIM3_Init+0x110>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80063a8:	4b2f      	ldr	r3, [pc, #188]	; (8006468 <MX_TIM3_Init+0x110>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80063ae:	482e      	ldr	r0, [pc, #184]	; (8006468 <MX_TIM3_Init+0x110>)
 80063b0:	f7fc fa34 	bl	800281c <HAL_TIM_Base_Init>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80063ba:	f7ff fda5 	bl	8005f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80063be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80063c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063c8:	4619      	mov	r1, r3
 80063ca:	4827      	ldr	r0, [pc, #156]	; (8006468 <MX_TIM3_Init+0x110>)
 80063cc:	f7fc fbca 	bl	8002b64 <HAL_TIM_ConfigClockSource>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80063d6:	f7ff fd97 	bl	8005f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80063da:	4823      	ldr	r0, [pc, #140]	; (8006468 <MX_TIM3_Init+0x110>)
 80063dc:	f7fc fa49 	bl	8002872 <HAL_TIM_PWM_Init>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80063e6:	f7ff fd8f 	bl	8005f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063ea:	2300      	movs	r3, #0
 80063ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063ee:	2300      	movs	r3, #0
 80063f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80063f2:	f107 0320 	add.w	r3, r7, #32
 80063f6:	4619      	mov	r1, r3
 80063f8:	481b      	ldr	r0, [pc, #108]	; (8006468 <MX_TIM3_Init+0x110>)
 80063fa:	f7fc ff0f 	bl	800321c <HAL_TIMEx_MasterConfigSynchronization>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8006404:	f7ff fd80 	bl	8005f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006408:	2360      	movs	r3, #96	; 0x60
 800640a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800640c:	2300      	movs	r3, #0
 800640e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006414:	2300      	movs	r3, #0
 8006416:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006418:	1d3b      	adds	r3, r7, #4
 800641a:	2200      	movs	r2, #0
 800641c:	4619      	mov	r1, r3
 800641e:	4812      	ldr	r0, [pc, #72]	; (8006468 <MX_TIM3_Init+0x110>)
 8006420:	f7fc fada 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800642a:	f7ff fd6d 	bl	8005f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800642e:	1d3b      	adds	r3, r7, #4
 8006430:	2204      	movs	r2, #4
 8006432:	4619      	mov	r1, r3
 8006434:	480c      	ldr	r0, [pc, #48]	; (8006468 <MX_TIM3_Init+0x110>)
 8006436:	f7fc facf 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8006440:	f7ff fd62 	bl	8005f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006444:	1d3b      	adds	r3, r7, #4
 8006446:	2208      	movs	r2, #8
 8006448:	4619      	mov	r1, r3
 800644a:	4807      	ldr	r0, [pc, #28]	; (8006468 <MX_TIM3_Init+0x110>)
 800644c:	f7fc fac4 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8006456:	f7ff fd57 	bl	8005f08 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800645a:	4803      	ldr	r0, [pc, #12]	; (8006468 <MX_TIM3_Init+0x110>)
 800645c:	f000 f84c 	bl	80064f8 <HAL_TIM_MspPostInit>

}
 8006460:	bf00      	nop
 8006462:	3738      	adds	r7, #56	; 0x38
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	20001990 	.word	0x20001990
 800646c:	40000400 	.word	0x40000400

08006470 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006470:	b480      	push	{r7}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a1b      	ldr	r2, [pc, #108]	; (80064ec <HAL_TIM_Base_MspInit+0x7c>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d10c      	bne.n	800649c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006482:	4b1b      	ldr	r3, [pc, #108]	; (80064f0 <HAL_TIM_Base_MspInit+0x80>)
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	4a1a      	ldr	r2, [pc, #104]	; (80064f0 <HAL_TIM_Base_MspInit+0x80>)
 8006488:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800648c:	6193      	str	r3, [r2, #24]
 800648e:	4b18      	ldr	r3, [pc, #96]	; (80064f0 <HAL_TIM_Base_MspInit+0x80>)
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800649a:	e022      	b.n	80064e2 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM2)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a4:	d10c      	bne.n	80064c0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80064a6:	4b12      	ldr	r3, [pc, #72]	; (80064f0 <HAL_TIM_Base_MspInit+0x80>)
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	4a11      	ldr	r2, [pc, #68]	; (80064f0 <HAL_TIM_Base_MspInit+0x80>)
 80064ac:	f043 0301 	orr.w	r3, r3, #1
 80064b0:	61d3      	str	r3, [r2, #28]
 80064b2:	4b0f      	ldr	r3, [pc, #60]	; (80064f0 <HAL_TIM_Base_MspInit+0x80>)
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	613b      	str	r3, [r7, #16]
 80064bc:	693b      	ldr	r3, [r7, #16]
}
 80064be:	e010      	b.n	80064e2 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a0b      	ldr	r2, [pc, #44]	; (80064f4 <HAL_TIM_Base_MspInit+0x84>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d10b      	bne.n	80064e2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80064ca:	4b09      	ldr	r3, [pc, #36]	; (80064f0 <HAL_TIM_Base_MspInit+0x80>)
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	4a08      	ldr	r2, [pc, #32]	; (80064f0 <HAL_TIM_Base_MspInit+0x80>)
 80064d0:	f043 0302 	orr.w	r3, r3, #2
 80064d4:	61d3      	str	r3, [r2, #28]
 80064d6:	4b06      	ldr	r3, [pc, #24]	; (80064f0 <HAL_TIM_Base_MspInit+0x80>)
 80064d8:	69db      	ldr	r3, [r3, #28]
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	68fb      	ldr	r3, [r7, #12]
}
 80064e2:	bf00      	nop
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bc80      	pop	{r7}
 80064ea:	4770      	bx	lr
 80064ec:	40012c00 	.word	0x40012c00
 80064f0:	40021000 	.word	0x40021000
 80064f4:	40000400 	.word	0x40000400

080064f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08c      	sub	sp, #48	; 0x30
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006500:	f107 0318 	add.w	r3, r7, #24
 8006504:	2200      	movs	r2, #0
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	605a      	str	r2, [r3, #4]
 800650a:	609a      	str	r2, [r3, #8]
 800650c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a4c      	ldr	r2, [pc, #304]	; (8006644 <HAL_TIM_MspPostInit+0x14c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d119      	bne.n	800654c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006518:	4b4b      	ldr	r3, [pc, #300]	; (8006648 <HAL_TIM_MspPostInit+0x150>)
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	4a4a      	ldr	r2, [pc, #296]	; (8006648 <HAL_TIM_MspPostInit+0x150>)
 800651e:	f043 0304 	orr.w	r3, r3, #4
 8006522:	6193      	str	r3, [r2, #24]
 8006524:	4b48      	ldr	r3, [pc, #288]	; (8006648 <HAL_TIM_MspPostInit+0x150>)
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	617b      	str	r3, [r7, #20]
 800652e:	697b      	ldr	r3, [r7, #20]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = PWM4_Pin|PWM3_Pin|PWM2_Pin|PWM1_Pin;
 8006530:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8006534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006536:	2302      	movs	r3, #2
 8006538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800653a:	2302      	movs	r3, #2
 800653c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800653e:	f107 0318 	add.w	r3, r7, #24
 8006542:	4619      	mov	r1, r3
 8006544:	4841      	ldr	r0, [pc, #260]	; (800664c <HAL_TIM_MspPostInit+0x154>)
 8006546:	f7fa fef1 	bl	800132c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800654a:	e077      	b.n	800663c <HAL_TIM_MspPostInit+0x144>
  else if(timHandle->Instance==TIM2)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006554:	d143      	bne.n	80065de <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006556:	4b3c      	ldr	r3, [pc, #240]	; (8006648 <HAL_TIM_MspPostInit+0x150>)
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	4a3b      	ldr	r2, [pc, #236]	; (8006648 <HAL_TIM_MspPostInit+0x150>)
 800655c:	f043 0304 	orr.w	r3, r3, #4
 8006560:	6193      	str	r3, [r2, #24]
 8006562:	4b39      	ldr	r3, [pc, #228]	; (8006648 <HAL_TIM_MspPostInit+0x150>)
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	f003 0304 	and.w	r3, r3, #4
 800656a:	613b      	str	r3, [r7, #16]
 800656c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800656e:	4b36      	ldr	r3, [pc, #216]	; (8006648 <HAL_TIM_MspPostInit+0x150>)
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	4a35      	ldr	r2, [pc, #212]	; (8006648 <HAL_TIM_MspPostInit+0x150>)
 8006574:	f043 0308 	orr.w	r3, r3, #8
 8006578:	6193      	str	r3, [r2, #24]
 800657a:	4b33      	ldr	r3, [pc, #204]	; (8006648 <HAL_TIM_MspPostInit+0x150>)
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	f003 0308 	and.w	r3, r3, #8
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM5_Pin|PWM6_Pin;
 8006586:	2303      	movs	r3, #3
 8006588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800658a:	2302      	movs	r3, #2
 800658c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800658e:	2302      	movs	r3, #2
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006592:	f107 0318 	add.w	r3, r7, #24
 8006596:	4619      	mov	r1, r3
 8006598:	482c      	ldr	r0, [pc, #176]	; (800664c <HAL_TIM_MspPostInit+0x154>)
 800659a:	f7fa fec7 	bl	800132c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM7_Pin|PWM8_Pin;
 800659e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80065a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065a4:	2302      	movs	r3, #2
 80065a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065a8:	2302      	movs	r3, #2
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065ac:	f107 0318 	add.w	r3, r7, #24
 80065b0:	4619      	mov	r1, r3
 80065b2:	4827      	ldr	r0, [pc, #156]	; (8006650 <HAL_TIM_MspPostInit+0x158>)
 80065b4:	f7fa feba 	bl	800132c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80065b8:	4b26      	ldr	r3, [pc, #152]	; (8006654 <HAL_TIM_MspPostInit+0x15c>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80065c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80065cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80065d6:	4a1f      	ldr	r2, [pc, #124]	; (8006654 <HAL_TIM_MspPostInit+0x15c>)
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	6053      	str	r3, [r2, #4]
}
 80065dc:	e02e      	b.n	800663c <HAL_TIM_MspPostInit+0x144>
  else if(timHandle->Instance==TIM3)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a1d      	ldr	r2, [pc, #116]	; (8006658 <HAL_TIM_MspPostInit+0x160>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d129      	bne.n	800663c <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065e8:	4b17      	ldr	r3, [pc, #92]	; (8006648 <HAL_TIM_MspPostInit+0x150>)
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	4a16      	ldr	r2, [pc, #88]	; (8006648 <HAL_TIM_MspPostInit+0x150>)
 80065ee:	f043 0308 	orr.w	r3, r3, #8
 80065f2:	6193      	str	r3, [r2, #24]
 80065f4:	4b14      	ldr	r3, [pc, #80]	; (8006648 <HAL_TIM_MspPostInit+0x150>)
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	f003 0308 	and.w	r3, r3, #8
 80065fc:	60bb      	str	r3, [r7, #8]
 80065fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|PWM9_Pin|PWM10_Pin;
 8006600:	2331      	movs	r3, #49	; 0x31
 8006602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006604:	2302      	movs	r3, #2
 8006606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006608:	2302      	movs	r3, #2
 800660a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800660c:	f107 0318 	add.w	r3, r7, #24
 8006610:	4619      	mov	r1, r3
 8006612:	480f      	ldr	r0, [pc, #60]	; (8006650 <HAL_TIM_MspPostInit+0x158>)
 8006614:	f7fa fe8a 	bl	800132c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8006618:	4b0e      	ldr	r3, [pc, #56]	; (8006654 <HAL_TIM_MspPostInit+0x15c>)
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006620:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006628:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800662c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800662e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006630:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006634:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006636:	4a07      	ldr	r2, [pc, #28]	; (8006654 <HAL_TIM_MspPostInit+0x15c>)
 8006638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663a:	6053      	str	r3, [r2, #4]
}
 800663c:	bf00      	nop
 800663e:	3730      	adds	r7, #48	; 0x30
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	40012c00 	.word	0x40012c00
 8006648:	40021000 	.word	0x40021000
 800664c:	40010800 	.word	0x40010800
 8006650:	40010c00 	.word	0x40010c00
 8006654:	40010000 	.word	0x40010000
 8006658:	40000400 	.word	0x40000400

0800665c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006660:	4b11      	ldr	r3, [pc, #68]	; (80066a8 <MX_USART1_UART_Init+0x4c>)
 8006662:	4a12      	ldr	r2, [pc, #72]	; (80066ac <MX_USART1_UART_Init+0x50>)
 8006664:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006666:	4b10      	ldr	r3, [pc, #64]	; (80066a8 <MX_USART1_UART_Init+0x4c>)
 8006668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800666c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800666e:	4b0e      	ldr	r3, [pc, #56]	; (80066a8 <MX_USART1_UART_Init+0x4c>)
 8006670:	2200      	movs	r2, #0
 8006672:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006674:	4b0c      	ldr	r3, [pc, #48]	; (80066a8 <MX_USART1_UART_Init+0x4c>)
 8006676:	2200      	movs	r2, #0
 8006678:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800667a:	4b0b      	ldr	r3, [pc, #44]	; (80066a8 <MX_USART1_UART_Init+0x4c>)
 800667c:	2200      	movs	r2, #0
 800667e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006680:	4b09      	ldr	r3, [pc, #36]	; (80066a8 <MX_USART1_UART_Init+0x4c>)
 8006682:	220c      	movs	r2, #12
 8006684:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006686:	4b08      	ldr	r3, [pc, #32]	; (80066a8 <MX_USART1_UART_Init+0x4c>)
 8006688:	2200      	movs	r2, #0
 800668a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800668c:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <MX_USART1_UART_Init+0x4c>)
 800668e:	2200      	movs	r2, #0
 8006690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006692:	4805      	ldr	r0, [pc, #20]	; (80066a8 <MX_USART1_UART_Init+0x4c>)
 8006694:	f7fc fe57 	bl	8003346 <HAL_UART_Init>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800669e:	f7ff fc33 	bl	8005f08 <Error_Handler>
  }

}
 80066a2:	bf00      	nop
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20001a50 	.word	0x20001a50
 80066ac:	40013800 	.word	0x40013800

080066b0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80066b4:	4b11      	ldr	r3, [pc, #68]	; (80066fc <MX_USART2_UART_Init+0x4c>)
 80066b6:	4a12      	ldr	r2, [pc, #72]	; (8006700 <MX_USART2_UART_Init+0x50>)
 80066b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 80066ba:	4b10      	ldr	r3, [pc, #64]	; (80066fc <MX_USART2_UART_Init+0x4c>)
 80066bc:	4a11      	ldr	r2, [pc, #68]	; (8006704 <MX_USART2_UART_Init+0x54>)
 80066be:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80066c0:	4b0e      	ldr	r3, [pc, #56]	; (80066fc <MX_USART2_UART_Init+0x4c>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 80066c6:	4b0d      	ldr	r3, [pc, #52]	; (80066fc <MX_USART2_UART_Init+0x4c>)
 80066c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80066ce:	4b0b      	ldr	r3, [pc, #44]	; (80066fc <MX_USART2_UART_Init+0x4c>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 80066d4:	4b09      	ldr	r3, [pc, #36]	; (80066fc <MX_USART2_UART_Init+0x4c>)
 80066d6:	2204      	movs	r2, #4
 80066d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066da:	4b08      	ldr	r3, [pc, #32]	; (80066fc <MX_USART2_UART_Init+0x4c>)
 80066dc:	2200      	movs	r2, #0
 80066de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80066e0:	4b06      	ldr	r3, [pc, #24]	; (80066fc <MX_USART2_UART_Init+0x4c>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80066e6:	4805      	ldr	r0, [pc, #20]	; (80066fc <MX_USART2_UART_Init+0x4c>)
 80066e8:	f7fc fe2d 	bl	8003346 <HAL_UART_Init>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80066f2:	f7ff fc09 	bl	8005f08 <Error_Handler>
  }

}
 80066f6:	bf00      	nop
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20001a90 	.word	0x20001a90
 8006700:	40004400 	.word	0x40004400
 8006704:	0003d090 	.word	0x0003d090

08006708 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b08c      	sub	sp, #48	; 0x30
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006710:	f107 031c 	add.w	r3, r7, #28
 8006714:	2200      	movs	r2, #0
 8006716:	601a      	str	r2, [r3, #0]
 8006718:	605a      	str	r2, [r3, #4]
 800671a:	609a      	str	r2, [r3, #8]
 800671c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a41      	ldr	r2, [pc, #260]	; (8006828 <HAL_UART_MspInit+0x120>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d13e      	bne.n	80067a6 <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006728:	4b40      	ldr	r3, [pc, #256]	; (800682c <HAL_UART_MspInit+0x124>)
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	4a3f      	ldr	r2, [pc, #252]	; (800682c <HAL_UART_MspInit+0x124>)
 800672e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006732:	6193      	str	r3, [r2, #24]
 8006734:	4b3d      	ldr	r3, [pc, #244]	; (800682c <HAL_UART_MspInit+0x124>)
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800673c:	61bb      	str	r3, [r7, #24]
 800673e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006740:	4b3a      	ldr	r3, [pc, #232]	; (800682c <HAL_UART_MspInit+0x124>)
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	4a39      	ldr	r2, [pc, #228]	; (800682c <HAL_UART_MspInit+0x124>)
 8006746:	f043 0308 	orr.w	r3, r3, #8
 800674a:	6193      	str	r3, [r2, #24]
 800674c:	4b37      	ldr	r3, [pc, #220]	; (800682c <HAL_UART_MspInit+0x124>)
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	f003 0308 	and.w	r3, r3, #8
 8006754:	617b      	str	r3, [r7, #20]
 8006756:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_DUBUG_Pin;
 8006758:	2340      	movs	r3, #64	; 0x40
 800675a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800675c:	2302      	movs	r3, #2
 800675e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006760:	2303      	movs	r3, #3
 8006762:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(USART_TX_DUBUG_GPIO_Port, &GPIO_InitStruct);
 8006764:	f107 031c 	add.w	r3, r7, #28
 8006768:	4619      	mov	r1, r3
 800676a:	4831      	ldr	r0, [pc, #196]	; (8006830 <HAL_UART_MspInit+0x128>)
 800676c:	f7fa fdde 	bl	800132c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_DUBUG_Pin;
 8006770:	2380      	movs	r3, #128	; 0x80
 8006772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006774:	2300      	movs	r3, #0
 8006776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006778:	2300      	movs	r3, #0
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USART_RX_DUBUG_GPIO_Port, &GPIO_InitStruct);
 800677c:	f107 031c 	add.w	r3, r7, #28
 8006780:	4619      	mov	r1, r3
 8006782:	482b      	ldr	r0, [pc, #172]	; (8006830 <HAL_UART_MspInit+0x128>)
 8006784:	f7fa fdd2 	bl	800132c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8006788:	4b2a      	ldr	r3, [pc, #168]	; (8006834 <HAL_UART_MspInit+0x12c>)
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006790:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8006794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006798:	f043 0304 	orr.w	r3, r3, #4
 800679c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800679e:	4a25      	ldr	r2, [pc, #148]	; (8006834 <HAL_UART_MspInit+0x12c>)
 80067a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a2:	6053      	str	r3, [r2, #4]
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80067a4:	e03c      	b.n	8006820 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART2)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a23      	ldr	r2, [pc, #140]	; (8006838 <HAL_UART_MspInit+0x130>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d137      	bne.n	8006820 <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART2_CLK_ENABLE();
 80067b0:	4b1e      	ldr	r3, [pc, #120]	; (800682c <HAL_UART_MspInit+0x124>)
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	4a1d      	ldr	r2, [pc, #116]	; (800682c <HAL_UART_MspInit+0x124>)
 80067b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067ba:	61d3      	str	r3, [r2, #28]
 80067bc:	4b1b      	ldr	r3, [pc, #108]	; (800682c <HAL_UART_MspInit+0x124>)
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c4:	613b      	str	r3, [r7, #16]
 80067c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067c8:	4b18      	ldr	r3, [pc, #96]	; (800682c <HAL_UART_MspInit+0x124>)
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	4a17      	ldr	r2, [pc, #92]	; (800682c <HAL_UART_MspInit+0x124>)
 80067ce:	f043 0304 	orr.w	r3, r3, #4
 80067d2:	6193      	str	r3, [r2, #24]
 80067d4:	4b15      	ldr	r3, [pc, #84]	; (800682c <HAL_UART_MspInit+0x124>)
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	60fb      	str	r3, [r7, #12]
 80067de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DMX_OUT_Pin;
 80067e0:	2304      	movs	r3, #4
 80067e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067e4:	2302      	movs	r3, #2
 80067e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80067e8:	2303      	movs	r3, #3
 80067ea:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(DMX_OUT_GPIO_Port, &GPIO_InitStruct);
 80067ec:	f107 031c 	add.w	r3, r7, #28
 80067f0:	4619      	mov	r1, r3
 80067f2:	4812      	ldr	r0, [pc, #72]	; (800683c <HAL_UART_MspInit+0x134>)
 80067f4:	f7fa fd9a 	bl	800132c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DMX_IN_Pin;
 80067f8:	2308      	movs	r3, #8
 80067fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067fc:	2300      	movs	r3, #0
 80067fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006800:	2300      	movs	r3, #0
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DMX_IN_GPIO_Port, &GPIO_InitStruct);
 8006804:	f107 031c 	add.w	r3, r7, #28
 8006808:	4619      	mov	r1, r3
 800680a:	480c      	ldr	r0, [pc, #48]	; (800683c <HAL_UART_MspInit+0x134>)
 800680c:	f7fa fd8e 	bl	800132c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8006810:	2200      	movs	r2, #0
 8006812:	2105      	movs	r1, #5
 8006814:	2026      	movs	r0, #38	; 0x26
 8006816:	f7fa fadc 	bl	8000dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800681a:	2026      	movs	r0, #38	; 0x26
 800681c:	f7fa faf5 	bl	8000e0a <HAL_NVIC_EnableIRQ>
}
 8006820:	bf00      	nop
 8006822:	3730      	adds	r7, #48	; 0x30
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	40013800 	.word	0x40013800
 800682c:	40021000 	.word	0x40021000
 8006830:	40010c00 	.word	0x40010c00
 8006834:	40010000 	.word	0x40010000
 8006838:	40004400 	.word	0x40004400
 800683c:	40010800 	.word	0x40010800

08006840 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006840:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006842:	e003      	b.n	800684c <LoopCopyDataInit>

08006844 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006844:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006846:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006848:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800684a:	3104      	adds	r1, #4

0800684c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800684c:	480a      	ldr	r0, [pc, #40]	; (8006878 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800684e:	4b0b      	ldr	r3, [pc, #44]	; (800687c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006850:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006852:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006854:	d3f6      	bcc.n	8006844 <CopyDataInit>
  ldr r2, =_sbss
 8006856:	4a0a      	ldr	r2, [pc, #40]	; (8006880 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006858:	e002      	b.n	8006860 <LoopFillZerobss>

0800685a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800685a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800685c:	f842 3b04 	str.w	r3, [r2], #4

08006860 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006860:	4b08      	ldr	r3, [pc, #32]	; (8006884 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006862:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006864:	d3f9      	bcc.n	800685a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006866:	f7ff fbe9 	bl	800603c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800686a:	f000 f815 	bl	8006898 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800686e:	f7ff fa57 	bl	8005d20 <main>
  bx lr
 8006872:	4770      	bx	lr
  ldr r3, =_sidata
 8006874:	08009a78 	.word	0x08009a78
  ldr r0, =_sdata
 8006878:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800687c:	2000008c 	.word	0x2000008c
  ldr r2, =_sbss
 8006880:	20000090 	.word	0x20000090
  ldr r3, = _ebss
 8006884:	20001ad4 	.word	0x20001ad4

08006888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006888:	e7fe      	b.n	8006888 <ADC1_2_IRQHandler>
	...

0800688c <__errno>:
 800688c:	4b01      	ldr	r3, [pc, #4]	; (8006894 <__errno+0x8>)
 800688e:	6818      	ldr	r0, [r3, #0]
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	20000028 	.word	0x20000028

08006898 <__libc_init_array>:
 8006898:	b570      	push	{r4, r5, r6, lr}
 800689a:	2500      	movs	r5, #0
 800689c:	4e0c      	ldr	r6, [pc, #48]	; (80068d0 <__libc_init_array+0x38>)
 800689e:	4c0d      	ldr	r4, [pc, #52]	; (80068d4 <__libc_init_array+0x3c>)
 80068a0:	1ba4      	subs	r4, r4, r6
 80068a2:	10a4      	asrs	r4, r4, #2
 80068a4:	42a5      	cmp	r5, r4
 80068a6:	d109      	bne.n	80068bc <__libc_init_array+0x24>
 80068a8:	f000 fc36 	bl	8007118 <_init>
 80068ac:	2500      	movs	r5, #0
 80068ae:	4e0a      	ldr	r6, [pc, #40]	; (80068d8 <__libc_init_array+0x40>)
 80068b0:	4c0a      	ldr	r4, [pc, #40]	; (80068dc <__libc_init_array+0x44>)
 80068b2:	1ba4      	subs	r4, r4, r6
 80068b4:	10a4      	asrs	r4, r4, #2
 80068b6:	42a5      	cmp	r5, r4
 80068b8:	d105      	bne.n	80068c6 <__libc_init_array+0x2e>
 80068ba:	bd70      	pop	{r4, r5, r6, pc}
 80068bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068c0:	4798      	blx	r3
 80068c2:	3501      	adds	r5, #1
 80068c4:	e7ee      	b.n	80068a4 <__libc_init_array+0xc>
 80068c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068ca:	4798      	blx	r3
 80068cc:	3501      	adds	r5, #1
 80068ce:	e7f2      	b.n	80068b6 <__libc_init_array+0x1e>
 80068d0:	08009a70 	.word	0x08009a70
 80068d4:	08009a70 	.word	0x08009a70
 80068d8:	08009a70 	.word	0x08009a70
 80068dc:	08009a74 	.word	0x08009a74

080068e0 <memcpy>:
 80068e0:	b510      	push	{r4, lr}
 80068e2:	1e43      	subs	r3, r0, #1
 80068e4:	440a      	add	r2, r1
 80068e6:	4291      	cmp	r1, r2
 80068e8:	d100      	bne.n	80068ec <memcpy+0xc>
 80068ea:	bd10      	pop	{r4, pc}
 80068ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068f4:	e7f7      	b.n	80068e6 <memcpy+0x6>

080068f6 <memset>:
 80068f6:	4603      	mov	r3, r0
 80068f8:	4402      	add	r2, r0
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d100      	bne.n	8006900 <memset+0xa>
 80068fe:	4770      	bx	lr
 8006900:	f803 1b01 	strb.w	r1, [r3], #1
 8006904:	e7f9      	b.n	80068fa <memset+0x4>
	...

08006908 <siprintf>:
 8006908:	b40e      	push	{r1, r2, r3}
 800690a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800690e:	b500      	push	{lr}
 8006910:	b09c      	sub	sp, #112	; 0x70
 8006912:	ab1d      	add	r3, sp, #116	; 0x74
 8006914:	9002      	str	r0, [sp, #8]
 8006916:	9006      	str	r0, [sp, #24]
 8006918:	9107      	str	r1, [sp, #28]
 800691a:	9104      	str	r1, [sp, #16]
 800691c:	4808      	ldr	r0, [pc, #32]	; (8006940 <siprintf+0x38>)
 800691e:	4909      	ldr	r1, [pc, #36]	; (8006944 <siprintf+0x3c>)
 8006920:	f853 2b04 	ldr.w	r2, [r3], #4
 8006924:	9105      	str	r1, [sp, #20]
 8006926:	6800      	ldr	r0, [r0, #0]
 8006928:	a902      	add	r1, sp, #8
 800692a:	9301      	str	r3, [sp, #4]
 800692c:	f000 f866 	bl	80069fc <_svfiprintf_r>
 8006930:	2200      	movs	r2, #0
 8006932:	9b02      	ldr	r3, [sp, #8]
 8006934:	701a      	strb	r2, [r3, #0]
 8006936:	b01c      	add	sp, #112	; 0x70
 8006938:	f85d eb04 	ldr.w	lr, [sp], #4
 800693c:	b003      	add	sp, #12
 800693e:	4770      	bx	lr
 8006940:	20000028 	.word	0x20000028
 8006944:	ffff0208 	.word	0xffff0208

08006948 <__ssputs_r>:
 8006948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800694c:	688e      	ldr	r6, [r1, #8]
 800694e:	4682      	mov	sl, r0
 8006950:	429e      	cmp	r6, r3
 8006952:	460c      	mov	r4, r1
 8006954:	4690      	mov	r8, r2
 8006956:	4699      	mov	r9, r3
 8006958:	d837      	bhi.n	80069ca <__ssputs_r+0x82>
 800695a:	898a      	ldrh	r2, [r1, #12]
 800695c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006960:	d031      	beq.n	80069c6 <__ssputs_r+0x7e>
 8006962:	2302      	movs	r3, #2
 8006964:	6825      	ldr	r5, [r4, #0]
 8006966:	6909      	ldr	r1, [r1, #16]
 8006968:	1a6f      	subs	r7, r5, r1
 800696a:	6965      	ldr	r5, [r4, #20]
 800696c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006970:	fb95 f5f3 	sdiv	r5, r5, r3
 8006974:	f109 0301 	add.w	r3, r9, #1
 8006978:	443b      	add	r3, r7
 800697a:	429d      	cmp	r5, r3
 800697c:	bf38      	it	cc
 800697e:	461d      	movcc	r5, r3
 8006980:	0553      	lsls	r3, r2, #21
 8006982:	d530      	bpl.n	80069e6 <__ssputs_r+0x9e>
 8006984:	4629      	mov	r1, r5
 8006986:	f000 fb2d 	bl	8006fe4 <_malloc_r>
 800698a:	4606      	mov	r6, r0
 800698c:	b950      	cbnz	r0, 80069a4 <__ssputs_r+0x5c>
 800698e:	230c      	movs	r3, #12
 8006990:	f04f 30ff 	mov.w	r0, #4294967295
 8006994:	f8ca 3000 	str.w	r3, [sl]
 8006998:	89a3      	ldrh	r3, [r4, #12]
 800699a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800699e:	81a3      	strh	r3, [r4, #12]
 80069a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a4:	463a      	mov	r2, r7
 80069a6:	6921      	ldr	r1, [r4, #16]
 80069a8:	f7ff ff9a 	bl	80068e0 <memcpy>
 80069ac:	89a3      	ldrh	r3, [r4, #12]
 80069ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b6:	81a3      	strh	r3, [r4, #12]
 80069b8:	6126      	str	r6, [r4, #16]
 80069ba:	443e      	add	r6, r7
 80069bc:	6026      	str	r6, [r4, #0]
 80069be:	464e      	mov	r6, r9
 80069c0:	6165      	str	r5, [r4, #20]
 80069c2:	1bed      	subs	r5, r5, r7
 80069c4:	60a5      	str	r5, [r4, #8]
 80069c6:	454e      	cmp	r6, r9
 80069c8:	d900      	bls.n	80069cc <__ssputs_r+0x84>
 80069ca:	464e      	mov	r6, r9
 80069cc:	4632      	mov	r2, r6
 80069ce:	4641      	mov	r1, r8
 80069d0:	6820      	ldr	r0, [r4, #0]
 80069d2:	f000 faa1 	bl	8006f18 <memmove>
 80069d6:	68a3      	ldr	r3, [r4, #8]
 80069d8:	2000      	movs	r0, #0
 80069da:	1b9b      	subs	r3, r3, r6
 80069dc:	60a3      	str	r3, [r4, #8]
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	441e      	add	r6, r3
 80069e2:	6026      	str	r6, [r4, #0]
 80069e4:	e7dc      	b.n	80069a0 <__ssputs_r+0x58>
 80069e6:	462a      	mov	r2, r5
 80069e8:	f000 fb56 	bl	8007098 <_realloc_r>
 80069ec:	4606      	mov	r6, r0
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d1e2      	bne.n	80069b8 <__ssputs_r+0x70>
 80069f2:	6921      	ldr	r1, [r4, #16]
 80069f4:	4650      	mov	r0, sl
 80069f6:	f000 faa9 	bl	8006f4c <_free_r>
 80069fa:	e7c8      	b.n	800698e <__ssputs_r+0x46>

080069fc <_svfiprintf_r>:
 80069fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a00:	461d      	mov	r5, r3
 8006a02:	898b      	ldrh	r3, [r1, #12]
 8006a04:	b09d      	sub	sp, #116	; 0x74
 8006a06:	061f      	lsls	r7, r3, #24
 8006a08:	4680      	mov	r8, r0
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	4616      	mov	r6, r2
 8006a0e:	d50f      	bpl.n	8006a30 <_svfiprintf_r+0x34>
 8006a10:	690b      	ldr	r3, [r1, #16]
 8006a12:	b96b      	cbnz	r3, 8006a30 <_svfiprintf_r+0x34>
 8006a14:	2140      	movs	r1, #64	; 0x40
 8006a16:	f000 fae5 	bl	8006fe4 <_malloc_r>
 8006a1a:	6020      	str	r0, [r4, #0]
 8006a1c:	6120      	str	r0, [r4, #16]
 8006a1e:	b928      	cbnz	r0, 8006a2c <_svfiprintf_r+0x30>
 8006a20:	230c      	movs	r3, #12
 8006a22:	f8c8 3000 	str.w	r3, [r8]
 8006a26:	f04f 30ff 	mov.w	r0, #4294967295
 8006a2a:	e0c8      	b.n	8006bbe <_svfiprintf_r+0x1c2>
 8006a2c:	2340      	movs	r3, #64	; 0x40
 8006a2e:	6163      	str	r3, [r4, #20]
 8006a30:	2300      	movs	r3, #0
 8006a32:	9309      	str	r3, [sp, #36]	; 0x24
 8006a34:	2320      	movs	r3, #32
 8006a36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a3a:	2330      	movs	r3, #48	; 0x30
 8006a3c:	f04f 0b01 	mov.w	fp, #1
 8006a40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a44:	9503      	str	r5, [sp, #12]
 8006a46:	4637      	mov	r7, r6
 8006a48:	463d      	mov	r5, r7
 8006a4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006a4e:	b10b      	cbz	r3, 8006a54 <_svfiprintf_r+0x58>
 8006a50:	2b25      	cmp	r3, #37	; 0x25
 8006a52:	d13e      	bne.n	8006ad2 <_svfiprintf_r+0xd6>
 8006a54:	ebb7 0a06 	subs.w	sl, r7, r6
 8006a58:	d00b      	beq.n	8006a72 <_svfiprintf_r+0x76>
 8006a5a:	4653      	mov	r3, sl
 8006a5c:	4632      	mov	r2, r6
 8006a5e:	4621      	mov	r1, r4
 8006a60:	4640      	mov	r0, r8
 8006a62:	f7ff ff71 	bl	8006948 <__ssputs_r>
 8006a66:	3001      	adds	r0, #1
 8006a68:	f000 80a4 	beq.w	8006bb4 <_svfiprintf_r+0x1b8>
 8006a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a6e:	4453      	add	r3, sl
 8006a70:	9309      	str	r3, [sp, #36]	; 0x24
 8006a72:	783b      	ldrb	r3, [r7, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 809d 	beq.w	8006bb4 <_svfiprintf_r+0x1b8>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a84:	9304      	str	r3, [sp, #16]
 8006a86:	9307      	str	r3, [sp, #28]
 8006a88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a8c:	931a      	str	r3, [sp, #104]	; 0x68
 8006a8e:	462f      	mov	r7, r5
 8006a90:	2205      	movs	r2, #5
 8006a92:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006a96:	4850      	ldr	r0, [pc, #320]	; (8006bd8 <_svfiprintf_r+0x1dc>)
 8006a98:	f000 fa30 	bl	8006efc <memchr>
 8006a9c:	9b04      	ldr	r3, [sp, #16]
 8006a9e:	b9d0      	cbnz	r0, 8006ad6 <_svfiprintf_r+0xda>
 8006aa0:	06d9      	lsls	r1, r3, #27
 8006aa2:	bf44      	itt	mi
 8006aa4:	2220      	movmi	r2, #32
 8006aa6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006aaa:	071a      	lsls	r2, r3, #28
 8006aac:	bf44      	itt	mi
 8006aae:	222b      	movmi	r2, #43	; 0x2b
 8006ab0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ab4:	782a      	ldrb	r2, [r5, #0]
 8006ab6:	2a2a      	cmp	r2, #42	; 0x2a
 8006ab8:	d015      	beq.n	8006ae6 <_svfiprintf_r+0xea>
 8006aba:	462f      	mov	r7, r5
 8006abc:	2000      	movs	r0, #0
 8006abe:	250a      	movs	r5, #10
 8006ac0:	9a07      	ldr	r2, [sp, #28]
 8006ac2:	4639      	mov	r1, r7
 8006ac4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ac8:	3b30      	subs	r3, #48	; 0x30
 8006aca:	2b09      	cmp	r3, #9
 8006acc:	d94d      	bls.n	8006b6a <_svfiprintf_r+0x16e>
 8006ace:	b1b8      	cbz	r0, 8006b00 <_svfiprintf_r+0x104>
 8006ad0:	e00f      	b.n	8006af2 <_svfiprintf_r+0xf6>
 8006ad2:	462f      	mov	r7, r5
 8006ad4:	e7b8      	b.n	8006a48 <_svfiprintf_r+0x4c>
 8006ad6:	4a40      	ldr	r2, [pc, #256]	; (8006bd8 <_svfiprintf_r+0x1dc>)
 8006ad8:	463d      	mov	r5, r7
 8006ada:	1a80      	subs	r0, r0, r2
 8006adc:	fa0b f000 	lsl.w	r0, fp, r0
 8006ae0:	4318      	orrs	r0, r3
 8006ae2:	9004      	str	r0, [sp, #16]
 8006ae4:	e7d3      	b.n	8006a8e <_svfiprintf_r+0x92>
 8006ae6:	9a03      	ldr	r2, [sp, #12]
 8006ae8:	1d11      	adds	r1, r2, #4
 8006aea:	6812      	ldr	r2, [r2, #0]
 8006aec:	9103      	str	r1, [sp, #12]
 8006aee:	2a00      	cmp	r2, #0
 8006af0:	db01      	blt.n	8006af6 <_svfiprintf_r+0xfa>
 8006af2:	9207      	str	r2, [sp, #28]
 8006af4:	e004      	b.n	8006b00 <_svfiprintf_r+0x104>
 8006af6:	4252      	negs	r2, r2
 8006af8:	f043 0302 	orr.w	r3, r3, #2
 8006afc:	9207      	str	r2, [sp, #28]
 8006afe:	9304      	str	r3, [sp, #16]
 8006b00:	783b      	ldrb	r3, [r7, #0]
 8006b02:	2b2e      	cmp	r3, #46	; 0x2e
 8006b04:	d10c      	bne.n	8006b20 <_svfiprintf_r+0x124>
 8006b06:	787b      	ldrb	r3, [r7, #1]
 8006b08:	2b2a      	cmp	r3, #42	; 0x2a
 8006b0a:	d133      	bne.n	8006b74 <_svfiprintf_r+0x178>
 8006b0c:	9b03      	ldr	r3, [sp, #12]
 8006b0e:	3702      	adds	r7, #2
 8006b10:	1d1a      	adds	r2, r3, #4
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	9203      	str	r2, [sp, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	bfb8      	it	lt
 8006b1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b1e:	9305      	str	r3, [sp, #20]
 8006b20:	4d2e      	ldr	r5, [pc, #184]	; (8006bdc <_svfiprintf_r+0x1e0>)
 8006b22:	2203      	movs	r2, #3
 8006b24:	7839      	ldrb	r1, [r7, #0]
 8006b26:	4628      	mov	r0, r5
 8006b28:	f000 f9e8 	bl	8006efc <memchr>
 8006b2c:	b138      	cbz	r0, 8006b3e <_svfiprintf_r+0x142>
 8006b2e:	2340      	movs	r3, #64	; 0x40
 8006b30:	1b40      	subs	r0, r0, r5
 8006b32:	fa03 f000 	lsl.w	r0, r3, r0
 8006b36:	9b04      	ldr	r3, [sp, #16]
 8006b38:	3701      	adds	r7, #1
 8006b3a:	4303      	orrs	r3, r0
 8006b3c:	9304      	str	r3, [sp, #16]
 8006b3e:	7839      	ldrb	r1, [r7, #0]
 8006b40:	2206      	movs	r2, #6
 8006b42:	4827      	ldr	r0, [pc, #156]	; (8006be0 <_svfiprintf_r+0x1e4>)
 8006b44:	1c7e      	adds	r6, r7, #1
 8006b46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b4a:	f000 f9d7 	bl	8006efc <memchr>
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	d038      	beq.n	8006bc4 <_svfiprintf_r+0x1c8>
 8006b52:	4b24      	ldr	r3, [pc, #144]	; (8006be4 <_svfiprintf_r+0x1e8>)
 8006b54:	bb13      	cbnz	r3, 8006b9c <_svfiprintf_r+0x1a0>
 8006b56:	9b03      	ldr	r3, [sp, #12]
 8006b58:	3307      	adds	r3, #7
 8006b5a:	f023 0307 	bic.w	r3, r3, #7
 8006b5e:	3308      	adds	r3, #8
 8006b60:	9303      	str	r3, [sp, #12]
 8006b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b64:	444b      	add	r3, r9
 8006b66:	9309      	str	r3, [sp, #36]	; 0x24
 8006b68:	e76d      	b.n	8006a46 <_svfiprintf_r+0x4a>
 8006b6a:	fb05 3202 	mla	r2, r5, r2, r3
 8006b6e:	2001      	movs	r0, #1
 8006b70:	460f      	mov	r7, r1
 8006b72:	e7a6      	b.n	8006ac2 <_svfiprintf_r+0xc6>
 8006b74:	2300      	movs	r3, #0
 8006b76:	250a      	movs	r5, #10
 8006b78:	4619      	mov	r1, r3
 8006b7a:	3701      	adds	r7, #1
 8006b7c:	9305      	str	r3, [sp, #20]
 8006b7e:	4638      	mov	r0, r7
 8006b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b84:	3a30      	subs	r2, #48	; 0x30
 8006b86:	2a09      	cmp	r2, #9
 8006b88:	d903      	bls.n	8006b92 <_svfiprintf_r+0x196>
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d0c8      	beq.n	8006b20 <_svfiprintf_r+0x124>
 8006b8e:	9105      	str	r1, [sp, #20]
 8006b90:	e7c6      	b.n	8006b20 <_svfiprintf_r+0x124>
 8006b92:	fb05 2101 	mla	r1, r5, r1, r2
 8006b96:	2301      	movs	r3, #1
 8006b98:	4607      	mov	r7, r0
 8006b9a:	e7f0      	b.n	8006b7e <_svfiprintf_r+0x182>
 8006b9c:	ab03      	add	r3, sp, #12
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	4622      	mov	r2, r4
 8006ba2:	4b11      	ldr	r3, [pc, #68]	; (8006be8 <_svfiprintf_r+0x1ec>)
 8006ba4:	a904      	add	r1, sp, #16
 8006ba6:	4640      	mov	r0, r8
 8006ba8:	f3af 8000 	nop.w
 8006bac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006bb0:	4681      	mov	r9, r0
 8006bb2:	d1d6      	bne.n	8006b62 <_svfiprintf_r+0x166>
 8006bb4:	89a3      	ldrh	r3, [r4, #12]
 8006bb6:	065b      	lsls	r3, r3, #25
 8006bb8:	f53f af35 	bmi.w	8006a26 <_svfiprintf_r+0x2a>
 8006bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bbe:	b01d      	add	sp, #116	; 0x74
 8006bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc4:	ab03      	add	r3, sp, #12
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	4622      	mov	r2, r4
 8006bca:	4b07      	ldr	r3, [pc, #28]	; (8006be8 <_svfiprintf_r+0x1ec>)
 8006bcc:	a904      	add	r1, sp, #16
 8006bce:	4640      	mov	r0, r8
 8006bd0:	f000 f882 	bl	8006cd8 <_printf_i>
 8006bd4:	e7ea      	b.n	8006bac <_svfiprintf_r+0x1b0>
 8006bd6:	bf00      	nop
 8006bd8:	08009a3c 	.word	0x08009a3c
 8006bdc:	08009a42 	.word	0x08009a42
 8006be0:	08009a46 	.word	0x08009a46
 8006be4:	00000000 	.word	0x00000000
 8006be8:	08006949 	.word	0x08006949

08006bec <_printf_common>:
 8006bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf0:	4691      	mov	r9, r2
 8006bf2:	461f      	mov	r7, r3
 8006bf4:	688a      	ldr	r2, [r1, #8]
 8006bf6:	690b      	ldr	r3, [r1, #16]
 8006bf8:	4606      	mov	r6, r0
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	bfb8      	it	lt
 8006bfe:	4613      	movlt	r3, r2
 8006c00:	f8c9 3000 	str.w	r3, [r9]
 8006c04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c08:	460c      	mov	r4, r1
 8006c0a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c0e:	b112      	cbz	r2, 8006c16 <_printf_common+0x2a>
 8006c10:	3301      	adds	r3, #1
 8006c12:	f8c9 3000 	str.w	r3, [r9]
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	0699      	lsls	r1, r3, #26
 8006c1a:	bf42      	ittt	mi
 8006c1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006c20:	3302      	addmi	r3, #2
 8006c22:	f8c9 3000 	strmi.w	r3, [r9]
 8006c26:	6825      	ldr	r5, [r4, #0]
 8006c28:	f015 0506 	ands.w	r5, r5, #6
 8006c2c:	d107      	bne.n	8006c3e <_printf_common+0x52>
 8006c2e:	f104 0a19 	add.w	sl, r4, #25
 8006c32:	68e3      	ldr	r3, [r4, #12]
 8006c34:	f8d9 2000 	ldr.w	r2, [r9]
 8006c38:	1a9b      	subs	r3, r3, r2
 8006c3a:	42ab      	cmp	r3, r5
 8006c3c:	dc29      	bgt.n	8006c92 <_printf_common+0xa6>
 8006c3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006c42:	6822      	ldr	r2, [r4, #0]
 8006c44:	3300      	adds	r3, #0
 8006c46:	bf18      	it	ne
 8006c48:	2301      	movne	r3, #1
 8006c4a:	0692      	lsls	r2, r2, #26
 8006c4c:	d42e      	bmi.n	8006cac <_printf_common+0xc0>
 8006c4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c52:	4639      	mov	r1, r7
 8006c54:	4630      	mov	r0, r6
 8006c56:	47c0      	blx	r8
 8006c58:	3001      	adds	r0, #1
 8006c5a:	d021      	beq.n	8006ca0 <_printf_common+0xb4>
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	68e5      	ldr	r5, [r4, #12]
 8006c60:	f003 0306 	and.w	r3, r3, #6
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	bf18      	it	ne
 8006c68:	2500      	movne	r5, #0
 8006c6a:	f8d9 2000 	ldr.w	r2, [r9]
 8006c6e:	f04f 0900 	mov.w	r9, #0
 8006c72:	bf08      	it	eq
 8006c74:	1aad      	subeq	r5, r5, r2
 8006c76:	68a3      	ldr	r3, [r4, #8]
 8006c78:	6922      	ldr	r2, [r4, #16]
 8006c7a:	bf08      	it	eq
 8006c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c80:	4293      	cmp	r3, r2
 8006c82:	bfc4      	itt	gt
 8006c84:	1a9b      	subgt	r3, r3, r2
 8006c86:	18ed      	addgt	r5, r5, r3
 8006c88:	341a      	adds	r4, #26
 8006c8a:	454d      	cmp	r5, r9
 8006c8c:	d11a      	bne.n	8006cc4 <_printf_common+0xd8>
 8006c8e:	2000      	movs	r0, #0
 8006c90:	e008      	b.n	8006ca4 <_printf_common+0xb8>
 8006c92:	2301      	movs	r3, #1
 8006c94:	4652      	mov	r2, sl
 8006c96:	4639      	mov	r1, r7
 8006c98:	4630      	mov	r0, r6
 8006c9a:	47c0      	blx	r8
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	d103      	bne.n	8006ca8 <_printf_common+0xbc>
 8006ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ca8:	3501      	adds	r5, #1
 8006caa:	e7c2      	b.n	8006c32 <_printf_common+0x46>
 8006cac:	2030      	movs	r0, #48	; 0x30
 8006cae:	18e1      	adds	r1, r4, r3
 8006cb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cba:	4422      	add	r2, r4
 8006cbc:	3302      	adds	r3, #2
 8006cbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cc2:	e7c4      	b.n	8006c4e <_printf_common+0x62>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	4622      	mov	r2, r4
 8006cc8:	4639      	mov	r1, r7
 8006cca:	4630      	mov	r0, r6
 8006ccc:	47c0      	blx	r8
 8006cce:	3001      	adds	r0, #1
 8006cd0:	d0e6      	beq.n	8006ca0 <_printf_common+0xb4>
 8006cd2:	f109 0901 	add.w	r9, r9, #1
 8006cd6:	e7d8      	b.n	8006c8a <_printf_common+0x9e>

08006cd8 <_printf_i>:
 8006cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cdc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006ce0:	460c      	mov	r4, r1
 8006ce2:	7e09      	ldrb	r1, [r1, #24]
 8006ce4:	b085      	sub	sp, #20
 8006ce6:	296e      	cmp	r1, #110	; 0x6e
 8006ce8:	4617      	mov	r7, r2
 8006cea:	4606      	mov	r6, r0
 8006cec:	4698      	mov	r8, r3
 8006cee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cf0:	f000 80b3 	beq.w	8006e5a <_printf_i+0x182>
 8006cf4:	d822      	bhi.n	8006d3c <_printf_i+0x64>
 8006cf6:	2963      	cmp	r1, #99	; 0x63
 8006cf8:	d036      	beq.n	8006d68 <_printf_i+0x90>
 8006cfa:	d80a      	bhi.n	8006d12 <_printf_i+0x3a>
 8006cfc:	2900      	cmp	r1, #0
 8006cfe:	f000 80b9 	beq.w	8006e74 <_printf_i+0x19c>
 8006d02:	2958      	cmp	r1, #88	; 0x58
 8006d04:	f000 8083 	beq.w	8006e0e <_printf_i+0x136>
 8006d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006d10:	e032      	b.n	8006d78 <_printf_i+0xa0>
 8006d12:	2964      	cmp	r1, #100	; 0x64
 8006d14:	d001      	beq.n	8006d1a <_printf_i+0x42>
 8006d16:	2969      	cmp	r1, #105	; 0x69
 8006d18:	d1f6      	bne.n	8006d08 <_printf_i+0x30>
 8006d1a:	6820      	ldr	r0, [r4, #0]
 8006d1c:	6813      	ldr	r3, [r2, #0]
 8006d1e:	0605      	lsls	r5, r0, #24
 8006d20:	f103 0104 	add.w	r1, r3, #4
 8006d24:	d52a      	bpl.n	8006d7c <_printf_i+0xa4>
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6011      	str	r1, [r2, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	da03      	bge.n	8006d36 <_printf_i+0x5e>
 8006d2e:	222d      	movs	r2, #45	; 0x2d
 8006d30:	425b      	negs	r3, r3
 8006d32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006d36:	486f      	ldr	r0, [pc, #444]	; (8006ef4 <_printf_i+0x21c>)
 8006d38:	220a      	movs	r2, #10
 8006d3a:	e039      	b.n	8006db0 <_printf_i+0xd8>
 8006d3c:	2973      	cmp	r1, #115	; 0x73
 8006d3e:	f000 809d 	beq.w	8006e7c <_printf_i+0x1a4>
 8006d42:	d808      	bhi.n	8006d56 <_printf_i+0x7e>
 8006d44:	296f      	cmp	r1, #111	; 0x6f
 8006d46:	d020      	beq.n	8006d8a <_printf_i+0xb2>
 8006d48:	2970      	cmp	r1, #112	; 0x70
 8006d4a:	d1dd      	bne.n	8006d08 <_printf_i+0x30>
 8006d4c:	6823      	ldr	r3, [r4, #0]
 8006d4e:	f043 0320 	orr.w	r3, r3, #32
 8006d52:	6023      	str	r3, [r4, #0]
 8006d54:	e003      	b.n	8006d5e <_printf_i+0x86>
 8006d56:	2975      	cmp	r1, #117	; 0x75
 8006d58:	d017      	beq.n	8006d8a <_printf_i+0xb2>
 8006d5a:	2978      	cmp	r1, #120	; 0x78
 8006d5c:	d1d4      	bne.n	8006d08 <_printf_i+0x30>
 8006d5e:	2378      	movs	r3, #120	; 0x78
 8006d60:	4865      	ldr	r0, [pc, #404]	; (8006ef8 <_printf_i+0x220>)
 8006d62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d66:	e055      	b.n	8006e14 <_printf_i+0x13c>
 8006d68:	6813      	ldr	r3, [r2, #0]
 8006d6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d6e:	1d19      	adds	r1, r3, #4
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6011      	str	r1, [r2, #0]
 8006d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e08c      	b.n	8006e96 <_printf_i+0x1be>
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d82:	6011      	str	r1, [r2, #0]
 8006d84:	bf18      	it	ne
 8006d86:	b21b      	sxthne	r3, r3
 8006d88:	e7cf      	b.n	8006d2a <_printf_i+0x52>
 8006d8a:	6813      	ldr	r3, [r2, #0]
 8006d8c:	6825      	ldr	r5, [r4, #0]
 8006d8e:	1d18      	adds	r0, r3, #4
 8006d90:	6010      	str	r0, [r2, #0]
 8006d92:	0628      	lsls	r0, r5, #24
 8006d94:	d501      	bpl.n	8006d9a <_printf_i+0xc2>
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	e002      	b.n	8006da0 <_printf_i+0xc8>
 8006d9a:	0668      	lsls	r0, r5, #25
 8006d9c:	d5fb      	bpl.n	8006d96 <_printf_i+0xbe>
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	296f      	cmp	r1, #111	; 0x6f
 8006da2:	bf14      	ite	ne
 8006da4:	220a      	movne	r2, #10
 8006da6:	2208      	moveq	r2, #8
 8006da8:	4852      	ldr	r0, [pc, #328]	; (8006ef4 <_printf_i+0x21c>)
 8006daa:	2100      	movs	r1, #0
 8006dac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006db0:	6865      	ldr	r5, [r4, #4]
 8006db2:	2d00      	cmp	r5, #0
 8006db4:	60a5      	str	r5, [r4, #8]
 8006db6:	f2c0 8095 	blt.w	8006ee4 <_printf_i+0x20c>
 8006dba:	6821      	ldr	r1, [r4, #0]
 8006dbc:	f021 0104 	bic.w	r1, r1, #4
 8006dc0:	6021      	str	r1, [r4, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d13d      	bne.n	8006e42 <_printf_i+0x16a>
 8006dc6:	2d00      	cmp	r5, #0
 8006dc8:	f040 808e 	bne.w	8006ee8 <_printf_i+0x210>
 8006dcc:	4665      	mov	r5, ip
 8006dce:	2a08      	cmp	r2, #8
 8006dd0:	d10b      	bne.n	8006dea <_printf_i+0x112>
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	07db      	lsls	r3, r3, #31
 8006dd6:	d508      	bpl.n	8006dea <_printf_i+0x112>
 8006dd8:	6923      	ldr	r3, [r4, #16]
 8006dda:	6862      	ldr	r2, [r4, #4]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	bfde      	ittt	le
 8006de0:	2330      	movle	r3, #48	; 0x30
 8006de2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006de6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006dea:	ebac 0305 	sub.w	r3, ip, r5
 8006dee:	6123      	str	r3, [r4, #16]
 8006df0:	f8cd 8000 	str.w	r8, [sp]
 8006df4:	463b      	mov	r3, r7
 8006df6:	aa03      	add	r2, sp, #12
 8006df8:	4621      	mov	r1, r4
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	f7ff fef6 	bl	8006bec <_printf_common>
 8006e00:	3001      	adds	r0, #1
 8006e02:	d14d      	bne.n	8006ea0 <_printf_i+0x1c8>
 8006e04:	f04f 30ff 	mov.w	r0, #4294967295
 8006e08:	b005      	add	sp, #20
 8006e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e0e:	4839      	ldr	r0, [pc, #228]	; (8006ef4 <_printf_i+0x21c>)
 8006e10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006e14:	6813      	ldr	r3, [r2, #0]
 8006e16:	6821      	ldr	r1, [r4, #0]
 8006e18:	1d1d      	adds	r5, r3, #4
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6015      	str	r5, [r2, #0]
 8006e1e:	060a      	lsls	r2, r1, #24
 8006e20:	d50b      	bpl.n	8006e3a <_printf_i+0x162>
 8006e22:	07ca      	lsls	r2, r1, #31
 8006e24:	bf44      	itt	mi
 8006e26:	f041 0120 	orrmi.w	r1, r1, #32
 8006e2a:	6021      	strmi	r1, [r4, #0]
 8006e2c:	b91b      	cbnz	r3, 8006e36 <_printf_i+0x15e>
 8006e2e:	6822      	ldr	r2, [r4, #0]
 8006e30:	f022 0220 	bic.w	r2, r2, #32
 8006e34:	6022      	str	r2, [r4, #0]
 8006e36:	2210      	movs	r2, #16
 8006e38:	e7b7      	b.n	8006daa <_printf_i+0xd2>
 8006e3a:	064d      	lsls	r5, r1, #25
 8006e3c:	bf48      	it	mi
 8006e3e:	b29b      	uxthmi	r3, r3
 8006e40:	e7ef      	b.n	8006e22 <_printf_i+0x14a>
 8006e42:	4665      	mov	r5, ip
 8006e44:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e48:	fb02 3311 	mls	r3, r2, r1, r3
 8006e4c:	5cc3      	ldrb	r3, [r0, r3]
 8006e4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006e52:	460b      	mov	r3, r1
 8006e54:	2900      	cmp	r1, #0
 8006e56:	d1f5      	bne.n	8006e44 <_printf_i+0x16c>
 8006e58:	e7b9      	b.n	8006dce <_printf_i+0xf6>
 8006e5a:	6813      	ldr	r3, [r2, #0]
 8006e5c:	6825      	ldr	r5, [r4, #0]
 8006e5e:	1d18      	adds	r0, r3, #4
 8006e60:	6961      	ldr	r1, [r4, #20]
 8006e62:	6010      	str	r0, [r2, #0]
 8006e64:	0628      	lsls	r0, r5, #24
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	d501      	bpl.n	8006e6e <_printf_i+0x196>
 8006e6a:	6019      	str	r1, [r3, #0]
 8006e6c:	e002      	b.n	8006e74 <_printf_i+0x19c>
 8006e6e:	066a      	lsls	r2, r5, #25
 8006e70:	d5fb      	bpl.n	8006e6a <_printf_i+0x192>
 8006e72:	8019      	strh	r1, [r3, #0]
 8006e74:	2300      	movs	r3, #0
 8006e76:	4665      	mov	r5, ip
 8006e78:	6123      	str	r3, [r4, #16]
 8006e7a:	e7b9      	b.n	8006df0 <_printf_i+0x118>
 8006e7c:	6813      	ldr	r3, [r2, #0]
 8006e7e:	1d19      	adds	r1, r3, #4
 8006e80:	6011      	str	r1, [r2, #0]
 8006e82:	681d      	ldr	r5, [r3, #0]
 8006e84:	6862      	ldr	r2, [r4, #4]
 8006e86:	2100      	movs	r1, #0
 8006e88:	4628      	mov	r0, r5
 8006e8a:	f000 f837 	bl	8006efc <memchr>
 8006e8e:	b108      	cbz	r0, 8006e94 <_printf_i+0x1bc>
 8006e90:	1b40      	subs	r0, r0, r5
 8006e92:	6060      	str	r0, [r4, #4]
 8006e94:	6863      	ldr	r3, [r4, #4]
 8006e96:	6123      	str	r3, [r4, #16]
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e9e:	e7a7      	b.n	8006df0 <_printf_i+0x118>
 8006ea0:	6923      	ldr	r3, [r4, #16]
 8006ea2:	462a      	mov	r2, r5
 8006ea4:	4639      	mov	r1, r7
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	47c0      	blx	r8
 8006eaa:	3001      	adds	r0, #1
 8006eac:	d0aa      	beq.n	8006e04 <_printf_i+0x12c>
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	079b      	lsls	r3, r3, #30
 8006eb2:	d413      	bmi.n	8006edc <_printf_i+0x204>
 8006eb4:	68e0      	ldr	r0, [r4, #12]
 8006eb6:	9b03      	ldr	r3, [sp, #12]
 8006eb8:	4298      	cmp	r0, r3
 8006eba:	bfb8      	it	lt
 8006ebc:	4618      	movlt	r0, r3
 8006ebe:	e7a3      	b.n	8006e08 <_printf_i+0x130>
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	464a      	mov	r2, r9
 8006ec4:	4639      	mov	r1, r7
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	47c0      	blx	r8
 8006eca:	3001      	adds	r0, #1
 8006ecc:	d09a      	beq.n	8006e04 <_printf_i+0x12c>
 8006ece:	3501      	adds	r5, #1
 8006ed0:	68e3      	ldr	r3, [r4, #12]
 8006ed2:	9a03      	ldr	r2, [sp, #12]
 8006ed4:	1a9b      	subs	r3, r3, r2
 8006ed6:	42ab      	cmp	r3, r5
 8006ed8:	dcf2      	bgt.n	8006ec0 <_printf_i+0x1e8>
 8006eda:	e7eb      	b.n	8006eb4 <_printf_i+0x1dc>
 8006edc:	2500      	movs	r5, #0
 8006ede:	f104 0919 	add.w	r9, r4, #25
 8006ee2:	e7f5      	b.n	8006ed0 <_printf_i+0x1f8>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1ac      	bne.n	8006e42 <_printf_i+0x16a>
 8006ee8:	7803      	ldrb	r3, [r0, #0]
 8006eea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006eee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ef2:	e76c      	b.n	8006dce <_printf_i+0xf6>
 8006ef4:	08009a4d 	.word	0x08009a4d
 8006ef8:	08009a5e 	.word	0x08009a5e

08006efc <memchr>:
 8006efc:	b510      	push	{r4, lr}
 8006efe:	b2c9      	uxtb	r1, r1
 8006f00:	4402      	add	r2, r0
 8006f02:	4290      	cmp	r0, r2
 8006f04:	4603      	mov	r3, r0
 8006f06:	d101      	bne.n	8006f0c <memchr+0x10>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	e003      	b.n	8006f14 <memchr+0x18>
 8006f0c:	781c      	ldrb	r4, [r3, #0]
 8006f0e:	3001      	adds	r0, #1
 8006f10:	428c      	cmp	r4, r1
 8006f12:	d1f6      	bne.n	8006f02 <memchr+0x6>
 8006f14:	4618      	mov	r0, r3
 8006f16:	bd10      	pop	{r4, pc}

08006f18 <memmove>:
 8006f18:	4288      	cmp	r0, r1
 8006f1a:	b510      	push	{r4, lr}
 8006f1c:	eb01 0302 	add.w	r3, r1, r2
 8006f20:	d807      	bhi.n	8006f32 <memmove+0x1a>
 8006f22:	1e42      	subs	r2, r0, #1
 8006f24:	4299      	cmp	r1, r3
 8006f26:	d00a      	beq.n	8006f3e <memmove+0x26>
 8006f28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f2c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006f30:	e7f8      	b.n	8006f24 <memmove+0xc>
 8006f32:	4283      	cmp	r3, r0
 8006f34:	d9f5      	bls.n	8006f22 <memmove+0xa>
 8006f36:	1881      	adds	r1, r0, r2
 8006f38:	1ad2      	subs	r2, r2, r3
 8006f3a:	42d3      	cmn	r3, r2
 8006f3c:	d100      	bne.n	8006f40 <memmove+0x28>
 8006f3e:	bd10      	pop	{r4, pc}
 8006f40:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f44:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006f48:	e7f7      	b.n	8006f3a <memmove+0x22>
	...

08006f4c <_free_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	4605      	mov	r5, r0
 8006f50:	2900      	cmp	r1, #0
 8006f52:	d043      	beq.n	8006fdc <_free_r+0x90>
 8006f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f58:	1f0c      	subs	r4, r1, #4
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	bfb8      	it	lt
 8006f5e:	18e4      	addlt	r4, r4, r3
 8006f60:	f000 f8d0 	bl	8007104 <__malloc_lock>
 8006f64:	4a1e      	ldr	r2, [pc, #120]	; (8006fe0 <_free_r+0x94>)
 8006f66:	6813      	ldr	r3, [r2, #0]
 8006f68:	4610      	mov	r0, r2
 8006f6a:	b933      	cbnz	r3, 8006f7a <_free_r+0x2e>
 8006f6c:	6063      	str	r3, [r4, #4]
 8006f6e:	6014      	str	r4, [r2, #0]
 8006f70:	4628      	mov	r0, r5
 8006f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f76:	f000 b8c6 	b.w	8007106 <__malloc_unlock>
 8006f7a:	42a3      	cmp	r3, r4
 8006f7c:	d90b      	bls.n	8006f96 <_free_r+0x4a>
 8006f7e:	6821      	ldr	r1, [r4, #0]
 8006f80:	1862      	adds	r2, r4, r1
 8006f82:	4293      	cmp	r3, r2
 8006f84:	bf01      	itttt	eq
 8006f86:	681a      	ldreq	r2, [r3, #0]
 8006f88:	685b      	ldreq	r3, [r3, #4]
 8006f8a:	1852      	addeq	r2, r2, r1
 8006f8c:	6022      	streq	r2, [r4, #0]
 8006f8e:	6063      	str	r3, [r4, #4]
 8006f90:	6004      	str	r4, [r0, #0]
 8006f92:	e7ed      	b.n	8006f70 <_free_r+0x24>
 8006f94:	4613      	mov	r3, r2
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	b10a      	cbz	r2, 8006f9e <_free_r+0x52>
 8006f9a:	42a2      	cmp	r2, r4
 8006f9c:	d9fa      	bls.n	8006f94 <_free_r+0x48>
 8006f9e:	6819      	ldr	r1, [r3, #0]
 8006fa0:	1858      	adds	r0, r3, r1
 8006fa2:	42a0      	cmp	r0, r4
 8006fa4:	d10b      	bne.n	8006fbe <_free_r+0x72>
 8006fa6:	6820      	ldr	r0, [r4, #0]
 8006fa8:	4401      	add	r1, r0
 8006faa:	1858      	adds	r0, r3, r1
 8006fac:	4282      	cmp	r2, r0
 8006fae:	6019      	str	r1, [r3, #0]
 8006fb0:	d1de      	bne.n	8006f70 <_free_r+0x24>
 8006fb2:	6810      	ldr	r0, [r2, #0]
 8006fb4:	6852      	ldr	r2, [r2, #4]
 8006fb6:	4401      	add	r1, r0
 8006fb8:	6019      	str	r1, [r3, #0]
 8006fba:	605a      	str	r2, [r3, #4]
 8006fbc:	e7d8      	b.n	8006f70 <_free_r+0x24>
 8006fbe:	d902      	bls.n	8006fc6 <_free_r+0x7a>
 8006fc0:	230c      	movs	r3, #12
 8006fc2:	602b      	str	r3, [r5, #0]
 8006fc4:	e7d4      	b.n	8006f70 <_free_r+0x24>
 8006fc6:	6820      	ldr	r0, [r4, #0]
 8006fc8:	1821      	adds	r1, r4, r0
 8006fca:	428a      	cmp	r2, r1
 8006fcc:	bf01      	itttt	eq
 8006fce:	6811      	ldreq	r1, [r2, #0]
 8006fd0:	6852      	ldreq	r2, [r2, #4]
 8006fd2:	1809      	addeq	r1, r1, r0
 8006fd4:	6021      	streq	r1, [r4, #0]
 8006fd6:	6062      	str	r2, [r4, #4]
 8006fd8:	605c      	str	r4, [r3, #4]
 8006fda:	e7c9      	b.n	8006f70 <_free_r+0x24>
 8006fdc:	bd38      	pop	{r3, r4, r5, pc}
 8006fde:	bf00      	nop
 8006fe0:	20001464 	.word	0x20001464

08006fe4 <_malloc_r>:
 8006fe4:	b570      	push	{r4, r5, r6, lr}
 8006fe6:	1ccd      	adds	r5, r1, #3
 8006fe8:	f025 0503 	bic.w	r5, r5, #3
 8006fec:	3508      	adds	r5, #8
 8006fee:	2d0c      	cmp	r5, #12
 8006ff0:	bf38      	it	cc
 8006ff2:	250c      	movcc	r5, #12
 8006ff4:	2d00      	cmp	r5, #0
 8006ff6:	4606      	mov	r6, r0
 8006ff8:	db01      	blt.n	8006ffe <_malloc_r+0x1a>
 8006ffa:	42a9      	cmp	r1, r5
 8006ffc:	d903      	bls.n	8007006 <_malloc_r+0x22>
 8006ffe:	230c      	movs	r3, #12
 8007000:	6033      	str	r3, [r6, #0]
 8007002:	2000      	movs	r0, #0
 8007004:	bd70      	pop	{r4, r5, r6, pc}
 8007006:	f000 f87d 	bl	8007104 <__malloc_lock>
 800700a:	4a21      	ldr	r2, [pc, #132]	; (8007090 <_malloc_r+0xac>)
 800700c:	6814      	ldr	r4, [r2, #0]
 800700e:	4621      	mov	r1, r4
 8007010:	b991      	cbnz	r1, 8007038 <_malloc_r+0x54>
 8007012:	4c20      	ldr	r4, [pc, #128]	; (8007094 <_malloc_r+0xb0>)
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	b91b      	cbnz	r3, 8007020 <_malloc_r+0x3c>
 8007018:	4630      	mov	r0, r6
 800701a:	f000 f863 	bl	80070e4 <_sbrk_r>
 800701e:	6020      	str	r0, [r4, #0]
 8007020:	4629      	mov	r1, r5
 8007022:	4630      	mov	r0, r6
 8007024:	f000 f85e 	bl	80070e4 <_sbrk_r>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	d124      	bne.n	8007076 <_malloc_r+0x92>
 800702c:	230c      	movs	r3, #12
 800702e:	4630      	mov	r0, r6
 8007030:	6033      	str	r3, [r6, #0]
 8007032:	f000 f868 	bl	8007106 <__malloc_unlock>
 8007036:	e7e4      	b.n	8007002 <_malloc_r+0x1e>
 8007038:	680b      	ldr	r3, [r1, #0]
 800703a:	1b5b      	subs	r3, r3, r5
 800703c:	d418      	bmi.n	8007070 <_malloc_r+0x8c>
 800703e:	2b0b      	cmp	r3, #11
 8007040:	d90f      	bls.n	8007062 <_malloc_r+0x7e>
 8007042:	600b      	str	r3, [r1, #0]
 8007044:	18cc      	adds	r4, r1, r3
 8007046:	50cd      	str	r5, [r1, r3]
 8007048:	4630      	mov	r0, r6
 800704a:	f000 f85c 	bl	8007106 <__malloc_unlock>
 800704e:	f104 000b 	add.w	r0, r4, #11
 8007052:	1d23      	adds	r3, r4, #4
 8007054:	f020 0007 	bic.w	r0, r0, #7
 8007058:	1ac3      	subs	r3, r0, r3
 800705a:	d0d3      	beq.n	8007004 <_malloc_r+0x20>
 800705c:	425a      	negs	r2, r3
 800705e:	50e2      	str	r2, [r4, r3]
 8007060:	e7d0      	b.n	8007004 <_malloc_r+0x20>
 8007062:	684b      	ldr	r3, [r1, #4]
 8007064:	428c      	cmp	r4, r1
 8007066:	bf16      	itet	ne
 8007068:	6063      	strne	r3, [r4, #4]
 800706a:	6013      	streq	r3, [r2, #0]
 800706c:	460c      	movne	r4, r1
 800706e:	e7eb      	b.n	8007048 <_malloc_r+0x64>
 8007070:	460c      	mov	r4, r1
 8007072:	6849      	ldr	r1, [r1, #4]
 8007074:	e7cc      	b.n	8007010 <_malloc_r+0x2c>
 8007076:	1cc4      	adds	r4, r0, #3
 8007078:	f024 0403 	bic.w	r4, r4, #3
 800707c:	42a0      	cmp	r0, r4
 800707e:	d005      	beq.n	800708c <_malloc_r+0xa8>
 8007080:	1a21      	subs	r1, r4, r0
 8007082:	4630      	mov	r0, r6
 8007084:	f000 f82e 	bl	80070e4 <_sbrk_r>
 8007088:	3001      	adds	r0, #1
 800708a:	d0cf      	beq.n	800702c <_malloc_r+0x48>
 800708c:	6025      	str	r5, [r4, #0]
 800708e:	e7db      	b.n	8007048 <_malloc_r+0x64>
 8007090:	20001464 	.word	0x20001464
 8007094:	20001468 	.word	0x20001468

08007098 <_realloc_r>:
 8007098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709a:	4607      	mov	r7, r0
 800709c:	4614      	mov	r4, r2
 800709e:	460e      	mov	r6, r1
 80070a0:	b921      	cbnz	r1, 80070ac <_realloc_r+0x14>
 80070a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80070a6:	4611      	mov	r1, r2
 80070a8:	f7ff bf9c 	b.w	8006fe4 <_malloc_r>
 80070ac:	b922      	cbnz	r2, 80070b8 <_realloc_r+0x20>
 80070ae:	f7ff ff4d 	bl	8006f4c <_free_r>
 80070b2:	4625      	mov	r5, r4
 80070b4:	4628      	mov	r0, r5
 80070b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070b8:	f000 f826 	bl	8007108 <_malloc_usable_size_r>
 80070bc:	42a0      	cmp	r0, r4
 80070be:	d20f      	bcs.n	80070e0 <_realloc_r+0x48>
 80070c0:	4621      	mov	r1, r4
 80070c2:	4638      	mov	r0, r7
 80070c4:	f7ff ff8e 	bl	8006fe4 <_malloc_r>
 80070c8:	4605      	mov	r5, r0
 80070ca:	2800      	cmp	r0, #0
 80070cc:	d0f2      	beq.n	80070b4 <_realloc_r+0x1c>
 80070ce:	4631      	mov	r1, r6
 80070d0:	4622      	mov	r2, r4
 80070d2:	f7ff fc05 	bl	80068e0 <memcpy>
 80070d6:	4631      	mov	r1, r6
 80070d8:	4638      	mov	r0, r7
 80070da:	f7ff ff37 	bl	8006f4c <_free_r>
 80070de:	e7e9      	b.n	80070b4 <_realloc_r+0x1c>
 80070e0:	4635      	mov	r5, r6
 80070e2:	e7e7      	b.n	80070b4 <_realloc_r+0x1c>

080070e4 <_sbrk_r>:
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	2300      	movs	r3, #0
 80070e8:	4c05      	ldr	r4, [pc, #20]	; (8007100 <_sbrk_r+0x1c>)
 80070ea:	4605      	mov	r5, r0
 80070ec:	4608      	mov	r0, r1
 80070ee:	6023      	str	r3, [r4, #0]
 80070f0:	f7fe ff78 	bl	8005fe4 <_sbrk>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	d102      	bne.n	80070fe <_sbrk_r+0x1a>
 80070f8:	6823      	ldr	r3, [r4, #0]
 80070fa:	b103      	cbz	r3, 80070fe <_sbrk_r+0x1a>
 80070fc:	602b      	str	r3, [r5, #0]
 80070fe:	bd38      	pop	{r3, r4, r5, pc}
 8007100:	20001ad0 	.word	0x20001ad0

08007104 <__malloc_lock>:
 8007104:	4770      	bx	lr

08007106 <__malloc_unlock>:
 8007106:	4770      	bx	lr

08007108 <_malloc_usable_size_r>:
 8007108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800710c:	1f18      	subs	r0, r3, #4
 800710e:	2b00      	cmp	r3, #0
 8007110:	bfbc      	itt	lt
 8007112:	580b      	ldrlt	r3, [r1, r0]
 8007114:	18c0      	addlt	r0, r0, r3
 8007116:	4770      	bx	lr

08007118 <_init>:
 8007118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711a:	bf00      	nop
 800711c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800711e:	bc08      	pop	{r3}
 8007120:	469e      	mov	lr, r3
 8007122:	4770      	bx	lr

08007124 <_fini>:
 8007124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007126:	bf00      	nop
 8007128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800712a:	bc08      	pop	{r3}
 800712c:	469e      	mov	lr, r3
 800712e:	4770      	bx	lr
