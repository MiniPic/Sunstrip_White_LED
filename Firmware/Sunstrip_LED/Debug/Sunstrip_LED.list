
Sunstrip_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069b4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014a8  08006ac4  08006ac4  00016ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f6c  08007f6c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08007f6c  08007f6c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f6c  08007f6c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f6c  08007f6c  00017f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f70  08007f70  00017f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a44  20000018  08007f8c  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001a5c  08007f8c  00021a5c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017abe  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004033  00000000  00000000  00037aff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001518  00000000  00000000  0003bb38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001300  00000000  00000000  0003d050  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018885  00000000  00000000  0003e350  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000134a8  00000000  00000000  00056bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080902  00000000  00000000  0006a07d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ea97f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000541c  00000000  00000000  000ea9fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08006aac 	.word	0x08006aac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08006aac 	.word	0x08006aac

08000150 <SSD1306_Init>:
	if (HAL_I2C_IsDeviceReady(ssd1306_i2c, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
		/* Return false */
		return 0;
	}
#else
	uint8_t SSD1306_Init() {
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0

		/* Init I2C */
		ssd1306_I2C_Init();
 8000156:	f000 fa17 	bl	8000588 <ssd1306_I2C_Init>
#endif
	
	/* A little delay */
	uint32_t p = 2500;
 800015a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800015e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000160:	e002      	b.n	8000168 <SSD1306_Init+0x18>
		p--;
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	3b01      	subs	r3, #1
 8000166:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2b00      	cmp	r3, #0
 800016c:	d1f9      	bne.n	8000162 <SSD1306_Init+0x12>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800016e:	22ae      	movs	r2, #174	; 0xae
 8000170:	2100      	movs	r1, #0
 8000172:	2078      	movs	r0, #120	; 0x78
 8000174:	f000 fa5e 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000178:	2220      	movs	r2, #32
 800017a:	2100      	movs	r1, #0
 800017c:	2078      	movs	r0, #120	; 0x78
 800017e:	f000 fa59 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000182:	2210      	movs	r2, #16
 8000184:	2100      	movs	r1, #0
 8000186:	2078      	movs	r0, #120	; 0x78
 8000188:	f000 fa54 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800018c:	22b0      	movs	r2, #176	; 0xb0
 800018e:	2100      	movs	r1, #0
 8000190:	2078      	movs	r0, #120	; 0x78
 8000192:	f000 fa4f 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000196:	22c8      	movs	r2, #200	; 0xc8
 8000198:	2100      	movs	r1, #0
 800019a:	2078      	movs	r0, #120	; 0x78
 800019c:	f000 fa4a 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80001a0:	2200      	movs	r2, #0
 80001a2:	2100      	movs	r1, #0
 80001a4:	2078      	movs	r0, #120	; 0x78
 80001a6:	f000 fa45 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80001aa:	2210      	movs	r2, #16
 80001ac:	2100      	movs	r1, #0
 80001ae:	2078      	movs	r0, #120	; 0x78
 80001b0:	f000 fa40 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80001b4:	2240      	movs	r2, #64	; 0x40
 80001b6:	2100      	movs	r1, #0
 80001b8:	2078      	movs	r0, #120	; 0x78
 80001ba:	f000 fa3b 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80001be:	2281      	movs	r2, #129	; 0x81
 80001c0:	2100      	movs	r1, #0
 80001c2:	2078      	movs	r0, #120	; 0x78
 80001c4:	f000 fa36 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80001c8:	22ff      	movs	r2, #255	; 0xff
 80001ca:	2100      	movs	r1, #0
 80001cc:	2078      	movs	r0, #120	; 0x78
 80001ce:	f000 fa31 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80001d2:	22a1      	movs	r2, #161	; 0xa1
 80001d4:	2100      	movs	r1, #0
 80001d6:	2078      	movs	r0, #120	; 0x78
 80001d8:	f000 fa2c 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80001dc:	22a6      	movs	r2, #166	; 0xa6
 80001de:	2100      	movs	r1, #0
 80001e0:	2078      	movs	r0, #120	; 0x78
 80001e2:	f000 fa27 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80001e6:	22a8      	movs	r2, #168	; 0xa8
 80001e8:	2100      	movs	r1, #0
 80001ea:	2078      	movs	r0, #120	; 0x78
 80001ec:	f000 fa22 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80001f0:	223f      	movs	r2, #63	; 0x3f
 80001f2:	2100      	movs	r1, #0
 80001f4:	2078      	movs	r0, #120	; 0x78
 80001f6:	f000 fa1d 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80001fa:	22a4      	movs	r2, #164	; 0xa4
 80001fc:	2100      	movs	r1, #0
 80001fe:	2078      	movs	r0, #120	; 0x78
 8000200:	f000 fa18 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //--set display offset
 8000204:	22d3      	movs	r2, #211	; 0xd3
 8000206:	2100      	movs	r1, #0
 8000208:	2078      	movs	r0, #120	; 0x78
 800020a:	f000 fa13 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //--not offset
 800020e:	2200      	movs	r2, #0
 8000210:	2100      	movs	r1, #0
 8000212:	2078      	movs	r0, #120	; 0x78
 8000214:	f000 fa0e 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000218:	22d5      	movs	r2, #213	; 0xd5
 800021a:	2100      	movs	r1, #0
 800021c:	2078      	movs	r0, #120	; 0x78
 800021e:	f000 fa09 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000222:	22f0      	movs	r2, #240	; 0xf0
 8000224:	2100      	movs	r1, #0
 8000226:	2078      	movs	r0, #120	; 0x78
 8000228:	f000 fa04 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800022c:	22d9      	movs	r2, #217	; 0xd9
 800022e:	2100      	movs	r1, #0
 8000230:	2078      	movs	r0, #120	; 0x78
 8000232:	f000 f9ff 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000236:	2222      	movs	r2, #34	; 0x22
 8000238:	2100      	movs	r1, #0
 800023a:	2078      	movs	r0, #120	; 0x78
 800023c:	f000 f9fa 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000240:	22da      	movs	r2, #218	; 0xda
 8000242:	2100      	movs	r1, #0
 8000244:	2078      	movs	r0, #120	; 0x78
 8000246:	f000 f9f5 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800024a:	2212      	movs	r2, #18
 800024c:	2100      	movs	r1, #0
 800024e:	2078      	movs	r0, #120	; 0x78
 8000250:	f000 f9f0 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000254:	22db      	movs	r2, #219	; 0xdb
 8000256:	2100      	movs	r1, #0
 8000258:	2078      	movs	r0, #120	; 0x78
 800025a:	f000 f9eb 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800025e:	2220      	movs	r2, #32
 8000260:	2100      	movs	r1, #0
 8000262:	2078      	movs	r0, #120	; 0x78
 8000264:	f000 f9e6 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000268:	228d      	movs	r2, #141	; 0x8d
 800026a:	2100      	movs	r1, #0
 800026c:	2078      	movs	r0, #120	; 0x78
 800026e:	f000 f9e1 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000272:	2214      	movs	r2, #20
 8000274:	2100      	movs	r1, #0
 8000276:	2078      	movs	r0, #120	; 0x78
 8000278:	f000 f9dc 	bl	8000634 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800027c:	22af      	movs	r2, #175	; 0xaf
 800027e:	2100      	movs	r1, #0
 8000280:	2078      	movs	r0, #120	; 0x78
 8000282:	f000 f9d7 	bl	8000634 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000286:	222e      	movs	r2, #46	; 0x2e
 8000288:	2100      	movs	r1, #0
 800028a:	2078      	movs	r0, #120	; 0x78
 800028c:	f000 f9d2 	bl	8000634 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000290:	2000      	movs	r0, #0
 8000292:	f000 f841 	bl	8000318 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000296:	f000 f811 	bl	80002bc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800029a:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <SSD1306_Init+0x168>)
 800029c:	2200      	movs	r2, #0
 800029e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <SSD1306_Init+0x168>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80002a6:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <SSD1306_Init+0x168>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80002ac:	2301      	movs	r3, #1
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	20000434 	.word	0x20000434

080002bc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80002c2:	2300      	movs	r3, #0
 80002c4:	71fb      	strb	r3, [r7, #7]
 80002c6:	e01d      	b.n	8000304 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	3b50      	subs	r3, #80	; 0x50
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	461a      	mov	r2, r3
 80002d0:	2100      	movs	r1, #0
 80002d2:	2078      	movs	r0, #120	; 0x78
 80002d4:	f000 f9ae 	bl	8000634 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80002d8:	2200      	movs	r2, #0
 80002da:	2100      	movs	r1, #0
 80002dc:	2078      	movs	r0, #120	; 0x78
 80002de:	f000 f9a9 	bl	8000634 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80002e2:	2210      	movs	r2, #16
 80002e4:	2100      	movs	r1, #0
 80002e6:	2078      	movs	r0, #120	; 0x78
 80002e8:	f000 f9a4 	bl	8000634 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	01db      	lsls	r3, r3, #7
 80002f0:	4a08      	ldr	r2, [pc, #32]	; (8000314 <SSD1306_UpdateScreen+0x58>)
 80002f2:	441a      	add	r2, r3
 80002f4:	2380      	movs	r3, #128	; 0x80
 80002f6:	2140      	movs	r1, #64	; 0x40
 80002f8:	2078      	movs	r0, #120	; 0x78
 80002fa:	f000 f959 	bl	80005b0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	3301      	adds	r3, #1
 8000302:	71fb      	strb	r3, [r7, #7]
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	2b07      	cmp	r3, #7
 8000308:	d9de      	bls.n	80002c8 <SSD1306_UpdateScreen+0xc>
	}
}
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	20000034 	.word	0x20000034

08000318 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d101      	bne.n	800032c <SSD1306_Fill+0x14>
 8000328:	2300      	movs	r3, #0
 800032a:	e000      	b.n	800032e <SSD1306_Fill+0x16>
 800032c:	23ff      	movs	r3, #255	; 0xff
 800032e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000332:	4619      	mov	r1, r3
 8000334:	4803      	ldr	r0, [pc, #12]	; (8000344 <SSD1306_Fill+0x2c>)
 8000336:	f006 fbb1 	bl	8006a9c <memset>
}
 800033a:	bf00      	nop
 800033c:	3708      	adds	r7, #8
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000034 	.word	0x20000034

08000348 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	80fb      	strh	r3, [r7, #6]
 8000352:	460b      	mov	r3, r1
 8000354:	80bb      	strh	r3, [r7, #4]
 8000356:	4613      	mov	r3, r2
 8000358:	70fb      	strb	r3, [r7, #3]
	if (
 800035a:	88fb      	ldrh	r3, [r7, #6]
 800035c:	2b7f      	cmp	r3, #127	; 0x7f
 800035e:	d848      	bhi.n	80003f2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000360:	88bb      	ldrh	r3, [r7, #4]
 8000362:	2b3f      	cmp	r3, #63	; 0x3f
 8000364:	d845      	bhi.n	80003f2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000366:	4b25      	ldr	r3, [pc, #148]	; (80003fc <SSD1306_DrawPixel+0xb4>)
 8000368:	791b      	ldrb	r3, [r3, #4]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d006      	beq.n	800037c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800036e:	78fb      	ldrb	r3, [r7, #3]
 8000370:	2b00      	cmp	r3, #0
 8000372:	bf0c      	ite	eq
 8000374:	2301      	moveq	r3, #1
 8000376:	2300      	movne	r3, #0
 8000378:	b2db      	uxtb	r3, r3
 800037a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800037c:	78fb      	ldrb	r3, [r7, #3]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d11a      	bne.n	80003b8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000382:	88fa      	ldrh	r2, [r7, #6]
 8000384:	88bb      	ldrh	r3, [r7, #4]
 8000386:	08db      	lsrs	r3, r3, #3
 8000388:	b298      	uxth	r0, r3
 800038a:	4603      	mov	r3, r0
 800038c:	01db      	lsls	r3, r3, #7
 800038e:	4413      	add	r3, r2
 8000390:	4a1b      	ldr	r2, [pc, #108]	; (8000400 <SSD1306_DrawPixel+0xb8>)
 8000392:	5cd3      	ldrb	r3, [r2, r3]
 8000394:	b25a      	sxtb	r2, r3
 8000396:	88bb      	ldrh	r3, [r7, #4]
 8000398:	f003 0307 	and.w	r3, r3, #7
 800039c:	2101      	movs	r1, #1
 800039e:	fa01 f303 	lsl.w	r3, r1, r3
 80003a2:	b25b      	sxtb	r3, r3
 80003a4:	4313      	orrs	r3, r2
 80003a6:	b259      	sxtb	r1, r3
 80003a8:	88fa      	ldrh	r2, [r7, #6]
 80003aa:	4603      	mov	r3, r0
 80003ac:	01db      	lsls	r3, r3, #7
 80003ae:	4413      	add	r3, r2
 80003b0:	b2c9      	uxtb	r1, r1
 80003b2:	4a13      	ldr	r2, [pc, #76]	; (8000400 <SSD1306_DrawPixel+0xb8>)
 80003b4:	54d1      	strb	r1, [r2, r3]
 80003b6:	e01d      	b.n	80003f4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80003b8:	88fa      	ldrh	r2, [r7, #6]
 80003ba:	88bb      	ldrh	r3, [r7, #4]
 80003bc:	08db      	lsrs	r3, r3, #3
 80003be:	b298      	uxth	r0, r3
 80003c0:	4603      	mov	r3, r0
 80003c2:	01db      	lsls	r3, r3, #7
 80003c4:	4413      	add	r3, r2
 80003c6:	4a0e      	ldr	r2, [pc, #56]	; (8000400 <SSD1306_DrawPixel+0xb8>)
 80003c8:	5cd3      	ldrb	r3, [r2, r3]
 80003ca:	b25a      	sxtb	r2, r3
 80003cc:	88bb      	ldrh	r3, [r7, #4]
 80003ce:	f003 0307 	and.w	r3, r3, #7
 80003d2:	2101      	movs	r1, #1
 80003d4:	fa01 f303 	lsl.w	r3, r1, r3
 80003d8:	b25b      	sxtb	r3, r3
 80003da:	43db      	mvns	r3, r3
 80003dc:	b25b      	sxtb	r3, r3
 80003de:	4013      	ands	r3, r2
 80003e0:	b259      	sxtb	r1, r3
 80003e2:	88fa      	ldrh	r2, [r7, #6]
 80003e4:	4603      	mov	r3, r0
 80003e6:	01db      	lsls	r3, r3, #7
 80003e8:	4413      	add	r3, r2
 80003ea:	b2c9      	uxtb	r1, r1
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <SSD1306_DrawPixel+0xb8>)
 80003ee:	54d1      	strb	r1, [r2, r3]
 80003f0:	e000      	b.n	80003f4 <SSD1306_DrawPixel+0xac>
		return;
 80003f2:	bf00      	nop
	}
}
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	20000434 	.word	0x20000434
 8000400:	20000034 	.word	0x20000034

08000404 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	460a      	mov	r2, r1
 800040e:	80fb      	strh	r3, [r7, #6]
 8000410:	4613      	mov	r3, r2
 8000412:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000414:	4a05      	ldr	r2, [pc, #20]	; (800042c <SSD1306_GotoXY+0x28>)
 8000416:	88fb      	ldrh	r3, [r7, #6]
 8000418:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800041a:	4a04      	ldr	r2, [pc, #16]	; (800042c <SSD1306_GotoXY+0x28>)
 800041c:	88bb      	ldrh	r3, [r7, #4]
 800041e:	8053      	strh	r3, [r2, #2]
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	20000434 	.word	0x20000434

08000430 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	6039      	str	r1, [r7, #0]
 800043a:	71fb      	strb	r3, [r7, #7]
 800043c:	4613      	mov	r3, r2
 800043e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000440:	4b3a      	ldr	r3, [pc, #232]	; (800052c <SSD1306_Putc+0xfc>)
 8000442:	881b      	ldrh	r3, [r3, #0]
 8000444:	461a      	mov	r2, r3
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	4413      	add	r3, r2
	if (
 800044c:	2b7f      	cmp	r3, #127	; 0x7f
 800044e:	dc07      	bgt.n	8000460 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000450:	4b36      	ldr	r3, [pc, #216]	; (800052c <SSD1306_Putc+0xfc>)
 8000452:	885b      	ldrh	r3, [r3, #2]
 8000454:	461a      	mov	r2, r3
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	785b      	ldrb	r3, [r3, #1]
 800045a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800045c:	2b3f      	cmp	r3, #63	; 0x3f
 800045e:	dd01      	ble.n	8000464 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000460:	2300      	movs	r3, #0
 8000462:	e05e      	b.n	8000522 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
 8000468:	e04b      	b.n	8000502 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	685a      	ldr	r2, [r3, #4]
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	3b20      	subs	r3, #32
 8000472:	6839      	ldr	r1, [r7, #0]
 8000474:	7849      	ldrb	r1, [r1, #1]
 8000476:	fb01 f303 	mul.w	r3, r1, r3
 800047a:	4619      	mov	r1, r3
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	440b      	add	r3, r1
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	4413      	add	r3, r2
 8000484:	881b      	ldrh	r3, [r3, #0]
 8000486:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000488:	2300      	movs	r3, #0
 800048a:	613b      	str	r3, [r7, #16]
 800048c:	e030      	b.n	80004f0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800048e:	68fa      	ldr	r2, [r7, #12]
 8000490:	693b      	ldr	r3, [r7, #16]
 8000492:	fa02 f303 	lsl.w	r3, r2, r3
 8000496:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800049a:	2b00      	cmp	r3, #0
 800049c:	d010      	beq.n	80004c0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800049e:	4b23      	ldr	r3, [pc, #140]	; (800052c <SSD1306_Putc+0xfc>)
 80004a0:	881a      	ldrh	r2, [r3, #0]
 80004a2:	693b      	ldr	r3, [r7, #16]
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	4413      	add	r3, r2
 80004a8:	b298      	uxth	r0, r3
 80004aa:	4b20      	ldr	r3, [pc, #128]	; (800052c <SSD1306_Putc+0xfc>)
 80004ac:	885a      	ldrh	r2, [r3, #2]
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	b29b      	uxth	r3, r3
 80004b2:	4413      	add	r3, r2
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	79ba      	ldrb	r2, [r7, #6]
 80004b8:	4619      	mov	r1, r3
 80004ba:	f7ff ff45 	bl	8000348 <SSD1306_DrawPixel>
 80004be:	e014      	b.n	80004ea <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80004c0:	4b1a      	ldr	r3, [pc, #104]	; (800052c <SSD1306_Putc+0xfc>)
 80004c2:	881a      	ldrh	r2, [r3, #0]
 80004c4:	693b      	ldr	r3, [r7, #16]
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	4413      	add	r3, r2
 80004ca:	b298      	uxth	r0, r3
 80004cc:	4b17      	ldr	r3, [pc, #92]	; (800052c <SSD1306_Putc+0xfc>)
 80004ce:	885a      	ldrh	r2, [r3, #2]
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	b29b      	uxth	r3, r3
 80004d4:	4413      	add	r3, r2
 80004d6:	b299      	uxth	r1, r3
 80004d8:	79bb      	ldrb	r3, [r7, #6]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	bf0c      	ite	eq
 80004de:	2301      	moveq	r3, #1
 80004e0:	2300      	movne	r3, #0
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	461a      	mov	r2, r3
 80004e6:	f7ff ff2f 	bl	8000348 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80004ea:	693b      	ldr	r3, [r7, #16]
 80004ec:	3301      	adds	r3, #1
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	461a      	mov	r2, r3
 80004f6:	693b      	ldr	r3, [r7, #16]
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d3c8      	bcc.n	800048e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	3301      	adds	r3, #1
 8000500:	617b      	str	r3, [r7, #20]
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	785b      	ldrb	r3, [r3, #1]
 8000506:	461a      	mov	r2, r3
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	4293      	cmp	r3, r2
 800050c:	d3ad      	bcc.n	800046a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800050e:	4b07      	ldr	r3, [pc, #28]	; (800052c <SSD1306_Putc+0xfc>)
 8000510:	881a      	ldrh	r2, [r3, #0]
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	b29b      	uxth	r3, r3
 8000518:	4413      	add	r3, r2
 800051a:	b29a      	uxth	r2, r3
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <SSD1306_Putc+0xfc>)
 800051e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000520:	79fb      	ldrb	r3, [r7, #7]
}
 8000522:	4618      	mov	r0, r3
 8000524:	3718      	adds	r7, #24
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000434 	.word	0x20000434

08000530 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	4613      	mov	r3, r2
 800053c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800053e:	e012      	b.n	8000566 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	79fa      	ldrb	r2, [r7, #7]
 8000546:	68b9      	ldr	r1, [r7, #8]
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff ff71 	bl	8000430 <SSD1306_Putc>
 800054e:	4603      	mov	r3, r0
 8000550:	461a      	mov	r2, r3
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	429a      	cmp	r2, r3
 8000558:	d002      	beq.n	8000560 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	e008      	b.n	8000572 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3301      	adds	r3, #1
 8000564:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d1e8      	bne.n	8000540 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	781b      	ldrb	r3, [r3, #0]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff feca 	bl	8000318 <SSD1306_Fill>
    //SSD1306_UpdateScreen();
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}

08000588 <ssd1306_I2C_Init>:
}
#endif

//Generated I2C
#ifdef GENERATED_I2C
void ssd1306_I2C_Init() {
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <ssd1306_I2C_Init+0x24>)
 8000590:	607b      	str	r3, [r7, #4]
		while(p>0)
 8000592:	e002      	b.n	800059a <ssd1306_I2C_Init+0x12>
			p--;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	3b01      	subs	r3, #1
 8000598:	607b      	str	r3, [r7, #4]
		while(p>0)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d1f9      	bne.n	8000594 <ssd1306_I2C_Init+0xc>
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	0003d090 	.word	0x0003d090

080005b0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b0c5      	sub	sp, #276	; 0x114
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4604      	mov	r4, r0
 80005b8:	4608      	mov	r0, r1
 80005ba:	4639      	mov	r1, r7
 80005bc:	600a      	str	r2, [r1, #0]
 80005be:	4619      	mov	r1, r3
 80005c0:	1dfb      	adds	r3, r7, #7
 80005c2:	4622      	mov	r2, r4
 80005c4:	701a      	strb	r2, [r3, #0]
 80005c6:	1dbb      	adds	r3, r7, #6
 80005c8:	4602      	mov	r2, r0
 80005ca:	701a      	strb	r2, [r3, #0]
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	460a      	mov	r2, r1
 80005d0:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	1dba      	adds	r2, r7, #6
 80005d8:	7812      	ldrb	r2, [r2, #0]
 80005da:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 80005dc:	2300      	movs	r3, #0
 80005de:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80005e2:	e010      	b.n	8000606 <ssd1306_I2C_WriteMulti+0x56>
		dt[i+1] = data[i];
 80005e4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80005e8:	463a      	mov	r2, r7
 80005ea:	6812      	ldr	r2, [r2, #0]
 80005ec:	441a      	add	r2, r3
 80005ee:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80005f2:	3301      	adds	r3, #1
 80005f4:	7811      	ldrb	r1, [r2, #0]
 80005f6:	f107 020c 	add.w	r2, r7, #12
 80005fa:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 80005fc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000600:	3301      	adds	r3, #1
 8000602:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000606:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800060a:	b29b      	uxth	r3, r3
 800060c:	1d3a      	adds	r2, r7, #4
 800060e:	8812      	ldrh	r2, [r2, #0]
 8000610:	429a      	cmp	r2, r3
 8000612:	d8e7      	bhi.n	80005e4 <ssd1306_I2C_WriteMulti+0x34>
	GENE_I2C_Master_Transmit(address, dt, count+1);
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	b29a      	uxth	r2, r3
 800061c:	f107 010c 	add.w	r1, r7, #12
 8000620:	1dfb      	adds	r3, r7, #7
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	f002 ff4d 	bl	80034c4 <GENE_I2C_Master_Transmit>
}
 800062a:	bf00      	nop
 800062c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000630:	46bd      	mov	sp, r7
 8000632:	bd90      	pop	{r4, r7, pc}

08000634 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
 800063e:	460b      	mov	r3, r1
 8000640:	71bb      	strb	r3, [r7, #6]
 8000642:	4613      	mov	r3, r2
 8000644:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000646:	79bb      	ldrb	r3, [r7, #6]
 8000648:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800064a:	797b      	ldrb	r3, [r7, #5]
 800064c:	737b      	strb	r3, [r7, #13]
	GENE_I2C_Master_Transmit(address, dt, 2);
 800064e:	f107 010c 	add.w	r1, r7, #12
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2202      	movs	r2, #2
 8000656:	4618      	mov	r0, r3
 8000658:	f002 ff34 	bl	80034c4 <GENE_I2C_Master_Transmit>
}
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <PWM_SetDuty>:
	 HAL_TIM_PWM_ConfigChannel(timer, &sConfigOC, channel);
	 HAL_TIM_PWM_Start(timer, channel); // start pwm generation
}

void PWM_SetDuty(TIM_HandleTypeDef* timer, uint32_t channel, uint16_t pulse)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	4613      	mov	r3, r2
 8000670:	80fb      	strh	r3, [r7, #6]
	 __HAL_TIM_SET_COMPARE(timer, channel, pulse);
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d104      	bne.n	8000682 <PWM_SetDuty+0x1e>
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	88fa      	ldrh	r2, [r7, #6]
 800067e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000680:	e013      	b.n	80006aa <PWM_SetDuty+0x46>
	 __HAL_TIM_SET_COMPARE(timer, channel, pulse);
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	2b04      	cmp	r3, #4
 8000686:	d104      	bne.n	8000692 <PWM_SetDuty+0x2e>
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	88fa      	ldrh	r2, [r7, #6]
 800068e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000690:	e00b      	b.n	80006aa <PWM_SetDuty+0x46>
	 __HAL_TIM_SET_COMPARE(timer, channel, pulse);
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	2b08      	cmp	r3, #8
 8000696:	d104      	bne.n	80006a2 <PWM_SetDuty+0x3e>
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	88fa      	ldrh	r2, [r7, #6]
 800069e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80006a0:	e003      	b.n	80006aa <PWM_SetDuty+0x46>
	 __HAL_TIM_SET_COMPARE(timer, channel, pulse);
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	88fa      	ldrh	r2, [r7, #6]
 80006a8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <HAL_Init+0x28>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a07      	ldr	r2, [pc, #28]	; (80006dc <HAL_Init+0x28>)
 80006be:	f043 0310 	orr.w	r3, r3, #16
 80006c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c4:	2003      	movs	r0, #3
 80006c6:	f000 fb2d 	bl	8000d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ca:	200f      	movs	r0, #15
 80006cc:	f000 f808 	bl	80006e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d0:	f005 fd30 	bl	8006134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006d4:	2300      	movs	r3, #0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40022000 	.word	0x40022000

080006e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <HAL_InitTick+0x54>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <HAL_InitTick+0x58>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	4619      	mov	r1, r3
 80006f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fb45 	bl	8000d8e <HAL_SYSTICK_Config>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	e00e      	b.n	800072c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2b0f      	cmp	r3, #15
 8000712:	d80a      	bhi.n	800072a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000714:	2200      	movs	r2, #0
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	f04f 30ff 	mov.w	r0, #4294967295
 800071c:	f000 fb0d 	bl	8000d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000720:	4a06      	ldr	r2, [pc, #24]	; (800073c <HAL_InitTick+0x5c>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000726:	2300      	movs	r3, #0
 8000728:	e000      	b.n	800072c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800072a:	2301      	movs	r3, #1
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000014 	.word	0x20000014
 8000738:	2000000c 	.word	0x2000000c
 800073c:	20000008 	.word	0x20000008

08000740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <HAL_IncTick+0x1c>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	4b05      	ldr	r3, [pc, #20]	; (8000760 <HAL_IncTick+0x20>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4413      	add	r3, r2
 8000750:	4a03      	ldr	r2, [pc, #12]	; (8000760 <HAL_IncTick+0x20>)
 8000752:	6013      	str	r3, [r2, #0]
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	2000000c 	.word	0x2000000c
 8000760:	200013ec 	.word	0x200013ec

08000764 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return uwTick;
 8000768:	4b02      	ldr	r3, [pc, #8]	; (8000774 <HAL_GetTick+0x10>)
 800076a:	681b      	ldr	r3, [r3, #0]
}
 800076c:	4618      	mov	r0, r3
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	200013ec 	.word	0x200013ec

08000778 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000780:	2300      	movs	r3, #0
 8000782:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e0be      	b.n	8000918 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	689b      	ldr	r3, [r3, #8]
 800079e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d109      	bne.n	80007bc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f005 fa96 	bl	8005ce8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f000 f9ab 	bl	8000b18 <ADC_ConversionStop_Disable>
 80007c2:	4603      	mov	r3, r0
 80007c4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ca:	f003 0310 	and.w	r3, r3, #16
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	f040 8099 	bne.w	8000906 <HAL_ADC_Init+0x18e>
 80007d4:	7dfb      	ldrb	r3, [r7, #23]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	f040 8095 	bne.w	8000906 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007e4:	f023 0302 	bic.w	r3, r3, #2
 80007e8:	f043 0202 	orr.w	r2, r3, #2
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007f8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7b1b      	ldrb	r3, [r3, #12]
 80007fe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000800:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	4313      	orrs	r3, r2
 8000806:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000810:	d003      	beq.n	800081a <HAL_ADC_Init+0xa2>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d102      	bne.n	8000820 <HAL_ADC_Init+0xa8>
 800081a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800081e:	e000      	b.n	8000822 <HAL_ADC_Init+0xaa>
 8000820:	2300      	movs	r3, #0
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	4313      	orrs	r3, r2
 8000826:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	7d1b      	ldrb	r3, [r3, #20]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d119      	bne.n	8000864 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	7b1b      	ldrb	r3, [r3, #12]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d109      	bne.n	800084c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	3b01      	subs	r3, #1
 800083e:	035a      	lsls	r2, r3, #13
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	4313      	orrs	r3, r2
 8000844:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	e00b      	b.n	8000864 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000850:	f043 0220 	orr.w	r2, r3, #32
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085c:	f043 0201 	orr.w	r2, r3, #1
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	430a      	orrs	r2, r1
 8000876:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	689a      	ldr	r2, [r3, #8]
 800087e:	4b28      	ldr	r3, [pc, #160]	; (8000920 <HAL_ADC_Init+0x1a8>)
 8000880:	4013      	ands	r3, r2
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	6812      	ldr	r2, [r2, #0]
 8000886:	68b9      	ldr	r1, [r7, #8]
 8000888:	430b      	orrs	r3, r1
 800088a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000894:	d003      	beq.n	800089e <HAL_ADC_Init+0x126>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d104      	bne.n	80008a8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	691b      	ldr	r3, [r3, #16]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	051b      	lsls	r3, r3, #20
 80008a6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	430a      	orrs	r2, r1
 80008ba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	689a      	ldr	r2, [r3, #8]
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <HAL_ADC_Init+0x1ac>)
 80008c4:	4013      	ands	r3, r2
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d10b      	bne.n	80008e4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2200      	movs	r2, #0
 80008d0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d6:	f023 0303 	bic.w	r3, r3, #3
 80008da:	f043 0201 	orr.w	r2, r3, #1
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008e2:	e018      	b.n	8000916 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e8:	f023 0312 	bic.w	r3, r3, #18
 80008ec:	f043 0210 	orr.w	r2, r3, #16
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f8:	f043 0201 	orr.w	r2, r3, #1
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000900:	2301      	movs	r3, #1
 8000902:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000904:	e007      	b.n	8000916 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090a:	f043 0210 	orr.w	r2, r3, #16
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000916:	7dfb      	ldrb	r3, [r7, #23]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	ffe1f7fd 	.word	0xffe1f7fd
 8000924:	ff1f0efe 	.word	0xff1f0efe

08000928 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000932:	2300      	movs	r3, #0
 8000934:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000940:	2b01      	cmp	r3, #1
 8000942:	d101      	bne.n	8000948 <HAL_ADC_ConfigChannel+0x20>
 8000944:	2302      	movs	r3, #2
 8000946:	e0dc      	b.n	8000b02 <HAL_ADC_ConfigChannel+0x1da>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2201      	movs	r2, #1
 800094c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	2b06      	cmp	r3, #6
 8000956:	d81c      	bhi.n	8000992 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685a      	ldr	r2, [r3, #4]
 8000962:	4613      	mov	r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	4413      	add	r3, r2
 8000968:	3b05      	subs	r3, #5
 800096a:	221f      	movs	r2, #31
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	43db      	mvns	r3, r3
 8000972:	4019      	ands	r1, r3
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	6818      	ldr	r0, [r3, #0]
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685a      	ldr	r2, [r3, #4]
 800097c:	4613      	mov	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	4413      	add	r3, r2
 8000982:	3b05      	subs	r3, #5
 8000984:	fa00 f203 	lsl.w	r2, r0, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	430a      	orrs	r2, r1
 800098e:	635a      	str	r2, [r3, #52]	; 0x34
 8000990:	e03c      	b.n	8000a0c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	2b0c      	cmp	r3, #12
 8000998:	d81c      	bhi.n	80009d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685a      	ldr	r2, [r3, #4]
 80009a4:	4613      	mov	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	4413      	add	r3, r2
 80009aa:	3b23      	subs	r3, #35	; 0x23
 80009ac:	221f      	movs	r2, #31
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	4019      	ands	r1, r3
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	6818      	ldr	r0, [r3, #0]
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685a      	ldr	r2, [r3, #4]
 80009be:	4613      	mov	r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	4413      	add	r3, r2
 80009c4:	3b23      	subs	r3, #35	; 0x23
 80009c6:	fa00 f203 	lsl.w	r2, r0, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	430a      	orrs	r2, r1
 80009d0:	631a      	str	r2, [r3, #48]	; 0x30
 80009d2:	e01b      	b.n	8000a0c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685a      	ldr	r2, [r3, #4]
 80009de:	4613      	mov	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	4413      	add	r3, r2
 80009e4:	3b41      	subs	r3, #65	; 0x41
 80009e6:	221f      	movs	r2, #31
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	4019      	ands	r1, r3
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	4613      	mov	r3, r2
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	4413      	add	r3, r2
 80009fe:	3b41      	subs	r3, #65	; 0x41
 8000a00:	fa00 f203 	lsl.w	r2, r0, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b09      	cmp	r3, #9
 8000a12:	d91c      	bls.n	8000a4e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	68d9      	ldr	r1, [r3, #12]
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	4413      	add	r3, r2
 8000a24:	3b1e      	subs	r3, #30
 8000a26:	2207      	movs	r2, #7
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	4019      	ands	r1, r3
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	6898      	ldr	r0, [r3, #8]
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	4413      	add	r3, r2
 8000a3e:	3b1e      	subs	r3, #30
 8000a40:	fa00 f203 	lsl.w	r2, r0, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	e019      	b.n	8000a82 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	6919      	ldr	r1, [r3, #16]
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	4413      	add	r3, r2
 8000a5e:	2207      	movs	r2, #7
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	4019      	ands	r1, r3
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	6898      	ldr	r0, [r3, #8]
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4613      	mov	r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	4413      	add	r3, r2
 8000a76:	fa00 f203 	lsl.w	r2, r0, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2b10      	cmp	r3, #16
 8000a88:	d003      	beq.n	8000a92 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000a8e:	2b11      	cmp	r3, #17
 8000a90:	d132      	bne.n	8000af8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a1d      	ldr	r2, [pc, #116]	; (8000b0c <HAL_ADC_ConfigChannel+0x1e4>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d125      	bne.n	8000ae8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d126      	bne.n	8000af8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ab8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b10      	cmp	r3, #16
 8000ac0:	d11a      	bne.n	8000af8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <HAL_ADC_ConfigChannel+0x1e8>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <HAL_ADC_ConfigChannel+0x1ec>)
 8000ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8000acc:	0c9a      	lsrs	r2, r3, #18
 8000ace:	4613      	mov	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4413      	add	r3, r2
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ad8:	e002      	b.n	8000ae0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d1f9      	bne.n	8000ada <HAL_ADC_ConfigChannel+0x1b2>
 8000ae6:	e007      	b.n	8000af8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aec:	f043 0220 	orr.w	r2, r3, #32
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	40012400 	.word	0x40012400
 8000b10:	20000014 	.word	0x20000014
 8000b14:	431bde83 	.word	0x431bde83

08000b18 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d127      	bne.n	8000b82 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	689a      	ldr	r2, [r3, #8]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f022 0201 	bic.w	r2, r2, #1
 8000b40:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000b42:	f7ff fe0f 	bl	8000764 <HAL_GetTick>
 8000b46:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000b48:	e014      	b.n	8000b74 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000b4a:	f7ff fe0b 	bl	8000764 <HAL_GetTick>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d90d      	bls.n	8000b74 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5c:	f043 0210 	orr.w	r2, r3, #16
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b68:	f043 0201 	orr.w	r2, r3, #1
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	e007      	b.n	8000b84 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d0e3      	beq.n	8000b4a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bbe:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	60d3      	str	r3, [r2, #12]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <__NVIC_GetPriorityGrouping+0x18>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	f003 0307 	and.w	r3, r3, #7
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	db0b      	blt.n	8000c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	f003 021f 	and.w	r2, r3, #31
 8000c08:	4906      	ldr	r1, [pc, #24]	; (8000c24 <__NVIC_EnableIRQ+0x34>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	095b      	lsrs	r3, r3, #5
 8000c10:	2001      	movs	r0, #1
 8000c12:	fa00 f202 	lsl.w	r2, r0, r2
 8000c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	e000e100 	.word	0xe000e100

08000c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	db0a      	blt.n	8000c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	490c      	ldr	r1, [pc, #48]	; (8000c74 <__NVIC_SetPriority+0x4c>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	0112      	lsls	r2, r2, #4
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c50:	e00a      	b.n	8000c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4908      	ldr	r1, [pc, #32]	; (8000c78 <__NVIC_SetPriority+0x50>)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	3b04      	subs	r3, #4
 8000c60:	0112      	lsls	r2, r2, #4
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	761a      	strb	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000e100 	.word	0xe000e100
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b089      	sub	sp, #36	; 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f1c3 0307 	rsb	r3, r3, #7
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	bf28      	it	cs
 8000c9a:	2304      	movcs	r3, #4
 8000c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	2b06      	cmp	r3, #6
 8000ca4:	d902      	bls.n	8000cac <NVIC_EncodePriority+0x30>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3b03      	subs	r3, #3
 8000caa:	e000      	b.n	8000cae <NVIC_EncodePriority+0x32>
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	43d9      	mvns	r1, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	4313      	orrs	r3, r2
         );
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3724      	adds	r7, #36	; 0x24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf0:	d301      	bcc.n	8000cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00f      	b.n	8000d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <SysTick_Config+0x40>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfe:	210f      	movs	r1, #15
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f7ff ff90 	bl	8000c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <SysTick_Config+0x40>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0e:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <SysTick_Config+0x40>)
 8000d10:	2207      	movs	r2, #7
 8000d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	e000e010 	.word	0xe000e010

08000d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff ff2d 	bl	8000b8c <__NVIC_SetPriorityGrouping>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b086      	sub	sp, #24
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4603      	mov	r3, r0
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
 8000d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d4c:	f7ff ff42 	bl	8000bd4 <__NVIC_GetPriorityGrouping>
 8000d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	68b9      	ldr	r1, [r7, #8]
 8000d56:	6978      	ldr	r0, [r7, #20]
 8000d58:	f7ff ff90 	bl	8000c7c <NVIC_EncodePriority>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d62:	4611      	mov	r1, r2
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff5f 	bl	8000c28 <__NVIC_SetPriority>
}
 8000d6a:	bf00      	nop
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff35 	bl	8000bf0 <__NVIC_EnableIRQ>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ffa2 	bl	8000ce0 <SysTick_Config>
 8000d9c:	4603      	mov	r3, r0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d005      	beq.n	8000dca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	73fb      	strb	r3, [r7, #15]
 8000dc8:	e051      	b.n	8000e6e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f022 020e 	bic.w	r2, r2, #14
 8000dd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f022 0201 	bic.w	r2, r2, #1
 8000de8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a22      	ldr	r2, [pc, #136]	; (8000e78 <HAL_DMA_Abort_IT+0xd0>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d029      	beq.n	8000e48 <HAL_DMA_Abort_IT+0xa0>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <HAL_DMA_Abort_IT+0xd4>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d022      	beq.n	8000e44 <HAL_DMA_Abort_IT+0x9c>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a1f      	ldr	r2, [pc, #124]	; (8000e80 <HAL_DMA_Abort_IT+0xd8>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d01a      	beq.n	8000e3e <HAL_DMA_Abort_IT+0x96>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a1d      	ldr	r2, [pc, #116]	; (8000e84 <HAL_DMA_Abort_IT+0xdc>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d012      	beq.n	8000e38 <HAL_DMA_Abort_IT+0x90>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <HAL_DMA_Abort_IT+0xe0>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d00a      	beq.n	8000e32 <HAL_DMA_Abort_IT+0x8a>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a1a      	ldr	r2, [pc, #104]	; (8000e8c <HAL_DMA_Abort_IT+0xe4>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d102      	bne.n	8000e2c <HAL_DMA_Abort_IT+0x84>
 8000e26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e2a:	e00e      	b.n	8000e4a <HAL_DMA_Abort_IT+0xa2>
 8000e2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e30:	e00b      	b.n	8000e4a <HAL_DMA_Abort_IT+0xa2>
 8000e32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e36:	e008      	b.n	8000e4a <HAL_DMA_Abort_IT+0xa2>
 8000e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3c:	e005      	b.n	8000e4a <HAL_DMA_Abort_IT+0xa2>
 8000e3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e42:	e002      	b.n	8000e4a <HAL_DMA_Abort_IT+0xa2>
 8000e44:	2310      	movs	r3, #16
 8000e46:	e000      	b.n	8000e4a <HAL_DMA_Abort_IT+0xa2>
 8000e48:	2301      	movs	r3, #1
 8000e4a:	4a11      	ldr	r2, [pc, #68]	; (8000e90 <HAL_DMA_Abort_IT+0xe8>)
 8000e4c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2201      	movs	r2, #1
 8000e52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	4798      	blx	r3
    } 
  }
  return status;
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40020008 	.word	0x40020008
 8000e7c:	4002001c 	.word	0x4002001c
 8000e80:	40020030 	.word	0x40020030
 8000e84:	40020044 	.word	0x40020044
 8000e88:	40020058 	.word	0x40020058
 8000e8c:	4002006c 	.word	0x4002006c
 8000e90:	40020000 	.word	0x40020000

08000e94 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e96:	b087      	sub	sp, #28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000eae:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <HAL_FLASH_Program+0xd8>)
 8000eb0:	7e1b      	ldrb	r3, [r3, #24]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d101      	bne.n	8000eba <HAL_FLASH_Program+0x26>
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	e054      	b.n	8000f64 <HAL_FLASH_Program+0xd0>
 8000eba:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <HAL_FLASH_Program+0xd8>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000ec0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ec4:	f000 f8a8 	bl	8001018 <FLASH_WaitForLastOperation>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000ecc:	7dfb      	ldrb	r3, [r7, #23]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d144      	bne.n	8000f5c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d102      	bne.n	8000ede <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	757b      	strb	r3, [r7, #21]
 8000edc:	e007      	b.n	8000eee <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d102      	bne.n	8000eea <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	757b      	strb	r3, [r7, #21]
 8000ee8:	e001      	b.n	8000eee <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000eea:	2304      	movs	r3, #4
 8000eec:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	75bb      	strb	r3, [r7, #22]
 8000ef2:	e02d      	b.n	8000f50 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000ef4:	7dbb      	ldrb	r3, [r7, #22]
 8000ef6:	005a      	lsls	r2, r3, #1
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	eb02 0c03 	add.w	ip, r2, r3
 8000efe:	7dbb      	ldrb	r3, [r7, #22]
 8000f00:	0119      	lsls	r1, r3, #4
 8000f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f06:	f1c1 0620 	rsb	r6, r1, #32
 8000f0a:	f1a1 0020 	sub.w	r0, r1, #32
 8000f0e:	fa22 f401 	lsr.w	r4, r2, r1
 8000f12:	fa03 f606 	lsl.w	r6, r3, r6
 8000f16:	4334      	orrs	r4, r6
 8000f18:	fa23 f000 	lsr.w	r0, r3, r0
 8000f1c:	4304      	orrs	r4, r0
 8000f1e:	fa23 f501 	lsr.w	r5, r3, r1
 8000f22:	b2a3      	uxth	r3, r4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4660      	mov	r0, ip
 8000f28:	f000 f85a 	bl	8000fe0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f30:	f000 f872 	bl	8001018 <FLASH_WaitForLastOperation>
 8000f34:	4603      	mov	r3, r0
 8000f36:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000f38:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HAL_FLASH_Program+0xdc>)
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <HAL_FLASH_Program+0xdc>)
 8000f3e:	f023 0301 	bic.w	r3, r3, #1
 8000f42:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d107      	bne.n	8000f5a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000f4a:	7dbb      	ldrb	r3, [r7, #22]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	75bb      	strb	r3, [r7, #22]
 8000f50:	7dba      	ldrb	r2, [r7, #22]
 8000f52:	7d7b      	ldrb	r3, [r7, #21]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d3cd      	bcc.n	8000ef4 <HAL_FLASH_Program+0x60>
 8000f58:	e000      	b.n	8000f5c <HAL_FLASH_Program+0xc8>
      {
        break;
 8000f5a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <HAL_FLASH_Program+0xd8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	761a      	strb	r2, [r3, #24]

  return status;
 8000f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	371c      	adds	r7, #28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f6c:	200013f0 	.word	0x200013f0
 8000f70:	40022000 	.word	0x40022000

08000f74 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <HAL_FLASH_Unlock+0x40>)
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d00d      	beq.n	8000fa6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_FLASH_Unlock+0x40>)
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_FLASH_Unlock+0x44>)
 8000f8e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <HAL_FLASH_Unlock+0x40>)
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_FLASH_Unlock+0x48>)
 8000f94:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <HAL_FLASH_Unlock+0x40>)
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40022000 	.word	0x40022000
 8000fb8:	45670123 	.word	0x45670123
 8000fbc:	cdef89ab 	.word	0xcdef89ab

08000fc0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_FLASH_Lock+0x1c>)
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <HAL_FLASH_Lock+0x1c>)
 8000fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fce:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <FLASH_Program_HalfWord+0x30>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <FLASH_Program_HalfWord+0x34>)
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	4a07      	ldr	r2, [pc, #28]	; (8001014 <FLASH_Program_HalfWord+0x34>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	887a      	ldrh	r2, [r7, #2]
 8001002:	801a      	strh	r2, [r3, #0]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200013f0 	.word	0x200013f0
 8001014:	40022000 	.word	0x40022000

08001018 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001020:	f7ff fba0 	bl	8000764 <HAL_GetTick>
 8001024:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001026:	e010      	b.n	800104a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800102e:	d00c      	beq.n	800104a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d007      	beq.n	8001046 <FLASH_WaitForLastOperation+0x2e>
 8001036:	f7ff fb95 	bl	8000764 <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	429a      	cmp	r2, r3
 8001044:	d201      	bcs.n	800104a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e025      	b.n	8001096 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <FLASH_WaitForLastOperation+0x88>)
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1e8      	bne.n	8001028 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <FLASH_WaitForLastOperation+0x88>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	f003 0320 	and.w	r3, r3, #32
 800105e:	2b00      	cmp	r3, #0
 8001060:	d002      	beq.n	8001068 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <FLASH_WaitForLastOperation+0x88>)
 8001064:	2220      	movs	r2, #32
 8001066:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001068:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <FLASH_WaitForLastOperation+0x88>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	f003 0310 	and.w	r3, r3, #16
 8001070:	2b00      	cmp	r3, #0
 8001072:	d10b      	bne.n	800108c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <FLASH_WaitForLastOperation+0x88>)
 8001076:	69db      	ldr	r3, [r3, #28]
 8001078:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800107c:	2b00      	cmp	r3, #0
 800107e:	d105      	bne.n	800108c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <FLASH_WaitForLastOperation+0x88>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800108c:	f000 f80a 	bl	80010a4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40022000 	.word	0x40022000

080010a4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80010ae:	4b23      	ldr	r3, [pc, #140]	; (800113c <FLASH_SetErrorCode+0x98>)
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d009      	beq.n	80010ce <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <FLASH_SetErrorCode+0x9c>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f043 0302 	orr.w	r3, r3, #2
 80010c2:	4a1f      	ldr	r2, [pc, #124]	; (8001140 <FLASH_SetErrorCode+0x9c>)
 80010c4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f043 0310 	orr.w	r3, r3, #16
 80010cc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80010ce:	4b1b      	ldr	r3, [pc, #108]	; (800113c <FLASH_SetErrorCode+0x98>)
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d009      	beq.n	80010ee <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80010da:	4b19      	ldr	r3, [pc, #100]	; (8001140 <FLASH_SetErrorCode+0x9c>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	4a17      	ldr	r2, [pc, #92]	; (8001140 <FLASH_SetErrorCode+0x9c>)
 80010e4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <FLASH_SetErrorCode+0x98>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00b      	beq.n	8001112 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <FLASH_SetErrorCode+0x9c>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <FLASH_SetErrorCode+0x9c>)
 8001104:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <FLASH_SetErrorCode+0x98>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	4a0c      	ldr	r2, [pc, #48]	; (800113c <FLASH_SetErrorCode+0x98>)
 800110c:	f023 0301 	bic.w	r3, r3, #1
 8001110:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f240 1201 	movw	r2, #257	; 0x101
 8001118:	4293      	cmp	r3, r2
 800111a:	d106      	bne.n	800112a <FLASH_SetErrorCode+0x86>
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <FLASH_SetErrorCode+0x98>)
 800111e:	69db      	ldr	r3, [r3, #28]
 8001120:	4a06      	ldr	r2, [pc, #24]	; (800113c <FLASH_SetErrorCode+0x98>)
 8001122:	f023 0301 	bic.w	r3, r3, #1
 8001126:	61d3      	str	r3, [r2, #28]
}  
 8001128:	e002      	b.n	8001130 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800112a:	4a04      	ldr	r2, [pc, #16]	; (800113c <FLASH_SetErrorCode+0x98>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	60d3      	str	r3, [r2, #12]
}  
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40022000 	.word	0x40022000
 8001140:	200013f0 	.word	0x200013f0

08001144 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001156:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <HAL_FLASHEx_Erase+0xd0>)
 8001158:	7e1b      	ldrb	r3, [r3, #24]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d101      	bne.n	8001162 <HAL_FLASHEx_Erase+0x1e>
 800115e:	2302      	movs	r3, #2
 8001160:	e053      	b.n	800120a <HAL_FLASHEx_Erase+0xc6>
 8001162:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <HAL_FLASHEx_Erase+0xd0>)
 8001164:	2201      	movs	r2, #1
 8001166:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b02      	cmp	r3, #2
 800116e:	d116      	bne.n	800119e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001170:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001174:	f7ff ff50 	bl	8001018 <FLASH_WaitForLastOperation>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d141      	bne.n	8001202 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800117e:	2001      	movs	r0, #1
 8001180:	f000 f84c 	bl	800121c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001184:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001188:	f7ff ff46 	bl	8001018 <FLASH_WaitForLastOperation>
 800118c:	4603      	mov	r3, r0
 800118e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001190:	4b21      	ldr	r3, [pc, #132]	; (8001218 <HAL_FLASHEx_Erase+0xd4>)
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	4a20      	ldr	r2, [pc, #128]	; (8001218 <HAL_FLASHEx_Erase+0xd4>)
 8001196:	f023 0304 	bic.w	r3, r3, #4
 800119a:	6113      	str	r3, [r2, #16]
 800119c:	e031      	b.n	8001202 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800119e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011a2:	f7ff ff39 	bl	8001018 <FLASH_WaitForLastOperation>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d12a      	bne.n	8001202 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	f04f 32ff 	mov.w	r2, #4294967295
 80011b2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	e019      	b.n	80011f0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80011bc:	68b8      	ldr	r0, [r7, #8]
 80011be:	f000 f849 	bl	8001254 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011c2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011c6:	f7ff ff27 	bl	8001018 <FLASH_WaitForLastOperation>
 80011ca:	4603      	mov	r3, r0
 80011cc:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_FLASHEx_Erase+0xd4>)
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	4a11      	ldr	r2, [pc, #68]	; (8001218 <HAL_FLASHEx_Erase+0xd4>)
 80011d4:	f023 0302 	bic.w	r3, r3, #2
 80011d8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	601a      	str	r2, [r3, #0]
            break;
 80011e6:	e00c      	b.n	8001202 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011ee:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	029a      	lsls	r2, r3, #10
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d3dc      	bcc.n	80011bc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <HAL_FLASHEx_Erase+0xd0>)
 8001204:	2200      	movs	r2, #0
 8001206:	761a      	strb	r2, [r3, #24]

  return status;
 8001208:	7bfb      	ldrb	r3, [r7, #15]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200013f0 	.word	0x200013f0
 8001218:	40022000 	.word	0x40022000

0800121c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <FLASH_MassErase+0x30>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <FLASH_MassErase+0x34>)
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	4a08      	ldr	r2, [pc, #32]	; (8001250 <FLASH_MassErase+0x34>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <FLASH_MassErase+0x34>)
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	4a05      	ldr	r2, [pc, #20]	; (8001250 <FLASH_MassErase+0x34>)
 800123c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001240:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	200013f0 	.word	0x200013f0
 8001250:	40022000 	.word	0x40022000

08001254 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <FLASH_PageErase+0x38>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <FLASH_PageErase+0x3c>)
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <FLASH_PageErase+0x3c>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800126e:	4a08      	ldr	r2, [pc, #32]	; (8001290 <FLASH_PageErase+0x3c>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <FLASH_PageErase+0x3c>)
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	4a05      	ldr	r2, [pc, #20]	; (8001290 <FLASH_PageErase+0x3c>)
 800127a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800127e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	200013f0 	.word	0x200013f0
 8001290:	40022000 	.word	0x40022000

08001294 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001294:	b480      	push	{r7}
 8001296:	b08b      	sub	sp, #44	; 0x2c
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a6:	e127      	b.n	80014f8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012a8:	2201      	movs	r2, #1
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	f040 8116 	bne.w	80014f2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b12      	cmp	r3, #18
 80012cc:	d034      	beq.n	8001338 <HAL_GPIO_Init+0xa4>
 80012ce:	2b12      	cmp	r3, #18
 80012d0:	d80d      	bhi.n	80012ee <HAL_GPIO_Init+0x5a>
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d02b      	beq.n	800132e <HAL_GPIO_Init+0x9a>
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d804      	bhi.n	80012e4 <HAL_GPIO_Init+0x50>
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d031      	beq.n	8001342 <HAL_GPIO_Init+0xae>
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d01c      	beq.n	800131c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012e2:	e048      	b.n	8001376 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d043      	beq.n	8001370 <HAL_GPIO_Init+0xdc>
 80012e8:	2b11      	cmp	r3, #17
 80012ea:	d01b      	beq.n	8001324 <HAL_GPIO_Init+0x90>
          break;
 80012ec:	e043      	b.n	8001376 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012ee:	4a89      	ldr	r2, [pc, #548]	; (8001514 <HAL_GPIO_Init+0x280>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d026      	beq.n	8001342 <HAL_GPIO_Init+0xae>
 80012f4:	4a87      	ldr	r2, [pc, #540]	; (8001514 <HAL_GPIO_Init+0x280>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d806      	bhi.n	8001308 <HAL_GPIO_Init+0x74>
 80012fa:	4a87      	ldr	r2, [pc, #540]	; (8001518 <HAL_GPIO_Init+0x284>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d020      	beq.n	8001342 <HAL_GPIO_Init+0xae>
 8001300:	4a86      	ldr	r2, [pc, #536]	; (800151c <HAL_GPIO_Init+0x288>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d01d      	beq.n	8001342 <HAL_GPIO_Init+0xae>
          break;
 8001306:	e036      	b.n	8001376 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001308:	4a85      	ldr	r2, [pc, #532]	; (8001520 <HAL_GPIO_Init+0x28c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d019      	beq.n	8001342 <HAL_GPIO_Init+0xae>
 800130e:	4a85      	ldr	r2, [pc, #532]	; (8001524 <HAL_GPIO_Init+0x290>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d016      	beq.n	8001342 <HAL_GPIO_Init+0xae>
 8001314:	4a84      	ldr	r2, [pc, #528]	; (8001528 <HAL_GPIO_Init+0x294>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d013      	beq.n	8001342 <HAL_GPIO_Init+0xae>
          break;
 800131a:	e02c      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	623b      	str	r3, [r7, #32]
          break;
 8001322:	e028      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	3304      	adds	r3, #4
 800132a:	623b      	str	r3, [r7, #32]
          break;
 800132c:	e023      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	3308      	adds	r3, #8
 8001334:	623b      	str	r3, [r7, #32]
          break;
 8001336:	e01e      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	330c      	adds	r3, #12
 800133e:	623b      	str	r3, [r7, #32]
          break;
 8001340:	e019      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d102      	bne.n	8001350 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800134a:	2304      	movs	r3, #4
 800134c:	623b      	str	r3, [r7, #32]
          break;
 800134e:	e012      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d105      	bne.n	8001364 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001358:	2308      	movs	r3, #8
 800135a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69fa      	ldr	r2, [r7, #28]
 8001360:	611a      	str	r2, [r3, #16]
          break;
 8001362:	e008      	b.n	8001376 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001364:	2308      	movs	r3, #8
 8001366:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	615a      	str	r2, [r3, #20]
          break;
 800136e:	e002      	b.n	8001376 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
          break;
 8001374:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	2bff      	cmp	r3, #255	; 0xff
 800137a:	d801      	bhi.n	8001380 <HAL_GPIO_Init+0xec>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	e001      	b.n	8001384 <HAL_GPIO_Init+0xf0>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3304      	adds	r3, #4
 8001384:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	2bff      	cmp	r3, #255	; 0xff
 800138a:	d802      	bhi.n	8001392 <HAL_GPIO_Init+0xfe>
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	e002      	b.n	8001398 <HAL_GPIO_Init+0x104>
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	3b08      	subs	r3, #8
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	210f      	movs	r1, #15
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	401a      	ands	r2, r3
 80013aa:	6a39      	ldr	r1, [r7, #32]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	431a      	orrs	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 8096 	beq.w	80014f2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013c6:	4b59      	ldr	r3, [pc, #356]	; (800152c <HAL_GPIO_Init+0x298>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	4a58      	ldr	r2, [pc, #352]	; (800152c <HAL_GPIO_Init+0x298>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6193      	str	r3, [r2, #24]
 80013d2:	4b56      	ldr	r3, [pc, #344]	; (800152c <HAL_GPIO_Init+0x298>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013de:	4a54      	ldr	r2, [pc, #336]	; (8001530 <HAL_GPIO_Init+0x29c>)
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3302      	adds	r3, #2
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	4013      	ands	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4b      	ldr	r2, [pc, #300]	; (8001534 <HAL_GPIO_Init+0x2a0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d013      	beq.n	8001432 <HAL_GPIO_Init+0x19e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4a      	ldr	r2, [pc, #296]	; (8001538 <HAL_GPIO_Init+0x2a4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d00d      	beq.n	800142e <HAL_GPIO_Init+0x19a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a49      	ldr	r2, [pc, #292]	; (800153c <HAL_GPIO_Init+0x2a8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d007      	beq.n	800142a <HAL_GPIO_Init+0x196>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a48      	ldr	r2, [pc, #288]	; (8001540 <HAL_GPIO_Init+0x2ac>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d101      	bne.n	8001426 <HAL_GPIO_Init+0x192>
 8001422:	2303      	movs	r3, #3
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x1a0>
 8001426:	2304      	movs	r3, #4
 8001428:	e004      	b.n	8001434 <HAL_GPIO_Init+0x1a0>
 800142a:	2302      	movs	r3, #2
 800142c:	e002      	b.n	8001434 <HAL_GPIO_Init+0x1a0>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_GPIO_Init+0x1a0>
 8001432:	2300      	movs	r3, #0
 8001434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001436:	f002 0203 	and.w	r2, r2, #3
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4093      	lsls	r3, r2
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	4313      	orrs	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001444:	493a      	ldr	r1, [pc, #232]	; (8001530 <HAL_GPIO_Init+0x29c>)
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800145e:	4b39      	ldr	r3, [pc, #228]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4938      	ldr	r1, [pc, #224]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
 800146a:	e006      	b.n	800147a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800146c:	4b35      	ldr	r3, [pc, #212]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	43db      	mvns	r3, r3
 8001474:	4933      	ldr	r1, [pc, #204]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 8001476:	4013      	ands	r3, r2
 8001478:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d006      	beq.n	8001494 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001486:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	492e      	ldr	r1, [pc, #184]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	604b      	str	r3, [r1, #4]
 8001492:	e006      	b.n	80014a2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001494:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	43db      	mvns	r3, r3
 800149c:	4929      	ldr	r1, [pc, #164]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 800149e:	4013      	ands	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d006      	beq.n	80014bc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014ae:	4b25      	ldr	r3, [pc, #148]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	4924      	ldr	r1, [pc, #144]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	608b      	str	r3, [r1, #8]
 80014ba:	e006      	b.n	80014ca <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	491f      	ldr	r1, [pc, #124]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d006      	beq.n	80014e4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014d6:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	491a      	ldr	r1, [pc, #104]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	60cb      	str	r3, [r1, #12]
 80014e2:	e006      	b.n	80014f2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014e6:	68da      	ldr	r2, [r3, #12]
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	4915      	ldr	r1, [pc, #84]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	3301      	adds	r3, #1
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	f47f aed0 	bne.w	80012a8 <HAL_GPIO_Init+0x14>
  }
}
 8001508:	bf00      	nop
 800150a:	372c      	adds	r7, #44	; 0x2c
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	10210000 	.word	0x10210000
 8001518:	10110000 	.word	0x10110000
 800151c:	10120000 	.word	0x10120000
 8001520:	10310000 	.word	0x10310000
 8001524:	10320000 	.word	0x10320000
 8001528:	10220000 	.word	0x10220000
 800152c:	40021000 	.word	0x40021000
 8001530:	40010000 	.word	0x40010000
 8001534:	40010800 	.word	0x40010800
 8001538:	40010c00 	.word	0x40010c00
 800153c:	40011000 	.word	0x40011000
 8001540:	40011400 	.word	0x40011400
 8001544:	40010400 	.word	0x40010400

08001548 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	887b      	ldrh	r3, [r7, #2]
 800155a:	4013      	ands	r3, r2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d002      	beq.n	8001566 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001560:	2301      	movs	r3, #1
 8001562:	73fb      	strb	r3, [r7, #15]
 8001564:	e001      	b.n	800156a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800156a:	7bfb      	ldrb	r3, [r7, #15]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	460b      	mov	r3, r1
 8001580:	807b      	strh	r3, [r7, #2]
 8001582:	4613      	mov	r3, r2
 8001584:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001586:	787b      	ldrb	r3, [r7, #1]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158c:	887a      	ldrh	r2, [r7, #2]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001592:	e003      	b.n	800159c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001594:	887b      	ldrh	r3, [r7, #2]
 8001596:	041a      	lsls	r2, r3, #16
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	611a      	str	r2, [r3, #16]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e26c      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 8087 	beq.w	80016d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015c8:	4b92      	ldr	r3, [pc, #584]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 030c 	and.w	r3, r3, #12
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d00c      	beq.n	80015ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015d4:	4b8f      	ldr	r3, [pc, #572]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d112      	bne.n	8001606 <HAL_RCC_OscConfig+0x5e>
 80015e0:	4b8c      	ldr	r3, [pc, #560]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ec:	d10b      	bne.n	8001606 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ee:	4b89      	ldr	r3, [pc, #548]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d06c      	beq.n	80016d4 <HAL_RCC_OscConfig+0x12c>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d168      	bne.n	80016d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e246      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160e:	d106      	bne.n	800161e <HAL_RCC_OscConfig+0x76>
 8001610:	4b80      	ldr	r3, [pc, #512]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a7f      	ldr	r2, [pc, #508]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	e02e      	b.n	800167c <HAL_RCC_OscConfig+0xd4>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x98>
 8001626:	4b7b      	ldr	r3, [pc, #492]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a7a      	ldr	r2, [pc, #488]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 800162c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b78      	ldr	r3, [pc, #480]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a77      	ldr	r2, [pc, #476]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e01d      	b.n	800167c <HAL_RCC_OscConfig+0xd4>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0xbc>
 800164a:	4b72      	ldr	r3, [pc, #456]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a71      	ldr	r2, [pc, #452]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b6f      	ldr	r3, [pc, #444]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a6e      	ldr	r2, [pc, #440]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 800165c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e00b      	b.n	800167c <HAL_RCC_OscConfig+0xd4>
 8001664:	4b6b      	ldr	r3, [pc, #428]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a6a      	ldr	r2, [pc, #424]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 800166a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b68      	ldr	r3, [pc, #416]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a67      	ldr	r2, [pc, #412]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800167a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d013      	beq.n	80016ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff f86e 	bl	8000764 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800168c:	f7ff f86a 	bl	8000764 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b64      	cmp	r3, #100	; 0x64
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e1fa      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	4b5d      	ldr	r3, [pc, #372]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0xe4>
 80016aa:	e014      	b.n	80016d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff f85a 	bl	8000764 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b4:	f7ff f856 	bl	8000764 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	; 0x64
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e1e6      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c6:	4b53      	ldr	r3, [pc, #332]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x10c>
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d063      	beq.n	80017aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016e2:	4b4c      	ldr	r3, [pc, #304]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00b      	beq.n	8001706 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016ee:	4b49      	ldr	r3, [pc, #292]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d11c      	bne.n	8001734 <HAL_RCC_OscConfig+0x18c>
 80016fa:	4b46      	ldr	r3, [pc, #280]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d116      	bne.n	8001734 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001706:	4b43      	ldr	r3, [pc, #268]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d005      	beq.n	800171e <HAL_RCC_OscConfig+0x176>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d001      	beq.n	800171e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e1ba      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171e:	4b3d      	ldr	r3, [pc, #244]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4939      	ldr	r1, [pc, #228]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 800172e:	4313      	orrs	r3, r2
 8001730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001732:	e03a      	b.n	80017aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800173c:	4b36      	ldr	r3, [pc, #216]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff f80f 	bl	8000764 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174a:	f7ff f80b 	bl	8000764 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e19b      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175c:	4b2d      	ldr	r3, [pc, #180]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001768:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4927      	ldr	r1, [pc, #156]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001778:	4313      	orrs	r3, r2
 800177a:	600b      	str	r3, [r1, #0]
 800177c:	e015      	b.n	80017aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177e:	4b26      	ldr	r3, [pc, #152]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7fe ffee 	bl	8000764 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178c:	f7fe ffea 	bl	8000764 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e17a      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d03a      	beq.n	800182c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d019      	beq.n	80017f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c4:	f7fe ffce 	bl	8000764 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017cc:	f7fe ffca 	bl	8000764 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e15a      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017ea:	2001      	movs	r0, #1
 80017ec:	f000 fada 	bl	8001da4 <RCC_Delay>
 80017f0:	e01c      	b.n	800182c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f8:	f7fe ffb4 	bl	8000764 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fe:	e00f      	b.n	8001820 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001800:	f7fe ffb0 	bl	8000764 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d908      	bls.n	8001820 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e140      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
 8001818:	42420000 	.word	0x42420000
 800181c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001820:	4b9e      	ldr	r3, [pc, #632]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1e9      	bne.n	8001800 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 80a6 	beq.w	8001986 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183e:	4b97      	ldr	r3, [pc, #604]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10d      	bne.n	8001866 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	4b94      	ldr	r3, [pc, #592]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	4a93      	ldr	r2, [pc, #588]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001854:	61d3      	str	r3, [r2, #28]
 8001856:	4b91      	ldr	r3, [pc, #580]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001862:	2301      	movs	r3, #1
 8001864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001866:	4b8e      	ldr	r3, [pc, #568]	; (8001aa0 <HAL_RCC_OscConfig+0x4f8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d118      	bne.n	80018a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001872:	4b8b      	ldr	r3, [pc, #556]	; (8001aa0 <HAL_RCC_OscConfig+0x4f8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a8a      	ldr	r2, [pc, #552]	; (8001aa0 <HAL_RCC_OscConfig+0x4f8>)
 8001878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187e:	f7fe ff71 	bl	8000764 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001886:	f7fe ff6d 	bl	8000764 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b64      	cmp	r3, #100	; 0x64
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e0fd      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001898:	4b81      	ldr	r3, [pc, #516]	; (8001aa0 <HAL_RCC_OscConfig+0x4f8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d106      	bne.n	80018ba <HAL_RCC_OscConfig+0x312>
 80018ac:	4b7b      	ldr	r3, [pc, #492]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	4a7a      	ldr	r2, [pc, #488]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6213      	str	r3, [r2, #32]
 80018b8:	e02d      	b.n	8001916 <HAL_RCC_OscConfig+0x36e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0x334>
 80018c2:	4b76      	ldr	r3, [pc, #472]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4a75      	ldr	r2, [pc, #468]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	6213      	str	r3, [r2, #32]
 80018ce:	4b73      	ldr	r3, [pc, #460]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	4a72      	ldr	r2, [pc, #456]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80018d4:	f023 0304 	bic.w	r3, r3, #4
 80018d8:	6213      	str	r3, [r2, #32]
 80018da:	e01c      	b.n	8001916 <HAL_RCC_OscConfig+0x36e>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d10c      	bne.n	80018fe <HAL_RCC_OscConfig+0x356>
 80018e4:	4b6d      	ldr	r3, [pc, #436]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4a6c      	ldr	r2, [pc, #432]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	6213      	str	r3, [r2, #32]
 80018f0:	4b6a      	ldr	r3, [pc, #424]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	4a69      	ldr	r2, [pc, #420]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6213      	str	r3, [r2, #32]
 80018fc:	e00b      	b.n	8001916 <HAL_RCC_OscConfig+0x36e>
 80018fe:	4b67      	ldr	r3, [pc, #412]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4a66      	ldr	r2, [pc, #408]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001904:	f023 0301 	bic.w	r3, r3, #1
 8001908:	6213      	str	r3, [r2, #32]
 800190a:	4b64      	ldr	r3, [pc, #400]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	4a63      	ldr	r2, [pc, #396]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001910:	f023 0304 	bic.w	r3, r3, #4
 8001914:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d015      	beq.n	800194a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191e:	f7fe ff21 	bl	8000764 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001924:	e00a      	b.n	800193c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001926:	f7fe ff1d 	bl	8000764 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	f241 3288 	movw	r2, #5000	; 0x1388
 8001934:	4293      	cmp	r3, r2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e0ab      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193c:	4b57      	ldr	r3, [pc, #348]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0ee      	beq.n	8001926 <HAL_RCC_OscConfig+0x37e>
 8001948:	e014      	b.n	8001974 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194a:	f7fe ff0b 	bl	8000764 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001950:	e00a      	b.n	8001968 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001952:	f7fe ff07 	bl	8000764 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001960:	4293      	cmp	r3, r2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e095      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001968:	4b4c      	ldr	r3, [pc, #304]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1ee      	bne.n	8001952 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001974:	7dfb      	ldrb	r3, [r7, #23]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d105      	bne.n	8001986 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197a:	4b48      	ldr	r3, [pc, #288]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	4a47      	ldr	r2, [pc, #284]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001984:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 8081 	beq.w	8001a92 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001990:	4b42      	ldr	r3, [pc, #264]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	d061      	beq.n	8001a60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d146      	bne.n	8001a32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a4:	4b3f      	ldr	r3, [pc, #252]	; (8001aa4 <HAL_RCC_OscConfig+0x4fc>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7fe fedb 	bl	8000764 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b2:	f7fe fed7 	bl	8000764 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e067      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c4:	4b35      	ldr	r3, [pc, #212]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f0      	bne.n	80019b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d8:	d108      	bne.n	80019ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019da:	4b30      	ldr	r3, [pc, #192]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	492d      	ldr	r1, [pc, #180]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ec:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a19      	ldr	r1, [r3, #32]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	430b      	orrs	r3, r1
 80019fe:	4927      	ldr	r1, [pc, #156]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a04:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <HAL_RCC_OscConfig+0x4fc>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0a:	f7fe feab 	bl	8000764 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a12:	f7fe fea7 	bl	8000764 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e037      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a24:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x46a>
 8001a30:	e02f      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a32:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <HAL_RCC_OscConfig+0x4fc>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7fe fe94 	bl	8000764 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a40:	f7fe fe90 	bl	8000764 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e020      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x498>
 8001a5e:	e018      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e013      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d106      	bne.n	8001a8e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d001      	beq.n	8001a92 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	42420060 	.word	0x42420060

08001aa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0d0      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001abc:	4b6a      	ldr	r3, [pc, #424]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d910      	bls.n	8001aec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aca:	4b67      	ldr	r3, [pc, #412]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 0207 	bic.w	r2, r3, #7
 8001ad2:	4965      	ldr	r1, [pc, #404]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b63      	ldr	r3, [pc, #396]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0b8      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d020      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b04:	4b59      	ldr	r3, [pc, #356]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	4a58      	ldr	r2, [pc, #352]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b1c:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4a52      	ldr	r2, [pc, #328]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b28:	4b50      	ldr	r3, [pc, #320]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	494d      	ldr	r1, [pc, #308]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d040      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d107      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d115      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e07f      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b66:	4b41      	ldr	r3, [pc, #260]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e073      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b76:	4b3d      	ldr	r3, [pc, #244]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e06b      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b86:	4b39      	ldr	r3, [pc, #228]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f023 0203 	bic.w	r2, r3, #3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4936      	ldr	r1, [pc, #216]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b98:	f7fe fde4 	bl	8000764 <HAL_GetTick>
 8001b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9e:	e00a      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba0:	f7fe fde0 	bl	8000764 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e053      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 020c 	and.w	r2, r3, #12
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d1eb      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d210      	bcs.n	8001bf8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b24      	ldr	r3, [pc, #144]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 0207 	bic.w	r2, r3, #7
 8001bde:	4922      	ldr	r1, [pc, #136]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e032      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	4916      	ldr	r1, [pc, #88]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d009      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	490e      	ldr	r1, [pc, #56]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c36:	f000 f821 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8001c3a:	4601      	mov	r1, r0
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <HAL_RCC_ClockConfig+0x1c8>)
 8001c48:	5cd3      	ldrb	r3, [r2, r3]
 8001c4a:	fa21 f303 	lsr.w	r3, r1, r3
 8001c4e:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <HAL_RCC_ClockConfig+0x1cc>)
 8001c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_RCC_ClockConfig+0x1d0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fd42 	bl	80006e0 <HAL_InitTick>

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40022000 	.word	0x40022000
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	08007f54 	.word	0x08007f54
 8001c74:	20000014 	.word	0x20000014
 8001c78:	20000008 	.word	0x20000008

08001c7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c7c:	b490      	push	{r4, r7}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c82:	4b2a      	ldr	r3, [pc, #168]	; (8001d2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c84:	1d3c      	adds	r4, r7, #4
 8001c86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c8c:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ca6:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d002      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0x40>
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d003      	beq.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x46>
 8001cba:	e02d      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cbe:	623b      	str	r3, [r7, #32]
      break;
 8001cc0:	e02d      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	0c9b      	lsrs	r3, r3, #18
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cce:	4413      	add	r3, r2
 8001cd0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cd4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ce0:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	0c5b      	lsrs	r3, r3, #17
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cee:	4413      	add	r3, r2
 8001cf0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001cf4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	4a0f      	ldr	r2, [pc, #60]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cfa:	fb02 f203 	mul.w	r2, r2, r3
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
 8001d06:	e004      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	4a0c      	ldr	r2, [pc, #48]	; (8001d3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d0c:	fb02 f303 	mul.w	r3, r2, r3
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	623b      	str	r3, [r7, #32]
      break;
 8001d16:	e002      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d1a:	623b      	str	r3, [r7, #32]
      break;
 8001d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3728      	adds	r7, #40	; 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc90      	pop	{r4, r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	08006ac4 	.word	0x08006ac4
 8001d30:	08006ad4 	.word	0x08006ad4
 8001d34:	40021000 	.word	0x40021000
 8001d38:	007a1200 	.word	0x007a1200
 8001d3c:	003d0900 	.word	0x003d0900

08001d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d44:	4b02      	ldr	r3, [pc, #8]	; (8001d50 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr
 8001d50:	20000014 	.word	0x20000014

08001d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d58:	f7ff fff2 	bl	8001d40 <HAL_RCC_GetHCLKFreq>
 8001d5c:	4601      	mov	r1, r0
 8001d5e:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	4a03      	ldr	r2, [pc, #12]	; (8001d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d6a:	5cd3      	ldrb	r3, [r2, r3]
 8001d6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	08007f64 	.word	0x08007f64

08001d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d80:	f7ff ffde 	bl	8001d40 <HAL_RCC_GetHCLKFreq>
 8001d84:	4601      	mov	r1, r0
 8001d86:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	0adb      	lsrs	r3, r3, #11
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	4a03      	ldr	r2, [pc, #12]	; (8001da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d92:	5cd3      	ldrb	r3, [r2, r3]
 8001d94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	08007f64 	.word	0x08007f64

08001da4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <RCC_Delay+0x34>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <RCC_Delay+0x38>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	0a5b      	lsrs	r3, r3, #9
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	fb02 f303 	mul.w	r3, r2, r3
 8001dbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dc0:	bf00      	nop
  }
  while (Delay --);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1e5a      	subs	r2, r3, #1
 8001dc6:	60fa      	str	r2, [r7, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f9      	bne.n	8001dc0 <RCC_Delay+0x1c>
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000014 	.word	0x20000014
 8001ddc:	10624dd3 	.word	0x10624dd3

08001de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d07d      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e00:	4b4f      	ldr	r3, [pc, #316]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10d      	bne.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0c:	4b4c      	ldr	r3, [pc, #304]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	4a4b      	ldr	r2, [pc, #300]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e16:	61d3      	str	r3, [r2, #28]
 8001e18:	4b49      	ldr	r3, [pc, #292]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e24:	2301      	movs	r3, #1
 8001e26:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e28:	4b46      	ldr	r3, [pc, #280]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d118      	bne.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e34:	4b43      	ldr	r3, [pc, #268]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a42      	ldr	r2, [pc, #264]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e40:	f7fe fc90 	bl	8000764 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e46:	e008      	b.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e48:	f7fe fc8c 	bl	8000764 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b64      	cmp	r3, #100	; 0x64
 8001e54:	d901      	bls.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e06d      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5a:	4b3a      	ldr	r3, [pc, #232]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e66:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e6e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d02e      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d027      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e84:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e8e:	4b2e      	ldr	r3, [pc, #184]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e94:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e9a:	4a29      	ldr	r2, [pc, #164]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d014      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eaa:	f7fe fc5b 	bl	8000764 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f7fe fc57 	bl	8000764 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e036      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0ee      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	4917      	ldr	r1, [pc, #92]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ee6:	7dfb      	ldrb	r3, [r7, #23]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d105      	bne.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eec:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	4a13      	ldr	r2, [pc, #76]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	490b      	ldr	r1, [pc, #44]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d008      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f22:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	4904      	ldr	r1, [pc, #16]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40007000 	.word	0x40007000
 8001f48:	42420440 	.word	0x42420440

08001f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e01d      	b.n	8001f9a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d106      	bne.n	8001f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f004 fb60 	bl	8006638 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3304      	adds	r3, #4
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	f000 f9ee 	bl	800236c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e01d      	b.n	8001ff0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d106      	bne.n	8001fce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f815 	bl	8001ff8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	f000 f9c3 	bl	800236c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr
	...

0800200c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2201      	movs	r2, #1
 800201c:	6839      	ldr	r1, [r7, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f000 fc24 	bl	800286c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a10      	ldr	r2, [pc, #64]	; (800206c <HAL_TIM_PWM_Start+0x60>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d107      	bne.n	800203e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800203c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b06      	cmp	r3, #6
 800204e:	d007      	beq.n	8002060 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40012c00 	.word	0x40012c00

08002070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002086:	2302      	movs	r3, #2
 8002088:	e0b4      	b.n	80021f4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2202      	movs	r2, #2
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b0c      	cmp	r3, #12
 800209e:	f200 809f 	bhi.w	80021e0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80020a2:	a201      	add	r2, pc, #4	; (adr r2, 80020a8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80020a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a8:	080020dd 	.word	0x080020dd
 80020ac:	080021e1 	.word	0x080021e1
 80020b0:	080021e1 	.word	0x080021e1
 80020b4:	080021e1 	.word	0x080021e1
 80020b8:	0800211d 	.word	0x0800211d
 80020bc:	080021e1 	.word	0x080021e1
 80020c0:	080021e1 	.word	0x080021e1
 80020c4:	080021e1 	.word	0x080021e1
 80020c8:	0800215f 	.word	0x0800215f
 80020cc:	080021e1 	.word	0x080021e1
 80020d0:	080021e1 	.word	0x080021e1
 80020d4:	080021e1 	.word	0x080021e1
 80020d8:	0800219f 	.word	0x0800219f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f9a4 	bl	8002430 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	699a      	ldr	r2, [r3, #24]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0208 	orr.w	r2, r2, #8
 80020f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0204 	bic.w	r2, r2, #4
 8002106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6999      	ldr	r1, [r3, #24]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	619a      	str	r2, [r3, #24]
      break;
 800211a:	e062      	b.n	80021e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f9ea 	bl	80024fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699a      	ldr	r2, [r3, #24]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699a      	ldr	r2, [r3, #24]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6999      	ldr	r1, [r3, #24]
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	021a      	lsls	r2, r3, #8
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	619a      	str	r2, [r3, #24]
      break;
 800215c:	e041      	b.n	80021e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	4618      	mov	r0, r3
 8002166:	f000 fa33 	bl	80025d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	69da      	ldr	r2, [r3, #28]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0208 	orr.w	r2, r2, #8
 8002178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	69da      	ldr	r2, [r3, #28]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0204 	bic.w	r2, r2, #4
 8002188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	69d9      	ldr	r1, [r3, #28]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	61da      	str	r2, [r3, #28]
      break;
 800219c:	e021      	b.n	80021e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68b9      	ldr	r1, [r7, #8]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 fa7d 	bl	80026a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	69da      	ldr	r2, [r3, #28]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	69da      	ldr	r2, [r3, #28]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	69d9      	ldr	r1, [r3, #28]
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	021a      	lsls	r2, r3, #8
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	61da      	str	r2, [r3, #28]
      break;
 80021de:	e000      	b.n	80021e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80021e0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_TIM_ConfigClockSource+0x18>
 8002210:	2302      	movs	r3, #2
 8002212:	e0a6      	b.n	8002362 <HAL_TIM_ConfigClockSource+0x166>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002232:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800223a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b40      	cmp	r3, #64	; 0x40
 800224a:	d067      	beq.n	800231c <HAL_TIM_ConfigClockSource+0x120>
 800224c:	2b40      	cmp	r3, #64	; 0x40
 800224e:	d80b      	bhi.n	8002268 <HAL_TIM_ConfigClockSource+0x6c>
 8002250:	2b10      	cmp	r3, #16
 8002252:	d073      	beq.n	800233c <HAL_TIM_ConfigClockSource+0x140>
 8002254:	2b10      	cmp	r3, #16
 8002256:	d802      	bhi.n	800225e <HAL_TIM_ConfigClockSource+0x62>
 8002258:	2b00      	cmp	r3, #0
 800225a:	d06f      	beq.n	800233c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800225c:	e078      	b.n	8002350 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800225e:	2b20      	cmp	r3, #32
 8002260:	d06c      	beq.n	800233c <HAL_TIM_ConfigClockSource+0x140>
 8002262:	2b30      	cmp	r3, #48	; 0x30
 8002264:	d06a      	beq.n	800233c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002266:	e073      	b.n	8002350 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002268:	2b70      	cmp	r3, #112	; 0x70
 800226a:	d00d      	beq.n	8002288 <HAL_TIM_ConfigClockSource+0x8c>
 800226c:	2b70      	cmp	r3, #112	; 0x70
 800226e:	d804      	bhi.n	800227a <HAL_TIM_ConfigClockSource+0x7e>
 8002270:	2b50      	cmp	r3, #80	; 0x50
 8002272:	d033      	beq.n	80022dc <HAL_TIM_ConfigClockSource+0xe0>
 8002274:	2b60      	cmp	r3, #96	; 0x60
 8002276:	d041      	beq.n	80022fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002278:	e06a      	b.n	8002350 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800227a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800227e:	d066      	beq.n	800234e <HAL_TIM_ConfigClockSource+0x152>
 8002280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002284:	d017      	beq.n	80022b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002286:	e063      	b.n	8002350 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	6899      	ldr	r1, [r3, #8]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f000 fac9 	bl	800282e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	609a      	str	r2, [r3, #8]
      break;
 80022b4:	e04c      	b.n	8002350 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	6899      	ldr	r1, [r3, #8]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f000 fab2 	bl	800282e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022d8:	609a      	str	r2, [r3, #8]
      break;
 80022da:	e039      	b.n	8002350 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	6859      	ldr	r1, [r3, #4]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	461a      	mov	r2, r3
 80022ea:	f000 fa29 	bl	8002740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2150      	movs	r1, #80	; 0x50
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 fa80 	bl	80027fa <TIM_ITRx_SetConfig>
      break;
 80022fa:	e029      	b.n	8002350 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	461a      	mov	r2, r3
 800230a:	f000 fa47 	bl	800279c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2160      	movs	r1, #96	; 0x60
 8002314:	4618      	mov	r0, r3
 8002316:	f000 fa70 	bl	80027fa <TIM_ITRx_SetConfig>
      break;
 800231a:	e019      	b.n	8002350 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	461a      	mov	r2, r3
 800232a:	f000 fa09 	bl	8002740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2140      	movs	r1, #64	; 0x40
 8002334:	4618      	mov	r0, r3
 8002336:	f000 fa60 	bl	80027fa <TIM_ITRx_SetConfig>
      break;
 800233a:	e009      	b.n	8002350 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4619      	mov	r1, r3
 8002346:	4610      	mov	r0, r2
 8002348:	f000 fa57 	bl	80027fa <TIM_ITRx_SetConfig>
      break;
 800234c:	e000      	b.n	8002350 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800234e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a29      	ldr	r2, [pc, #164]	; (8002424 <TIM_Base_SetConfig+0xb8>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d00b      	beq.n	800239c <TIM_Base_SetConfig+0x30>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800238a:	d007      	beq.n	800239c <TIM_Base_SetConfig+0x30>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a26      	ldr	r2, [pc, #152]	; (8002428 <TIM_Base_SetConfig+0xbc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d003      	beq.n	800239c <TIM_Base_SetConfig+0x30>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a25      	ldr	r2, [pc, #148]	; (800242c <TIM_Base_SetConfig+0xc0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d108      	bne.n	80023ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a1c      	ldr	r2, [pc, #112]	; (8002424 <TIM_Base_SetConfig+0xb8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00b      	beq.n	80023ce <TIM_Base_SetConfig+0x62>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023bc:	d007      	beq.n	80023ce <TIM_Base_SetConfig+0x62>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a19      	ldr	r2, [pc, #100]	; (8002428 <TIM_Base_SetConfig+0xbc>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d003      	beq.n	80023ce <TIM_Base_SetConfig+0x62>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a18      	ldr	r2, [pc, #96]	; (800242c <TIM_Base_SetConfig+0xc0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d108      	bne.n	80023e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	4313      	orrs	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a07      	ldr	r2, [pc, #28]	; (8002424 <TIM_Base_SetConfig+0xb8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d103      	bne.n	8002414 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	615a      	str	r2, [r3, #20]
}
 800241a:	bf00      	nop
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	40012c00 	.word	0x40012c00
 8002428:	40000400 	.word	0x40000400
 800242c:	40000800 	.word	0x40000800

08002430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	f023 0201 	bic.w	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800245e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f023 0303 	bic.w	r3, r3, #3
 8002466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	4313      	orrs	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f023 0302 	bic.w	r3, r3, #2
 8002478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4313      	orrs	r3, r2
 8002482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a1c      	ldr	r2, [pc, #112]	; (80024f8 <TIM_OC1_SetConfig+0xc8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d10c      	bne.n	80024a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f023 0308 	bic.w	r3, r3, #8
 8002492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	4313      	orrs	r3, r2
 800249c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f023 0304 	bic.w	r3, r3, #4
 80024a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a13      	ldr	r2, [pc, #76]	; (80024f8 <TIM_OC1_SetConfig+0xc8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d111      	bne.n	80024d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	621a      	str	r2, [r3, #32]
}
 80024ec:	bf00      	nop
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40012c00 	.word	0x40012c00

080024fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b087      	sub	sp, #28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	f023 0210 	bic.w	r2, r3, #16
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800252a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	021b      	lsls	r3, r3, #8
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	4313      	orrs	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f023 0320 	bic.w	r3, r3, #32
 8002546:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	4313      	orrs	r3, r2
 8002552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <TIM_OC2_SetConfig+0xd0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d10d      	bne.n	8002578 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002576:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a14      	ldr	r2, [pc, #80]	; (80025cc <TIM_OC2_SetConfig+0xd0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d113      	bne.n	80025a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002586:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800258e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	621a      	str	r2, [r3, #32]
}
 80025c2:	bf00      	nop
 80025c4:	371c      	adds	r7, #28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	40012c00 	.word	0x40012c00

080025d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f023 0303 	bic.w	r3, r3, #3
 8002606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4313      	orrs	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	021b      	lsls	r3, r3, #8
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a1d      	ldr	r2, [pc, #116]	; (80026a0 <TIM_OC3_SetConfig+0xd0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d10d      	bne.n	800264a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002634:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	021b      	lsls	r3, r3, #8
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	4313      	orrs	r3, r2
 8002640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a14      	ldr	r2, [pc, #80]	; (80026a0 <TIM_OC3_SetConfig+0xd0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d113      	bne.n	800267a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4313      	orrs	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	621a      	str	r2, [r3, #32]
}
 8002694:	bf00      	nop
 8002696:	371c      	adds	r7, #28
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40012c00 	.word	0x40012c00

080026a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	021b      	lsls	r3, r3, #8
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	031b      	lsls	r3, r3, #12
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a0f      	ldr	r2, [pc, #60]	; (800273c <TIM_OC4_SetConfig+0x98>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d109      	bne.n	8002718 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800270a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	019b      	lsls	r3, r3, #6
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	621a      	str	r2, [r3, #32]
}
 8002732:	bf00      	nop
 8002734:	371c      	adds	r7, #28
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	40012c00 	.word	0x40012c00

08002740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	f023 0201 	bic.w	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800276a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f023 030a 	bic.w	r3, r3, #10
 800277c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4313      	orrs	r3, r2
 8002784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	621a      	str	r2, [r3, #32]
}
 8002792:	bf00      	nop
 8002794:	371c      	adds	r7, #28
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800279c:	b480      	push	{r7}
 800279e:	b087      	sub	sp, #28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	f023 0210 	bic.w	r2, r3, #16
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	031b      	lsls	r3, r3, #12
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	621a      	str	r2, [r3, #32]
}
 80027f0:	bf00      	nop
 80027f2:	371c      	adds	r7, #28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b085      	sub	sp, #20
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002810:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	f043 0307 	orr.w	r3, r3, #7
 800281c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	609a      	str	r2, [r3, #8]
}
 8002824:	bf00      	nop
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800282e:	b480      	push	{r7}
 8002830:	b087      	sub	sp, #28
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002848:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	021a      	lsls	r2, r3, #8
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	431a      	orrs	r2, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	4313      	orrs	r3, r2
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4313      	orrs	r3, r2
 800285a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	609a      	str	r2, [r3, #8]
}
 8002862:	bf00      	nop
 8002864:	371c      	adds	r7, #28
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	2201      	movs	r2, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a1a      	ldr	r2, [r3, #32]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	43db      	mvns	r3, r3
 800288e:	401a      	ands	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a1a      	ldr	r2, [r3, #32]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f003 031f 	and.w	r3, r3, #31
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	fa01 f303 	lsl.w	r3, r1, r3
 80028a4:	431a      	orrs	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	621a      	str	r2, [r3, #32]
}
 80028aa:	bf00      	nop
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e032      	b.n	8002932 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002904:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	4313      	orrs	r3, r2
 800290e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002954:	2302      	movs	r3, #2
 8002956:	e03d      	b.n	80029d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	4313      	orrs	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4313      	orrs	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4313      	orrs	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	4313      	orrs	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e03f      	b.n	8002a70 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d106      	bne.n	8002a0a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f003 ff63 	bl	80068d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2224      	movs	r2, #36	; 0x24
 8002a0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a20:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 faaa 	bl	8002f7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691a      	ldr	r2, [r3, #16]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a36:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a46:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a56:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	4613      	mov	r3, r2
 8002a84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b20      	cmp	r3, #32
 8002a90:	d140      	bne.n	8002b14 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <HAL_UART_Receive_IT+0x26>
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e039      	b.n	8002b16 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_UART_Receive_IT+0x38>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e032      	b.n	8002b16 <HAL_UART_Receive_IT+0x9e>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	88fa      	ldrh	r2, [r7, #6]
 8002ac2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	88fa      	ldrh	r2, [r7, #6]
 8002ac8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2222      	movs	r2, #34	; 0x22
 8002ad4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aee:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0201 	orr.w	r2, r2, #1
 8002afe:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0220 	orr.w	r2, r2, #32
 8002b0e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	e000      	b.n	8002b16 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002b14:	2302      	movs	r3, #2
  }
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10d      	bne.n	8002b72 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_UART_IRQHandler+0x52>
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f984 	bl	8002e78 <UART_Receive_IT>
      return;
 8002b70:	e0cc      	b.n	8002d0c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80ab 	beq.w	8002cd0 <HAL_UART_IRQHandler+0x1b0>
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d105      	bne.n	8002b90 <HAL_UART_IRQHandler+0x70>
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 80a0 	beq.w	8002cd0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <HAL_UART_IRQHandler+0x90>
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba8:	f043 0201 	orr.w	r2, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_UART_IRQHandler+0xb0>
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc8:	f043 0202 	orr.w	r2, r3, #2
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_UART_IRQHandler+0xd0>
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be8:	f043 0204 	orr.w	r2, r3, #4
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_UART_IRQHandler+0xf0>
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c08:	f043 0208 	orr.w	r2, r3, #8
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d078      	beq.n	8002d0a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d007      	beq.n	8002c32 <HAL_UART_IRQHandler+0x112>
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f923 	bl	8002e78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf14      	ite	ne
 8002c40:	2301      	movne	r3, #1
 8002c42:	2300      	moveq	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <HAL_UART_IRQHandler+0x13a>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d031      	beq.n	8002cbe <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f86e 	bl	8002d3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d023      	beq.n	8002cb6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c7c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d013      	beq.n	8002cae <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8a:	4a22      	ldr	r2, [pc, #136]	; (8002d14 <HAL_UART_IRQHandler+0x1f4>)
 8002c8c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe f888 	bl	8000da8 <HAL_DMA_Abort_IT>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d016      	beq.n	8002ccc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cac:	e00e      	b.n	8002ccc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f83b 	bl	8002d2a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb4:	e00a      	b.n	8002ccc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f837 	bl	8002d2a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cbc:	e006      	b.n	8002ccc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f833 	bl	8002d2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002cca:	e01e      	b.n	8002d0a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ccc:	bf00      	nop
    return;
 8002cce:	e01c      	b.n	8002d0a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d008      	beq.n	8002cec <HAL_UART_IRQHandler+0x1cc>
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f85a 	bl	8002d9e <UART_Transmit_IT>
    return;
 8002cea:	e00f      	b.n	8002d0c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <HAL_UART_IRQHandler+0x1ec>
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f8a1 	bl	8002e48 <UART_EndTransmit_IT>
    return;
 8002d06:	bf00      	nop
 8002d08:	e000      	b.n	8002d0c <HAL_UART_IRQHandler+0x1ec>
    return;
 8002d0a:	bf00      	nop
  }
}
 8002d0c:	3720      	adds	r7, #32
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	08002d77 	.word	0x08002d77

08002d18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d52:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7ff ffca 	bl	8002d2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b085      	sub	sp, #20
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b21      	cmp	r3, #33	; 0x21
 8002db0:	d144      	bne.n	8002e3c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dba:	d11a      	bne.n	8002df2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dd0:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d105      	bne.n	8002de6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	1c9a      	adds	r2, r3, #2
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	621a      	str	r2, [r3, #32]
 8002de4:	e00e      	b.n	8002e04 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	621a      	str	r2, [r3, #32]
 8002df0:	e008      	b.n	8002e04 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	1c59      	adds	r1, r3, #1
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6211      	str	r1, [r2, #32]
 8002dfc:	781a      	ldrb	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4619      	mov	r1, r3
 8002e12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10f      	bne.n	8002e38 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e000      	b.n	8002e3e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002e3c:	2302      	movs	r3, #2
  }
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr

08002e48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff ff55 	bl	8002d18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b22      	cmp	r3, #34	; 0x22
 8002e8a:	d171      	bne.n	8002f70 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e94:	d123      	bne.n	8002ede <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10e      	bne.n	8002ec2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	1c9a      	adds	r2, r3, #2
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28
 8002ec0:	e029      	b.n	8002f16 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28
 8002edc:	e01b      	b.n	8002f16 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10a      	bne.n	8002efc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6858      	ldr	r0, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef0:	1c59      	adds	r1, r3, #1
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6291      	str	r1, [r2, #40]	; 0x28
 8002ef6:	b2c2      	uxtb	r2, r0
 8002ef8:	701a      	strb	r2, [r3, #0]
 8002efa:	e00c      	b.n	8002f16 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	1c58      	adds	r0, r3, #1
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	6288      	str	r0, [r1, #40]	; 0x28
 8002f0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	4619      	mov	r1, r3
 8002f24:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d120      	bne.n	8002f6c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0220 	bic.w	r2, r2, #32
 8002f38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f002 fe76 	bl	8005c54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	e002      	b.n	8002f72 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	e000      	b.n	8002f72 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002f70:	2302      	movs	r3, #2
  }
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002fb6:	f023 030c 	bic.w	r3, r3, #12
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	68f9      	ldr	r1, [r7, #12]
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a52      	ldr	r2, [pc, #328]	; (8003128 <UART_SetConfig+0x1ac>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d14e      	bne.n	8003082 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fe4:	f7fe feca 	bl	8001d7c <HAL_RCC_GetPCLK2Freq>
 8002fe8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009a      	lsls	r2, r3, #2
 8002ff4:	441a      	add	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003000:	4a4a      	ldr	r2, [pc, #296]	; (800312c <UART_SetConfig+0x1b0>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	0119      	lsls	r1, r3, #4
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	009a      	lsls	r2, r3, #2
 8003014:	441a      	add	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003020:	4b42      	ldr	r3, [pc, #264]	; (800312c <UART_SetConfig+0x1b0>)
 8003022:	fba3 0302 	umull	r0, r3, r3, r2
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	2064      	movs	r0, #100	; 0x64
 800302a:	fb00 f303 	mul.w	r3, r0, r3
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	3332      	adds	r3, #50	; 0x32
 8003034:	4a3d      	ldr	r2, [pc, #244]	; (800312c <UART_SetConfig+0x1b0>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003040:	4419      	add	r1, r3
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	009a      	lsls	r2, r3, #2
 800304c:	441a      	add	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	fbb2 f2f3 	udiv	r2, r2, r3
 8003058:	4b34      	ldr	r3, [pc, #208]	; (800312c <UART_SetConfig+0x1b0>)
 800305a:	fba3 0302 	umull	r0, r3, r3, r2
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	2064      	movs	r0, #100	; 0x64
 8003062:	fb00 f303 	mul.w	r3, r0, r3
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	3332      	adds	r3, #50	; 0x32
 800306c:	4a2f      	ldr	r2, [pc, #188]	; (800312c <UART_SetConfig+0x1b0>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	f003 020f 	and.w	r2, r3, #15
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	440a      	add	r2, r1
 800307e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003080:	e04d      	b.n	800311e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003082:	f7fe fe67 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 8003086:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	009a      	lsls	r2, r3, #2
 8003092:	441a      	add	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	fbb2 f3f3 	udiv	r3, r2, r3
 800309e:	4a23      	ldr	r2, [pc, #140]	; (800312c <UART_SetConfig+0x1b0>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	0119      	lsls	r1, r3, #4
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	009a      	lsls	r2, r3, #2
 80030b2:	441a      	add	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80030be:	4b1b      	ldr	r3, [pc, #108]	; (800312c <UART_SetConfig+0x1b0>)
 80030c0:	fba3 0302 	umull	r0, r3, r3, r2
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	2064      	movs	r0, #100	; 0x64
 80030c8:	fb00 f303 	mul.w	r3, r0, r3
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	3332      	adds	r3, #50	; 0x32
 80030d2:	4a16      	ldr	r2, [pc, #88]	; (800312c <UART_SetConfig+0x1b0>)
 80030d4:	fba2 2303 	umull	r2, r3, r2, r3
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030de:	4419      	add	r1, r3
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	009a      	lsls	r2, r3, #2
 80030ea:	441a      	add	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80030f6:	4b0d      	ldr	r3, [pc, #52]	; (800312c <UART_SetConfig+0x1b0>)
 80030f8:	fba3 0302 	umull	r0, r3, r3, r2
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	2064      	movs	r0, #100	; 0x64
 8003100:	fb00 f303 	mul.w	r3, r0, r3
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	3332      	adds	r3, #50	; 0x32
 800310a:	4a08      	ldr	r2, [pc, #32]	; (800312c <UART_SetConfig+0x1b0>)
 800310c:	fba2 2303 	umull	r2, r3, r2, r3
 8003110:	095b      	lsrs	r3, r3, #5
 8003112:	f003 020f 	and.w	r2, r3, #15
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	440a      	add	r2, r1
 800311c:	609a      	str	r2, [r3, #8]
}
 800311e:	bf00      	nop
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40013800 	.word	0x40013800
 800312c:	51eb851f 	.word	0x51eb851f

08003130 <FlashManager_PageAddress>:
/* Private variables ---------------------------------------------------------*/
uint32_t flash_temp_data[FLASH_PAGE_SIZE/4];

/* Private function -----------------------------------------------*/
uint32_t FlashManager_PageAddress(uint32_t address)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	uint32_t begin_page_address;
	uint32_t offset_page_address;

	if(address>=SYSTEM_FLASH_ADDRESS_BEGIN && address<SYSTEM_FLASH_ADDRESS_END)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800313e:	d30d      	bcc.n	800315c <FlashManager_PageAddress+0x2c>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a09      	ldr	r2, [pc, #36]	; (8003168 <FlashManager_PageAddress+0x38>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d809      	bhi.n	800315c <FlashManager_PageAddress+0x2c>
	{
		offset_page_address=address%FLASH_PAGE_SIZE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800314e:	60fb      	str	r3, [r7, #12]
		begin_page_address=address-offset_page_address;
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	60bb      	str	r3, [r7, #8]
		return begin_page_address;
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	e000      	b.n	800315e <FlashManager_PageAddress+0x2e>
	}
	else
		return FLASH_ERROR_ADDRESS;
 800315c:	2302      	movs	r3, #2
}
 800315e:	4618      	mov	r0, r3
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr
 8003168:	0800ffff 	.word	0x0800ffff

0800316c <FlashManager_ErasePage>:

/* Public function -----------------------------------------------*/
FlashManager_Error_Code FlashManager_ErasePage(uint32_t address)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	uint32_t errorcode;
	uint32_t SectorError = 0;
 8003174:	2300      	movs	r3, #0
 8003176:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitTypeDef EraseInitStruct;

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8003178:	2300      	movs	r3, #0
 800317a:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.Banks = FLASH_BANK_1;
 800317c:	2301      	movs	r3, #1
 800317e:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.PageAddress = FlashManager_PageAddress(address);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff ffd5 	bl	8003130 <FlashManager_PageAddress>
 8003186:	4603      	mov	r3, r0
 8003188:	613b      	str	r3, [r7, #16]
	EraseInitStruct.NbPages = 1;
 800318a:	2301      	movs	r3, #1
 800318c:	617b      	str	r3, [r7, #20]

	errorcode=HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 800318e:	f107 0218 	add.w	r2, r7, #24
 8003192:	f107 0308 	add.w	r3, r7, #8
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f7fd ffd3 	bl	8001144 <HAL_FLASHEx_Erase>
 800319e:	4603      	mov	r3, r0
 80031a0:	61fb      	str	r3, [r7, #28]
	if(errorcode!=HAL_OK)
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <FlashManager_ErasePage+0x40>
		return FLASH_ERASE_ERROR;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e000      	b.n	80031ae <FlashManager_ErasePage+0x42>
	else
		return FLASH_NO_ERROR;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3720      	adds	r7, #32
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <FlashManager_WriteMulti>:
	else
		return FLASH_ERROR_ADDRESS;
}

FlashManager_Error_Code FlashManager_WriteMulti(uint32_t address, uint32_t NbWord, uint32_t* data)
{
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b08b      	sub	sp, #44	; 0x2c
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
	uint32_t begin_page_address;
	uint32_t offset_page_address;
	uint32_t pWriteFlash;
	__IO uint32_t* pReadFlash;

	if(address>=SYSTEM_FLASH_ADDRESS_BEGIN && address<SYSTEM_FLASH_ADDRESS_END && address%4==0)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031ca:	d362      	bcc.n	8003292 <FlashManager_WriteMulti+0xda>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4a33      	ldr	r2, [pc, #204]	; (800329c <FlashManager_WriteMulti+0xe4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d85e      	bhi.n	8003292 <FlashManager_WriteMulti+0xda>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d159      	bne.n	8003292 <FlashManager_WriteMulti+0xda>
	{
		offset_page_address=address%FLASH_PAGE_SIZE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031e4:	623b      	str	r3, [r7, #32]
		begin_page_address=address-offset_page_address;
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	61fb      	str	r3, [r7, #28]

		//Read page
		for(cpt_address=0; cpt_address<(FLASH_PAGE_SIZE/4) ;cpt_address++)
 80031ee:	2300      	movs	r3, #0
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
 80031f2:	e00d      	b.n	8003210 <FlashManager_WriteMulti+0x58>
		{
			pReadFlash = begin_page_address+(cpt_address*4);
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	009a      	lsls	r2, r3, #2
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	4413      	add	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]
			flash_temp_data[cpt_address]=*pReadFlash;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4927      	ldr	r1, [pc, #156]	; (80032a0 <FlashManager_WriteMulti+0xe8>)
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(cpt_address=0; cpt_address<(FLASH_PAGE_SIZE/4) ;cpt_address++)
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	3301      	adds	r3, #1
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	2bff      	cmp	r3, #255	; 0xff
 8003214:	d9ee      	bls.n	80031f4 <FlashManager_WriteMulti+0x3c>
		}

		//Erase page
		HAL_FLASH_Unlock();
 8003216:	f7fd fead 	bl	8000f74 <HAL_FLASH_Unlock>
		FlashManager_ErasePage(address);
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f7ff ffa6 	bl	800316c <FlashManager_ErasePage>

		//Change Data
		for(cpt_address=0; cpt_address<NbWord ;cpt_address++)
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
 8003224:	e00e      	b.n	8003244 <FlashManager_WriteMulti+0x8c>
		{
			flash_temp_data[(offset_page_address/4)+cpt_address]=data[cpt_address];
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	441a      	add	r2, r3
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	0899      	lsrs	r1, r3, #2
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	440b      	add	r3, r1
 8003236:	6812      	ldr	r2, [r2, #0]
 8003238:	4919      	ldr	r1, [pc, #100]	; (80032a0 <FlashManager_WriteMulti+0xe8>)
 800323a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(cpt_address=0; cpt_address<NbWord ;cpt_address++)
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	3301      	adds	r3, #1
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
 8003244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	429a      	cmp	r2, r3
 800324a:	d3ec      	bcc.n	8003226 <FlashManager_WriteMulti+0x6e>
		}

		//Write page
		for(cpt_address=0; cpt_address<(FLASH_PAGE_SIZE/4) ;cpt_address++)
 800324c:	2300      	movs	r3, #0
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
 8003250:	e018      	b.n	8003284 <FlashManager_WriteMulti+0xcc>
		{
			pWriteFlash = begin_page_address+(cpt_address*4);
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	4413      	add	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pWriteFlash, flash_temp_data[cpt_address]) != HAL_OK)
 800325c:	4a10      	ldr	r2, [pc, #64]	; (80032a0 <FlashManager_WriteMulti+0xe8>)
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003264:	f04f 0400 	mov.w	r4, #0
 8003268:	461a      	mov	r2, r3
 800326a:	4623      	mov	r3, r4
 800326c:	69b9      	ldr	r1, [r7, #24]
 800326e:	2002      	movs	r0, #2
 8003270:	f7fd fe10 	bl	8000e94 <HAL_FLASH_Program>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <FlashManager_WriteMulti+0xc6>
				return FLASH_WRITE_ERROR;
 800327a:	2304      	movs	r3, #4
 800327c:	e00a      	b.n	8003294 <FlashManager_WriteMulti+0xdc>
		for(cpt_address=0; cpt_address<(FLASH_PAGE_SIZE/4) ;cpt_address++)
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	3301      	adds	r3, #1
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	2bff      	cmp	r3, #255	; 0xff
 8003288:	d9e3      	bls.n	8003252 <FlashManager_WriteMulti+0x9a>
		}

		HAL_FLASH_Lock();
 800328a:	f7fd fe99 	bl	8000fc0 <HAL_FLASH_Lock>

		return FLASH_NO_ERROR;
 800328e:	2300      	movs	r3, #0
 8003290:	e000      	b.n	8003294 <FlashManager_WriteMulti+0xdc>
	}
	else
		return FLASH_ERROR_ADDRESS;
 8003292:	2302      	movs	r3, #2
}
 8003294:	4618      	mov	r0, r3
 8003296:	372c      	adds	r7, #44	; 0x2c
 8003298:	46bd      	mov	sp, r7
 800329a:	bd90      	pop	{r4, r7, pc}
 800329c:	0800ffff 	.word	0x0800ffff
 80032a0:	20001410 	.word	0x20001410

080032a4 <FlashManager_ReadInt32>:

uint32_t FlashManager_ReadInt32(uint32_t address)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
	__IO uint32_t* pReadFlash;

	pReadFlash = address;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	60fb      	str	r3, [r7, #12]
	return *pReadFlash;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr
	...

080032c0 <Protocol_DMX_init>:
/* Private function -----------------------------------------------*/

/* Public function -----------------------------------------------*/

void Protocol_DMX_init(uint16_t address,UART_HandleTypeDef *ref_uart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	6039      	str	r1, [r7, #0]
 80032ca:	80fb      	strh	r3, [r7, #6]
	uint8_t i;

	//init variables
	dmx_Last_Error=DMX_NO_ERROR;
 80032cc:	4b20      	ldr	r3, [pc, #128]	; (8003350 <Protocol_DMX_init+0x90>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]
	dmx_rx_buff[0]=0;
 80032d2:	4b20      	ldr	r3, [pc, #128]	; (8003354 <Protocol_DMX_init+0x94>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]
	dmx_cptAddress=0;
 80032d8:	4b1f      	ldr	r3, [pc, #124]	; (8003358 <Protocol_DMX_init+0x98>)
 80032da:	2200      	movs	r2, #0
 80032dc:	801a      	strh	r2, [r3, #0]
	dmx_cptByte=0;
 80032de:	4b1f      	ldr	r3, [pc, #124]	; (800335c <Protocol_DMX_init+0x9c>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	801a      	strh	r2, [r3, #0]
	dmx_ref_buffer=1;
 80032e4:	4b1e      	ldr	r3, [pc, #120]	; (8003360 <Protocol_DMX_init+0xa0>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	701a      	strb	r2, [r3, #0]
	dmx_address_begin = address;
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <Protocol_DMX_init+0xa4>)
 80032f0:	701a      	strb	r2, [r3, #0]
	dmx_address_end = address + DMX_SIZE_CHANNEL - 1;
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	330b      	adds	r3, #11
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <Protocol_DMX_init+0xa8>)
 80032fc:	701a      	strb	r2, [r3, #0]
	for (i=0; i<DMX_SIZE_CHANNEL; i++)
 80032fe:	2300      	movs	r3, #0
 8003300:	73fb      	strb	r3, [r7, #15]
 8003302:	e00e      	b.n	8003322 <Protocol_DMX_init+0x62>
	{
		dmx_buff1[i]=0;
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	4a19      	ldr	r2, [pc, #100]	; (800336c <Protocol_DMX_init+0xac>)
 8003308:	2100      	movs	r1, #0
 800330a:	54d1      	strb	r1, [r2, r3]
		dmx_buff2[i]=0;
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	4a18      	ldr	r2, [pc, #96]	; (8003370 <Protocol_DMX_init+0xb0>)
 8003310:	2100      	movs	r1, #0
 8003312:	54d1      	strb	r1, [r2, r3]
		dmx_buff_valid[i]=0;
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	4a17      	ldr	r2, [pc, #92]	; (8003374 <Protocol_DMX_init+0xb4>)
 8003318:	2100      	movs	r1, #0
 800331a:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<DMX_SIZE_CHANNEL; i++)
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	3301      	adds	r3, #1
 8003320:	73fb      	strb	r3, [r7, #15]
 8003322:	7bfb      	ldrb	r3, [r7, #15]
 8003324:	2b0b      	cmp	r3, #11
 8003326:	d9ed      	bls.n	8003304 <Protocol_DMX_init+0x44>
	}

	dmx_LastTick = HAL_GetTick();
 8003328:	f7fd fa1c 	bl	8000764 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	4b12      	ldr	r3, [pc, #72]	; (8003378 <Protocol_DMX_init+0xb8>)
 8003330:	601a      	str	r2, [r3, #0]

	/* Receive one byte in interrupt mode */
	dmx_ref_uart = ref_uart;
 8003332:	4a12      	ldr	r2, [pc, #72]	; (800337c <Protocol_DMX_init+0xbc>)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(dmx_ref_uart, dmx_rx_buff, 1);
 8003338:	4b10      	ldr	r3, [pc, #64]	; (800337c <Protocol_DMX_init+0xbc>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2201      	movs	r2, #1
 800333e:	4905      	ldr	r1, [pc, #20]	; (8003354 <Protocol_DMX_init+0x94>)
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff fb99 	bl	8002a78 <HAL_UART_Receive_IT>

}
 8003346:	bf00      	nop
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	20001828 	.word	0x20001828
 8003354:	2000182c 	.word	0x2000182c
 8003358:	2000182e 	.word	0x2000182e
 800335c:	20001848 	.word	0x20001848
 8003360:	2000182d 	.word	0x2000182d
 8003364:	20001829 	.word	0x20001829
 8003368:	20001814 	.word	0x20001814
 800336c:	20001830 	.word	0x20001830
 8003370:	2000183c 	.word	0x2000183c
 8003374:	20001818 	.word	0x20001818
 8003378:	20001810 	.word	0x20001810
 800337c:	20001824 	.word	0x20001824

08003380 <Protocol_DMX_UartCallback>:


void Protocol_DMX_UartCallback(UART_HandleTypeDef *huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	uint32_t err_code;
	err_code = huart->ErrorCode;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338c:	60fb      	str	r3, [r7, #12]
	if (huart->Instance == dmx_ref_uart->Instance)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4b29      	ldr	r3, [pc, #164]	; (8003438 <Protocol_DMX_UartCallback+0xb8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d148      	bne.n	800342e <Protocol_DMX_UartCallback+0xae>
	{
		/* Receive one byte in interrupt mode */
		HAL_UART_Receive_IT(dmx_ref_uart, dmx_rx_buff, 1);
 800339c:	4b26      	ldr	r3, [pc, #152]	; (8003438 <Protocol_DMX_UartCallback+0xb8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2201      	movs	r2, #1
 80033a2:	4926      	ldr	r1, [pc, #152]	; (800343c <Protocol_DMX_UartCallback+0xbc>)
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fb67 	bl	8002a78 <HAL_UART_Receive_IT>

		//Load buffer
		if(dmx_cptAddress>=dmx_address_begin && dmx_cptAddress<=dmx_address_end)
 80033aa:	4b25      	ldr	r3, [pc, #148]	; (8003440 <Protocol_DMX_UartCallback+0xc0>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	4b24      	ldr	r3, [pc, #144]	; (8003444 <Protocol_DMX_UartCallback+0xc4>)
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d813      	bhi.n	80033e0 <Protocol_DMX_UartCallback+0x60>
 80033b8:	4b23      	ldr	r3, [pc, #140]	; (8003448 <Protocol_DMX_UartCallback+0xc8>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	b29a      	uxth	r2, r3
 80033be:	4b21      	ldr	r3, [pc, #132]	; (8003444 <Protocol_DMX_UartCallback+0xc4>)
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d30c      	bcc.n	80033e0 <Protocol_DMX_UartCallback+0x60>
				dmx_Last_Error=DMX_ERROR_BUFF;

			if(dmx_buff1[dmx_cptByte] == dmx_buff2[dmx_cptByte])
				dmx_buff_valid[dmx_cptByte] = dmx_buff1[dmx_cptByte];
#else
			dmx_buff_valid[dmx_cptByte]=dmx_rx_buff[0];
 80033c6:	4b21      	ldr	r3, [pc, #132]	; (800344c <Protocol_DMX_UartCallback+0xcc>)
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	4b1b      	ldr	r3, [pc, #108]	; (800343c <Protocol_DMX_UartCallback+0xbc>)
 80033ce:	7819      	ldrb	r1, [r3, #0]
 80033d0:	4b1f      	ldr	r3, [pc, #124]	; (8003450 <Protocol_DMX_UartCallback+0xd0>)
 80033d2:	5499      	strb	r1, [r3, r2]
#endif

			dmx_cptByte++;
 80033d4:	4b1d      	ldr	r3, [pc, #116]	; (800344c <Protocol_DMX_UartCallback+0xcc>)
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	3301      	adds	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	4b1b      	ldr	r3, [pc, #108]	; (800344c <Protocol_DMX_UartCallback+0xcc>)
 80033de:	801a      	strh	r2, [r3, #0]
		}
		dmx_cptAddress++;
 80033e0:	4b18      	ldr	r3, [pc, #96]	; (8003444 <Protocol_DMX_UartCallback+0xc4>)
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	3301      	adds	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	4b16      	ldr	r3, [pc, #88]	; (8003444 <Protocol_DMX_UartCallback+0xc4>)
 80033ea:	801a      	strh	r2, [r3, #0]

		//New frame detection
		if(err_code==HAL_UART_ERROR_FE)// && rx_buff[0]==0)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d11d      	bne.n	800342e <Protocol_DMX_UartCallback+0xae>
		{
			dmx_LastTick = HAL_GetTick();
 80033f2:	f7fd f9b7 	bl	8000764 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	4b16      	ldr	r3, [pc, #88]	; (8003454 <Protocol_DMX_UartCallback+0xd4>)
 80033fa:	601a      	str	r2, [r3, #0]

			dmx_cptAddress=0;
 80033fc:	4b11      	ldr	r3, [pc, #68]	; (8003444 <Protocol_DMX_UartCallback+0xc4>)
 80033fe:	2200      	movs	r2, #0
 8003400:	801a      	strh	r2, [r3, #0]
			dmx_cptByte=0;
 8003402:	4b12      	ldr	r3, [pc, #72]	; (800344c <Protocol_DMX_UartCallback+0xcc>)
 8003404:	2200      	movs	r2, #0
 8003406:	801a      	strh	r2, [r3, #0]

			if (dmx_ref_buffer==1)
 8003408:	4b13      	ldr	r3, [pc, #76]	; (8003458 <Protocol_DMX_UartCallback+0xd8>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d103      	bne.n	8003418 <Protocol_DMX_UartCallback+0x98>
				dmx_ref_buffer=2;
 8003410:	4b11      	ldr	r3, [pc, #68]	; (8003458 <Protocol_DMX_UartCallback+0xd8>)
 8003412:	2202      	movs	r2, #2
 8003414:	701a      	strb	r2, [r3, #0]
				dmx_ref_buffer=1;
			else
				dmx_Last_Error=DMX_ERROR_BUFF;
		}
	}
}
 8003416:	e00a      	b.n	800342e <Protocol_DMX_UartCallback+0xae>
			else if (dmx_ref_buffer==2)
 8003418:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <Protocol_DMX_UartCallback+0xd8>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d103      	bne.n	8003428 <Protocol_DMX_UartCallback+0xa8>
				dmx_ref_buffer=1;
 8003420:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <Protocol_DMX_UartCallback+0xd8>)
 8003422:	2201      	movs	r2, #1
 8003424:	701a      	strb	r2, [r3, #0]
}
 8003426:	e002      	b.n	800342e <Protocol_DMX_UartCallback+0xae>
				dmx_Last_Error=DMX_ERROR_BUFF;
 8003428:	4b0c      	ldr	r3, [pc, #48]	; (800345c <Protocol_DMX_UartCallback+0xdc>)
 800342a:	2201      	movs	r2, #1
 800342c:	701a      	strb	r2, [r3, #0]
}
 800342e:	bf00      	nop
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20001824 	.word	0x20001824
 800343c:	2000182c 	.word	0x2000182c
 8003440:	20001829 	.word	0x20001829
 8003444:	2000182e 	.word	0x2000182e
 8003448:	20001814 	.word	0x20001814
 800344c:	20001848 	.word	0x20001848
 8003450:	20001818 	.word	0x20001818
 8003454:	20001810 	.word	0x20001810
 8003458:	2000182d 	.word	0x2000182d
 800345c:	20001828 	.word	0x20001828

08003460 <GENE_I2C_Init>:

/* Private function -----------------------------------------------*/

/* Public function -----------------------------------------------*/
void GENE_I2C_Init(GPIO_TypeDef * SDA_Port, uint16_t SDA_Pin, GPIO_TypeDef * SCL_Port, uint16_t SCL_Pin)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	461a      	mov	r2, r3
 800346c:	460b      	mov	r3, r1
 800346e:	817b      	strh	r3, [r7, #10]
 8003470:	4613      	mov	r3, r2
 8003472:	813b      	strh	r3, [r7, #8]
	pSDA_Port = SDA_Port;
 8003474:	4a0f      	ldr	r2, [pc, #60]	; (80034b4 <GENE_I2C_Init+0x54>)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6013      	str	r3, [r2, #0]
	pSCL_Port = SCL_Port;
 800347a:	4a0f      	ldr	r2, [pc, #60]	; (80034b8 <GENE_I2C_Init+0x58>)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6013      	str	r3, [r2, #0]
	iSDA_Pin = SDA_Pin;
 8003480:	4a0e      	ldr	r2, [pc, #56]	; (80034bc <GENE_I2C_Init+0x5c>)
 8003482:	897b      	ldrh	r3, [r7, #10]
 8003484:	8013      	strh	r3, [r2, #0]
	iSCL_Pin = SCL_Pin;
 8003486:	4a0e      	ldr	r2, [pc, #56]	; (80034c0 <GENE_I2C_Init+0x60>)
 8003488:	893b      	ldrh	r3, [r7, #8]
 800348a:	8013      	strh	r3, [r2, #0]

	HAL_GPIO_WritePin(pSDA_Port, iSDA_Pin, GPIO_PIN_SET);
 800348c:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <GENE_I2C_Init+0x54>)
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <GENE_I2C_Init+0x5c>)
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	2201      	movs	r2, #1
 8003496:	4619      	mov	r1, r3
 8003498:	f7fe f86d 	bl	8001576 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_SET);
 800349c:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <GENE_I2C_Init+0x58>)
 800349e:	6818      	ldr	r0, [r3, #0]
 80034a0:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <GENE_I2C_Init+0x60>)
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	2201      	movs	r2, #1
 80034a6:	4619      	mov	r1, r3
 80034a8:	f7fe f865 	bl	8001576 <HAL_GPIO_WritePin>
}
 80034ac:	bf00      	nop
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	2000184c 	.word	0x2000184c
 80034b8:	20001854 	.word	0x20001854
 80034bc:	20001850 	.word	0x20001850
 80034c0:	20001852 	.word	0x20001852

080034c4 <GENE_I2C_Master_Transmit>:

void GENE_I2C_Master_Transmit(uint8_t Address, uint8_t data[], uint16_t count)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	6039      	str	r1, [r7, #0]
 80034ce:	71fb      	strb	r3, [r7, #7]
 80034d0:	4613      	mov	r3, r2
 80034d2:	80bb      	strh	r3, [r7, #4]
	uint8_t i,j,d;

	//START
	HAL_GPIO_WritePin(pSDA_Port, iSDA_Pin, GPIO_PIN_RESET);
 80034d4:	4b82      	ldr	r3, [pc, #520]	; (80036e0 <GENE_I2C_Master_Transmit+0x21c>)
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	4b82      	ldr	r3, [pc, #520]	; (80036e4 <GENE_I2C_Master_Transmit+0x220>)
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	2200      	movs	r2, #0
 80034de:	4619      	mov	r1, r3
 80034e0:	f7fe f849 	bl	8001576 <HAL_GPIO_WritePin>
	I2C_usDelay(1);
 80034e4:	2001      	movs	r0, #1
 80034e6:	f000 f903 	bl	80036f0 <I2C_usDelay>
	HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_RESET);
 80034ea:	4b7f      	ldr	r3, [pc, #508]	; (80036e8 <GENE_I2C_Master_Transmit+0x224>)
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	4b7f      	ldr	r3, [pc, #508]	; (80036ec <GENE_I2C_Master_Transmit+0x228>)
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	2200      	movs	r2, #0
 80034f4:	4619      	mov	r1, r3
 80034f6:	f7fe f83e 	bl	8001576 <HAL_GPIO_WritePin>
	I2C_usDelay(1);
 80034fa:	2001      	movs	r0, #1
 80034fc:	f000 f8f8 	bl	80036f0 <I2C_usDelay>

	for(i=7; i>0; i--)	//Address b7-1
 8003500:	2307      	movs	r3, #7
 8003502:	73fb      	strb	r3, [r7, #15]
 8003504:	e02a      	b.n	800355c <GENE_I2C_Master_Transmit+0x98>
	{
		HAL_GPIO_WritePin(pSDA_Port, iSDA_Pin, (Address>>i)&0x0001);
 8003506:	4b76      	ldr	r3, [pc, #472]	; (80036e0 <GENE_I2C_Master_Transmit+0x21c>)
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	4b76      	ldr	r3, [pc, #472]	; (80036e4 <GENE_I2C_Master_Transmit+0x220>)
 800350c:	8819      	ldrh	r1, [r3, #0]
 800350e:	79fa      	ldrb	r2, [r7, #7]
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	fa42 f303 	asr.w	r3, r2, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	b2db      	uxtb	r3, r3
 800351e:	461a      	mov	r2, r3
 8003520:	f7fe f829 	bl	8001576 <HAL_GPIO_WritePin>
		I2C_usDelay(1);
 8003524:	2001      	movs	r0, #1
 8003526:	f000 f8e3 	bl	80036f0 <I2C_usDelay>
		HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_SET);
 800352a:	4b6f      	ldr	r3, [pc, #444]	; (80036e8 <GENE_I2C_Master_Transmit+0x224>)
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	4b6f      	ldr	r3, [pc, #444]	; (80036ec <GENE_I2C_Master_Transmit+0x228>)
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	2201      	movs	r2, #1
 8003534:	4619      	mov	r1, r3
 8003536:	f7fe f81e 	bl	8001576 <HAL_GPIO_WritePin>
		I2C_usDelay(1);
 800353a:	2001      	movs	r0, #1
 800353c:	f000 f8d8 	bl	80036f0 <I2C_usDelay>
		HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_RESET);
 8003540:	4b69      	ldr	r3, [pc, #420]	; (80036e8 <GENE_I2C_Master_Transmit+0x224>)
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	4b69      	ldr	r3, [pc, #420]	; (80036ec <GENE_I2C_Master_Transmit+0x228>)
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	2200      	movs	r2, #0
 800354a:	4619      	mov	r1, r3
 800354c:	f7fe f813 	bl	8001576 <HAL_GPIO_WritePin>
		I2C_usDelay(1);
 8003550:	2001      	movs	r0, #1
 8003552:	f000 f8cd 	bl	80036f0 <I2C_usDelay>
	for(i=7; i>0; i--)	//Address b7-1
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	3b01      	subs	r3, #1
 800355a:	73fb      	strb	r3, [r7, #15]
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1d1      	bne.n	8003506 <GENE_I2C_Master_Transmit+0x42>
	}

	//Address b0
	HAL_GPIO_WritePin(pSDA_Port, iSDA_Pin, GPIO_PIN_RESET);
 8003562:	4b5f      	ldr	r3, [pc, #380]	; (80036e0 <GENE_I2C_Master_Transmit+0x21c>)
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	4b5f      	ldr	r3, [pc, #380]	; (80036e4 <GENE_I2C_Master_Transmit+0x220>)
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	2200      	movs	r2, #0
 800356c:	4619      	mov	r1, r3
 800356e:	f7fe f802 	bl	8001576 <HAL_GPIO_WritePin>
	I2C_usDelay(1);
 8003572:	2001      	movs	r0, #1
 8003574:	f000 f8bc 	bl	80036f0 <I2C_usDelay>
	HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_SET);
 8003578:	4b5b      	ldr	r3, [pc, #364]	; (80036e8 <GENE_I2C_Master_Transmit+0x224>)
 800357a:	6818      	ldr	r0, [r3, #0]
 800357c:	4b5b      	ldr	r3, [pc, #364]	; (80036ec <GENE_I2C_Master_Transmit+0x228>)
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	2201      	movs	r2, #1
 8003582:	4619      	mov	r1, r3
 8003584:	f7fd fff7 	bl	8001576 <HAL_GPIO_WritePin>
	I2C_usDelay(1);
 8003588:	2001      	movs	r0, #1
 800358a:	f000 f8b1 	bl	80036f0 <I2C_usDelay>
	HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_RESET);
 800358e:	4b56      	ldr	r3, [pc, #344]	; (80036e8 <GENE_I2C_Master_Transmit+0x224>)
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	4b56      	ldr	r3, [pc, #344]	; (80036ec <GENE_I2C_Master_Transmit+0x228>)
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	2200      	movs	r2, #0
 8003598:	4619      	mov	r1, r3
 800359a:	f7fd ffec 	bl	8001576 <HAL_GPIO_WritePin>
	I2C_usDelay(1);
 800359e:	2001      	movs	r0, #1
 80035a0:	f000 f8a6 	bl	80036f0 <I2C_usDelay>

	//ACK
	HAL_GPIO_WritePin(pSDA_Port, iSDA_Pin, GPIO_PIN_SET);
 80035a4:	4b4e      	ldr	r3, [pc, #312]	; (80036e0 <GENE_I2C_Master_Transmit+0x21c>)
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	4b4e      	ldr	r3, [pc, #312]	; (80036e4 <GENE_I2C_Master_Transmit+0x220>)
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	2201      	movs	r2, #1
 80035ae:	4619      	mov	r1, r3
 80035b0:	f7fd ffe1 	bl	8001576 <HAL_GPIO_WritePin>
	I2C_usDelay(1);
 80035b4:	2001      	movs	r0, #1
 80035b6:	f000 f89b 	bl	80036f0 <I2C_usDelay>
	HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_SET);
 80035ba:	4b4b      	ldr	r3, [pc, #300]	; (80036e8 <GENE_I2C_Master_Transmit+0x224>)
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	4b4b      	ldr	r3, [pc, #300]	; (80036ec <GENE_I2C_Master_Transmit+0x228>)
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	2201      	movs	r2, #1
 80035c4:	4619      	mov	r1, r3
 80035c6:	f7fd ffd6 	bl	8001576 <HAL_GPIO_WritePin>
	I2C_usDelay(1);
 80035ca:	2001      	movs	r0, #1
 80035cc:	f000 f890 	bl	80036f0 <I2C_usDelay>
	HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_RESET);
 80035d0:	4b45      	ldr	r3, [pc, #276]	; (80036e8 <GENE_I2C_Master_Transmit+0x224>)
 80035d2:	6818      	ldr	r0, [r3, #0]
 80035d4:	4b45      	ldr	r3, [pc, #276]	; (80036ec <GENE_I2C_Master_Transmit+0x228>)
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	2200      	movs	r2, #0
 80035da:	4619      	mov	r1, r3
 80035dc:	f7fd ffcb 	bl	8001576 <HAL_GPIO_WritePin>
	I2C_usDelay(1);
 80035e0:	2001      	movs	r0, #1
 80035e2:	f000 f885 	bl	80036f0 <I2C_usDelay>

	//Data
	for(j=0; j<count; j++)
 80035e6:	2300      	movs	r3, #0
 80035e8:	73bb      	strb	r3, [r7, #14]
 80035ea:	e05a      	b.n	80036a2 <GENE_I2C_Master_Transmit+0x1de>
	{
		for(i=8; i>0; i--)
 80035ec:	2308      	movs	r3, #8
 80035ee:	73fb      	strb	r3, [r7, #15]
 80035f0:	e030      	b.n	8003654 <GENE_I2C_Master_Transmit+0x190>
		{
			d = data[j];
 80035f2:	7bbb      	ldrb	r3, [r7, #14]
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	4413      	add	r3, r2
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	737b      	strb	r3, [r7, #13]
			HAL_GPIO_WritePin(pSDA_Port, iSDA_Pin, (d>>(i-1))&0x0001);
 80035fc:	4b38      	ldr	r3, [pc, #224]	; (80036e0 <GENE_I2C_Master_Transmit+0x21c>)
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	4b38      	ldr	r3, [pc, #224]	; (80036e4 <GENE_I2C_Master_Transmit+0x220>)
 8003602:	8819      	ldrh	r1, [r3, #0]
 8003604:	7b7a      	ldrb	r2, [r7, #13]
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	3b01      	subs	r3, #1
 800360a:	fa42 f303 	asr.w	r3, r2, r3
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	b2db      	uxtb	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	f7fd ffad 	bl	8001576 <HAL_GPIO_WritePin>
			I2C_usDelay(1);
 800361c:	2001      	movs	r0, #1
 800361e:	f000 f867 	bl	80036f0 <I2C_usDelay>
			HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_SET);
 8003622:	4b31      	ldr	r3, [pc, #196]	; (80036e8 <GENE_I2C_Master_Transmit+0x224>)
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	4b31      	ldr	r3, [pc, #196]	; (80036ec <GENE_I2C_Master_Transmit+0x228>)
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	2201      	movs	r2, #1
 800362c:	4619      	mov	r1, r3
 800362e:	f7fd ffa2 	bl	8001576 <HAL_GPIO_WritePin>
			I2C_usDelay(1);
 8003632:	2001      	movs	r0, #1
 8003634:	f000 f85c 	bl	80036f0 <I2C_usDelay>
			HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_RESET);
 8003638:	4b2b      	ldr	r3, [pc, #172]	; (80036e8 <GENE_I2C_Master_Transmit+0x224>)
 800363a:	6818      	ldr	r0, [r3, #0]
 800363c:	4b2b      	ldr	r3, [pc, #172]	; (80036ec <GENE_I2C_Master_Transmit+0x228>)
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	2200      	movs	r2, #0
 8003642:	4619      	mov	r1, r3
 8003644:	f7fd ff97 	bl	8001576 <HAL_GPIO_WritePin>
			I2C_usDelay(1);
 8003648:	2001      	movs	r0, #1
 800364a:	f000 f851 	bl	80036f0 <I2C_usDelay>
		for(i=8; i>0; i--)
 800364e:	7bfb      	ldrb	r3, [r7, #15]
 8003650:	3b01      	subs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1cb      	bne.n	80035f2 <GENE_I2C_Master_Transmit+0x12e>
		}

		//ACK
		HAL_GPIO_WritePin(pSDA_Port, iSDA_Pin, GPIO_PIN_SET);
 800365a:	4b21      	ldr	r3, [pc, #132]	; (80036e0 <GENE_I2C_Master_Transmit+0x21c>)
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	4b21      	ldr	r3, [pc, #132]	; (80036e4 <GENE_I2C_Master_Transmit+0x220>)
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	2201      	movs	r2, #1
 8003664:	4619      	mov	r1, r3
 8003666:	f7fd ff86 	bl	8001576 <HAL_GPIO_WritePin>
		I2C_usDelay(1);
 800366a:	2001      	movs	r0, #1
 800366c:	f000 f840 	bl	80036f0 <I2C_usDelay>
		HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_SET);
 8003670:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <GENE_I2C_Master_Transmit+0x224>)
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <GENE_I2C_Master_Transmit+0x228>)
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	2201      	movs	r2, #1
 800367a:	4619      	mov	r1, r3
 800367c:	f7fd ff7b 	bl	8001576 <HAL_GPIO_WritePin>
		I2C_usDelay(1);
 8003680:	2001      	movs	r0, #1
 8003682:	f000 f835 	bl	80036f0 <I2C_usDelay>
		HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_RESET);
 8003686:	4b18      	ldr	r3, [pc, #96]	; (80036e8 <GENE_I2C_Master_Transmit+0x224>)
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	4b18      	ldr	r3, [pc, #96]	; (80036ec <GENE_I2C_Master_Transmit+0x228>)
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	2200      	movs	r2, #0
 8003690:	4619      	mov	r1, r3
 8003692:	f7fd ff70 	bl	8001576 <HAL_GPIO_WritePin>
		I2C_usDelay(1);
 8003696:	2001      	movs	r0, #1
 8003698:	f000 f82a 	bl	80036f0 <I2C_usDelay>
	for(j=0; j<count; j++)
 800369c:	7bbb      	ldrb	r3, [r7, #14]
 800369e:	3301      	adds	r3, #1
 80036a0:	73bb      	strb	r3, [r7, #14]
 80036a2:	7bbb      	ldrb	r3, [r7, #14]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	88ba      	ldrh	r2, [r7, #4]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d89f      	bhi.n	80035ec <GENE_I2C_Master_Transmit+0x128>
	}

	//STOP
	HAL_GPIO_WritePin(pSCL_Port, iSCL_Pin, GPIO_PIN_SET);
 80036ac:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <GENE_I2C_Master_Transmit+0x224>)
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <GENE_I2C_Master_Transmit+0x228>)
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	2201      	movs	r2, #1
 80036b6:	4619      	mov	r1, r3
 80036b8:	f7fd ff5d 	bl	8001576 <HAL_GPIO_WritePin>
	I2C_usDelay(1);
 80036bc:	2001      	movs	r0, #1
 80036be:	f000 f817 	bl	80036f0 <I2C_usDelay>
	HAL_GPIO_WritePin(pSDA_Port, iSDA_Pin, GPIO_PIN_SET);
 80036c2:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <GENE_I2C_Master_Transmit+0x21c>)
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <GENE_I2C_Master_Transmit+0x220>)
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	2201      	movs	r2, #1
 80036cc:	4619      	mov	r1, r3
 80036ce:	f7fd ff52 	bl	8001576 <HAL_GPIO_WritePin>
	I2C_usDelay(1);
 80036d2:	2001      	movs	r0, #1
 80036d4:	f000 f80c 	bl	80036f0 <I2C_usDelay>
}
 80036d8:	bf00      	nop
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	2000184c 	.word	0x2000184c
 80036e4:	20001850 	.word	0x20001850
 80036e8:	20001854 	.word	0x20001854
 80036ec:	20001852 	.word	0x20001852

080036f0 <I2C_usDelay>:


void I2C_usDelay(uint32_t t)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
	for(uint32_t cpt = t; cpt--; cpt>0)
	{
		//cptus = t/BASE_TIME_US;
		//while(cptus--);
	}*/
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr

08003702 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	4603      	mov	r3, r0
 800370a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003710:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003714:	2b84      	cmp	r3, #132	; 0x84
 8003716:	d005      	beq.n	8003724 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003718:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4413      	add	r3, r2
 8003720:	3303      	adds	r3, #3
 8003722:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003724:	68fb      	ldr	r3, [r7, #12]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr

08003730 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003734:	f000 fad4 	bl	8003ce0 <vTaskStartScheduler>
  
  return osOK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	bd80      	pop	{r7, pc}

0800373e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800373e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003740:	b089      	sub	sp, #36	; 0x24
 8003742:	af04      	add	r7, sp, #16
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d020      	beq.n	8003792 <osThreadCreate+0x54>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01c      	beq.n	8003792 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685c      	ldr	r4, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681d      	ldr	r5, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691e      	ldr	r6, [r3, #16]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff ffc9 	bl	8003702 <makeFreeRtosPriority>
 8003770:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800377a:	9202      	str	r2, [sp, #8]
 800377c:	9301      	str	r3, [sp, #4]
 800377e:	9100      	str	r1, [sp, #0]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	4632      	mov	r2, r6
 8003784:	4629      	mov	r1, r5
 8003786:	4620      	mov	r0, r4
 8003788:	f000 f8ef 	bl	800396a <xTaskCreateStatic>
 800378c:	4603      	mov	r3, r0
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	e01c      	b.n	80037cc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685c      	ldr	r4, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800379e:	b29e      	uxth	r6, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff ffab 	bl	8003702 <makeFreeRtosPriority>
 80037ac:	4602      	mov	r2, r0
 80037ae:	f107 030c 	add.w	r3, r7, #12
 80037b2:	9301      	str	r3, [sp, #4]
 80037b4:	9200      	str	r2, [sp, #0]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	4632      	mov	r2, r6
 80037ba:	4629      	mov	r1, r5
 80037bc:	4620      	mov	r0, r4
 80037be:	f000 f92d 	bl	8003a1c <xTaskCreate>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d001      	beq.n	80037cc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	e000      	b.n	80037ce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80037cc:	68fb      	ldr	r3, [r7, #12]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080037d8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a09      	ldr	r2, [pc, #36]	; (8003808 <osDelay+0x30>)
 80037e4:	fba2 2303 	umull	r2, r3, r2, r3
 80037e8:	08db      	lsrs	r3, r3, #3
 80037ea:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <osDelay+0x1e>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	e000      	b.n	80037f8 <osDelay+0x20>
 80037f6:	2301      	movs	r3, #1
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fa3d 	bl	8003c78 <vTaskDelay>
  
  return osOK;
 80037fe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	cccccccd 	.word	0xcccccccd

0800380c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f103 0208 	add.w	r2, r3, #8
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f04f 32ff 	mov.w	r2, #4294967295
 8003824:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f103 0208 	add.w	r2, r3, #8
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f103 0208 	add.w	r2, r3, #8
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr

0800384a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	bc80      	pop	{r7}
 8003860:	4770      	bx	lr

08003862 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003862:	b480      	push	{r7}
 8003864:	b085      	sub	sp, #20
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	601a      	str	r2, [r3, #0]
}
 800389e:	bf00      	nop
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038be:	d103      	bne.n	80038c8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	e00c      	b.n	80038e2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3308      	adds	r3, #8
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	e002      	b.n	80038d6 <vListInsert+0x2e>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d2f6      	bcs.n	80038d0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	601a      	str	r2, [r3, #0]
}
 800390e:	bf00      	nop
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6892      	ldr	r2, [r2, #8]
 800392e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6852      	ldr	r2, [r2, #4]
 8003938:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	429a      	cmp	r2, r3
 8003942:	d103      	bne.n	800394c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	1e5a      	subs	r2, r3, #1
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr

0800396a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800396a:	b580      	push	{r7, lr}
 800396c:	b08e      	sub	sp, #56	; 0x38
 800396e:	af04      	add	r7, sp, #16
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	623b      	str	r3, [r7, #32]
 8003990:	e7fe      	b.n	8003990 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003994:	2b00      	cmp	r3, #0
 8003996:	d109      	bne.n	80039ac <xTaskCreateStatic+0x42>
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	61fb      	str	r3, [r7, #28]
 80039aa:	e7fe      	b.n	80039aa <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039ac:	2354      	movs	r3, #84	; 0x54
 80039ae:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	2b54      	cmp	r3, #84	; 0x54
 80039b4:	d009      	beq.n	80039ca <xTaskCreateStatic+0x60>
 80039b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	61bb      	str	r3, [r7, #24]
 80039c8:	e7fe      	b.n	80039c8 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01e      	beq.n	8003a0e <xTaskCreateStatic+0xa4>
 80039d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d01b      	beq.n	8003a0e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039de:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039e8:	2300      	movs	r3, #0
 80039ea:	9303      	str	r3, [sp, #12]
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	9302      	str	r3, [sp, #8]
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	9301      	str	r3, [sp, #4]
 80039f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f850 	bl	8003aa6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a08:	f000 f8cc 	bl	8003ba4 <prvAddNewTaskToReadyList>
 8003a0c:	e001      	b.n	8003a12 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a12:	697b      	ldr	r3, [r7, #20]
	}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3728      	adds	r7, #40	; 0x28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08c      	sub	sp, #48	; 0x30
 8003a20:	af04      	add	r7, sp, #16
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a2c:	88fb      	ldrh	r3, [r7, #6]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fe73 	bl	800471c <pvPortMalloc>
 8003a36:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00e      	beq.n	8003a5c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a3e:	2054      	movs	r0, #84	; 0x54
 8003a40:	f000 fe6c 	bl	800471c <pvPortMalloc>
 8003a44:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	631a      	str	r2, [r3, #48]	; 0x30
 8003a52:	e005      	b.n	8003a60 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a54:	6978      	ldr	r0, [r7, #20]
 8003a56:	f000 ff23 	bl	80048a0 <vPortFree>
 8003a5a:	e001      	b.n	8003a60 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d017      	beq.n	8003a96 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a6e:	88fa      	ldrh	r2, [r7, #6]
 8003a70:	2300      	movs	r3, #0
 8003a72:	9303      	str	r3, [sp, #12]
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	9302      	str	r3, [sp, #8]
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	9301      	str	r3, [sp, #4]
 8003a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 f80e 	bl	8003aa6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a8a:	69f8      	ldr	r0, [r7, #28]
 8003a8c:	f000 f88a 	bl	8003ba4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a90:	2301      	movs	r3, #1
 8003a92:	61bb      	str	r3, [r7, #24]
 8003a94:	e002      	b.n	8003a9c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a96:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a9c:	69bb      	ldr	r3, [r7, #24]
	}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3720      	adds	r7, #32
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b088      	sub	sp, #32
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	f023 0307 	bic.w	r3, r3, #7
 8003acc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d009      	beq.n	8003aec <prvInitialiseNewTask+0x46>
 8003ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	617b      	str	r3, [r7, #20]
 8003aea:	e7fe      	b.n	8003aea <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aec:	2300      	movs	r3, #0
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	e012      	b.n	8003b18 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	4413      	add	r3, r2
 8003af8:	7819      	ldrb	r1, [r3, #0]
 8003afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	4413      	add	r3, r2
 8003b00:	3334      	adds	r3, #52	; 0x34
 8003b02:	460a      	mov	r2, r1
 8003b04:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d006      	beq.n	8003b20 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3301      	adds	r3, #1
 8003b16:	61fb      	str	r3, [r7, #28]
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2b0f      	cmp	r3, #15
 8003b1c:	d9e9      	bls.n	8003af2 <prvInitialiseNewTask+0x4c>
 8003b1e:	e000      	b.n	8003b22 <prvInitialiseNewTask+0x7c>
		{
			break;
 8003b20:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	2b06      	cmp	r3, #6
 8003b2e:	d901      	bls.n	8003b34 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b30:	2306      	movs	r3, #6
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b3e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b42:	2200      	movs	r2, #0
 8003b44:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	3304      	adds	r3, #4
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff fe7d 	bl	800384a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	3318      	adds	r3, #24
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff fe78 	bl	800384a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	f1c3 0207 	rsb	r2, r3, #7
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b72:	2200      	movs	r2, #0
 8003b74:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	68f9      	ldr	r1, [r7, #12]
 8003b82:	69b8      	ldr	r0, [r7, #24]
 8003b84:	f000 fc24 	bl	80043d0 <pxPortInitialiseStack>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b9a:	bf00      	nop
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bac:	f000 fcfc 	bl	80045a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bb0:	4b2a      	ldr	r3, [pc, #168]	; (8003c5c <prvAddNewTaskToReadyList+0xb8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	4a29      	ldr	r2, [pc, #164]	; (8003c5c <prvAddNewTaskToReadyList+0xb8>)
 8003bb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bba:	4b29      	ldr	r3, [pc, #164]	; (8003c60 <prvAddNewTaskToReadyList+0xbc>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bc2:	4a27      	ldr	r2, [pc, #156]	; (8003c60 <prvAddNewTaskToReadyList+0xbc>)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bc8:	4b24      	ldr	r3, [pc, #144]	; (8003c5c <prvAddNewTaskToReadyList+0xb8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d110      	bne.n	8003bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bd0:	f000 fabc 	bl	800414c <prvInitialiseTaskLists>
 8003bd4:	e00d      	b.n	8003bf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bd6:	4b23      	ldr	r3, [pc, #140]	; (8003c64 <prvAddNewTaskToReadyList+0xc0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bde:	4b20      	ldr	r3, [pc, #128]	; (8003c60 <prvAddNewTaskToReadyList+0xbc>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d802      	bhi.n	8003bf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bec:	4a1c      	ldr	r2, [pc, #112]	; (8003c60 <prvAddNewTaskToReadyList+0xbc>)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bf2:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <prvAddNewTaskToReadyList+0xc4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	4a1b      	ldr	r2, [pc, #108]	; (8003c68 <prvAddNewTaskToReadyList+0xc4>)
 8003bfa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	2201      	movs	r2, #1
 8003c02:	409a      	lsls	r2, r3
 8003c04:	4b19      	ldr	r3, [pc, #100]	; (8003c6c <prvAddNewTaskToReadyList+0xc8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	4a18      	ldr	r2, [pc, #96]	; (8003c6c <prvAddNewTaskToReadyList+0xc8>)
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4a15      	ldr	r2, [pc, #84]	; (8003c70 <prvAddNewTaskToReadyList+0xcc>)
 8003c1c:	441a      	add	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3304      	adds	r3, #4
 8003c22:	4619      	mov	r1, r3
 8003c24:	4610      	mov	r0, r2
 8003c26:	f7ff fe1c 	bl	8003862 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c2a:	f000 fceb 	bl	8004604 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c2e:	4b0d      	ldr	r3, [pc, #52]	; (8003c64 <prvAddNewTaskToReadyList+0xc0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00e      	beq.n	8003c54 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c36:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <prvAddNewTaskToReadyList+0xbc>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d207      	bcs.n	8003c54 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <prvAddNewTaskToReadyList+0xd0>)
 8003c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	2000053c 	.word	0x2000053c
 8003c60:	2000043c 	.word	0x2000043c
 8003c64:	20000548 	.word	0x20000548
 8003c68:	20000558 	.word	0x20000558
 8003c6c:	20000544 	.word	0x20000544
 8003c70:	20000440 	.word	0x20000440
 8003c74:	e000ed04 	.word	0xe000ed04

08003c78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c80:	2300      	movs	r3, #0
 8003c82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d016      	beq.n	8003cb8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c8a:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <vTaskDelay+0x60>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <vTaskDelay+0x2e>
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	e7fe      	b.n	8003ca4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003ca6:	f000 f879 	bl	8003d9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003caa:	2100      	movs	r1, #0
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fb29 	bl	8004304 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cb2:	f000 f881 	bl	8003db8 <xTaskResumeAll>
 8003cb6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d107      	bne.n	8003cce <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003cbe:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <vTaskDelay+0x64>)
 8003cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000564 	.word	0x20000564
 8003cdc:	e000ed04 	.word	0xe000ed04

08003ce0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08a      	sub	sp, #40	; 0x28
 8003ce4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cee:	463a      	mov	r2, r7
 8003cf0:	1d39      	adds	r1, r7, #4
 8003cf2:	f107 0308 	add.w	r3, r7, #8
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f002 f84a 	bl	8005d90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cfc:	6839      	ldr	r1, [r7, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	9202      	str	r2, [sp, #8]
 8003d04:	9301      	str	r3, [sp, #4]
 8003d06:	2300      	movs	r3, #0
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	460a      	mov	r2, r1
 8003d0e:	491d      	ldr	r1, [pc, #116]	; (8003d84 <vTaskStartScheduler+0xa4>)
 8003d10:	481d      	ldr	r0, [pc, #116]	; (8003d88 <vTaskStartScheduler+0xa8>)
 8003d12:	f7ff fe2a 	bl	800396a <xTaskCreateStatic>
 8003d16:	4602      	mov	r2, r0
 8003d18:	4b1c      	ldr	r3, [pc, #112]	; (8003d8c <vTaskStartScheduler+0xac>)
 8003d1a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d1c:	4b1b      	ldr	r3, [pc, #108]	; (8003d8c <vTaskStartScheduler+0xac>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d24:	2301      	movs	r3, #1
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	e001      	b.n	8003d2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d115      	bne.n	8003d60 <vTaskStartScheduler+0x80>
 8003d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d46:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <vTaskStartScheduler+0xb0>)
 8003d48:	f04f 32ff 	mov.w	r2, #4294967295
 8003d4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d4e:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <vTaskStartScheduler+0xb4>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d54:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <vTaskStartScheduler+0xb8>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d5a:	f000 fbb5 	bl	80044c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d5e:	e00d      	b.n	8003d7c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d66:	d109      	bne.n	8003d7c <vTaskStartScheduler+0x9c>
 8003d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	e7fe      	b.n	8003d7a <vTaskStartScheduler+0x9a>
}
 8003d7c:	bf00      	nop
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	08006ad8 	.word	0x08006ad8
 8003d88:	0800411d 	.word	0x0800411d
 8003d8c:	20000560 	.word	0x20000560
 8003d90:	2000055c 	.word	0x2000055c
 8003d94:	20000548 	.word	0x20000548
 8003d98:	20000540 	.word	0x20000540

08003d9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003da0:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <vTaskSuspendAll+0x18>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3301      	adds	r3, #1
 8003da6:	4a03      	ldr	r2, [pc, #12]	; (8003db4 <vTaskSuspendAll+0x18>)
 8003da8:	6013      	str	r3, [r2, #0]
}
 8003daa:	bf00      	nop
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000564 	.word	0x20000564

08003db8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dc6:	4b41      	ldr	r3, [pc, #260]	; (8003ecc <xTaskResumeAll+0x114>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <xTaskResumeAll+0x2a>
 8003dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	603b      	str	r3, [r7, #0]
 8003de0:	e7fe      	b.n	8003de0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003de2:	f000 fbe1 	bl	80045a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003de6:	4b39      	ldr	r3, [pc, #228]	; (8003ecc <xTaskResumeAll+0x114>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	4a37      	ldr	r2, [pc, #220]	; (8003ecc <xTaskResumeAll+0x114>)
 8003dee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003df0:	4b36      	ldr	r3, [pc, #216]	; (8003ecc <xTaskResumeAll+0x114>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d161      	bne.n	8003ebc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003df8:	4b35      	ldr	r3, [pc, #212]	; (8003ed0 <xTaskResumeAll+0x118>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d05d      	beq.n	8003ebc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e00:	e02e      	b.n	8003e60 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e02:	4b34      	ldr	r3, [pc, #208]	; (8003ed4 <xTaskResumeAll+0x11c>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3318      	adds	r3, #24
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff fd82 	bl	8003918 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3304      	adds	r3, #4
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff fd7d 	bl	8003918 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	2201      	movs	r2, #1
 8003e24:	409a      	lsls	r2, r3
 8003e26:	4b2c      	ldr	r3, [pc, #176]	; (8003ed8 <xTaskResumeAll+0x120>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	4a2a      	ldr	r2, [pc, #168]	; (8003ed8 <xTaskResumeAll+0x120>)
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e34:	4613      	mov	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4a27      	ldr	r2, [pc, #156]	; (8003edc <xTaskResumeAll+0x124>)
 8003e3e:	441a      	add	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	3304      	adds	r3, #4
 8003e44:	4619      	mov	r1, r3
 8003e46:	4610      	mov	r0, r2
 8003e48:	f7ff fd0b 	bl	8003862 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e50:	4b23      	ldr	r3, [pc, #140]	; (8003ee0 <xTaskResumeAll+0x128>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d302      	bcc.n	8003e60 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003e5a:	4b22      	ldr	r3, [pc, #136]	; (8003ee4 <xTaskResumeAll+0x12c>)
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e60:	4b1c      	ldr	r3, [pc, #112]	; (8003ed4 <xTaskResumeAll+0x11c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1cc      	bne.n	8003e02 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e6e:	f000 fa07 	bl	8004280 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e72:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <xTaskResumeAll+0x130>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d010      	beq.n	8003ea0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e7e:	f000 f837 	bl	8003ef0 <xTaskIncrementTick>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003e88:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <xTaskResumeAll+0x12c>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f1      	bne.n	8003e7e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003e9a:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <xTaskResumeAll+0x130>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ea0:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <xTaskResumeAll+0x12c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d009      	beq.n	8003ebc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003eac:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <xTaskResumeAll+0x134>)
 8003eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ebc:	f000 fba2 	bl	8004604 <vPortExitCritical>

	return xAlreadyYielded;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000564 	.word	0x20000564
 8003ed0:	2000053c 	.word	0x2000053c
 8003ed4:	200004fc 	.word	0x200004fc
 8003ed8:	20000544 	.word	0x20000544
 8003edc:	20000440 	.word	0x20000440
 8003ee0:	2000043c 	.word	0x2000043c
 8003ee4:	20000550 	.word	0x20000550
 8003ee8:	2000054c 	.word	0x2000054c
 8003eec:	e000ed04 	.word	0xe000ed04

08003ef0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003efa:	4b50      	ldr	r3, [pc, #320]	; (800403c <xTaskIncrementTick+0x14c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f040 808c 	bne.w	800401c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f04:	4b4e      	ldr	r3, [pc, #312]	; (8004040 <xTaskIncrementTick+0x150>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f0c:	4a4c      	ldr	r2, [pc, #304]	; (8004040 <xTaskIncrementTick+0x150>)
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d11f      	bne.n	8003f58 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f18:	4b4a      	ldr	r3, [pc, #296]	; (8004044 <xTaskIncrementTick+0x154>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d009      	beq.n	8003f36 <xTaskIncrementTick+0x46>
 8003f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f26:	f383 8811 	msr	BASEPRI, r3
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	e7fe      	b.n	8003f34 <xTaskIncrementTick+0x44>
 8003f36:	4b43      	ldr	r3, [pc, #268]	; (8004044 <xTaskIncrementTick+0x154>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	4b42      	ldr	r3, [pc, #264]	; (8004048 <xTaskIncrementTick+0x158>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a40      	ldr	r2, [pc, #256]	; (8004044 <xTaskIncrementTick+0x154>)
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	4a40      	ldr	r2, [pc, #256]	; (8004048 <xTaskIncrementTick+0x158>)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	4b40      	ldr	r3, [pc, #256]	; (800404c <xTaskIncrementTick+0x15c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	4a3e      	ldr	r2, [pc, #248]	; (800404c <xTaskIncrementTick+0x15c>)
 8003f52:	6013      	str	r3, [r2, #0]
 8003f54:	f000 f994 	bl	8004280 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f58:	4b3d      	ldr	r3, [pc, #244]	; (8004050 <xTaskIncrementTick+0x160>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d34d      	bcc.n	8003ffe <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f62:	4b38      	ldr	r3, [pc, #224]	; (8004044 <xTaskIncrementTick+0x154>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <xTaskIncrementTick+0x80>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e000      	b.n	8003f72 <xTaskIncrementTick+0x82>
 8003f70:	2300      	movs	r3, #0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d004      	beq.n	8003f80 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f76:	4b36      	ldr	r3, [pc, #216]	; (8004050 <xTaskIncrementTick+0x160>)
 8003f78:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7c:	601a      	str	r2, [r3, #0]
					break;
 8003f7e:	e03e      	b.n	8003ffe <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f80:	4b30      	ldr	r3, [pc, #192]	; (8004044 <xTaskIncrementTick+0x154>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d203      	bcs.n	8003fa0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f98:	4a2d      	ldr	r2, [pc, #180]	; (8004050 <xTaskIncrementTick+0x160>)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6013      	str	r3, [r2, #0]
						break;
 8003f9e:	e02e      	b.n	8003ffe <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff fcb7 	bl	8003918 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d004      	beq.n	8003fbc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	3318      	adds	r3, #24
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff fcae 	bl	8003918 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	4b23      	ldr	r3, [pc, #140]	; (8004054 <xTaskIncrementTick+0x164>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	4a22      	ldr	r2, [pc, #136]	; (8004054 <xTaskIncrementTick+0x164>)
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4a1f      	ldr	r2, [pc, #124]	; (8004058 <xTaskIncrementTick+0x168>)
 8003fdc:	441a      	add	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	f7ff fc3c 	bl	8003862 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fee:	4b1b      	ldr	r3, [pc, #108]	; (800405c <xTaskIncrementTick+0x16c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d3b4      	bcc.n	8003f62 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ffc:	e7b1      	b.n	8003f62 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ffe:	4b17      	ldr	r3, [pc, #92]	; (800405c <xTaskIncrementTick+0x16c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004004:	4914      	ldr	r1, [pc, #80]	; (8004058 <xTaskIncrementTick+0x168>)
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d907      	bls.n	8004026 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004016:	2301      	movs	r3, #1
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	e004      	b.n	8004026 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800401c:	4b10      	ldr	r3, [pc, #64]	; (8004060 <xTaskIncrementTick+0x170>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3301      	adds	r3, #1
 8004022:	4a0f      	ldr	r2, [pc, #60]	; (8004060 <xTaskIncrementTick+0x170>)
 8004024:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004026:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <xTaskIncrementTick+0x174>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800402e:	2301      	movs	r3, #1
 8004030:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004032:	697b      	ldr	r3, [r7, #20]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20000564 	.word	0x20000564
 8004040:	20000540 	.word	0x20000540
 8004044:	200004f4 	.word	0x200004f4
 8004048:	200004f8 	.word	0x200004f8
 800404c:	20000554 	.word	0x20000554
 8004050:	2000055c 	.word	0x2000055c
 8004054:	20000544 	.word	0x20000544
 8004058:	20000440 	.word	0x20000440
 800405c:	2000043c 	.word	0x2000043c
 8004060:	2000054c 	.word	0x2000054c
 8004064:	20000550 	.word	0x20000550

08004068 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800406e:	4b26      	ldr	r3, [pc, #152]	; (8004108 <vTaskSwitchContext+0xa0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004076:	4b25      	ldr	r3, [pc, #148]	; (800410c <vTaskSwitchContext+0xa4>)
 8004078:	2201      	movs	r2, #1
 800407a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800407c:	e03e      	b.n	80040fc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800407e:	4b23      	ldr	r3, [pc, #140]	; (800410c <vTaskSwitchContext+0xa4>)
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004084:	4b22      	ldr	r3, [pc, #136]	; (8004110 <vTaskSwitchContext+0xa8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	fab3 f383 	clz	r3, r3
 8004090:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004092:	7afb      	ldrb	r3, [r7, #11]
 8004094:	f1c3 031f 	rsb	r3, r3, #31
 8004098:	617b      	str	r3, [r7, #20]
 800409a:	491e      	ldr	r1, [pc, #120]	; (8004114 <vTaskSwitchContext+0xac>)
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d109      	bne.n	80040c2 <vTaskSwitchContext+0x5a>
	__asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	607b      	str	r3, [r7, #4]
 80040c0:	e7fe      	b.n	80040c0 <vTaskSwitchContext+0x58>
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4a11      	ldr	r2, [pc, #68]	; (8004114 <vTaskSwitchContext+0xac>)
 80040ce:	4413      	add	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	605a      	str	r2, [r3, #4]
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	3308      	adds	r3, #8
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d104      	bne.n	80040f2 <vTaskSwitchContext+0x8a>
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	605a      	str	r2, [r3, #4]
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4a07      	ldr	r2, [pc, #28]	; (8004118 <vTaskSwitchContext+0xb0>)
 80040fa:	6013      	str	r3, [r2, #0]
}
 80040fc:	bf00      	nop
 80040fe:	371c      	adds	r7, #28
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	20000564 	.word	0x20000564
 800410c:	20000550 	.word	0x20000550
 8004110:	20000544 	.word	0x20000544
 8004114:	20000440 	.word	0x20000440
 8004118:	2000043c 	.word	0x2000043c

0800411c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004124:	f000 f852 	bl	80041cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <prvIdleTask+0x28>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d9f9      	bls.n	8004124 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <prvIdleTask+0x2c>)
 8004132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004140:	e7f0      	b.n	8004124 <prvIdleTask+0x8>
 8004142:	bf00      	nop
 8004144:	20000440 	.word	0x20000440
 8004148:	e000ed04 	.word	0xe000ed04

0800414c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004152:	2300      	movs	r3, #0
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	e00c      	b.n	8004172 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4a12      	ldr	r2, [pc, #72]	; (80041ac <prvInitialiseTaskLists+0x60>)
 8004164:	4413      	add	r3, r2
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff fb50 	bl	800380c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3301      	adds	r3, #1
 8004170:	607b      	str	r3, [r7, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b06      	cmp	r3, #6
 8004176:	d9ef      	bls.n	8004158 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004178:	480d      	ldr	r0, [pc, #52]	; (80041b0 <prvInitialiseTaskLists+0x64>)
 800417a:	f7ff fb47 	bl	800380c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800417e:	480d      	ldr	r0, [pc, #52]	; (80041b4 <prvInitialiseTaskLists+0x68>)
 8004180:	f7ff fb44 	bl	800380c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004184:	480c      	ldr	r0, [pc, #48]	; (80041b8 <prvInitialiseTaskLists+0x6c>)
 8004186:	f7ff fb41 	bl	800380c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800418a:	480c      	ldr	r0, [pc, #48]	; (80041bc <prvInitialiseTaskLists+0x70>)
 800418c:	f7ff fb3e 	bl	800380c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004190:	480b      	ldr	r0, [pc, #44]	; (80041c0 <prvInitialiseTaskLists+0x74>)
 8004192:	f7ff fb3b 	bl	800380c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <prvInitialiseTaskLists+0x78>)
 8004198:	4a05      	ldr	r2, [pc, #20]	; (80041b0 <prvInitialiseTaskLists+0x64>)
 800419a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800419c:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <prvInitialiseTaskLists+0x7c>)
 800419e:	4a05      	ldr	r2, [pc, #20]	; (80041b4 <prvInitialiseTaskLists+0x68>)
 80041a0:	601a      	str	r2, [r3, #0]
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20000440 	.word	0x20000440
 80041b0:	200004cc 	.word	0x200004cc
 80041b4:	200004e0 	.word	0x200004e0
 80041b8:	200004fc 	.word	0x200004fc
 80041bc:	20000510 	.word	0x20000510
 80041c0:	20000528 	.word	0x20000528
 80041c4:	200004f4 	.word	0x200004f4
 80041c8:	200004f8 	.word	0x200004f8

080041cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041d2:	e019      	b.n	8004208 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041d4:	f000 f9e8 	bl	80045a8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80041d8:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <prvCheckTasksWaitingTermination+0x4c>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff fb97 	bl	8003918 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041ea:	4b0c      	ldr	r3, [pc, #48]	; (800421c <prvCheckTasksWaitingTermination+0x50>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	4a0a      	ldr	r2, [pc, #40]	; (800421c <prvCheckTasksWaitingTermination+0x50>)
 80041f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041f4:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <prvCheckTasksWaitingTermination+0x54>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3b01      	subs	r3, #1
 80041fa:	4a09      	ldr	r2, [pc, #36]	; (8004220 <prvCheckTasksWaitingTermination+0x54>)
 80041fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041fe:	f000 fa01 	bl	8004604 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f80e 	bl	8004224 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <prvCheckTasksWaitingTermination+0x54>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e1      	bne.n	80041d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004210:	bf00      	nop
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20000510 	.word	0x20000510
 800421c:	2000053c 	.word	0x2000053c
 8004220:	20000524 	.word	0x20000524

08004224 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004232:	2b00      	cmp	r3, #0
 8004234:	d108      	bne.n	8004248 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fb30 	bl	80048a0 <vPortFree>
				vPortFree( pxTCB );
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fb2d 	bl	80048a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004246:	e017      	b.n	8004278 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800424e:	2b01      	cmp	r3, #1
 8004250:	d103      	bne.n	800425a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fb24 	bl	80048a0 <vPortFree>
	}
 8004258:	e00e      	b.n	8004278 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004260:	2b02      	cmp	r3, #2
 8004262:	d009      	beq.n	8004278 <prvDeleteTCB+0x54>
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	e7fe      	b.n	8004276 <prvDeleteTCB+0x52>
	}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004286:	4b0e      	ldr	r3, [pc, #56]	; (80042c0 <prvResetNextTaskUnblockTime+0x40>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <prvResetNextTaskUnblockTime+0x14>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <prvResetNextTaskUnblockTime+0x16>
 8004294:	2300      	movs	r3, #0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d004      	beq.n	80042a4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800429a:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <prvResetNextTaskUnblockTime+0x44>)
 800429c:	f04f 32ff 	mov.w	r2, #4294967295
 80042a0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042a2:	e008      	b.n	80042b6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80042a4:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <prvResetNextTaskUnblockTime+0x40>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	4a04      	ldr	r2, [pc, #16]	; (80042c4 <prvResetNextTaskUnblockTime+0x44>)
 80042b4:	6013      	str	r3, [r2, #0]
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr
 80042c0:	200004f4 	.word	0x200004f4
 80042c4:	2000055c 	.word	0x2000055c

080042c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042ce:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <xTaskGetSchedulerState+0x34>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d102      	bne.n	80042dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042d6:	2301      	movs	r3, #1
 80042d8:	607b      	str	r3, [r7, #4]
 80042da:	e008      	b.n	80042ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042dc:	4b08      	ldr	r3, [pc, #32]	; (8004300 <xTaskGetSchedulerState+0x38>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042e4:	2302      	movs	r3, #2
 80042e6:	607b      	str	r3, [r7, #4]
 80042e8:	e001      	b.n	80042ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042ea:	2300      	movs	r3, #0
 80042ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042ee:	687b      	ldr	r3, [r7, #4]
	}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	20000548 	.word	0x20000548
 8004300:	20000564 	.word	0x20000564

08004304 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800430e:	4b29      	ldr	r3, [pc, #164]	; (80043b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004314:	4b28      	ldr	r3, [pc, #160]	; (80043b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3304      	adds	r3, #4
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff fafc 	bl	8003918 <uxListRemove>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10b      	bne.n	800433e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004326:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	2201      	movs	r2, #1
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	43da      	mvns	r2, r3
 8004334:	4b21      	ldr	r3, [pc, #132]	; (80043bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4013      	ands	r3, r2
 800433a:	4a20      	ldr	r2, [pc, #128]	; (80043bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800433c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004344:	d10a      	bne.n	800435c <prvAddCurrentTaskToDelayedList+0x58>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d007      	beq.n	800435c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800434c:	4b1a      	ldr	r3, [pc, #104]	; (80043b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3304      	adds	r3, #4
 8004352:	4619      	mov	r1, r3
 8004354:	481a      	ldr	r0, [pc, #104]	; (80043c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004356:	f7ff fa84 	bl	8003862 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800435a:	e026      	b.n	80043aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4413      	add	r3, r2
 8004362:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004364:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	429a      	cmp	r2, r3
 8004372:	d209      	bcs.n	8004388 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004374:	4b13      	ldr	r3, [pc, #76]	; (80043c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3304      	adds	r3, #4
 800437e:	4619      	mov	r1, r3
 8004380:	4610      	mov	r0, r2
 8004382:	f7ff fa91 	bl	80038a8 <vListInsert>
}
 8004386:	e010      	b.n	80043aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004388:	4b0f      	ldr	r3, [pc, #60]	; (80043c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3304      	adds	r3, #4
 8004392:	4619      	mov	r1, r3
 8004394:	4610      	mov	r0, r2
 8004396:	f7ff fa87 	bl	80038a8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800439a:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d202      	bcs.n	80043aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80043a4:	4a09      	ldr	r2, [pc, #36]	; (80043cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	6013      	str	r3, [r2, #0]
}
 80043aa:	bf00      	nop
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20000540 	.word	0x20000540
 80043b8:	2000043c 	.word	0x2000043c
 80043bc:	20000544 	.word	0x20000544
 80043c0:	20000528 	.word	0x20000528
 80043c4:	200004f8 	.word	0x200004f8
 80043c8:	200004f4 	.word	0x200004f4
 80043cc:	2000055c 	.word	0x2000055c

080043d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	3b04      	subs	r3, #4
 80043e0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	3b04      	subs	r3, #4
 80043ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f023 0201 	bic.w	r2, r3, #1
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3b04      	subs	r3, #4
 80043fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004400:	4a08      	ldr	r2, [pc, #32]	; (8004424 <pxPortInitialiseStack+0x54>)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3b14      	subs	r3, #20
 800440a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3b20      	subs	r3, #32
 8004416:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004418:	68fb      	ldr	r3, [r7, #12]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr
 8004424:	08004429 	.word	0x08004429

08004428 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800442e:	2300      	movs	r3, #0
 8004430:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004432:	4b10      	ldr	r3, [pc, #64]	; (8004474 <prvTaskExitError+0x4c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443a:	d009      	beq.n	8004450 <prvTaskExitError+0x28>
 800443c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	e7fe      	b.n	800444e <prvTaskExitError+0x26>
 8004450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004462:	bf00      	nop
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0fc      	beq.n	8004464 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800446a:	bf00      	nop
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr
 8004474:	20000010 	.word	0x20000010
	...

08004480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <pxCurrentTCBConst2>)
 8004482:	6819      	ldr	r1, [r3, #0]
 8004484:	6808      	ldr	r0, [r1, #0]
 8004486:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800448a:	f380 8809 	msr	PSP, r0
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f04f 0000 	mov.w	r0, #0
 8004496:	f380 8811 	msr	BASEPRI, r0
 800449a:	f04e 0e0d 	orr.w	lr, lr, #13
 800449e:	4770      	bx	lr

080044a0 <pxCurrentTCBConst2>:
 80044a0:	2000043c 	.word	0x2000043c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop

080044a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80044a8:	4806      	ldr	r0, [pc, #24]	; (80044c4 <prvPortStartFirstTask+0x1c>)
 80044aa:	6800      	ldr	r0, [r0, #0]
 80044ac:	6800      	ldr	r0, [r0, #0]
 80044ae:	f380 8808 	msr	MSP, r0
 80044b2:	b662      	cpsie	i
 80044b4:	b661      	cpsie	f
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	df00      	svc	0
 80044c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80044c2:	bf00      	nop
 80044c4:	e000ed08 	.word	0xe000ed08

080044c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044ce:	4b31      	ldr	r3, [pc, #196]	; (8004594 <xPortStartScheduler+0xcc>)
 80044d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	22ff      	movs	r2, #255	; 0xff
 80044de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	4b29      	ldr	r3, [pc, #164]	; (8004598 <xPortStartScheduler+0xd0>)
 80044f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044f6:	4b29      	ldr	r3, [pc, #164]	; (800459c <xPortStartScheduler+0xd4>)
 80044f8:	2207      	movs	r2, #7
 80044fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044fc:	e009      	b.n	8004512 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80044fe:	4b27      	ldr	r3, [pc, #156]	; (800459c <xPortStartScheduler+0xd4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3b01      	subs	r3, #1
 8004504:	4a25      	ldr	r2, [pc, #148]	; (800459c <xPortStartScheduler+0xd4>)
 8004506:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	b2db      	uxtb	r3, r3
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	b2db      	uxtb	r3, r3
 8004510:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004512:	78fb      	ldrb	r3, [r7, #3]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451a:	2b80      	cmp	r3, #128	; 0x80
 800451c:	d0ef      	beq.n	80044fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800451e:	4b1f      	ldr	r3, [pc, #124]	; (800459c <xPortStartScheduler+0xd4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f1c3 0307 	rsb	r3, r3, #7
 8004526:	2b04      	cmp	r3, #4
 8004528:	d009      	beq.n	800453e <xPortStartScheduler+0x76>
 800452a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	60bb      	str	r3, [r7, #8]
 800453c:	e7fe      	b.n	800453c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800453e:	4b17      	ldr	r3, [pc, #92]	; (800459c <xPortStartScheduler+0xd4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	021b      	lsls	r3, r3, #8
 8004544:	4a15      	ldr	r2, [pc, #84]	; (800459c <xPortStartScheduler+0xd4>)
 8004546:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004548:	4b14      	ldr	r3, [pc, #80]	; (800459c <xPortStartScheduler+0xd4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004550:	4a12      	ldr	r2, [pc, #72]	; (800459c <xPortStartScheduler+0xd4>)
 8004552:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	b2da      	uxtb	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800455c:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <xPortStartScheduler+0xd8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a0f      	ldr	r2, [pc, #60]	; (80045a0 <xPortStartScheduler+0xd8>)
 8004562:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004566:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004568:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <xPortStartScheduler+0xd8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a0c      	ldr	r2, [pc, #48]	; (80045a0 <xPortStartScheduler+0xd8>)
 800456e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004572:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004574:	f000 f8b0 	bl	80046d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004578:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <xPortStartScheduler+0xdc>)
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800457e:	f7ff ff93 	bl	80044a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004582:	f7ff fd71 	bl	8004068 <vTaskSwitchContext>
	prvTaskExitError();
 8004586:	f7ff ff4f 	bl	8004428 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	e000e400 	.word	0xe000e400
 8004598:	20000568 	.word	0x20000568
 800459c:	2000056c 	.word	0x2000056c
 80045a0:	e000ed20 	.word	0xe000ed20
 80045a4:	20000010 	.word	0x20000010

080045a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80045c0:	4b0e      	ldr	r3, [pc, #56]	; (80045fc <vPortEnterCritical+0x54>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3301      	adds	r3, #1
 80045c6:	4a0d      	ldr	r2, [pc, #52]	; (80045fc <vPortEnterCritical+0x54>)
 80045c8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80045ca:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <vPortEnterCritical+0x54>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d10e      	bne.n	80045f0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045d2:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <vPortEnterCritical+0x58>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d009      	beq.n	80045f0 <vPortEnterCritical+0x48>
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	603b      	str	r3, [r7, #0]
 80045ee:	e7fe      	b.n	80045ee <vPortEnterCritical+0x46>
	}
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bc80      	pop	{r7}
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	20000010 	.word	0x20000010
 8004600:	e000ed04 	.word	0xe000ed04

08004604 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800460a:	4b10      	ldr	r3, [pc, #64]	; (800464c <vPortExitCritical+0x48>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <vPortExitCritical+0x22>
 8004612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	607b      	str	r3, [r7, #4]
 8004624:	e7fe      	b.n	8004624 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004626:	4b09      	ldr	r3, [pc, #36]	; (800464c <vPortExitCritical+0x48>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3b01      	subs	r3, #1
 800462c:	4a07      	ldr	r2, [pc, #28]	; (800464c <vPortExitCritical+0x48>)
 800462e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004630:	4b06      	ldr	r3, [pc, #24]	; (800464c <vPortExitCritical+0x48>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d104      	bne.n	8004642 <vPortExitCritical+0x3e>
 8004638:	2300      	movs	r3, #0
 800463a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	bc80      	pop	{r7}
 800464a:	4770      	bx	lr
 800464c:	20000010 	.word	0x20000010

08004650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004650:	f3ef 8009 	mrs	r0, PSP
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	4b0d      	ldr	r3, [pc, #52]	; (8004690 <pxCurrentTCBConst>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004660:	6010      	str	r0, [r2, #0]
 8004662:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004666:	f04f 0050 	mov.w	r0, #80	; 0x50
 800466a:	f380 8811 	msr	BASEPRI, r0
 800466e:	f7ff fcfb 	bl	8004068 <vTaskSwitchContext>
 8004672:	f04f 0000 	mov.w	r0, #0
 8004676:	f380 8811 	msr	BASEPRI, r0
 800467a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800467e:	6819      	ldr	r1, [r3, #0]
 8004680:	6808      	ldr	r0, [r1, #0]
 8004682:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004686:	f380 8809 	msr	PSP, r0
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	4770      	bx	lr

08004690 <pxCurrentTCBConst>:
 8004690:	2000043c 	.word	0x2000043c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004694:	bf00      	nop
 8004696:	bf00      	nop

08004698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046b0:	f7ff fc1e 	bl	8003ef0 <xTaskIncrementTick>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046ba:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <xPortSysTickHandler+0x3c>)
 80046bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	2300      	movs	r3, #0
 80046c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80046cc:	bf00      	nop
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	e000ed04 	.word	0xe000ed04

080046d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046dc:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <vPortSetupTimerInterrupt+0x30>)
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046e2:	4b0a      	ldr	r3, [pc, #40]	; (800470c <vPortSetupTimerInterrupt+0x34>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046e8:	4b09      	ldr	r3, [pc, #36]	; (8004710 <vPortSetupTimerInterrupt+0x38>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a09      	ldr	r2, [pc, #36]	; (8004714 <vPortSetupTimerInterrupt+0x3c>)
 80046ee:	fba2 2303 	umull	r2, r3, r2, r3
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	4a08      	ldr	r2, [pc, #32]	; (8004718 <vPortSetupTimerInterrupt+0x40>)
 80046f6:	3b01      	subs	r3, #1
 80046f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046fa:	4b03      	ldr	r3, [pc, #12]	; (8004708 <vPortSetupTimerInterrupt+0x30>)
 80046fc:	2207      	movs	r2, #7
 80046fe:	601a      	str	r2, [r3, #0]
}
 8004700:	bf00      	nop
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr
 8004708:	e000e010 	.word	0xe000e010
 800470c:	e000e018 	.word	0xe000e018
 8004710:	20000014 	.word	0x20000014
 8004714:	51eb851f 	.word	0x51eb851f
 8004718:	e000e014 	.word	0xe000e014

0800471c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b08a      	sub	sp, #40	; 0x28
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004724:	2300      	movs	r3, #0
 8004726:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004728:	f7ff fb38 	bl	8003d9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800472c:	4b57      	ldr	r3, [pc, #348]	; (800488c <pvPortMalloc+0x170>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004734:	f000 f90c 	bl	8004950 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004738:	4b55      	ldr	r3, [pc, #340]	; (8004890 <pvPortMalloc+0x174>)
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4013      	ands	r3, r2
 8004740:	2b00      	cmp	r3, #0
 8004742:	f040 808c 	bne.w	800485e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01c      	beq.n	8004786 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800474c:	2208      	movs	r2, #8
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4413      	add	r3, r2
 8004752:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	2b00      	cmp	r3, #0
 800475c:	d013      	beq.n	8004786 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f023 0307 	bic.w	r3, r3, #7
 8004764:	3308      	adds	r3, #8
 8004766:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	2b00      	cmp	r3, #0
 8004770:	d009      	beq.n	8004786 <pvPortMalloc+0x6a>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	e7fe      	b.n	8004784 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d068      	beq.n	800485e <pvPortMalloc+0x142>
 800478c:	4b41      	ldr	r3, [pc, #260]	; (8004894 <pvPortMalloc+0x178>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	429a      	cmp	r2, r3
 8004794:	d863      	bhi.n	800485e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004796:	4b40      	ldr	r3, [pc, #256]	; (8004898 <pvPortMalloc+0x17c>)
 8004798:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800479a:	4b3f      	ldr	r3, [pc, #252]	; (8004898 <pvPortMalloc+0x17c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047a0:	e004      	b.n	80047ac <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d903      	bls.n	80047be <pvPortMalloc+0xa2>
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f1      	bne.n	80047a2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80047be:	4b33      	ldr	r3, [pc, #204]	; (800488c <pvPortMalloc+0x170>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d04a      	beq.n	800485e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2208      	movs	r2, #8
 80047ce:	4413      	add	r3, r2
 80047d0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	1ad2      	subs	r2, r2, r3
 80047e2:	2308      	movs	r3, #8
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d91e      	bls.n	8004828 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4413      	add	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d009      	beq.n	8004810 <pvPortMalloc+0xf4>
 80047fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004800:	f383 8811 	msr	BASEPRI, r3
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	e7fe      	b.n	800480e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	1ad2      	subs	r2, r2, r3
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004822:	69b8      	ldr	r0, [r7, #24]
 8004824:	f000 f8f6 	bl	8004a14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004828:	4b1a      	ldr	r3, [pc, #104]	; (8004894 <pvPortMalloc+0x178>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	4a18      	ldr	r2, [pc, #96]	; (8004894 <pvPortMalloc+0x178>)
 8004834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004836:	4b17      	ldr	r3, [pc, #92]	; (8004894 <pvPortMalloc+0x178>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	4b18      	ldr	r3, [pc, #96]	; (800489c <pvPortMalloc+0x180>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d203      	bcs.n	800484a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004842:	4b14      	ldr	r3, [pc, #80]	; (8004894 <pvPortMalloc+0x178>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a15      	ldr	r2, [pc, #84]	; (800489c <pvPortMalloc+0x180>)
 8004848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	4b10      	ldr	r3, [pc, #64]	; (8004890 <pvPortMalloc+0x174>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	431a      	orrs	r2, r3
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800485e:	f7ff faab 	bl	8003db8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	2b00      	cmp	r3, #0
 800486a:	d009      	beq.n	8004880 <pvPortMalloc+0x164>
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	e7fe      	b.n	800487e <pvPortMalloc+0x162>
	return pvReturn;
 8004880:	69fb      	ldr	r3, [r7, #28]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3728      	adds	r7, #40	; 0x28
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	20001178 	.word	0x20001178
 8004890:	20001184 	.word	0x20001184
 8004894:	2000117c 	.word	0x2000117c
 8004898:	20001170 	.word	0x20001170
 800489c:	20001180 	.word	0x20001180

080048a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d046      	beq.n	8004940 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80048b2:	2308      	movs	r3, #8
 80048b4:	425b      	negs	r3, r3
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4413      	add	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	4b20      	ldr	r3, [pc, #128]	; (8004948 <vPortFree+0xa8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4013      	ands	r3, r2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <vPortFree+0x42>
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e7fe      	b.n	80048e0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d009      	beq.n	80048fe <vPortFree+0x5e>
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	60bb      	str	r3, [r7, #8]
 80048fc:	e7fe      	b.n	80048fc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	4b11      	ldr	r3, [pc, #68]	; (8004948 <vPortFree+0xa8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4013      	ands	r3, r2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d019      	beq.n	8004940 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d115      	bne.n	8004940 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <vPortFree+0xa8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	43db      	mvns	r3, r3
 800491e:	401a      	ands	r2, r3
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004924:	f7ff fa3a 	bl	8003d9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	4b07      	ldr	r3, [pc, #28]	; (800494c <vPortFree+0xac>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4413      	add	r3, r2
 8004932:	4a06      	ldr	r2, [pc, #24]	; (800494c <vPortFree+0xac>)
 8004934:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004936:	6938      	ldr	r0, [r7, #16]
 8004938:	f000 f86c 	bl	8004a14 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800493c:	f7ff fa3c 	bl	8003db8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004940:	bf00      	nop
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	20001184 	.word	0x20001184
 800494c:	2000117c 	.word	0x2000117c

08004950 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004956:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800495a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800495c:	4b27      	ldr	r3, [pc, #156]	; (80049fc <prvHeapInit+0xac>)
 800495e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00c      	beq.n	8004984 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	3307      	adds	r3, #7
 800496e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0307 	bic.w	r3, r3, #7
 8004976:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	4a1f      	ldr	r2, [pc, #124]	; (80049fc <prvHeapInit+0xac>)
 8004980:	4413      	add	r3, r2
 8004982:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004988:	4a1d      	ldr	r2, [pc, #116]	; (8004a00 <prvHeapInit+0xb0>)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800498e:	4b1c      	ldr	r3, [pc, #112]	; (8004a00 <prvHeapInit+0xb0>)
 8004990:	2200      	movs	r2, #0
 8004992:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	4413      	add	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800499c:	2208      	movs	r2, #8
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1a9b      	subs	r3, r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0307 	bic.w	r3, r3, #7
 80049aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4a15      	ldr	r2, [pc, #84]	; (8004a04 <prvHeapInit+0xb4>)
 80049b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80049b2:	4b14      	ldr	r3, [pc, #80]	; (8004a04 <prvHeapInit+0xb4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2200      	movs	r2, #0
 80049b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80049ba:	4b12      	ldr	r3, [pc, #72]	; (8004a04 <prvHeapInit+0xb4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	1ad2      	subs	r2, r2, r3
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80049d0:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <prvHeapInit+0xb4>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	4a0a      	ldr	r2, [pc, #40]	; (8004a08 <prvHeapInit+0xb8>)
 80049de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <prvHeapInit+0xbc>)
 80049e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80049e8:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <prvHeapInit+0xc0>)
 80049ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80049ee:	601a      	str	r2, [r3, #0]
}
 80049f0:	bf00      	nop
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	20000570 	.word	0x20000570
 8004a00:	20001170 	.word	0x20001170
 8004a04:	20001178 	.word	0x20001178
 8004a08:	20001180 	.word	0x20001180
 8004a0c:	2000117c 	.word	0x2000117c
 8004a10:	20001184 	.word	0x20001184

08004a14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a1c:	4b27      	ldr	r3, [pc, #156]	; (8004abc <prvInsertBlockIntoFreeList+0xa8>)
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	e002      	b.n	8004a28 <prvInsertBlockIntoFreeList+0x14>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d8f7      	bhi.n	8004a22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d108      	bne.n	8004a56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	441a      	add	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	441a      	add	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d118      	bne.n	8004a9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	4b14      	ldr	r3, [pc, #80]	; (8004ac0 <prvInsertBlockIntoFreeList+0xac>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d00d      	beq.n	8004a92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	441a      	add	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	e008      	b.n	8004aa4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a92:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <prvInsertBlockIntoFreeList+0xac>)
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	e003      	b.n	8004aa4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d002      	beq.n	8004ab2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ab2:	bf00      	nop
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr
 8004abc:	20001170 	.word	0x20001170
 8004ac0:	20001178 	.word	0x20001178

08004ac4 <Load_Param>:
BP_Status 			Bp_Down;
BP_Status 			Bp_Ok;

/* Private function -----------------------------------------------*/
uint8_t Load_Param()
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
	uint32_t val_param;

	if(ParamExist())
 8004aca:	481a      	ldr	r0, [pc, #104]	; (8004b34 <Load_Param+0x70>)
 8004acc:	f7fe fbea 	bl	80032a4 <FlashManager_ReadInt32>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b19      	ldr	r3, [pc, #100]	; (8004b38 <Load_Param+0x74>)
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d11b      	bne.n	8004b10 <Load_Param+0x4c>
	{
		val_param = 	FlashManager_ReadInt32(PARAM_DMX_PARAM);
 8004ad8:	4818      	ldr	r0, [pc, #96]	; (8004b3c <Load_Param+0x78>)
 8004ada:	f7fe fbe3 	bl	80032a4 <FlashManager_ReadInt32>
 8004ade:	6078      	str	r0, [r7, #4]
		IsInverted = 	(val_param&0xF0000000)>>28;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	0f1b      	lsrs	r3, r3, #28
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	4b16      	ldr	r3, [pc, #88]	; (8004b40 <Load_Param+0x7c>)
 8004ae8:	701a      	strb	r2, [r3, #0]
		Current_Mode = 	(val_param&0x0F000000)>>24;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	0e1b      	lsrs	r3, r3, #24
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	f003 030f 	and.w	r3, r3, #15
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <Load_Param+0x80>)
 8004af8:	701a      	strb	r2, [r3, #0]
		Manu_value = 	(val_param&0x00FF0000)>>16;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	0c1b      	lsrs	r3, r3, #16
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	4b11      	ldr	r3, [pc, #68]	; (8004b48 <Load_Param+0x84>)
 8004b02:	701a      	strb	r2, [r3, #0]
		DMX_Adress = 	(val_param&0x0000FFFF);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <Load_Param+0x88>)
 8004b0a:	801a      	strh	r2, [r3, #0]
		return __TRUE;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e00c      	b.n	8004b2a <Load_Param+0x66>
	}
	else
	{
		Current_Mode = MODE_OFF;
 8004b10:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <Load_Param+0x80>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]
		IsInverted = __FALSE;
 8004b16:	4b0a      	ldr	r3, [pc, #40]	; (8004b40 <Load_Param+0x7c>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	701a      	strb	r2, [r3, #0]
		Manu_value = 100;
 8004b1c:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <Load_Param+0x84>)
 8004b1e:	2264      	movs	r2, #100	; 0x64
 8004b20:	701a      	strb	r2, [r3, #0]
		DMX_Adress = 1;
 8004b22:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <Load_Param+0x88>)
 8004b24:	2201      	movs	r2, #1
 8004b26:	801a      	strh	r2, [r3, #0]
		return __FALSE;
 8004b28:	2300      	movs	r3, #0
	}
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	0800f800 	.word	0x0800f800
 8004b38:	55aa00ff 	.word	0x55aa00ff
 8004b3c:	0800f804 	.word	0x0800f804
 8004b40:	20001860 	.word	0x20001860
 8004b44:	20001894 	.word	0x20001894
 8004b48:	20001868 	.word	0x20001868
 8004b4c:	200018dc 	.word	0x200018dc

08004b50 <Write_Param>:

void Write_Param()
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
	uint32_t data[2];
	data[0] = PARAM_EXIST_CODE;
 8004b56:	4b12      	ldr	r3, [pc, #72]	; (8004ba0 <Write_Param+0x50>)
 8004b58:	603b      	str	r3, [r7, #0]
	data[1] = 0x00;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	607b      	str	r3, [r7, #4]
	data[1] |= (IsInverted<<28);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a10      	ldr	r2, [pc, #64]	; (8004ba4 <Write_Param+0x54>)
 8004b62:	7812      	ldrb	r2, [r2, #0]
 8004b64:	0712      	lsls	r2, r2, #28
 8004b66:	4313      	orrs	r3, r2
 8004b68:	607b      	str	r3, [r7, #4]
	data[1] |= (Current_Mode<<24);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a0e      	ldr	r2, [pc, #56]	; (8004ba8 <Write_Param+0x58>)
 8004b6e:	7812      	ldrb	r2, [r2, #0]
 8004b70:	0612      	lsls	r2, r2, #24
 8004b72:	4313      	orrs	r3, r2
 8004b74:	607b      	str	r3, [r7, #4]
	data[1] |= (Manu_value<<16);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a0c      	ldr	r2, [pc, #48]	; (8004bac <Write_Param+0x5c>)
 8004b7a:	7812      	ldrb	r2, [r2, #0]
 8004b7c:	0412      	lsls	r2, r2, #16
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	607b      	str	r3, [r7, #4]
	data[1] |= (DMX_Adress);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a0a      	ldr	r2, [pc, #40]	; (8004bb0 <Write_Param+0x60>)
 8004b86:	8812      	ldrh	r2, [r2, #0]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	607b      	str	r3, [r7, #4]

	FlashManager_WriteMulti(PARAM_EXIST_ADDRESS,2,data);
 8004b8c:	463b      	mov	r3, r7
 8004b8e:	461a      	mov	r2, r3
 8004b90:	2102      	movs	r1, #2
 8004b92:	4808      	ldr	r0, [pc, #32]	; (8004bb4 <Write_Param+0x64>)
 8004b94:	f7fe fb10 	bl	80031b8 <FlashManager_WriteMulti>

//	Display_Cursor=0;
}
 8004b98:	bf00      	nop
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	55aa00ff 	.word	0x55aa00ff
 8004ba4:	20001860 	.word	0x20001860
 8004ba8:	20001894 	.word	0x20001894
 8004bac:	20001868 	.word	0x20001868
 8004bb0:	200018dc 	.word	0x200018dc
 8004bb4:	0800f800 	.word	0x0800f800

08004bb8 <Manage_Button>:
    }
	SSD1306_UpdateScreen(); //display
}

void Manage_Button()
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
	static uint32_t time_BpUp=0;
	static uint32_t time_BpDown=0;
	static uint32_t time_BpOk=0;

	//UP
	if(!HAL_GPIO_ReadPin(T1_GPIO_Port, T1_Pin))
 8004bbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004bc0:	4849      	ldr	r0, [pc, #292]	; (8004ce8 <Manage_Button+0x130>)
 8004bc2:	f7fc fcc1 	bl	8001548 <HAL_GPIO_ReadPin>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d125      	bne.n	8004c18 <Manage_Button+0x60>
	{
		if(Bp_Up==BP_OFF)
 8004bcc:	4b47      	ldr	r3, [pc, #284]	; (8004cec <Manage_Button+0x134>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d108      	bne.n	8004be6 <Manage_Button+0x2e>
		{
			Bp_Up=BP_CLICK;
 8004bd4:	4b45      	ldr	r3, [pc, #276]	; (8004cec <Manage_Button+0x134>)
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	701a      	strb	r2, [r3, #0]
			time_BpUp = HAL_GetTick();
 8004bda:	f7fb fdc3 	bl	8000764 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	4b43      	ldr	r3, [pc, #268]	; (8004cf0 <Manage_Button+0x138>)
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	e01b      	b.n	8004c1e <Manage_Button+0x66>
		}
		else if((HAL_GetTick() > time_BpUp+TIME_LONG_BP) && Bp_Up==BP_IDLE)
 8004be6:	f7fb fdbd 	bl	8000764 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	4b40      	ldr	r3, [pc, #256]	; (8004cf0 <Manage_Button+0x138>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3332      	adds	r3, #50	; 0x32
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d90c      	bls.n	8004c10 <Manage_Button+0x58>
 8004bf6:	4b3d      	ldr	r3, [pc, #244]	; (8004cec <Manage_Button+0x134>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d108      	bne.n	8004c10 <Manage_Button+0x58>
		{
			time_BpUp = HAL_GetTick();
 8004bfe:	f7fb fdb1 	bl	8000764 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	4b3a      	ldr	r3, [pc, #232]	; (8004cf0 <Manage_Button+0x138>)
 8004c06:	601a      	str	r2, [r3, #0]
			Bp_Up=BP_1s;
 8004c08:	4b38      	ldr	r3, [pc, #224]	; (8004cec <Manage_Button+0x134>)
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	e006      	b.n	8004c1e <Manage_Button+0x66>
		}
		else
			Bp_Up = BP_IDLE;
 8004c10:	4b36      	ldr	r3, [pc, #216]	; (8004cec <Manage_Button+0x134>)
 8004c12:	2203      	movs	r2, #3
 8004c14:	701a      	strb	r2, [r3, #0]
 8004c16:	e002      	b.n	8004c1e <Manage_Button+0x66>
	}
	else
		Bp_Up=BP_OFF;
 8004c18:	4b34      	ldr	r3, [pc, #208]	; (8004cec <Manage_Button+0x134>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	701a      	strb	r2, [r3, #0]

	//DOWN
	if(!HAL_GPIO_ReadPin(T3_GPIO_Port, T3_Pin))
 8004c1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c22:	4834      	ldr	r0, [pc, #208]	; (8004cf4 <Manage_Button+0x13c>)
 8004c24:	f7fc fc90 	bl	8001548 <HAL_GPIO_ReadPin>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d125      	bne.n	8004c7a <Manage_Button+0xc2>
	{
		if(Bp_Down==BP_OFF)
 8004c2e:	4b32      	ldr	r3, [pc, #200]	; (8004cf8 <Manage_Button+0x140>)
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d108      	bne.n	8004c48 <Manage_Button+0x90>
		{
			Bp_Down=BP_CLICK;
 8004c36:	4b30      	ldr	r3, [pc, #192]	; (8004cf8 <Manage_Button+0x140>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	701a      	strb	r2, [r3, #0]
			time_BpDown = HAL_GetTick();
 8004c3c:	f7fb fd92 	bl	8000764 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	4b2e      	ldr	r3, [pc, #184]	; (8004cfc <Manage_Button+0x144>)
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	e01b      	b.n	8004c80 <Manage_Button+0xc8>
		}
		else if((HAL_GetTick() > time_BpDown+TIME_LONG_BP) && Bp_Down==BP_IDLE)
 8004c48:	f7fb fd8c 	bl	8000764 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	4b2b      	ldr	r3, [pc, #172]	; (8004cfc <Manage_Button+0x144>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3332      	adds	r3, #50	; 0x32
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d90c      	bls.n	8004c72 <Manage_Button+0xba>
 8004c58:	4b27      	ldr	r3, [pc, #156]	; (8004cf8 <Manage_Button+0x140>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b03      	cmp	r3, #3
 8004c5e:	d108      	bne.n	8004c72 <Manage_Button+0xba>
		{
			time_BpDown = HAL_GetTick();
 8004c60:	f7fb fd80 	bl	8000764 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	4b25      	ldr	r3, [pc, #148]	; (8004cfc <Manage_Button+0x144>)
 8004c68:	601a      	str	r2, [r3, #0]
			Bp_Down=BP_1s;
 8004c6a:	4b23      	ldr	r3, [pc, #140]	; (8004cf8 <Manage_Button+0x140>)
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	701a      	strb	r2, [r3, #0]
 8004c70:	e006      	b.n	8004c80 <Manage_Button+0xc8>
		}
		else
			Bp_Down = BP_IDLE;
 8004c72:	4b21      	ldr	r3, [pc, #132]	; (8004cf8 <Manage_Button+0x140>)
 8004c74:	2203      	movs	r2, #3
 8004c76:	701a      	strb	r2, [r3, #0]
 8004c78:	e002      	b.n	8004c80 <Manage_Button+0xc8>
	}
	else
		Bp_Down=BP_OFF;
 8004c7a:	4b1f      	ldr	r3, [pc, #124]	; (8004cf8 <Manage_Button+0x140>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]

	//OK
	if(!HAL_GPIO_ReadPin(T2_GPIO_Port, T2_Pin))
 8004c80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c84:	481b      	ldr	r0, [pc, #108]	; (8004cf4 <Manage_Button+0x13c>)
 8004c86:	f7fc fc5f 	bl	8001548 <HAL_GPIO_ReadPin>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d125      	bne.n	8004cdc <Manage_Button+0x124>
	{
		if(Bp_Ok==BP_OFF)
 8004c90:	4b1b      	ldr	r3, [pc, #108]	; (8004d00 <Manage_Button+0x148>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d108      	bne.n	8004caa <Manage_Button+0xf2>
		{
			Bp_Ok=BP_CLICK;
 8004c98:	4b19      	ldr	r3, [pc, #100]	; (8004d00 <Manage_Button+0x148>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	701a      	strb	r2, [r3, #0]
			time_BpOk = HAL_GetTick();
 8004c9e:	f7fb fd61 	bl	8000764 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	4b17      	ldr	r3, [pc, #92]	; (8004d04 <Manage_Button+0x14c>)
 8004ca6:	601a      	str	r2, [r3, #0]
		else
			Bp_Ok = BP_IDLE;
	}
	else
		Bp_Ok=BP_OFF;
}
 8004ca8:	e01b      	b.n	8004ce2 <Manage_Button+0x12a>
		else if((HAL_GetTick()>time_BpOk+TIME_LONG_BP) && Bp_Ok==BP_IDLE)
 8004caa:	f7fb fd5b 	bl	8000764 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	4b14      	ldr	r3, [pc, #80]	; (8004d04 <Manage_Button+0x14c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3332      	adds	r3, #50	; 0x32
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d90c      	bls.n	8004cd4 <Manage_Button+0x11c>
 8004cba:	4b11      	ldr	r3, [pc, #68]	; (8004d00 <Manage_Button+0x148>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d108      	bne.n	8004cd4 <Manage_Button+0x11c>
			time_BpOk = HAL_GetTick();
 8004cc2:	f7fb fd4f 	bl	8000764 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	4b0e      	ldr	r3, [pc, #56]	; (8004d04 <Manage_Button+0x14c>)
 8004cca:	601a      	str	r2, [r3, #0]
			Bp_Ok=BP_1s;
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <Manage_Button+0x148>)
 8004cce:	2202      	movs	r2, #2
 8004cd0:	701a      	strb	r2, [r3, #0]
}
 8004cd2:	e006      	b.n	8004ce2 <Manage_Button+0x12a>
			Bp_Ok = BP_IDLE;
 8004cd4:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <Manage_Button+0x148>)
 8004cd6:	2203      	movs	r2, #3
 8004cd8:	701a      	strb	r2, [r3, #0]
}
 8004cda:	e002      	b.n	8004ce2 <Manage_Button+0x12a>
		Bp_Ok=BP_OFF;
 8004cdc:	4b08      	ldr	r3, [pc, #32]	; (8004d00 <Manage_Button+0x148>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	701a      	strb	r2, [r3, #0]
}
 8004ce2:	bf00      	nop
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40011000 	.word	0x40011000
 8004cec:	200018d4 	.word	0x200018d4
 8004cf0:	20001188 	.word	0x20001188
 8004cf4:	40010c00 	.word	0x40010c00
 8004cf8:	20001878 	.word	0x20001878
 8004cfc:	2000118c 	.word	0x2000118c
 8004d00:	200018b0 	.word	0x200018b0
 8004d04:	20001190 	.word	0x20001190

08004d08 <AppLEDTask>:

void AppLEDTask(void const * argument)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
	static uint8_t A;
	for(;;)
	{
		osDelay(1000);//(TASK_DELAY_LED);
 8004d10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d14:	f7fe fd60 	bl	80037d8 <osDelay>

		A++;
 8004d18:	4ba0      	ldr	r3, [pc, #640]	; (8004f9c <AppLEDTask+0x294>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	4b9e      	ldr	r3, [pc, #632]	; (8004f9c <AppLEDTask+0x294>)
 8004d22:	701a      	strb	r2, [r3, #0]
		if(A>=10)
 8004d24:	4b9d      	ldr	r3, [pc, #628]	; (8004f9c <AppLEDTask+0x294>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b09      	cmp	r3, #9
 8004d2a:	d902      	bls.n	8004d32 <AppLEDTask+0x2a>
			A=0;
 8004d2c:	4b9b      	ldr	r3, [pc, #620]	; (8004f9c <AppLEDTask+0x294>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	701a      	strb	r2, [r3, #0]
				DMX_signal_OK = __TRUE;
			}
			PWM_SetDuty(LED1_pwmtimer,LED1_PWMchannel,(uint32_t)DMX_values[0]);
		}*/

		switch(A)
 8004d32:	4b9a      	ldr	r3, [pc, #616]	; (8004f9c <AppLEDTask+0x294>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b09      	cmp	r3, #9
 8004d38:	d8ea      	bhi.n	8004d10 <AppLEDTask+0x8>
 8004d3a:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <AppLEDTask+0x38>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004d69 	.word	0x08004d69
 8004d44:	08004e25 	.word	0x08004e25
 8004d48:	08004ee1 	.word	0x08004ee1
 8004d4c:	08005001 	.word	0x08005001
 8004d50:	080050bd 	.word	0x080050bd
 8004d54:	08005179 	.word	0x08005179
 8004d58:	08005295 	.word	0x08005295
 8004d5c:	08005351 	.word	0x08005351
 8004d60:	0800540d 	.word	0x0800540d
 8004d64:	08005529 	.word	0x08005529
		{
			case 0:
				SSD1306_Clear();
 8004d68:	f7fb fc07 	bl	800057a <SSD1306_Clear>
				SSD1306_GotoXY (40,0);
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	2028      	movs	r0, #40	; 0x28
 8004d70:	f7fb fb48 	bl	8000404 <SSD1306_GotoXY>
				    		SSD1306_Puts ("1", &Font_16x26, 1);
 8004d74:	2201      	movs	r2, #1
 8004d76:	498a      	ldr	r1, [pc, #552]	; (8004fa0 <AppLEDTask+0x298>)
 8004d78:	488a      	ldr	r0, [pc, #552]	; (8004fa4 <AppLEDTask+0x29c>)
 8004d7a:	f7fb fbd9 	bl	8000530 <SSD1306_Puts>
				    		SSD1306_UpdateScreen(); //display
 8004d7e:	f7fb fa9d 	bl	80002bc <SSD1306_UpdateScreen>
					PWM_SetDuty(LED1_pwmtimer,LED1_PWMchannel,10);		//PWM Off
 8004d82:	4b89      	ldr	r3, [pc, #548]	; (8004fa8 <AppLEDTask+0x2a0>)
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	4b89      	ldr	r3, [pc, #548]	; (8004fac <AppLEDTask+0x2a4>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	220a      	movs	r2, #10
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	f7fb fc69 	bl	8000664 <PWM_SetDuty>
					PWM_SetDuty(LED2_pwmtimer,LED2_PWMchannel,0);		//PWM Off
 8004d92:	4b87      	ldr	r3, [pc, #540]	; (8004fb0 <AppLEDTask+0x2a8>)
 8004d94:	6818      	ldr	r0, [r3, #0]
 8004d96:	4b87      	ldr	r3, [pc, #540]	; (8004fb4 <AppLEDTask+0x2ac>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	f7fb fc61 	bl	8000664 <PWM_SetDuty>
					PWM_SetDuty(LED3_pwmtimer,LED3_PWMchannel,0);		//PWM Off
 8004da2:	4b85      	ldr	r3, [pc, #532]	; (8004fb8 <AppLEDTask+0x2b0>)
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	4b85      	ldr	r3, [pc, #532]	; (8004fbc <AppLEDTask+0x2b4>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2200      	movs	r2, #0
 8004dac:	4619      	mov	r1, r3
 8004dae:	f7fb fc59 	bl	8000664 <PWM_SetDuty>
					PWM_SetDuty(LED4_pwmtimer,LED4_PWMchannel,0);		//PWM Off
 8004db2:	4b83      	ldr	r3, [pc, #524]	; (8004fc0 <AppLEDTask+0x2b8>)
 8004db4:	6818      	ldr	r0, [r3, #0]
 8004db6:	4b83      	ldr	r3, [pc, #524]	; (8004fc4 <AppLEDTask+0x2bc>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	f7fb fc51 	bl	8000664 <PWM_SetDuty>
					PWM_SetDuty(LED5_pwmtimer,LED5_PWMchannel,0);		//PWM Off
 8004dc2:	4b81      	ldr	r3, [pc, #516]	; (8004fc8 <AppLEDTask+0x2c0>)
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	4b81      	ldr	r3, [pc, #516]	; (8004fcc <AppLEDTask+0x2c4>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	4619      	mov	r1, r3
 8004dce:	f7fb fc49 	bl	8000664 <PWM_SetDuty>
					PWM_SetDuty(LED6_pwmtimer,LED6_PWMchannel,0);		//PWM Off
 8004dd2:	4b7f      	ldr	r3, [pc, #508]	; (8004fd0 <AppLEDTask+0x2c8>)
 8004dd4:	6818      	ldr	r0, [r3, #0]
 8004dd6:	4b7f      	ldr	r3, [pc, #508]	; (8004fd4 <AppLEDTask+0x2cc>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	4619      	mov	r1, r3
 8004dde:	f7fb fc41 	bl	8000664 <PWM_SetDuty>
					PWM_SetDuty(LED7_pwmtimer,LED7_PWMchannel,0);		//PWM Off
 8004de2:	4b7d      	ldr	r3, [pc, #500]	; (8004fd8 <AppLEDTask+0x2d0>)
 8004de4:	6818      	ldr	r0, [r3, #0]
 8004de6:	4b7d      	ldr	r3, [pc, #500]	; (8004fdc <AppLEDTask+0x2d4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2200      	movs	r2, #0
 8004dec:	4619      	mov	r1, r3
 8004dee:	f7fb fc39 	bl	8000664 <PWM_SetDuty>
					PWM_SetDuty(LED8_pwmtimer,LED8_PWMchannel,0);		//PWM Off
 8004df2:	4b7b      	ldr	r3, [pc, #492]	; (8004fe0 <AppLEDTask+0x2d8>)
 8004df4:	6818      	ldr	r0, [r3, #0]
 8004df6:	4b7b      	ldr	r3, [pc, #492]	; (8004fe4 <AppLEDTask+0x2dc>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	f7fb fc31 	bl	8000664 <PWM_SetDuty>
					PWM_SetDuty(LED9_pwmtimer,LED9_PWMchannel,0);		//PWM Off
 8004e02:	4b79      	ldr	r3, [pc, #484]	; (8004fe8 <AppLEDTask+0x2e0>)
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	4b79      	ldr	r3, [pc, #484]	; (8004fec <AppLEDTask+0x2e4>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	f7fb fc29 	bl	8000664 <PWM_SetDuty>
					PWM_SetDuty(LED10_pwmtimer,LED10_PWMchannel,0);		//PWM Off
 8004e12:	4b77      	ldr	r3, [pc, #476]	; (8004ff0 <AppLEDTask+0x2e8>)
 8004e14:	6818      	ldr	r0, [r3, #0]
 8004e16:	4b77      	ldr	r3, [pc, #476]	; (8004ff4 <AppLEDTask+0x2ec>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	f7fb fc21 	bl	8000664 <PWM_SetDuty>
					break;
 8004e22:	e3df      	b.n	80055e4 <AppLEDTask+0x8dc>
			case 1:
				SSD1306_Clear();
 8004e24:	f7fb fba9 	bl	800057a <SSD1306_Clear>
								SSD1306_GotoXY (40,0);
 8004e28:	2100      	movs	r1, #0
 8004e2a:	2028      	movs	r0, #40	; 0x28
 8004e2c:	f7fb faea 	bl	8000404 <SSD1306_GotoXY>
								    		SSD1306_Puts ("2", &Font_16x26, 1);
 8004e30:	2201      	movs	r2, #1
 8004e32:	495b      	ldr	r1, [pc, #364]	; (8004fa0 <AppLEDTask+0x298>)
 8004e34:	4870      	ldr	r0, [pc, #448]	; (8004ff8 <AppLEDTask+0x2f0>)
 8004e36:	f7fb fb7b 	bl	8000530 <SSD1306_Puts>
								    		SSD1306_UpdateScreen(); //display
 8004e3a:	f7fb fa3f 	bl	80002bc <SSD1306_UpdateScreen>
								    		PWM_SetDuty(LED1_pwmtimer,LED1_PWMchannel,0);		//PWM Off
 8004e3e:	4b5a      	ldr	r3, [pc, #360]	; (8004fa8 <AppLEDTask+0x2a0>)
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	4b5a      	ldr	r3, [pc, #360]	; (8004fac <AppLEDTask+0x2a4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2200      	movs	r2, #0
 8004e48:	4619      	mov	r1, r3
 8004e4a:	f7fb fc0b 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED2_pwmtimer,LED2_PWMchannel,10);		//PWM Off
 8004e4e:	4b58      	ldr	r3, [pc, #352]	; (8004fb0 <AppLEDTask+0x2a8>)
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	4b58      	ldr	r3, [pc, #352]	; (8004fb4 <AppLEDTask+0x2ac>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	220a      	movs	r2, #10
 8004e58:	4619      	mov	r1, r3
 8004e5a:	f7fb fc03 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED3_pwmtimer,LED3_PWMchannel,0);		//PWM Off
 8004e5e:	4b56      	ldr	r3, [pc, #344]	; (8004fb8 <AppLEDTask+0x2b0>)
 8004e60:	6818      	ldr	r0, [r3, #0]
 8004e62:	4b56      	ldr	r3, [pc, #344]	; (8004fbc <AppLEDTask+0x2b4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2200      	movs	r2, #0
 8004e68:	4619      	mov	r1, r3
 8004e6a:	f7fb fbfb 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED4_pwmtimer,LED4_PWMchannel,0);		//PWM Off
 8004e6e:	4b54      	ldr	r3, [pc, #336]	; (8004fc0 <AppLEDTask+0x2b8>)
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	4b54      	ldr	r3, [pc, #336]	; (8004fc4 <AppLEDTask+0x2bc>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2200      	movs	r2, #0
 8004e78:	4619      	mov	r1, r3
 8004e7a:	f7fb fbf3 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED5_pwmtimer,LED5_PWMchannel,0);		//PWM Off
 8004e7e:	4b52      	ldr	r3, [pc, #328]	; (8004fc8 <AppLEDTask+0x2c0>)
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	4b52      	ldr	r3, [pc, #328]	; (8004fcc <AppLEDTask+0x2c4>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2200      	movs	r2, #0
 8004e88:	4619      	mov	r1, r3
 8004e8a:	f7fb fbeb 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED6_pwmtimer,LED6_PWMchannel,0);		//PWM Off
 8004e8e:	4b50      	ldr	r3, [pc, #320]	; (8004fd0 <AppLEDTask+0x2c8>)
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	4b50      	ldr	r3, [pc, #320]	; (8004fd4 <AppLEDTask+0x2cc>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2200      	movs	r2, #0
 8004e98:	4619      	mov	r1, r3
 8004e9a:	f7fb fbe3 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED7_pwmtimer,LED7_PWMchannel,0);		//PWM Off
 8004e9e:	4b4e      	ldr	r3, [pc, #312]	; (8004fd8 <AppLEDTask+0x2d0>)
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	4b4e      	ldr	r3, [pc, #312]	; (8004fdc <AppLEDTask+0x2d4>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	f7fb fbdb 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED8_pwmtimer,LED8_PWMchannel,0);		//PWM Off
 8004eae:	4b4c      	ldr	r3, [pc, #304]	; (8004fe0 <AppLEDTask+0x2d8>)
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	4b4c      	ldr	r3, [pc, #304]	; (8004fe4 <AppLEDTask+0x2dc>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	4619      	mov	r1, r3
 8004eba:	f7fb fbd3 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED9_pwmtimer,LED9_PWMchannel,0);		//PWM Off
 8004ebe:	4b4a      	ldr	r3, [pc, #296]	; (8004fe8 <AppLEDTask+0x2e0>)
 8004ec0:	6818      	ldr	r0, [r3, #0]
 8004ec2:	4b4a      	ldr	r3, [pc, #296]	; (8004fec <AppLEDTask+0x2e4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	4619      	mov	r1, r3
 8004eca:	f7fb fbcb 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED10_pwmtimer,LED10_PWMchannel,0);		//PWM Off
 8004ece:	4b48      	ldr	r3, [pc, #288]	; (8004ff0 <AppLEDTask+0x2e8>)
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	4b48      	ldr	r3, [pc, #288]	; (8004ff4 <AppLEDTask+0x2ec>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	4619      	mov	r1, r3
 8004eda:	f7fb fbc3 	bl	8000664 <PWM_SetDuty>
					break;
 8004ede:	e381      	b.n	80055e4 <AppLEDTask+0x8dc>
			case 2:
				SSD1306_Clear();
 8004ee0:	f7fb fb4b 	bl	800057a <SSD1306_Clear>
								SSD1306_GotoXY (40,0);
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	2028      	movs	r0, #40	; 0x28
 8004ee8:	f7fb fa8c 	bl	8000404 <SSD1306_GotoXY>
								    		SSD1306_Puts ("3", &Font_16x26, 1);
 8004eec:	2201      	movs	r2, #1
 8004eee:	492c      	ldr	r1, [pc, #176]	; (8004fa0 <AppLEDTask+0x298>)
 8004ef0:	4842      	ldr	r0, [pc, #264]	; (8004ffc <AppLEDTask+0x2f4>)
 8004ef2:	f7fb fb1d 	bl	8000530 <SSD1306_Puts>
								    		SSD1306_UpdateScreen(); //display
 8004ef6:	f7fb f9e1 	bl	80002bc <SSD1306_UpdateScreen>
								    		PWM_SetDuty(LED1_pwmtimer,LED1_PWMchannel,0);		//PWM Off
 8004efa:	4b2b      	ldr	r3, [pc, #172]	; (8004fa8 <AppLEDTask+0x2a0>)
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	4b2b      	ldr	r3, [pc, #172]	; (8004fac <AppLEDTask+0x2a4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2200      	movs	r2, #0
 8004f04:	4619      	mov	r1, r3
 8004f06:	f7fb fbad 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED2_pwmtimer,LED2_PWMchannel,0);		//PWM Off
 8004f0a:	4b29      	ldr	r3, [pc, #164]	; (8004fb0 <AppLEDTask+0x2a8>)
 8004f0c:	6818      	ldr	r0, [r3, #0]
 8004f0e:	4b29      	ldr	r3, [pc, #164]	; (8004fb4 <AppLEDTask+0x2ac>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2200      	movs	r2, #0
 8004f14:	4619      	mov	r1, r3
 8004f16:	f7fb fba5 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED3_pwmtimer,LED3_PWMchannel,10);		//PWM Off
 8004f1a:	4b27      	ldr	r3, [pc, #156]	; (8004fb8 <AppLEDTask+0x2b0>)
 8004f1c:	6818      	ldr	r0, [r3, #0]
 8004f1e:	4b27      	ldr	r3, [pc, #156]	; (8004fbc <AppLEDTask+0x2b4>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	220a      	movs	r2, #10
 8004f24:	4619      	mov	r1, r3
 8004f26:	f7fb fb9d 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED4_pwmtimer,LED4_PWMchannel,0);		//PWM Off
 8004f2a:	4b25      	ldr	r3, [pc, #148]	; (8004fc0 <AppLEDTask+0x2b8>)
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	4b25      	ldr	r3, [pc, #148]	; (8004fc4 <AppLEDTask+0x2bc>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2200      	movs	r2, #0
 8004f34:	4619      	mov	r1, r3
 8004f36:	f7fb fb95 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED5_pwmtimer,LED5_PWMchannel,0);		//PWM Off
 8004f3a:	4b23      	ldr	r3, [pc, #140]	; (8004fc8 <AppLEDTask+0x2c0>)
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	4b23      	ldr	r3, [pc, #140]	; (8004fcc <AppLEDTask+0x2c4>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2200      	movs	r2, #0
 8004f44:	4619      	mov	r1, r3
 8004f46:	f7fb fb8d 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED6_pwmtimer,LED6_PWMchannel,0);		//PWM Off
 8004f4a:	4b21      	ldr	r3, [pc, #132]	; (8004fd0 <AppLEDTask+0x2c8>)
 8004f4c:	6818      	ldr	r0, [r3, #0]
 8004f4e:	4b21      	ldr	r3, [pc, #132]	; (8004fd4 <AppLEDTask+0x2cc>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2200      	movs	r2, #0
 8004f54:	4619      	mov	r1, r3
 8004f56:	f7fb fb85 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED7_pwmtimer,LED7_PWMchannel,0);		//PWM Off
 8004f5a:	4b1f      	ldr	r3, [pc, #124]	; (8004fd8 <AppLEDTask+0x2d0>)
 8004f5c:	6818      	ldr	r0, [r3, #0]
 8004f5e:	4b1f      	ldr	r3, [pc, #124]	; (8004fdc <AppLEDTask+0x2d4>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2200      	movs	r2, #0
 8004f64:	4619      	mov	r1, r3
 8004f66:	f7fb fb7d 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED8_pwmtimer,LED8_PWMchannel,0);		//PWM Off
 8004f6a:	4b1d      	ldr	r3, [pc, #116]	; (8004fe0 <AppLEDTask+0x2d8>)
 8004f6c:	6818      	ldr	r0, [r3, #0]
 8004f6e:	4b1d      	ldr	r3, [pc, #116]	; (8004fe4 <AppLEDTask+0x2dc>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2200      	movs	r2, #0
 8004f74:	4619      	mov	r1, r3
 8004f76:	f7fb fb75 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED9_pwmtimer,LED9_PWMchannel,0);		//PWM Off
 8004f7a:	4b1b      	ldr	r3, [pc, #108]	; (8004fe8 <AppLEDTask+0x2e0>)
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	4b1b      	ldr	r3, [pc, #108]	; (8004fec <AppLEDTask+0x2e4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2200      	movs	r2, #0
 8004f84:	4619      	mov	r1, r3
 8004f86:	f7fb fb6d 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED10_pwmtimer,LED10_PWMchannel,0);		//PWM Off
 8004f8a:	4b19      	ldr	r3, [pc, #100]	; (8004ff0 <AppLEDTask+0x2e8>)
 8004f8c:	6818      	ldr	r0, [r3, #0]
 8004f8e:	4b19      	ldr	r3, [pc, #100]	; (8004ff4 <AppLEDTask+0x2ec>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2200      	movs	r2, #0
 8004f94:	4619      	mov	r1, r3
 8004f96:	f7fb fb65 	bl	8000664 <PWM_SetDuty>
					break;
 8004f9a:	e323      	b.n	80055e4 <AppLEDTask+0x8dc>
 8004f9c:	20001194 	.word	0x20001194
 8004fa0:	20000000 	.word	0x20000000
 8004fa4:	08006b60 	.word	0x08006b60
 8004fa8:	2000188c 	.word	0x2000188c
 8004fac:	20001864 	.word	0x20001864
 8004fb0:	200018b8 	.word	0x200018b8
 8004fb4:	20001874 	.word	0x20001874
 8004fb8:	2000187c 	.word	0x2000187c
 8004fbc:	20001898 	.word	0x20001898
 8004fc0:	200018a8 	.word	0x200018a8
 8004fc4:	200018bc 	.word	0x200018bc
 8004fc8:	20001858 	.word	0x20001858
 8004fcc:	200018d8 	.word	0x200018d8
 8004fd0:	20001890 	.word	0x20001890
 8004fd4:	20001880 	.word	0x20001880
 8004fd8:	2000189c 	.word	0x2000189c
 8004fdc:	200018a0 	.word	0x200018a0
 8004fe0:	200018e0 	.word	0x200018e0
 8004fe4:	200018ac 	.word	0x200018ac
 8004fe8:	200018b4 	.word	0x200018b4
 8004fec:	2000185c 	.word	0x2000185c
 8004ff0:	2000186c 	.word	0x2000186c
 8004ff4:	200018a4 	.word	0x200018a4
 8004ff8:	08006b64 	.word	0x08006b64
 8004ffc:	08006b68 	.word	0x08006b68
			case 3:
				SSD1306_Clear();
 8005000:	f7fb fabb 	bl	800057a <SSD1306_Clear>
								SSD1306_GotoXY (40,0);
 8005004:	2100      	movs	r1, #0
 8005006:	2028      	movs	r0, #40	; 0x28
 8005008:	f7fb f9fc 	bl	8000404 <SSD1306_GotoXY>
								    		SSD1306_Puts ("4", &Font_16x26, 1);
 800500c:	2201      	movs	r2, #1
 800500e:	4989      	ldr	r1, [pc, #548]	; (8005234 <AppLEDTask+0x52c>)
 8005010:	4889      	ldr	r0, [pc, #548]	; (8005238 <AppLEDTask+0x530>)
 8005012:	f7fb fa8d 	bl	8000530 <SSD1306_Puts>
								    		SSD1306_UpdateScreen(); //display
 8005016:	f7fb f951 	bl	80002bc <SSD1306_UpdateScreen>
								    		PWM_SetDuty(LED1_pwmtimer,LED1_PWMchannel,0);		//PWM Off
 800501a:	4b88      	ldr	r3, [pc, #544]	; (800523c <AppLEDTask+0x534>)
 800501c:	6818      	ldr	r0, [r3, #0]
 800501e:	4b88      	ldr	r3, [pc, #544]	; (8005240 <AppLEDTask+0x538>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2200      	movs	r2, #0
 8005024:	4619      	mov	r1, r3
 8005026:	f7fb fb1d 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED2_pwmtimer,LED2_PWMchannel,0);		//PWM Off
 800502a:	4b86      	ldr	r3, [pc, #536]	; (8005244 <AppLEDTask+0x53c>)
 800502c:	6818      	ldr	r0, [r3, #0]
 800502e:	4b86      	ldr	r3, [pc, #536]	; (8005248 <AppLEDTask+0x540>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2200      	movs	r2, #0
 8005034:	4619      	mov	r1, r3
 8005036:	f7fb fb15 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED3_pwmtimer,LED3_PWMchannel,0);		//PWM Off
 800503a:	4b84      	ldr	r3, [pc, #528]	; (800524c <AppLEDTask+0x544>)
 800503c:	6818      	ldr	r0, [r3, #0]
 800503e:	4b84      	ldr	r3, [pc, #528]	; (8005250 <AppLEDTask+0x548>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2200      	movs	r2, #0
 8005044:	4619      	mov	r1, r3
 8005046:	f7fb fb0d 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED4_pwmtimer,LED4_PWMchannel,10);		//PWM Off
 800504a:	4b82      	ldr	r3, [pc, #520]	; (8005254 <AppLEDTask+0x54c>)
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	4b82      	ldr	r3, [pc, #520]	; (8005258 <AppLEDTask+0x550>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	220a      	movs	r2, #10
 8005054:	4619      	mov	r1, r3
 8005056:	f7fb fb05 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED5_pwmtimer,LED5_PWMchannel,0);		//PWM Off
 800505a:	4b80      	ldr	r3, [pc, #512]	; (800525c <AppLEDTask+0x554>)
 800505c:	6818      	ldr	r0, [r3, #0]
 800505e:	4b80      	ldr	r3, [pc, #512]	; (8005260 <AppLEDTask+0x558>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2200      	movs	r2, #0
 8005064:	4619      	mov	r1, r3
 8005066:	f7fb fafd 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED6_pwmtimer,LED6_PWMchannel,0);		//PWM Off
 800506a:	4b7e      	ldr	r3, [pc, #504]	; (8005264 <AppLEDTask+0x55c>)
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	4b7e      	ldr	r3, [pc, #504]	; (8005268 <AppLEDTask+0x560>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2200      	movs	r2, #0
 8005074:	4619      	mov	r1, r3
 8005076:	f7fb faf5 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED7_pwmtimer,LED7_PWMchannel,0);		//PWM Off
 800507a:	4b7c      	ldr	r3, [pc, #496]	; (800526c <AppLEDTask+0x564>)
 800507c:	6818      	ldr	r0, [r3, #0]
 800507e:	4b7c      	ldr	r3, [pc, #496]	; (8005270 <AppLEDTask+0x568>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2200      	movs	r2, #0
 8005084:	4619      	mov	r1, r3
 8005086:	f7fb faed 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED8_pwmtimer,LED8_PWMchannel,0);		//PWM Off
 800508a:	4b7a      	ldr	r3, [pc, #488]	; (8005274 <AppLEDTask+0x56c>)
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	4b7a      	ldr	r3, [pc, #488]	; (8005278 <AppLEDTask+0x570>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2200      	movs	r2, #0
 8005094:	4619      	mov	r1, r3
 8005096:	f7fb fae5 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED9_pwmtimer,LED9_PWMchannel,0);		//PWM Off
 800509a:	4b78      	ldr	r3, [pc, #480]	; (800527c <AppLEDTask+0x574>)
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	4b78      	ldr	r3, [pc, #480]	; (8005280 <AppLEDTask+0x578>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2200      	movs	r2, #0
 80050a4:	4619      	mov	r1, r3
 80050a6:	f7fb fadd 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED10_pwmtimer,LED10_PWMchannel,0);		//PWM Off
 80050aa:	4b76      	ldr	r3, [pc, #472]	; (8005284 <AppLEDTask+0x57c>)
 80050ac:	6818      	ldr	r0, [r3, #0]
 80050ae:	4b76      	ldr	r3, [pc, #472]	; (8005288 <AppLEDTask+0x580>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2200      	movs	r2, #0
 80050b4:	4619      	mov	r1, r3
 80050b6:	f7fb fad5 	bl	8000664 <PWM_SetDuty>
					break;
 80050ba:	e293      	b.n	80055e4 <AppLEDTask+0x8dc>
			case 4:
				SSD1306_Clear();
 80050bc:	f7fb fa5d 	bl	800057a <SSD1306_Clear>
								SSD1306_GotoXY (40,0);
 80050c0:	2100      	movs	r1, #0
 80050c2:	2028      	movs	r0, #40	; 0x28
 80050c4:	f7fb f99e 	bl	8000404 <SSD1306_GotoXY>
								    		SSD1306_Puts ("5", &Font_16x26, 1);
 80050c8:	2201      	movs	r2, #1
 80050ca:	495a      	ldr	r1, [pc, #360]	; (8005234 <AppLEDTask+0x52c>)
 80050cc:	486f      	ldr	r0, [pc, #444]	; (800528c <AppLEDTask+0x584>)
 80050ce:	f7fb fa2f 	bl	8000530 <SSD1306_Puts>
								    		SSD1306_UpdateScreen(); //display
 80050d2:	f7fb f8f3 	bl	80002bc <SSD1306_UpdateScreen>
								    		PWM_SetDuty(LED1_pwmtimer,LED1_PWMchannel,0);		//PWM Off
 80050d6:	4b59      	ldr	r3, [pc, #356]	; (800523c <AppLEDTask+0x534>)
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	4b59      	ldr	r3, [pc, #356]	; (8005240 <AppLEDTask+0x538>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2200      	movs	r2, #0
 80050e0:	4619      	mov	r1, r3
 80050e2:	f7fb fabf 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED2_pwmtimer,LED2_PWMchannel,0);		//PWM Off
 80050e6:	4b57      	ldr	r3, [pc, #348]	; (8005244 <AppLEDTask+0x53c>)
 80050e8:	6818      	ldr	r0, [r3, #0]
 80050ea:	4b57      	ldr	r3, [pc, #348]	; (8005248 <AppLEDTask+0x540>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2200      	movs	r2, #0
 80050f0:	4619      	mov	r1, r3
 80050f2:	f7fb fab7 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED3_pwmtimer,LED3_PWMchannel,0);		//PWM Off
 80050f6:	4b55      	ldr	r3, [pc, #340]	; (800524c <AppLEDTask+0x544>)
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	4b55      	ldr	r3, [pc, #340]	; (8005250 <AppLEDTask+0x548>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2200      	movs	r2, #0
 8005100:	4619      	mov	r1, r3
 8005102:	f7fb faaf 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED4_pwmtimer,LED4_PWMchannel,0);		//PWM Off
 8005106:	4b53      	ldr	r3, [pc, #332]	; (8005254 <AppLEDTask+0x54c>)
 8005108:	6818      	ldr	r0, [r3, #0]
 800510a:	4b53      	ldr	r3, [pc, #332]	; (8005258 <AppLEDTask+0x550>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2200      	movs	r2, #0
 8005110:	4619      	mov	r1, r3
 8005112:	f7fb faa7 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED5_pwmtimer,LED5_PWMchannel,10);		//PWM Off
 8005116:	4b51      	ldr	r3, [pc, #324]	; (800525c <AppLEDTask+0x554>)
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	4b51      	ldr	r3, [pc, #324]	; (8005260 <AppLEDTask+0x558>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	220a      	movs	r2, #10
 8005120:	4619      	mov	r1, r3
 8005122:	f7fb fa9f 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED6_pwmtimer,LED6_PWMchannel,0);		//PWM Off
 8005126:	4b4f      	ldr	r3, [pc, #316]	; (8005264 <AppLEDTask+0x55c>)
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	4b4f      	ldr	r3, [pc, #316]	; (8005268 <AppLEDTask+0x560>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2200      	movs	r2, #0
 8005130:	4619      	mov	r1, r3
 8005132:	f7fb fa97 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED7_pwmtimer,LED7_PWMchannel,0);		//PWM Off
 8005136:	4b4d      	ldr	r3, [pc, #308]	; (800526c <AppLEDTask+0x564>)
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	4b4d      	ldr	r3, [pc, #308]	; (8005270 <AppLEDTask+0x568>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2200      	movs	r2, #0
 8005140:	4619      	mov	r1, r3
 8005142:	f7fb fa8f 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED8_pwmtimer,LED8_PWMchannel,0);		//PWM Off
 8005146:	4b4b      	ldr	r3, [pc, #300]	; (8005274 <AppLEDTask+0x56c>)
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	4b4b      	ldr	r3, [pc, #300]	; (8005278 <AppLEDTask+0x570>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2200      	movs	r2, #0
 8005150:	4619      	mov	r1, r3
 8005152:	f7fb fa87 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED9_pwmtimer,LED9_PWMchannel,0);		//PWM Off
 8005156:	4b49      	ldr	r3, [pc, #292]	; (800527c <AppLEDTask+0x574>)
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	4b49      	ldr	r3, [pc, #292]	; (8005280 <AppLEDTask+0x578>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2200      	movs	r2, #0
 8005160:	4619      	mov	r1, r3
 8005162:	f7fb fa7f 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED10_pwmtimer,LED10_PWMchannel,0);		//PWM Off
 8005166:	4b47      	ldr	r3, [pc, #284]	; (8005284 <AppLEDTask+0x57c>)
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	4b47      	ldr	r3, [pc, #284]	; (8005288 <AppLEDTask+0x580>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2200      	movs	r2, #0
 8005170:	4619      	mov	r1, r3
 8005172:	f7fb fa77 	bl	8000664 <PWM_SetDuty>
					break;
 8005176:	e235      	b.n	80055e4 <AppLEDTask+0x8dc>
			case 5:
				SSD1306_Clear();
 8005178:	f7fb f9ff 	bl	800057a <SSD1306_Clear>
								SSD1306_GotoXY (40,0);
 800517c:	2100      	movs	r1, #0
 800517e:	2028      	movs	r0, #40	; 0x28
 8005180:	f7fb f940 	bl	8000404 <SSD1306_GotoXY>
								    		SSD1306_Puts ("6", &Font_16x26, 1);
 8005184:	2201      	movs	r2, #1
 8005186:	492b      	ldr	r1, [pc, #172]	; (8005234 <AppLEDTask+0x52c>)
 8005188:	4841      	ldr	r0, [pc, #260]	; (8005290 <AppLEDTask+0x588>)
 800518a:	f7fb f9d1 	bl	8000530 <SSD1306_Puts>
								    		SSD1306_UpdateScreen(); //display
 800518e:	f7fb f895 	bl	80002bc <SSD1306_UpdateScreen>
								    		PWM_SetDuty(LED1_pwmtimer,LED1_PWMchannel,0);		//PWM Off
 8005192:	4b2a      	ldr	r3, [pc, #168]	; (800523c <AppLEDTask+0x534>)
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	4b2a      	ldr	r3, [pc, #168]	; (8005240 <AppLEDTask+0x538>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2200      	movs	r2, #0
 800519c:	4619      	mov	r1, r3
 800519e:	f7fb fa61 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED2_pwmtimer,LED2_PWMchannel,0);		//PWM Off
 80051a2:	4b28      	ldr	r3, [pc, #160]	; (8005244 <AppLEDTask+0x53c>)
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	4b28      	ldr	r3, [pc, #160]	; (8005248 <AppLEDTask+0x540>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2200      	movs	r2, #0
 80051ac:	4619      	mov	r1, r3
 80051ae:	f7fb fa59 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED3_pwmtimer,LED3_PWMchannel,0);		//PWM Off
 80051b2:	4b26      	ldr	r3, [pc, #152]	; (800524c <AppLEDTask+0x544>)
 80051b4:	6818      	ldr	r0, [r3, #0]
 80051b6:	4b26      	ldr	r3, [pc, #152]	; (8005250 <AppLEDTask+0x548>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2200      	movs	r2, #0
 80051bc:	4619      	mov	r1, r3
 80051be:	f7fb fa51 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED4_pwmtimer,LED4_PWMchannel,0);		//PWM Off
 80051c2:	4b24      	ldr	r3, [pc, #144]	; (8005254 <AppLEDTask+0x54c>)
 80051c4:	6818      	ldr	r0, [r3, #0]
 80051c6:	4b24      	ldr	r3, [pc, #144]	; (8005258 <AppLEDTask+0x550>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2200      	movs	r2, #0
 80051cc:	4619      	mov	r1, r3
 80051ce:	f7fb fa49 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED5_pwmtimer,LED5_PWMchannel,0);		//PWM Off
 80051d2:	4b22      	ldr	r3, [pc, #136]	; (800525c <AppLEDTask+0x554>)
 80051d4:	6818      	ldr	r0, [r3, #0]
 80051d6:	4b22      	ldr	r3, [pc, #136]	; (8005260 <AppLEDTask+0x558>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2200      	movs	r2, #0
 80051dc:	4619      	mov	r1, r3
 80051de:	f7fb fa41 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED6_pwmtimer,LED6_PWMchannel,10);		//PWM Off
 80051e2:	4b20      	ldr	r3, [pc, #128]	; (8005264 <AppLEDTask+0x55c>)
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	4b20      	ldr	r3, [pc, #128]	; (8005268 <AppLEDTask+0x560>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	220a      	movs	r2, #10
 80051ec:	4619      	mov	r1, r3
 80051ee:	f7fb fa39 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED7_pwmtimer,LED7_PWMchannel,0);		//PWM Off
 80051f2:	4b1e      	ldr	r3, [pc, #120]	; (800526c <AppLEDTask+0x564>)
 80051f4:	6818      	ldr	r0, [r3, #0]
 80051f6:	4b1e      	ldr	r3, [pc, #120]	; (8005270 <AppLEDTask+0x568>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2200      	movs	r2, #0
 80051fc:	4619      	mov	r1, r3
 80051fe:	f7fb fa31 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED8_pwmtimer,LED8_PWMchannel,0);		//PWM Off
 8005202:	4b1c      	ldr	r3, [pc, #112]	; (8005274 <AppLEDTask+0x56c>)
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	4b1c      	ldr	r3, [pc, #112]	; (8005278 <AppLEDTask+0x570>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2200      	movs	r2, #0
 800520c:	4619      	mov	r1, r3
 800520e:	f7fb fa29 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED9_pwmtimer,LED9_PWMchannel,0);		//PWM Off
 8005212:	4b1a      	ldr	r3, [pc, #104]	; (800527c <AppLEDTask+0x574>)
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	4b1a      	ldr	r3, [pc, #104]	; (8005280 <AppLEDTask+0x578>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2200      	movs	r2, #0
 800521c:	4619      	mov	r1, r3
 800521e:	f7fb fa21 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED10_pwmtimer,LED10_PWMchannel,0);		//PWM Off
 8005222:	4b18      	ldr	r3, [pc, #96]	; (8005284 <AppLEDTask+0x57c>)
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	4b18      	ldr	r3, [pc, #96]	; (8005288 <AppLEDTask+0x580>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2200      	movs	r2, #0
 800522c:	4619      	mov	r1, r3
 800522e:	f7fb fa19 	bl	8000664 <PWM_SetDuty>
					break;
 8005232:	e1d7      	b.n	80055e4 <AppLEDTask+0x8dc>
 8005234:	20000000 	.word	0x20000000
 8005238:	08006b6c 	.word	0x08006b6c
 800523c:	2000188c 	.word	0x2000188c
 8005240:	20001864 	.word	0x20001864
 8005244:	200018b8 	.word	0x200018b8
 8005248:	20001874 	.word	0x20001874
 800524c:	2000187c 	.word	0x2000187c
 8005250:	20001898 	.word	0x20001898
 8005254:	200018a8 	.word	0x200018a8
 8005258:	200018bc 	.word	0x200018bc
 800525c:	20001858 	.word	0x20001858
 8005260:	200018d8 	.word	0x200018d8
 8005264:	20001890 	.word	0x20001890
 8005268:	20001880 	.word	0x20001880
 800526c:	2000189c 	.word	0x2000189c
 8005270:	200018a0 	.word	0x200018a0
 8005274:	200018e0 	.word	0x200018e0
 8005278:	200018ac 	.word	0x200018ac
 800527c:	200018b4 	.word	0x200018b4
 8005280:	2000185c 	.word	0x2000185c
 8005284:	2000186c 	.word	0x2000186c
 8005288:	200018a4 	.word	0x200018a4
 800528c:	08006b70 	.word	0x08006b70
 8005290:	08006b74 	.word	0x08006b74
			case 6:
				SSD1306_Clear();
 8005294:	f7fb f971 	bl	800057a <SSD1306_Clear>
								SSD1306_GotoXY (40,0);
 8005298:	2100      	movs	r1, #0
 800529a:	2028      	movs	r0, #40	; 0x28
 800529c:	f7fb f8b2 	bl	8000404 <SSD1306_GotoXY>
								    		SSD1306_Puts ("7", &Font_16x26, 1);
 80052a0:	2201      	movs	r2, #1
 80052a2:	4989      	ldr	r1, [pc, #548]	; (80054c8 <AppLEDTask+0x7c0>)
 80052a4:	4889      	ldr	r0, [pc, #548]	; (80054cc <AppLEDTask+0x7c4>)
 80052a6:	f7fb f943 	bl	8000530 <SSD1306_Puts>
								    		SSD1306_UpdateScreen(); //display
 80052aa:	f7fb f807 	bl	80002bc <SSD1306_UpdateScreen>
								    		PWM_SetDuty(LED1_pwmtimer,LED1_PWMchannel,0);		//PWM Off
 80052ae:	4b88      	ldr	r3, [pc, #544]	; (80054d0 <AppLEDTask+0x7c8>)
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	4b88      	ldr	r3, [pc, #544]	; (80054d4 <AppLEDTask+0x7cc>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2200      	movs	r2, #0
 80052b8:	4619      	mov	r1, r3
 80052ba:	f7fb f9d3 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED2_pwmtimer,LED2_PWMchannel,0);		//PWM Off
 80052be:	4b86      	ldr	r3, [pc, #536]	; (80054d8 <AppLEDTask+0x7d0>)
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	4b86      	ldr	r3, [pc, #536]	; (80054dc <AppLEDTask+0x7d4>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2200      	movs	r2, #0
 80052c8:	4619      	mov	r1, r3
 80052ca:	f7fb f9cb 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED3_pwmtimer,LED3_PWMchannel,0);		//PWM Off
 80052ce:	4b84      	ldr	r3, [pc, #528]	; (80054e0 <AppLEDTask+0x7d8>)
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	4b84      	ldr	r3, [pc, #528]	; (80054e4 <AppLEDTask+0x7dc>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2200      	movs	r2, #0
 80052d8:	4619      	mov	r1, r3
 80052da:	f7fb f9c3 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED4_pwmtimer,LED4_PWMchannel,0);		//PWM Off
 80052de:	4b82      	ldr	r3, [pc, #520]	; (80054e8 <AppLEDTask+0x7e0>)
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	4b82      	ldr	r3, [pc, #520]	; (80054ec <AppLEDTask+0x7e4>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2200      	movs	r2, #0
 80052e8:	4619      	mov	r1, r3
 80052ea:	f7fb f9bb 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED5_pwmtimer,LED5_PWMchannel,0);		//PWM Off
 80052ee:	4b80      	ldr	r3, [pc, #512]	; (80054f0 <AppLEDTask+0x7e8>)
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	4b80      	ldr	r3, [pc, #512]	; (80054f4 <AppLEDTask+0x7ec>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2200      	movs	r2, #0
 80052f8:	4619      	mov	r1, r3
 80052fa:	f7fb f9b3 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED6_pwmtimer,LED6_PWMchannel,0);		//PWM Off
 80052fe:	4b7e      	ldr	r3, [pc, #504]	; (80054f8 <AppLEDTask+0x7f0>)
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	4b7e      	ldr	r3, [pc, #504]	; (80054fc <AppLEDTask+0x7f4>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2200      	movs	r2, #0
 8005308:	4619      	mov	r1, r3
 800530a:	f7fb f9ab 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED7_pwmtimer,LED7_PWMchannel,10);		//PWM Off
 800530e:	4b7c      	ldr	r3, [pc, #496]	; (8005500 <AppLEDTask+0x7f8>)
 8005310:	6818      	ldr	r0, [r3, #0]
 8005312:	4b7c      	ldr	r3, [pc, #496]	; (8005504 <AppLEDTask+0x7fc>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	220a      	movs	r2, #10
 8005318:	4619      	mov	r1, r3
 800531a:	f7fb f9a3 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED8_pwmtimer,LED8_PWMchannel,0);		//PWM Off
 800531e:	4b7a      	ldr	r3, [pc, #488]	; (8005508 <AppLEDTask+0x800>)
 8005320:	6818      	ldr	r0, [r3, #0]
 8005322:	4b7a      	ldr	r3, [pc, #488]	; (800550c <AppLEDTask+0x804>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2200      	movs	r2, #0
 8005328:	4619      	mov	r1, r3
 800532a:	f7fb f99b 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED9_pwmtimer,LED9_PWMchannel,0);		//PWM Off
 800532e:	4b78      	ldr	r3, [pc, #480]	; (8005510 <AppLEDTask+0x808>)
 8005330:	6818      	ldr	r0, [r3, #0]
 8005332:	4b78      	ldr	r3, [pc, #480]	; (8005514 <AppLEDTask+0x80c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2200      	movs	r2, #0
 8005338:	4619      	mov	r1, r3
 800533a:	f7fb f993 	bl	8000664 <PWM_SetDuty>
					PWM_SetDuty(LED10_pwmtimer,LED10_PWMchannel,0);		//PWM Off
 800533e:	4b76      	ldr	r3, [pc, #472]	; (8005518 <AppLEDTask+0x810>)
 8005340:	6818      	ldr	r0, [r3, #0]
 8005342:	4b76      	ldr	r3, [pc, #472]	; (800551c <AppLEDTask+0x814>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2200      	movs	r2, #0
 8005348:	4619      	mov	r1, r3
 800534a:	f7fb f98b 	bl	8000664 <PWM_SetDuty>
					break;
 800534e:	e149      	b.n	80055e4 <AppLEDTask+0x8dc>
			case 7:
				SSD1306_Clear();
 8005350:	f7fb f913 	bl	800057a <SSD1306_Clear>
								SSD1306_GotoXY (40,0);
 8005354:	2100      	movs	r1, #0
 8005356:	2028      	movs	r0, #40	; 0x28
 8005358:	f7fb f854 	bl	8000404 <SSD1306_GotoXY>
								    		SSD1306_Puts ("8", &Font_16x26, 1);
 800535c:	2201      	movs	r2, #1
 800535e:	495a      	ldr	r1, [pc, #360]	; (80054c8 <AppLEDTask+0x7c0>)
 8005360:	486f      	ldr	r0, [pc, #444]	; (8005520 <AppLEDTask+0x818>)
 8005362:	f7fb f8e5 	bl	8000530 <SSD1306_Puts>
								    		SSD1306_UpdateScreen(); //display
 8005366:	f7fa ffa9 	bl	80002bc <SSD1306_UpdateScreen>
								    		PWM_SetDuty(LED1_pwmtimer,LED1_PWMchannel,0);		//PWM Off
 800536a:	4b59      	ldr	r3, [pc, #356]	; (80054d0 <AppLEDTask+0x7c8>)
 800536c:	6818      	ldr	r0, [r3, #0]
 800536e:	4b59      	ldr	r3, [pc, #356]	; (80054d4 <AppLEDTask+0x7cc>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2200      	movs	r2, #0
 8005374:	4619      	mov	r1, r3
 8005376:	f7fb f975 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED2_pwmtimer,LED2_PWMchannel,0);		//PWM Off
 800537a:	4b57      	ldr	r3, [pc, #348]	; (80054d8 <AppLEDTask+0x7d0>)
 800537c:	6818      	ldr	r0, [r3, #0]
 800537e:	4b57      	ldr	r3, [pc, #348]	; (80054dc <AppLEDTask+0x7d4>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2200      	movs	r2, #0
 8005384:	4619      	mov	r1, r3
 8005386:	f7fb f96d 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED3_pwmtimer,LED3_PWMchannel,0);		//PWM Off
 800538a:	4b55      	ldr	r3, [pc, #340]	; (80054e0 <AppLEDTask+0x7d8>)
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	4b55      	ldr	r3, [pc, #340]	; (80054e4 <AppLEDTask+0x7dc>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2200      	movs	r2, #0
 8005394:	4619      	mov	r1, r3
 8005396:	f7fb f965 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED4_pwmtimer,LED4_PWMchannel,0);		//PWM Off
 800539a:	4b53      	ldr	r3, [pc, #332]	; (80054e8 <AppLEDTask+0x7e0>)
 800539c:	6818      	ldr	r0, [r3, #0]
 800539e:	4b53      	ldr	r3, [pc, #332]	; (80054ec <AppLEDTask+0x7e4>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2200      	movs	r2, #0
 80053a4:	4619      	mov	r1, r3
 80053a6:	f7fb f95d 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED5_pwmtimer,LED5_PWMchannel,0);		//PWM Off
 80053aa:	4b51      	ldr	r3, [pc, #324]	; (80054f0 <AppLEDTask+0x7e8>)
 80053ac:	6818      	ldr	r0, [r3, #0]
 80053ae:	4b51      	ldr	r3, [pc, #324]	; (80054f4 <AppLEDTask+0x7ec>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2200      	movs	r2, #0
 80053b4:	4619      	mov	r1, r3
 80053b6:	f7fb f955 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED6_pwmtimer,LED6_PWMchannel,0);		//PWM Off
 80053ba:	4b4f      	ldr	r3, [pc, #316]	; (80054f8 <AppLEDTask+0x7f0>)
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	4b4f      	ldr	r3, [pc, #316]	; (80054fc <AppLEDTask+0x7f4>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2200      	movs	r2, #0
 80053c4:	4619      	mov	r1, r3
 80053c6:	f7fb f94d 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED7_pwmtimer,LED7_PWMchannel,0);		//PWM Off
 80053ca:	4b4d      	ldr	r3, [pc, #308]	; (8005500 <AppLEDTask+0x7f8>)
 80053cc:	6818      	ldr	r0, [r3, #0]
 80053ce:	4b4d      	ldr	r3, [pc, #308]	; (8005504 <AppLEDTask+0x7fc>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2200      	movs	r2, #0
 80053d4:	4619      	mov	r1, r3
 80053d6:	f7fb f945 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED8_pwmtimer,LED8_PWMchannel,10);		//PWM Off
 80053da:	4b4b      	ldr	r3, [pc, #300]	; (8005508 <AppLEDTask+0x800>)
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	4b4b      	ldr	r3, [pc, #300]	; (800550c <AppLEDTask+0x804>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	220a      	movs	r2, #10
 80053e4:	4619      	mov	r1, r3
 80053e6:	f7fb f93d 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED9_pwmtimer,LED9_PWMchannel,0);		//PWM Off
 80053ea:	4b49      	ldr	r3, [pc, #292]	; (8005510 <AppLEDTask+0x808>)
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	4b49      	ldr	r3, [pc, #292]	; (8005514 <AppLEDTask+0x80c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2200      	movs	r2, #0
 80053f4:	4619      	mov	r1, r3
 80053f6:	f7fb f935 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED10_pwmtimer,LED10_PWMchannel,0);		//PWM Off
 80053fa:	4b47      	ldr	r3, [pc, #284]	; (8005518 <AppLEDTask+0x810>)
 80053fc:	6818      	ldr	r0, [r3, #0]
 80053fe:	4b47      	ldr	r3, [pc, #284]	; (800551c <AppLEDTask+0x814>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2200      	movs	r2, #0
 8005404:	4619      	mov	r1, r3
 8005406:	f7fb f92d 	bl	8000664 <PWM_SetDuty>
					break;
 800540a:	e0eb      	b.n	80055e4 <AppLEDTask+0x8dc>
			case 8:
				SSD1306_Clear();
 800540c:	f7fb f8b5 	bl	800057a <SSD1306_Clear>
								SSD1306_GotoXY (40,0);
 8005410:	2100      	movs	r1, #0
 8005412:	2028      	movs	r0, #40	; 0x28
 8005414:	f7fa fff6 	bl	8000404 <SSD1306_GotoXY>
								    		SSD1306_Puts ("9", &Font_16x26, 1);
 8005418:	2201      	movs	r2, #1
 800541a:	492b      	ldr	r1, [pc, #172]	; (80054c8 <AppLEDTask+0x7c0>)
 800541c:	4841      	ldr	r0, [pc, #260]	; (8005524 <AppLEDTask+0x81c>)
 800541e:	f7fb f887 	bl	8000530 <SSD1306_Puts>
								    		SSD1306_UpdateScreen(); //display
 8005422:	f7fa ff4b 	bl	80002bc <SSD1306_UpdateScreen>
								    		PWM_SetDuty(LED1_pwmtimer,LED1_PWMchannel,0);		//PWM Off
 8005426:	4b2a      	ldr	r3, [pc, #168]	; (80054d0 <AppLEDTask+0x7c8>)
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	4b2a      	ldr	r3, [pc, #168]	; (80054d4 <AppLEDTask+0x7cc>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2200      	movs	r2, #0
 8005430:	4619      	mov	r1, r3
 8005432:	f7fb f917 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED2_pwmtimer,LED2_PWMchannel,0);		//PWM Off
 8005436:	4b28      	ldr	r3, [pc, #160]	; (80054d8 <AppLEDTask+0x7d0>)
 8005438:	6818      	ldr	r0, [r3, #0]
 800543a:	4b28      	ldr	r3, [pc, #160]	; (80054dc <AppLEDTask+0x7d4>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2200      	movs	r2, #0
 8005440:	4619      	mov	r1, r3
 8005442:	f7fb f90f 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED3_pwmtimer,LED3_PWMchannel,0);		//PWM Off
 8005446:	4b26      	ldr	r3, [pc, #152]	; (80054e0 <AppLEDTask+0x7d8>)
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	4b26      	ldr	r3, [pc, #152]	; (80054e4 <AppLEDTask+0x7dc>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2200      	movs	r2, #0
 8005450:	4619      	mov	r1, r3
 8005452:	f7fb f907 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED4_pwmtimer,LED4_PWMchannel,0);		//PWM Off
 8005456:	4b24      	ldr	r3, [pc, #144]	; (80054e8 <AppLEDTask+0x7e0>)
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	4b24      	ldr	r3, [pc, #144]	; (80054ec <AppLEDTask+0x7e4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2200      	movs	r2, #0
 8005460:	4619      	mov	r1, r3
 8005462:	f7fb f8ff 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED5_pwmtimer,LED5_PWMchannel,0);		//PWM Off
 8005466:	4b22      	ldr	r3, [pc, #136]	; (80054f0 <AppLEDTask+0x7e8>)
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	4b22      	ldr	r3, [pc, #136]	; (80054f4 <AppLEDTask+0x7ec>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2200      	movs	r2, #0
 8005470:	4619      	mov	r1, r3
 8005472:	f7fb f8f7 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED6_pwmtimer,LED6_PWMchannel,0);		//PWM Off
 8005476:	4b20      	ldr	r3, [pc, #128]	; (80054f8 <AppLEDTask+0x7f0>)
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	4b20      	ldr	r3, [pc, #128]	; (80054fc <AppLEDTask+0x7f4>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2200      	movs	r2, #0
 8005480:	4619      	mov	r1, r3
 8005482:	f7fb f8ef 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED7_pwmtimer,LED7_PWMchannel,0);		//PWM Off
 8005486:	4b1e      	ldr	r3, [pc, #120]	; (8005500 <AppLEDTask+0x7f8>)
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	4b1e      	ldr	r3, [pc, #120]	; (8005504 <AppLEDTask+0x7fc>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2200      	movs	r2, #0
 8005490:	4619      	mov	r1, r3
 8005492:	f7fb f8e7 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED8_pwmtimer,LED8_PWMchannel,0);		//PWM Off
 8005496:	4b1c      	ldr	r3, [pc, #112]	; (8005508 <AppLEDTask+0x800>)
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	4b1c      	ldr	r3, [pc, #112]	; (800550c <AppLEDTask+0x804>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2200      	movs	r2, #0
 80054a0:	4619      	mov	r1, r3
 80054a2:	f7fb f8df 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED9_pwmtimer,LED9_PWMchannel,10);		//PWM Off
 80054a6:	4b1a      	ldr	r3, [pc, #104]	; (8005510 <AppLEDTask+0x808>)
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	4b1a      	ldr	r3, [pc, #104]	; (8005514 <AppLEDTask+0x80c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	220a      	movs	r2, #10
 80054b0:	4619      	mov	r1, r3
 80054b2:	f7fb f8d7 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED10_pwmtimer,LED10_PWMchannel,0);		//PWM Off
 80054b6:	4b18      	ldr	r3, [pc, #96]	; (8005518 <AppLEDTask+0x810>)
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	4b18      	ldr	r3, [pc, #96]	; (800551c <AppLEDTask+0x814>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2200      	movs	r2, #0
 80054c0:	4619      	mov	r1, r3
 80054c2:	f7fb f8cf 	bl	8000664 <PWM_SetDuty>
					break;
 80054c6:	e08d      	b.n	80055e4 <AppLEDTask+0x8dc>
 80054c8:	20000000 	.word	0x20000000
 80054cc:	08006b78 	.word	0x08006b78
 80054d0:	2000188c 	.word	0x2000188c
 80054d4:	20001864 	.word	0x20001864
 80054d8:	200018b8 	.word	0x200018b8
 80054dc:	20001874 	.word	0x20001874
 80054e0:	2000187c 	.word	0x2000187c
 80054e4:	20001898 	.word	0x20001898
 80054e8:	200018a8 	.word	0x200018a8
 80054ec:	200018bc 	.word	0x200018bc
 80054f0:	20001858 	.word	0x20001858
 80054f4:	200018d8 	.word	0x200018d8
 80054f8:	20001890 	.word	0x20001890
 80054fc:	20001880 	.word	0x20001880
 8005500:	2000189c 	.word	0x2000189c
 8005504:	200018a0 	.word	0x200018a0
 8005508:	200018e0 	.word	0x200018e0
 800550c:	200018ac 	.word	0x200018ac
 8005510:	200018b4 	.word	0x200018b4
 8005514:	2000185c 	.word	0x2000185c
 8005518:	2000186c 	.word	0x2000186c
 800551c:	200018a4 	.word	0x200018a4
 8005520:	08006b7c 	.word	0x08006b7c
 8005524:	08006b80 	.word	0x08006b80
			case 9:
				SSD1306_Clear();
 8005528:	f7fb f827 	bl	800057a <SSD1306_Clear>
								SSD1306_GotoXY (40,0);
 800552c:	2100      	movs	r1, #0
 800552e:	2028      	movs	r0, #40	; 0x28
 8005530:	f7fa ff68 	bl	8000404 <SSD1306_GotoXY>
								    		SSD1306_Puts ("10", &Font_16x26, 1);
 8005534:	2201      	movs	r2, #1
 8005536:	492c      	ldr	r1, [pc, #176]	; (80055e8 <AppLEDTask+0x8e0>)
 8005538:	482c      	ldr	r0, [pc, #176]	; (80055ec <AppLEDTask+0x8e4>)
 800553a:	f7fa fff9 	bl	8000530 <SSD1306_Puts>
								    		SSD1306_UpdateScreen(); //display
 800553e:	f7fa febd 	bl	80002bc <SSD1306_UpdateScreen>
								    		PWM_SetDuty(LED1_pwmtimer,LED1_PWMchannel,0);		//PWM Off
 8005542:	4b2b      	ldr	r3, [pc, #172]	; (80055f0 <AppLEDTask+0x8e8>)
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	4b2b      	ldr	r3, [pc, #172]	; (80055f4 <AppLEDTask+0x8ec>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2200      	movs	r2, #0
 800554c:	4619      	mov	r1, r3
 800554e:	f7fb f889 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED2_pwmtimer,LED2_PWMchannel,0);		//PWM Off
 8005552:	4b29      	ldr	r3, [pc, #164]	; (80055f8 <AppLEDTask+0x8f0>)
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	4b29      	ldr	r3, [pc, #164]	; (80055fc <AppLEDTask+0x8f4>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2200      	movs	r2, #0
 800555c:	4619      	mov	r1, r3
 800555e:	f7fb f881 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED3_pwmtimer,LED3_PWMchannel,0);		//PWM Off
 8005562:	4b27      	ldr	r3, [pc, #156]	; (8005600 <AppLEDTask+0x8f8>)
 8005564:	6818      	ldr	r0, [r3, #0]
 8005566:	4b27      	ldr	r3, [pc, #156]	; (8005604 <AppLEDTask+0x8fc>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2200      	movs	r2, #0
 800556c:	4619      	mov	r1, r3
 800556e:	f7fb f879 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED4_pwmtimer,LED4_PWMchannel,0);		//PWM Off
 8005572:	4b25      	ldr	r3, [pc, #148]	; (8005608 <AppLEDTask+0x900>)
 8005574:	6818      	ldr	r0, [r3, #0]
 8005576:	4b25      	ldr	r3, [pc, #148]	; (800560c <AppLEDTask+0x904>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2200      	movs	r2, #0
 800557c:	4619      	mov	r1, r3
 800557e:	f7fb f871 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED5_pwmtimer,LED5_PWMchannel,0);		//PWM Off
 8005582:	4b23      	ldr	r3, [pc, #140]	; (8005610 <AppLEDTask+0x908>)
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	4b23      	ldr	r3, [pc, #140]	; (8005614 <AppLEDTask+0x90c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2200      	movs	r2, #0
 800558c:	4619      	mov	r1, r3
 800558e:	f7fb f869 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED6_pwmtimer,LED6_PWMchannel,0);		//PWM Off
 8005592:	4b21      	ldr	r3, [pc, #132]	; (8005618 <AppLEDTask+0x910>)
 8005594:	6818      	ldr	r0, [r3, #0]
 8005596:	4b21      	ldr	r3, [pc, #132]	; (800561c <AppLEDTask+0x914>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2200      	movs	r2, #0
 800559c:	4619      	mov	r1, r3
 800559e:	f7fb f861 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED7_pwmtimer,LED7_PWMchannel,0);		//PWM Off
 80055a2:	4b1f      	ldr	r3, [pc, #124]	; (8005620 <AppLEDTask+0x918>)
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	4b1f      	ldr	r3, [pc, #124]	; (8005624 <AppLEDTask+0x91c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2200      	movs	r2, #0
 80055ac:	4619      	mov	r1, r3
 80055ae:	f7fb f859 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED8_pwmtimer,LED8_PWMchannel,0);		//PWM Off
 80055b2:	4b1d      	ldr	r3, [pc, #116]	; (8005628 <AppLEDTask+0x920>)
 80055b4:	6818      	ldr	r0, [r3, #0]
 80055b6:	4b1d      	ldr	r3, [pc, #116]	; (800562c <AppLEDTask+0x924>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2200      	movs	r2, #0
 80055bc:	4619      	mov	r1, r3
 80055be:	f7fb f851 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED9_pwmtimer,LED9_PWMchannel,0);		//PWM Off
 80055c2:	4b1b      	ldr	r3, [pc, #108]	; (8005630 <AppLEDTask+0x928>)
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	4b1b      	ldr	r3, [pc, #108]	; (8005634 <AppLEDTask+0x92c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2200      	movs	r2, #0
 80055cc:	4619      	mov	r1, r3
 80055ce:	f7fb f849 	bl	8000664 <PWM_SetDuty>
								    		PWM_SetDuty(LED10_pwmtimer,LED10_PWMchannel,10);		//PWM Off
 80055d2:	4b19      	ldr	r3, [pc, #100]	; (8005638 <AppLEDTask+0x930>)
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	4b19      	ldr	r3, [pc, #100]	; (800563c <AppLEDTask+0x934>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	220a      	movs	r2, #10
 80055dc:	4619      	mov	r1, r3
 80055de:	f7fb f841 	bl	8000664 <PWM_SetDuty>
					break;
 80055e2:	bf00      	nop
		osDelay(1000);//(TASK_DELAY_LED);
 80055e4:	f7ff bb94 	b.w	8004d10 <AppLEDTask+0x8>
 80055e8:	20000000 	.word	0x20000000
 80055ec:	08006b84 	.word	0x08006b84
 80055f0:	2000188c 	.word	0x2000188c
 80055f4:	20001864 	.word	0x20001864
 80055f8:	200018b8 	.word	0x200018b8
 80055fc:	20001874 	.word	0x20001874
 8005600:	2000187c 	.word	0x2000187c
 8005604:	20001898 	.word	0x20001898
 8005608:	200018a8 	.word	0x200018a8
 800560c:	200018bc 	.word	0x200018bc
 8005610:	20001858 	.word	0x20001858
 8005614:	200018d8 	.word	0x200018d8
 8005618:	20001890 	.word	0x20001890
 800561c:	20001880 	.word	0x20001880
 8005620:	2000189c 	.word	0x2000189c
 8005624:	200018a0 	.word	0x200018a0
 8005628:	200018e0 	.word	0x200018e0
 800562c:	200018ac 	.word	0x200018ac
 8005630:	200018b4 	.word	0x200018b4
 8005634:	2000185c 	.word	0x2000185c
 8005638:	2000186c 	.word	0x2000186c
 800563c:	200018a4 	.word	0x200018a4

08005640 <AppIHMTask>:
		}
	}
}

void AppIHMTask(void const * argument)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
	uint32_t cpt_refresh=0;
 8005648:	2300      	movs	r3, #0
 800564a:	617b      	str	r3, [r7, #20]
	uint32_t tick_save_param;
	uint32_t param_changed = __FALSE;
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		osDelay(TASK_DELAY_IHM);
 8005650:	2032      	movs	r0, #50	; 0x32
 8005652:	f7fe f8c1 	bl	80037d8 <osDelay>

		cpt_refresh++;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	3301      	adds	r3, #1
 800565a:	617b      	str	r3, [r7, #20]
		if(cpt_refresh>=REFRESH_DISPLAY)
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	2b04      	cmp	r3, #4
 8005660:	d901      	bls.n	8005666 <AppIHMTask+0x26>
		{
			//Update_Display();
			cpt_refresh=0;
 8005662:	2300      	movs	r3, #0
 8005664:	617b      	str	r3, [r7, #20]
		}

		Manage_Button();
 8005666:	f7ff faa7 	bl	8004bb8 <Manage_Button>

		if(Current_Display == DISP_PARAM)
 800566a:	4b99      	ldr	r3, [pc, #612]	; (80058d0 <AppIHMTask+0x290>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d148      	bne.n	8005704 <AppIHMTask+0xc4>
		{
			if(Bp_Up == BP_CLICK)
 8005672:	4b98      	ldr	r3, [pc, #608]	; (80058d4 <AppIHMTask+0x294>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d10d      	bne.n	8005696 <AppIHMTask+0x56>
			{
				if(Display_Cursor == 3)
 800567a:	4b97      	ldr	r3, [pc, #604]	; (80058d8 <AppIHMTask+0x298>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b03      	cmp	r3, #3
 8005680:	d103      	bne.n	800568a <AppIHMTask+0x4a>
					Display_Cursor = 0;
 8005682:	4b95      	ldr	r3, [pc, #596]	; (80058d8 <AppIHMTask+0x298>)
 8005684:	2200      	movs	r2, #0
 8005686:	701a      	strb	r2, [r3, #0]
 8005688:	e005      	b.n	8005696 <AppIHMTask+0x56>
				else
					Display_Cursor++;
 800568a:	4b93      	ldr	r3, [pc, #588]	; (80058d8 <AppIHMTask+0x298>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	3301      	adds	r3, #1
 8005690:	b2da      	uxtb	r2, r3
 8005692:	4b91      	ldr	r3, [pc, #580]	; (80058d8 <AppIHMTask+0x298>)
 8005694:	701a      	strb	r2, [r3, #0]
			}
			if(Bp_Down == BP_CLICK)
 8005696:	4b91      	ldr	r3, [pc, #580]	; (80058dc <AppIHMTask+0x29c>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d10d      	bne.n	80056ba <AppIHMTask+0x7a>
			{
				if(Display_Cursor == 0)
 800569e:	4b8e      	ldr	r3, [pc, #568]	; (80058d8 <AppIHMTask+0x298>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d103      	bne.n	80056ae <AppIHMTask+0x6e>
					Display_Cursor = 3;
 80056a6:	4b8c      	ldr	r3, [pc, #560]	; (80058d8 <AppIHMTask+0x298>)
 80056a8:	2203      	movs	r2, #3
 80056aa:	701a      	strb	r2, [r3, #0]
 80056ac:	e005      	b.n	80056ba <AppIHMTask+0x7a>
				else
					Display_Cursor--;
 80056ae:	4b8a      	ldr	r3, [pc, #552]	; (80058d8 <AppIHMTask+0x298>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	4b88      	ldr	r3, [pc, #544]	; (80058d8 <AppIHMTask+0x298>)
 80056b8:	701a      	strb	r2, [r3, #0]
			}
			if(Bp_Ok == BP_CLICK)
 80056ba:	4b89      	ldr	r3, [pc, #548]	; (80058e0 <AppIHMTask+0x2a0>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	f040 8176 	bne.w	80059b0 <AppIHMTask+0x370>
			{
				switch(Display_Cursor)
 80056c4:	4b84      	ldr	r3, [pc, #528]	; (80058d8 <AppIHMTask+0x298>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	f200 8173 	bhi.w	80059b4 <AppIHMTask+0x374>
 80056ce:	a201      	add	r2, pc, #4	; (adr r2, 80056d4 <AppIHMTask+0x94>)
 80056d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d4:	080056e5 	.word	0x080056e5
 80056d8:	080056ed 	.word	0x080056ed
 80056dc:	080056f5 	.word	0x080056f5
 80056e0:	080056fd 	.word	0x080056fd
				{
				case 0:
					Current_Display = DISP_CONFIG_MODE;
 80056e4:	4b7a      	ldr	r3, [pc, #488]	; (80058d0 <AppIHMTask+0x290>)
 80056e6:	2201      	movs	r2, #1
 80056e8:	701a      	strb	r2, [r3, #0]
					break;
 80056ea:	e164      	b.n	80059b6 <AppIHMTask+0x376>
				case 1:
					Current_Display = DISP_CONFIG_INVERT;
 80056ec:	4b78      	ldr	r3, [pc, #480]	; (80058d0 <AppIHMTask+0x290>)
 80056ee:	2202      	movs	r2, #2
 80056f0:	701a      	strb	r2, [r3, #0]
					break;
 80056f2:	e160      	b.n	80059b6 <AppIHMTask+0x376>
				case 2:
					Current_Display = DISP_CONFIG_ADDRESS;
 80056f4:	4b76      	ldr	r3, [pc, #472]	; (80058d0 <AppIHMTask+0x290>)
 80056f6:	2203      	movs	r2, #3
 80056f8:	701a      	strb	r2, [r3, #0]
					break;
 80056fa:	e15c      	b.n	80059b6 <AppIHMTask+0x376>
				case 3:
					Current_Display = DISP_CONFIG_MANVALUE;
 80056fc:	4b74      	ldr	r3, [pc, #464]	; (80058d0 <AppIHMTask+0x290>)
 80056fe:	2204      	movs	r2, #4
 8005700:	701a      	strb	r2, [r3, #0]
					break;
 8005702:	e158      	b.n	80059b6 <AppIHMTask+0x376>
					break;
				}
			}
		}

		else if(Current_Display == DISP_CONFIG_MODE)
 8005704:	4b72      	ldr	r3, [pc, #456]	; (80058d0 <AppIHMTask+0x290>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d136      	bne.n	800577a <AppIHMTask+0x13a>
		{
			if(Bp_Up == BP_CLICK)
 800570c:	4b71      	ldr	r3, [pc, #452]	; (80058d4 <AppIHMTask+0x294>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d112      	bne.n	800573a <AppIHMTask+0xfa>
			{
				param_changed=__TRUE;
 8005714:	2301      	movs	r3, #1
 8005716:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 8005718:	f7fb f824 	bl	8000764 <HAL_GetTick>
 800571c:	6138      	str	r0, [r7, #16]
				if(Current_Mode == 2)
 800571e:	4b71      	ldr	r3, [pc, #452]	; (80058e4 <AppIHMTask+0x2a4>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b02      	cmp	r3, #2
 8005724:	d103      	bne.n	800572e <AppIHMTask+0xee>
					Current_Mode = 0;
 8005726:	4b6f      	ldr	r3, [pc, #444]	; (80058e4 <AppIHMTask+0x2a4>)
 8005728:	2200      	movs	r2, #0
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	e005      	b.n	800573a <AppIHMTask+0xfa>
				else
					Current_Mode++;
 800572e:	4b6d      	ldr	r3, [pc, #436]	; (80058e4 <AppIHMTask+0x2a4>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	3301      	adds	r3, #1
 8005734:	b2da      	uxtb	r2, r3
 8005736:	4b6b      	ldr	r3, [pc, #428]	; (80058e4 <AppIHMTask+0x2a4>)
 8005738:	701a      	strb	r2, [r3, #0]
			}
			if(Bp_Down == BP_CLICK)
 800573a:	4b68      	ldr	r3, [pc, #416]	; (80058dc <AppIHMTask+0x29c>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d112      	bne.n	8005768 <AppIHMTask+0x128>
			{
				param_changed=__TRUE;
 8005742:	2301      	movs	r3, #1
 8005744:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 8005746:	f7fb f80d 	bl	8000764 <HAL_GetTick>
 800574a:	6138      	str	r0, [r7, #16]
				if(Current_Mode == 0)
 800574c:	4b65      	ldr	r3, [pc, #404]	; (80058e4 <AppIHMTask+0x2a4>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d103      	bne.n	800575c <AppIHMTask+0x11c>
					Current_Mode = 2;
 8005754:	4b63      	ldr	r3, [pc, #396]	; (80058e4 <AppIHMTask+0x2a4>)
 8005756:	2202      	movs	r2, #2
 8005758:	701a      	strb	r2, [r3, #0]
 800575a:	e005      	b.n	8005768 <AppIHMTask+0x128>
				else
					Current_Mode--;
 800575c:	4b61      	ldr	r3, [pc, #388]	; (80058e4 <AppIHMTask+0x2a4>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	3b01      	subs	r3, #1
 8005762:	b2da      	uxtb	r2, r3
 8005764:	4b5f      	ldr	r3, [pc, #380]	; (80058e4 <AppIHMTask+0x2a4>)
 8005766:	701a      	strb	r2, [r3, #0]
			}

			if(Bp_Ok == BP_CLICK)
 8005768:	4b5d      	ldr	r3, [pc, #372]	; (80058e0 <AppIHMTask+0x2a0>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b01      	cmp	r3, #1
 800576e:	f040 8122 	bne.w	80059b6 <AppIHMTask+0x376>
			{
				Current_Display = DISP_PARAM;
 8005772:	4b57      	ldr	r3, [pc, #348]	; (80058d0 <AppIHMTask+0x290>)
 8005774:	2200      	movs	r2, #0
 8005776:	701a      	strb	r2, [r3, #0]
 8005778:	e11d      	b.n	80059b6 <AppIHMTask+0x376>
			}
		}

		else if(Current_Display == DISP_CONFIG_ADDRESS)
 800577a:	4b55      	ldr	r3, [pc, #340]	; (80058d0 <AppIHMTask+0x290>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b03      	cmp	r3, #3
 8005780:	d17f      	bne.n	8005882 <AppIHMTask+0x242>
		{
			if(Bp_Up == BP_CLICK)
 8005782:	4b54      	ldr	r3, [pc, #336]	; (80058d4 <AppIHMTask+0x294>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d117      	bne.n	80057ba <AppIHMTask+0x17a>
			{
				if(DMX_Adress<512)
 800578a:	4b57      	ldr	r3, [pc, #348]	; (80058e8 <AppIHMTask+0x2a8>)
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005792:	d205      	bcs.n	80057a0 <AppIHMTask+0x160>
					DMX_Adress++;
 8005794:	4b54      	ldr	r3, [pc, #336]	; (80058e8 <AppIHMTask+0x2a8>)
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	3301      	adds	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	4b52      	ldr	r3, [pc, #328]	; (80058e8 <AppIHMTask+0x2a8>)
 800579e:	801a      	strh	r2, [r3, #0]
				param_changed = __TRUE;
 80057a0:	2301      	movs	r3, #1
 80057a2:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 80057a4:	f7fa ffde 	bl	8000764 <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]
				Protocol_DMX_init(DMX_Adress,DMX_uart);
 80057aa:	4b4f      	ldr	r3, [pc, #316]	; (80058e8 <AppIHMTask+0x2a8>)
 80057ac:	881a      	ldrh	r2, [r3, #0]
 80057ae:	4b4f      	ldr	r3, [pc, #316]	; (80058ec <AppIHMTask+0x2ac>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4619      	mov	r1, r3
 80057b4:	4610      	mov	r0, r2
 80057b6:	f7fd fd83 	bl	80032c0 <Protocol_DMX_init>
			}
			if(Bp_Up == BP_1s)
 80057ba:	4b46      	ldr	r3, [pc, #280]	; (80058d4 <AppIHMTask+0x294>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d11c      	bne.n	80057fc <AppIHMTask+0x1bc>
			{
				if(DMX_Adress<=502)
 80057c2:	4b49      	ldr	r3, [pc, #292]	; (80058e8 <AppIHMTask+0x2a8>)
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 80057ca:	d806      	bhi.n	80057da <AppIHMTask+0x19a>
					DMX_Adress+=10;
 80057cc:	4b46      	ldr	r3, [pc, #280]	; (80058e8 <AppIHMTask+0x2a8>)
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	330a      	adds	r3, #10
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	4b44      	ldr	r3, [pc, #272]	; (80058e8 <AppIHMTask+0x2a8>)
 80057d6:	801a      	strh	r2, [r3, #0]
 80057d8:	e003      	b.n	80057e2 <AppIHMTask+0x1a2>
				else
					DMX_Adress=512;
 80057da:	4b43      	ldr	r3, [pc, #268]	; (80058e8 <AppIHMTask+0x2a8>)
 80057dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057e0:	801a      	strh	r2, [r3, #0]
				param_changed = __TRUE;
 80057e2:	2301      	movs	r3, #1
 80057e4:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 80057e6:	f7fa ffbd 	bl	8000764 <HAL_GetTick>
 80057ea:	6138      	str	r0, [r7, #16]
				Protocol_DMX_init(DMX_Adress,DMX_uart);
 80057ec:	4b3e      	ldr	r3, [pc, #248]	; (80058e8 <AppIHMTask+0x2a8>)
 80057ee:	881a      	ldrh	r2, [r3, #0]
 80057f0:	4b3e      	ldr	r3, [pc, #248]	; (80058ec <AppIHMTask+0x2ac>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4619      	mov	r1, r3
 80057f6:	4610      	mov	r0, r2
 80057f8:	f7fd fd62 	bl	80032c0 <Protocol_DMX_init>
			}
			if(Bp_Down == BP_CLICK)
 80057fc:	4b37      	ldr	r3, [pc, #220]	; (80058dc <AppIHMTask+0x29c>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d116      	bne.n	8005832 <AppIHMTask+0x1f2>
			{
				if(DMX_Adress>1)
 8005804:	4b38      	ldr	r3, [pc, #224]	; (80058e8 <AppIHMTask+0x2a8>)
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d905      	bls.n	8005818 <AppIHMTask+0x1d8>
					DMX_Adress--;
 800580c:	4b36      	ldr	r3, [pc, #216]	; (80058e8 <AppIHMTask+0x2a8>)
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	4b34      	ldr	r3, [pc, #208]	; (80058e8 <AppIHMTask+0x2a8>)
 8005816:	801a      	strh	r2, [r3, #0]
				param_changed = __TRUE;
 8005818:	2301      	movs	r3, #1
 800581a:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 800581c:	f7fa ffa2 	bl	8000764 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]
				Protocol_DMX_init(DMX_Adress,DMX_uart);
 8005822:	4b31      	ldr	r3, [pc, #196]	; (80058e8 <AppIHMTask+0x2a8>)
 8005824:	881a      	ldrh	r2, [r3, #0]
 8005826:	4b31      	ldr	r3, [pc, #196]	; (80058ec <AppIHMTask+0x2ac>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4619      	mov	r1, r3
 800582c:	4610      	mov	r0, r2
 800582e:	f7fd fd47 	bl	80032c0 <Protocol_DMX_init>
			}
			if(Bp_Down == BP_1s)
 8005832:	4b2a      	ldr	r3, [pc, #168]	; (80058dc <AppIHMTask+0x29c>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b02      	cmp	r3, #2
 8005838:	d11a      	bne.n	8005870 <AppIHMTask+0x230>
			{
				if(DMX_Adress>=11)
 800583a:	4b2b      	ldr	r3, [pc, #172]	; (80058e8 <AppIHMTask+0x2a8>)
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	2b0a      	cmp	r3, #10
 8005840:	d906      	bls.n	8005850 <AppIHMTask+0x210>
					DMX_Adress-=10;
 8005842:	4b29      	ldr	r3, [pc, #164]	; (80058e8 <AppIHMTask+0x2a8>)
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	3b0a      	subs	r3, #10
 8005848:	b29a      	uxth	r2, r3
 800584a:	4b27      	ldr	r3, [pc, #156]	; (80058e8 <AppIHMTask+0x2a8>)
 800584c:	801a      	strh	r2, [r3, #0]
 800584e:	e002      	b.n	8005856 <AppIHMTask+0x216>
				else
					DMX_Adress=1;
 8005850:	4b25      	ldr	r3, [pc, #148]	; (80058e8 <AppIHMTask+0x2a8>)
 8005852:	2201      	movs	r2, #1
 8005854:	801a      	strh	r2, [r3, #0]
				param_changed = __TRUE;
 8005856:	2301      	movs	r3, #1
 8005858:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 800585a:	f7fa ff83 	bl	8000764 <HAL_GetTick>
 800585e:	6138      	str	r0, [r7, #16]
				Protocol_DMX_init(DMX_Adress,DMX_uart);
 8005860:	4b21      	ldr	r3, [pc, #132]	; (80058e8 <AppIHMTask+0x2a8>)
 8005862:	881a      	ldrh	r2, [r3, #0]
 8005864:	4b21      	ldr	r3, [pc, #132]	; (80058ec <AppIHMTask+0x2ac>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4619      	mov	r1, r3
 800586a:	4610      	mov	r0, r2
 800586c:	f7fd fd28 	bl	80032c0 <Protocol_DMX_init>
			}
			if(Bp_Ok == BP_CLICK)
 8005870:	4b1b      	ldr	r3, [pc, #108]	; (80058e0 <AppIHMTask+0x2a0>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b01      	cmp	r3, #1
 8005876:	f040 809e 	bne.w	80059b6 <AppIHMTask+0x376>
			{
				Current_Display = DISP_PARAM;
 800587a:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <AppIHMTask+0x290>)
 800587c:	2200      	movs	r2, #0
 800587e:	701a      	strb	r2, [r3, #0]
 8005880:	e099      	b.n	80059b6 <AppIHMTask+0x376>
			}
		}

		else if(Current_Display==DISP_CONFIG_MANVALUE)
 8005882:	4b13      	ldr	r3, [pc, #76]	; (80058d0 <AppIHMTask+0x290>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b04      	cmp	r3, #4
 8005888:	d16e      	bne.n	8005968 <AppIHMTask+0x328>
		{
			if(Bp_Up == BP_CLICK)
 800588a:	4b12      	ldr	r3, [pc, #72]	; (80058d4 <AppIHMTask+0x294>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d10e      	bne.n	80058b0 <AppIHMTask+0x270>
			{
				if(Manu_value<100)
 8005892:	4b17      	ldr	r3, [pc, #92]	; (80058f0 <AppIHMTask+0x2b0>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b63      	cmp	r3, #99	; 0x63
 8005898:	d805      	bhi.n	80058a6 <AppIHMTask+0x266>
					Manu_value++;
 800589a:	4b15      	ldr	r3, [pc, #84]	; (80058f0 <AppIHMTask+0x2b0>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	3301      	adds	r3, #1
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	4b13      	ldr	r3, [pc, #76]	; (80058f0 <AppIHMTask+0x2b0>)
 80058a4:	701a      	strb	r2, [r3, #0]
				param_changed = __TRUE;
 80058a6:	2301      	movs	r3, #1
 80058a8:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 80058aa:	f7fa ff5b 	bl	8000764 <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]
			}
			if(Bp_Up == BP_1s)
 80058b0:	4b08      	ldr	r3, [pc, #32]	; (80058d4 <AppIHMTask+0x294>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d125      	bne.n	8005904 <AppIHMTask+0x2c4>
			{
				if(Manu_value<=90)
 80058b8:	4b0d      	ldr	r3, [pc, #52]	; (80058f0 <AppIHMTask+0x2b0>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b5a      	cmp	r3, #90	; 0x5a
 80058be:	d819      	bhi.n	80058f4 <AppIHMTask+0x2b4>
					Manu_value+=10;
 80058c0:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <AppIHMTask+0x2b0>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	330a      	adds	r3, #10
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <AppIHMTask+0x2b0>)
 80058ca:	701a      	strb	r2, [r3, #0]
 80058cc:	e015      	b.n	80058fa <AppIHMTask+0x2ba>
 80058ce:	bf00      	nop
 80058d0:	200018c0 	.word	0x200018c0
 80058d4:	200018d4 	.word	0x200018d4
 80058d8:	200018d5 	.word	0x200018d5
 80058dc:	20001878 	.word	0x20001878
 80058e0:	200018b0 	.word	0x200018b0
 80058e4:	20001894 	.word	0x20001894
 80058e8:	200018dc 	.word	0x200018dc
 80058ec:	20001884 	.word	0x20001884
 80058f0:	20001868 	.word	0x20001868
				else
					Manu_value=100;
 80058f4:	4b39      	ldr	r3, [pc, #228]	; (80059dc <AppIHMTask+0x39c>)
 80058f6:	2264      	movs	r2, #100	; 0x64
 80058f8:	701a      	strb	r2, [r3, #0]
				param_changed = __TRUE;
 80058fa:	2301      	movs	r3, #1
 80058fc:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 80058fe:	f7fa ff31 	bl	8000764 <HAL_GetTick>
 8005902:	6138      	str	r0, [r7, #16]
			}
			if(Bp_Down == BP_CLICK)
 8005904:	4b36      	ldr	r3, [pc, #216]	; (80059e0 <AppIHMTask+0x3a0>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d10e      	bne.n	800592a <AppIHMTask+0x2ea>
			{
				if(Manu_value>0)
 800590c:	4b33      	ldr	r3, [pc, #204]	; (80059dc <AppIHMTask+0x39c>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <AppIHMTask+0x2e0>
					Manu_value--;
 8005914:	4b31      	ldr	r3, [pc, #196]	; (80059dc <AppIHMTask+0x39c>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	3b01      	subs	r3, #1
 800591a:	b2da      	uxtb	r2, r3
 800591c:	4b2f      	ldr	r3, [pc, #188]	; (80059dc <AppIHMTask+0x39c>)
 800591e:	701a      	strb	r2, [r3, #0]
				param_changed = __TRUE;
 8005920:	2301      	movs	r3, #1
 8005922:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 8005924:	f7fa ff1e 	bl	8000764 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]
			}
			if(Bp_Down == BP_1s)
 800592a:	4b2d      	ldr	r3, [pc, #180]	; (80059e0 <AppIHMTask+0x3a0>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	2b02      	cmp	r3, #2
 8005930:	d112      	bne.n	8005958 <AppIHMTask+0x318>
			{
				if(Manu_value>=10)
 8005932:	4b2a      	ldr	r3, [pc, #168]	; (80059dc <AppIHMTask+0x39c>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b09      	cmp	r3, #9
 8005938:	d906      	bls.n	8005948 <AppIHMTask+0x308>
					Manu_value-=10;
 800593a:	4b28      	ldr	r3, [pc, #160]	; (80059dc <AppIHMTask+0x39c>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	3b0a      	subs	r3, #10
 8005940:	b2da      	uxtb	r2, r3
 8005942:	4b26      	ldr	r3, [pc, #152]	; (80059dc <AppIHMTask+0x39c>)
 8005944:	701a      	strb	r2, [r3, #0]
 8005946:	e002      	b.n	800594e <AppIHMTask+0x30e>
				else
					Manu_value=0;
 8005948:	4b24      	ldr	r3, [pc, #144]	; (80059dc <AppIHMTask+0x39c>)
 800594a:	2200      	movs	r2, #0
 800594c:	701a      	strb	r2, [r3, #0]
				param_changed = __TRUE;
 800594e:	2301      	movs	r3, #1
 8005950:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 8005952:	f7fa ff07 	bl	8000764 <HAL_GetTick>
 8005956:	6138      	str	r0, [r7, #16]
			}
			if(Bp_Ok == BP_CLICK)
 8005958:	4b22      	ldr	r3, [pc, #136]	; (80059e4 <AppIHMTask+0x3a4>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d12a      	bne.n	80059b6 <AppIHMTask+0x376>
			{
				Current_Display = DISP_PARAM;
 8005960:	4b21      	ldr	r3, [pc, #132]	; (80059e8 <AppIHMTask+0x3a8>)
 8005962:	2200      	movs	r2, #0
 8005964:	701a      	strb	r2, [r3, #0]
 8005966:	e026      	b.n	80059b6 <AppIHMTask+0x376>
			}
		}

		else if(Current_Display==DISP_CONFIG_INVERT)
 8005968:	4b1f      	ldr	r3, [pc, #124]	; (80059e8 <AppIHMTask+0x3a8>)
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	2b02      	cmp	r3, #2
 800596e:	d122      	bne.n	80059b6 <AppIHMTask+0x376>
		{
			if(Bp_Up == BP_CLICK || Bp_Down == BP_CLICK)
 8005970:	4b1e      	ldr	r3, [pc, #120]	; (80059ec <AppIHMTask+0x3ac>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d003      	beq.n	8005980 <AppIHMTask+0x340>
 8005978:	4b19      	ldr	r3, [pc, #100]	; (80059e0 <AppIHMTask+0x3a0>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d10f      	bne.n	80059a0 <AppIHMTask+0x360>
			{
				param_changed=__TRUE;
 8005980:	2301      	movs	r3, #1
 8005982:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 8005984:	f7fa feee 	bl	8000764 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]
				if(IsInverted)
 800598a:	4b19      	ldr	r3, [pc, #100]	; (80059f0 <AppIHMTask+0x3b0>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <AppIHMTask+0x35a>
					IsInverted = __FALSE;
 8005992:	4b17      	ldr	r3, [pc, #92]	; (80059f0 <AppIHMTask+0x3b0>)
 8005994:	2200      	movs	r2, #0
 8005996:	701a      	strb	r2, [r3, #0]
 8005998:	e002      	b.n	80059a0 <AppIHMTask+0x360>
				else
					IsInverted = __TRUE;
 800599a:	4b15      	ldr	r3, [pc, #84]	; (80059f0 <AppIHMTask+0x3b0>)
 800599c:	2201      	movs	r2, #1
 800599e:	701a      	strb	r2, [r3, #0]
			}
			if(Bp_Ok == BP_CLICK)
 80059a0:	4b10      	ldr	r3, [pc, #64]	; (80059e4 <AppIHMTask+0x3a4>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d106      	bne.n	80059b6 <AppIHMTask+0x376>
			{
				Current_Display = DISP_PARAM;
 80059a8:	4b0f      	ldr	r3, [pc, #60]	; (80059e8 <AppIHMTask+0x3a8>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	701a      	strb	r2, [r3, #0]
 80059ae:	e002      	b.n	80059b6 <AppIHMTask+0x376>
			}
 80059b0:	bf00      	nop
 80059b2:	e000      	b.n	80059b6 <AppIHMTask+0x376>
					break;
 80059b4:	bf00      	nop
			}
		}

		if(HAL_GetTick()>(tick_save_param+DELAY_SAVE_PARAM) && param_changed==__TRUE)
 80059b6:	f7fa fed5 	bl	8000764 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80059c2:	429a      	cmp	r2, r3
 80059c4:	f67f ae44 	bls.w	8005650 <AppIHMTask+0x10>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	f47f ae40 	bne.w	8005650 <AppIHMTask+0x10>
		{
			param_changed = __FALSE;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]
			Write_Param();
 80059d4:	f7ff f8bc 	bl	8004b50 <Write_Param>
		osDelay(TASK_DELAY_IHM);
 80059d8:	e63a      	b.n	8005650 <AppIHMTask+0x10>
 80059da:	bf00      	nop
 80059dc:	20001868 	.word	0x20001868
 80059e0:	20001878 	.word	0x20001878
 80059e4:	200018b0 	.word	0x200018b0
 80059e8:	200018c0 	.word	0x200018c0
 80059ec:	200018d4 	.word	0x200018d4
 80059f0:	20001860 	.word	0x20001860

080059f4 <App_Init>:
	}
}

/* Public function -----------------------------------------------*/
void App_Init()
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
	Load_Param();
 80059f8:	f7ff f864 	bl	8004ac4 <Load_Param>
	Current_Display = DISP_PARAM;
 80059fc:	4b5f      	ldr	r3, [pc, #380]	; (8005b7c <App_Init+0x188>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	701a      	strb	r2, [r3, #0]
	Display_Cursor = 0;
 8005a02:	4b5f      	ldr	r3, [pc, #380]	; (8005b80 <App_Init+0x18c>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	701a      	strb	r2, [r3, #0]

	DMX_signal_OK = __FALSE;
 8005a08:	4b5e      	ldr	r3, [pc, #376]	; (8005b84 <App_Init+0x190>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	701a      	strb	r2, [r3, #0]
	//PWM_SetPWM(LED7_pwmtimer,LED7_PWMchannel,LED_PWM_PERIOD_VALUE,10);		//PWM Off
	//PWM_SetPWM(LED8_pwmtimer,LED8_PWMchannel,LED_PWM_PERIOD_VALUE,10);		//PWM Off
	//PWM_SetPWM(LED9_pwmtimer,LED9_PWMchannel,LED_PWM_PERIOD_VALUE,10);		//PWM Off
	//PWM_SetPWM(LED10_pwmtimer,LED10_PWMchannel,LED_PWM_PERIOD_VALUE,10);		//PWM Off

	HAL_TIM_PWM_Start( LED1_pwmtimer, LED1_PWMchannel );
 8005a0e:	4b5e      	ldr	r3, [pc, #376]	; (8005b88 <App_Init+0x194>)
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	4b5e      	ldr	r3, [pc, #376]	; (8005b8c <App_Init+0x198>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4619      	mov	r1, r3
 8005a18:	4610      	mov	r0, r2
 8005a1a:	f7fc faf7 	bl	800200c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( LED2_pwmtimer, LED2_PWMchannel );
 8005a1e:	4b5c      	ldr	r3, [pc, #368]	; (8005b90 <App_Init+0x19c>)
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	4b5c      	ldr	r3, [pc, #368]	; (8005b94 <App_Init+0x1a0>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4619      	mov	r1, r3
 8005a28:	4610      	mov	r0, r2
 8005a2a:	f7fc faef 	bl	800200c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( LED3_pwmtimer, LED3_PWMchannel );
 8005a2e:	4b5a      	ldr	r3, [pc, #360]	; (8005b98 <App_Init+0x1a4>)
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	4b5a      	ldr	r3, [pc, #360]	; (8005b9c <App_Init+0x1a8>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4619      	mov	r1, r3
 8005a38:	4610      	mov	r0, r2
 8005a3a:	f7fc fae7 	bl	800200c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( LED4_pwmtimer, LED4_PWMchannel );
 8005a3e:	4b58      	ldr	r3, [pc, #352]	; (8005ba0 <App_Init+0x1ac>)
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4b58      	ldr	r3, [pc, #352]	; (8005ba4 <App_Init+0x1b0>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4619      	mov	r1, r3
 8005a48:	4610      	mov	r0, r2
 8005a4a:	f7fc fadf 	bl	800200c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( LED5_pwmtimer, LED5_PWMchannel );
 8005a4e:	4b56      	ldr	r3, [pc, #344]	; (8005ba8 <App_Init+0x1b4>)
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	4b56      	ldr	r3, [pc, #344]	; (8005bac <App_Init+0x1b8>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4619      	mov	r1, r3
 8005a58:	4610      	mov	r0, r2
 8005a5a:	f7fc fad7 	bl	800200c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( LED6_pwmtimer, LED6_PWMchannel );
 8005a5e:	4b54      	ldr	r3, [pc, #336]	; (8005bb0 <App_Init+0x1bc>)
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	4b54      	ldr	r3, [pc, #336]	; (8005bb4 <App_Init+0x1c0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4619      	mov	r1, r3
 8005a68:	4610      	mov	r0, r2
 8005a6a:	f7fc facf 	bl	800200c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( LED7_pwmtimer, LED7_PWMchannel );
 8005a6e:	4b52      	ldr	r3, [pc, #328]	; (8005bb8 <App_Init+0x1c4>)
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	4b52      	ldr	r3, [pc, #328]	; (8005bbc <App_Init+0x1c8>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4619      	mov	r1, r3
 8005a78:	4610      	mov	r0, r2
 8005a7a:	f7fc fac7 	bl	800200c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( LED8_pwmtimer, LED8_PWMchannel );
 8005a7e:	4b50      	ldr	r3, [pc, #320]	; (8005bc0 <App_Init+0x1cc>)
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	4b50      	ldr	r3, [pc, #320]	; (8005bc4 <App_Init+0x1d0>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4619      	mov	r1, r3
 8005a88:	4610      	mov	r0, r2
 8005a8a:	f7fc fabf 	bl	800200c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( LED9_pwmtimer, LED9_PWMchannel );
 8005a8e:	4b4e      	ldr	r3, [pc, #312]	; (8005bc8 <App_Init+0x1d4>)
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	4b4e      	ldr	r3, [pc, #312]	; (8005bcc <App_Init+0x1d8>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4619      	mov	r1, r3
 8005a98:	4610      	mov	r0, r2
 8005a9a:	f7fc fab7 	bl	800200c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( LED10_pwmtimer, LED10_PWMchannel );
 8005a9e:	4b4c      	ldr	r3, [pc, #304]	; (8005bd0 <App_Init+0x1dc>)
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	4b4c      	ldr	r3, [pc, #304]	; (8005bd4 <App_Init+0x1e0>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	f7fc faaf 	bl	800200c <HAL_TIM_PWM_Start>

	PWM_SetDuty(LED1_pwmtimer,LED1_PWMchannel,0);		//PWM Off
 8005aae:	4b36      	ldr	r3, [pc, #216]	; (8005b88 <App_Init+0x194>)
 8005ab0:	6818      	ldr	r0, [r3, #0]
 8005ab2:	4b36      	ldr	r3, [pc, #216]	; (8005b8c <App_Init+0x198>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	4619      	mov	r1, r3
 8005aba:	f7fa fdd3 	bl	8000664 <PWM_SetDuty>
	PWM_SetDuty(LED2_pwmtimer,LED2_PWMchannel,0);		//PWM Off
 8005abe:	4b34      	ldr	r3, [pc, #208]	; (8005b90 <App_Init+0x19c>)
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	4b34      	ldr	r3, [pc, #208]	; (8005b94 <App_Init+0x1a0>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	4619      	mov	r1, r3
 8005aca:	f7fa fdcb 	bl	8000664 <PWM_SetDuty>
	PWM_SetDuty(LED3_pwmtimer,LED3_PWMchannel,0);		//PWM Off
 8005ace:	4b32      	ldr	r3, [pc, #200]	; (8005b98 <App_Init+0x1a4>)
 8005ad0:	6818      	ldr	r0, [r3, #0]
 8005ad2:	4b32      	ldr	r3, [pc, #200]	; (8005b9c <App_Init+0x1a8>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	4619      	mov	r1, r3
 8005ada:	f7fa fdc3 	bl	8000664 <PWM_SetDuty>
	PWM_SetDuty(LED4_pwmtimer,LED4_PWMchannel,0);		//PWM Off
 8005ade:	4b30      	ldr	r3, [pc, #192]	; (8005ba0 <App_Init+0x1ac>)
 8005ae0:	6818      	ldr	r0, [r3, #0]
 8005ae2:	4b30      	ldr	r3, [pc, #192]	; (8005ba4 <App_Init+0x1b0>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	4619      	mov	r1, r3
 8005aea:	f7fa fdbb 	bl	8000664 <PWM_SetDuty>
	PWM_SetDuty(LED5_pwmtimer,LED5_PWMchannel,0);		//PWM Off
 8005aee:	4b2e      	ldr	r3, [pc, #184]	; (8005ba8 <App_Init+0x1b4>)
 8005af0:	6818      	ldr	r0, [r3, #0]
 8005af2:	4b2e      	ldr	r3, [pc, #184]	; (8005bac <App_Init+0x1b8>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2200      	movs	r2, #0
 8005af8:	4619      	mov	r1, r3
 8005afa:	f7fa fdb3 	bl	8000664 <PWM_SetDuty>
	PWM_SetDuty(LED6_pwmtimer,LED6_PWMchannel,0);		//PWM Off
 8005afe:	4b2c      	ldr	r3, [pc, #176]	; (8005bb0 <App_Init+0x1bc>)
 8005b00:	6818      	ldr	r0, [r3, #0]
 8005b02:	4b2c      	ldr	r3, [pc, #176]	; (8005bb4 <App_Init+0x1c0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2200      	movs	r2, #0
 8005b08:	4619      	mov	r1, r3
 8005b0a:	f7fa fdab 	bl	8000664 <PWM_SetDuty>
	PWM_SetDuty(LED7_pwmtimer,LED7_PWMchannel,0);		//PWM Off
 8005b0e:	4b2a      	ldr	r3, [pc, #168]	; (8005bb8 <App_Init+0x1c4>)
 8005b10:	6818      	ldr	r0, [r3, #0]
 8005b12:	4b2a      	ldr	r3, [pc, #168]	; (8005bbc <App_Init+0x1c8>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2200      	movs	r2, #0
 8005b18:	4619      	mov	r1, r3
 8005b1a:	f7fa fda3 	bl	8000664 <PWM_SetDuty>
	PWM_SetDuty(LED8_pwmtimer,LED8_PWMchannel,0);		//PWM Off
 8005b1e:	4b28      	ldr	r3, [pc, #160]	; (8005bc0 <App_Init+0x1cc>)
 8005b20:	6818      	ldr	r0, [r3, #0]
 8005b22:	4b28      	ldr	r3, [pc, #160]	; (8005bc4 <App_Init+0x1d0>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2200      	movs	r2, #0
 8005b28:	4619      	mov	r1, r3
 8005b2a:	f7fa fd9b 	bl	8000664 <PWM_SetDuty>
	PWM_SetDuty(LED9_pwmtimer,LED9_PWMchannel,0);		//PWM Off
 8005b2e:	4b26      	ldr	r3, [pc, #152]	; (8005bc8 <App_Init+0x1d4>)
 8005b30:	6818      	ldr	r0, [r3, #0]
 8005b32:	4b26      	ldr	r3, [pc, #152]	; (8005bcc <App_Init+0x1d8>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2200      	movs	r2, #0
 8005b38:	4619      	mov	r1, r3
 8005b3a:	f7fa fd93 	bl	8000664 <PWM_SetDuty>
	PWM_SetDuty(LED10_pwmtimer,LED10_PWMchannel,0);		//PWM Off
 8005b3e:	4b24      	ldr	r3, [pc, #144]	; (8005bd0 <App_Init+0x1dc>)
 8005b40:	6818      	ldr	r0, [r3, #0]
 8005b42:	4b24      	ldr	r3, [pc, #144]	; (8005bd4 <App_Init+0x1e0>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2200      	movs	r2, #0
 8005b48:	4619      	mov	r1, r3
 8005b4a:	f7fa fd8b 	bl	8000664 <PWM_SetDuty>


	Protocol_DMX_init(DMX_Adress,DMX_uart);
 8005b4e:	4b22      	ldr	r3, [pc, #136]	; (8005bd8 <App_Init+0x1e4>)
 8005b50:	881a      	ldrh	r2, [r3, #0]
 8005b52:	4b22      	ldr	r3, [pc, #136]	; (8005bdc <App_Init+0x1e8>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4619      	mov	r1, r3
 8005b58:	4610      	mov	r0, r2
 8005b5a:	f7fd fbb1 	bl	80032c0 <Protocol_DMX_init>
	//SSD1306_Init(hi2c_display);  // initialise
	SSD1306_Init();  // initialise
 8005b5e:	f7fa faf7 	bl	8000150 <SSD1306_Init>

	Bp_Up = BP_OFF;
 8005b62:	4b1f      	ldr	r3, [pc, #124]	; (8005be0 <App_Init+0x1ec>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	701a      	strb	r2, [r3, #0]
	Bp_Down = BP_OFF;
 8005b68:	4b1e      	ldr	r3, [pc, #120]	; (8005be4 <App_Init+0x1f0>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	701a      	strb	r2, [r3, #0]
	Bp_Ok = BP_OFF;
 8005b6e:	4b1e      	ldr	r3, [pc, #120]	; (8005be8 <App_Init+0x1f4>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	701a      	strb	r2, [r3, #0]

	CreatAppTasks();
 8005b74:	f000 f83a 	bl	8005bec <CreatAppTasks>
}
 8005b78:	bf00      	nop
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	200018c0 	.word	0x200018c0
 8005b80:	200018d5 	.word	0x200018d5
 8005b84:	20001869 	.word	0x20001869
 8005b88:	2000188c 	.word	0x2000188c
 8005b8c:	20001864 	.word	0x20001864
 8005b90:	200018b8 	.word	0x200018b8
 8005b94:	20001874 	.word	0x20001874
 8005b98:	2000187c 	.word	0x2000187c
 8005b9c:	20001898 	.word	0x20001898
 8005ba0:	200018a8 	.word	0x200018a8
 8005ba4:	200018bc 	.word	0x200018bc
 8005ba8:	20001858 	.word	0x20001858
 8005bac:	200018d8 	.word	0x200018d8
 8005bb0:	20001890 	.word	0x20001890
 8005bb4:	20001880 	.word	0x20001880
 8005bb8:	2000189c 	.word	0x2000189c
 8005bbc:	200018a0 	.word	0x200018a0
 8005bc0:	200018e0 	.word	0x200018e0
 8005bc4:	200018ac 	.word	0x200018ac
 8005bc8:	200018b4 	.word	0x200018b4
 8005bcc:	2000185c 	.word	0x2000185c
 8005bd0:	2000186c 	.word	0x2000186c
 8005bd4:	200018a4 	.word	0x200018a4
 8005bd8:	200018dc 	.word	0x200018dc
 8005bdc:	20001884 	.word	0x20001884
 8005be0:	200018d4 	.word	0x200018d4
 8005be4:	20001878 	.word	0x20001878
 8005be8:	200018b0 	.word	0x200018b0

08005bec <CreatAppTasks>:

void CreatAppTasks (void)
{
 8005bec:	b5b0      	push	{r4, r5, r7, lr}
 8005bee:	b08e      	sub	sp, #56	; 0x38
 8005bf0:	af00      	add	r7, sp, #0
	osThreadDef(App_LED_Task, AppLEDTask, osPriorityHigh, 0, 256);
 8005bf2:	4b14      	ldr	r3, [pc, #80]	; (8005c44 <CreatAppTasks+0x58>)
 8005bf4:	f107 041c 	add.w	r4, r7, #28
 8005bf8:	461d      	mov	r5, r3
 8005bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bfe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005c02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	AppLEDTaskHandle = osThreadCreate(osThread(App_LED_Task), NULL);
 8005c06:	f107 031c 	add.w	r3, r7, #28
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fd fd96 	bl	800373e <osThreadCreate>
 8005c12:	4602      	mov	r2, r0
 8005c14:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <CreatAppTasks+0x5c>)
 8005c16:	601a      	str	r2, [r3, #0]

	osThreadDef(App_IHM_Task, AppIHMTask, osPriorityNormal, 0, 256);
 8005c18:	4b0c      	ldr	r3, [pc, #48]	; (8005c4c <CreatAppTasks+0x60>)
 8005c1a:	463c      	mov	r4, r7
 8005c1c:	461d      	mov	r5, r3
 8005c1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005c26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	AppIHMTaskHandle = osThreadCreate(osThread(App_IHM_Task), NULL);
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fd fd85 	bl	800373e <osThreadCreate>
 8005c34:	4602      	mov	r2, r0
 8005c36:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <CreatAppTasks+0x64>)
 8005c38:	601a      	str	r2, [r3, #0]
}
 8005c3a:	bf00      	nop
 8005c3c:	3738      	adds	r7, #56	; 0x38
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bdb0      	pop	{r4, r5, r7, pc}
 8005c42:	bf00      	nop
 8005c44:	08006b98 	.word	0x08006b98
 8005c48:	200018e4 	.word	0x200018e4
 8005c4c:	08006bc4 	.word	0x08006bc4
 8005c50:	20001888 	.word	0x20001888

08005c54 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
	Protocol_DMX_UartCallback(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7fd fb8f 	bl	8003380 <Protocol_DMX_UartCallback>
}
 8005c62:	bf00      	nop
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8005c72:	1d3b      	adds	r3, r7, #4
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	605a      	str	r2, [r3, #4]
 8005c7a:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8005c7c:	4b18      	ldr	r3, [pc, #96]	; (8005ce0 <MX_ADC1_Init+0x74>)
 8005c7e:	4a19      	ldr	r2, [pc, #100]	; (8005ce4 <MX_ADC1_Init+0x78>)
 8005c80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005c82:	4b17      	ldr	r3, [pc, #92]	; (8005ce0 <MX_ADC1_Init+0x74>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005c88:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <MX_ADC1_Init+0x74>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005c8e:	4b14      	ldr	r3, [pc, #80]	; (8005ce0 <MX_ADC1_Init+0x74>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005c94:	4b12      	ldr	r3, [pc, #72]	; (8005ce0 <MX_ADC1_Init+0x74>)
 8005c96:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005c9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005c9c:	4b10      	ldr	r3, [pc, #64]	; (8005ce0 <MX_ADC1_Init+0x74>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8005ca2:	4b0f      	ldr	r3, [pc, #60]	; (8005ce0 <MX_ADC1_Init+0x74>)
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005ca8:	480d      	ldr	r0, [pc, #52]	; (8005ce0 <MX_ADC1_Init+0x74>)
 8005caa:	f7fa fd65 	bl	8000778 <HAL_ADC_Init>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8005cb4:	f000 fa38 	bl	8006128 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005cb8:	2309      	movs	r3, #9
 8005cba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005cc4:	1d3b      	adds	r3, r7, #4
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	4805      	ldr	r0, [pc, #20]	; (8005ce0 <MX_ADC1_Init+0x74>)
 8005cca:	f7fa fe2d 	bl	8000928 <HAL_ADC_ConfigChannel>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8005cd4:	f000 fa28 	bl	8006128 <Error_Handler>
  }

}
 8005cd8:	bf00      	nop
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	200018e8 	.word	0x200018e8
 8005ce4:	40012400 	.word	0x40012400

08005ce8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b08a      	sub	sp, #40	; 0x28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cf0:	f107 0318 	add.w	r3, r7, #24
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	605a      	str	r2, [r3, #4]
 8005cfa:	609a      	str	r2, [r3, #8]
 8005cfc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a1f      	ldr	r2, [pc, #124]	; (8005d80 <HAL_ADC_MspInit+0x98>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d137      	bne.n	8005d78 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005d08:	4b1e      	ldr	r3, [pc, #120]	; (8005d84 <HAL_ADC_MspInit+0x9c>)
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	4a1d      	ldr	r2, [pc, #116]	; (8005d84 <HAL_ADC_MspInit+0x9c>)
 8005d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d12:	6193      	str	r3, [r2, #24]
 8005d14:	4b1b      	ldr	r3, [pc, #108]	; (8005d84 <HAL_ADC_MspInit+0x9c>)
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d1c:	617b      	str	r3, [r7, #20]
 8005d1e:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d20:	4b18      	ldr	r3, [pc, #96]	; (8005d84 <HAL_ADC_MspInit+0x9c>)
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	4a17      	ldr	r2, [pc, #92]	; (8005d84 <HAL_ADC_MspInit+0x9c>)
 8005d26:	f043 0304 	orr.w	r3, r3, #4
 8005d2a:	6193      	str	r3, [r2, #24]
 8005d2c:	4b15      	ldr	r3, [pc, #84]	; (8005d84 <HAL_ADC_MspInit+0x9c>)
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	613b      	str	r3, [r7, #16]
 8005d36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d38:	4b12      	ldr	r3, [pc, #72]	; (8005d84 <HAL_ADC_MspInit+0x9c>)
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	4a11      	ldr	r2, [pc, #68]	; (8005d84 <HAL_ADC_MspInit+0x9c>)
 8005d3e:	f043 0308 	orr.w	r3, r3, #8
 8005d42:	6193      	str	r3, [r2, #24]
 8005d44:	4b0f      	ldr	r3, [pc, #60]	; (8005d84 <HAL_ADC_MspInit+0x9c>)
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	f003 0308 	and.w	r3, r3, #8
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = CTN_Pin;
 8005d50:	2380      	movs	r3, #128	; 0x80
 8005d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d54:	2303      	movs	r3, #3
 8005d56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CTN_GPIO_Port, &GPIO_InitStruct);
 8005d58:	f107 0318 	add.w	r3, r7, #24
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	480a      	ldr	r0, [pc, #40]	; (8005d88 <HAL_ADC_MspInit+0xa0>)
 8005d60:	f7fb fa98 	bl	8001294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VOLTAGE_Pin;
 8005d64:	2302      	movs	r3, #2
 8005d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8005d6c:	f107 0318 	add.w	r3, r7, #24
 8005d70:	4619      	mov	r1, r3
 8005d72:	4806      	ldr	r0, [pc, #24]	; (8005d8c <HAL_ADC_MspInit+0xa4>)
 8005d74:	f7fb fa8e 	bl	8001294 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005d78:	bf00      	nop
 8005d7a:	3728      	adds	r7, #40	; 0x28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40012400 	.word	0x40012400
 8005d84:	40021000 	.word	0x40021000
 8005d88:	40010800 	.word	0x40010800
 8005d8c:	40010c00 	.word	0x40010c00

08005d90 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4a06      	ldr	r2, [pc, #24]	; (8005db8 <vApplicationGetIdleTaskMemory+0x28>)
 8005da0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	4a05      	ldr	r2, [pc, #20]	; (8005dbc <vApplicationGetIdleTaskMemory+0x2c>)
 8005da6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2280      	movs	r2, #128	; 0x80
 8005dac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8005dae:	bf00      	nop
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bc80      	pop	{r7}
 8005db6:	4770      	bx	lr
 8005db8:	20001198 	.word	0x20001198
 8005dbc:	200011ec 	.word	0x200011ec

08005dc0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8005dc0:	b5b0      	push	{r4, r5, r7, lr}
 8005dc2:	b088      	sub	sp, #32
 8005dc4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8005dc6:	4b0a      	ldr	r3, [pc, #40]	; (8005df0 <MX_FREERTOS_Init+0x30>)
 8005dc8:	1d3c      	adds	r4, r7, #4
 8005dca:	461d      	mov	r5, r3
 8005dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005dd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8005dd8:	1d3b      	adds	r3, r7, #4
 8005dda:	2100      	movs	r1, #0
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fd fcae 	bl	800373e <osThreadCreate>
 8005de2:	4602      	mov	r2, r0
 8005de4:	4b03      	ldr	r3, [pc, #12]	; (8005df4 <MX_FREERTOS_Init+0x34>)
 8005de6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8005de8:	bf00      	nop
 8005dea:	3720      	adds	r7, #32
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bdb0      	pop	{r4, r5, r7, pc}
 8005df0:	08006bec 	.word	0x08006bec
 8005df4:	20001918 	.word	0x20001918

08005df8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8005e00:	2001      	movs	r0, #1
 8005e02:	f7fd fce9 	bl	80037d8 <osDelay>
 8005e06:	e7fb      	b.n	8005e00 <StartDefaultTask+0x8>

08005e08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e0e:	f107 0310 	add.w	r3, r7, #16
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	605a      	str	r2, [r3, #4]
 8005e18:	609a      	str	r2, [r3, #8]
 8005e1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e1c:	4b43      	ldr	r3, [pc, #268]	; (8005f2c <MX_GPIO_Init+0x124>)
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	4a42      	ldr	r2, [pc, #264]	; (8005f2c <MX_GPIO_Init+0x124>)
 8005e22:	f043 0310 	orr.w	r3, r3, #16
 8005e26:	6193      	str	r3, [r2, #24]
 8005e28:	4b40      	ldr	r3, [pc, #256]	; (8005f2c <MX_GPIO_Init+0x124>)
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	f003 0310 	and.w	r3, r3, #16
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e34:	4b3d      	ldr	r3, [pc, #244]	; (8005f2c <MX_GPIO_Init+0x124>)
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	4a3c      	ldr	r2, [pc, #240]	; (8005f2c <MX_GPIO_Init+0x124>)
 8005e3a:	f043 0320 	orr.w	r3, r3, #32
 8005e3e:	6193      	str	r3, [r2, #24]
 8005e40:	4b3a      	ldr	r3, [pc, #232]	; (8005f2c <MX_GPIO_Init+0x124>)
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	f003 0320 	and.w	r3, r3, #32
 8005e48:	60bb      	str	r3, [r7, #8]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e4c:	4b37      	ldr	r3, [pc, #220]	; (8005f2c <MX_GPIO_Init+0x124>)
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	4a36      	ldr	r2, [pc, #216]	; (8005f2c <MX_GPIO_Init+0x124>)
 8005e52:	f043 0304 	orr.w	r3, r3, #4
 8005e56:	6193      	str	r3, [r2, #24]
 8005e58:	4b34      	ldr	r3, [pc, #208]	; (8005f2c <MX_GPIO_Init+0x124>)
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	607b      	str	r3, [r7, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e64:	4b31      	ldr	r3, [pc, #196]	; (8005f2c <MX_GPIO_Init+0x124>)
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	4a30      	ldr	r2, [pc, #192]	; (8005f2c <MX_GPIO_Init+0x124>)
 8005e6a:	f043 0308 	orr.w	r3, r3, #8
 8005e6e:	6193      	str	r3, [r2, #24]
 8005e70:	4b2e      	ldr	r3, [pc, #184]	; (8005f2c <MX_GPIO_Init+0x124>)
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	f003 0308 	and.w	r3, r3, #8
 8005e78:	603b      	str	r3, [r7, #0]
 8005e7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_V_Pin|RE_DE_Pin, GPIO_PIN_RESET);
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8005e82:	482b      	ldr	r0, [pc, #172]	; (8005f30 <MX_GPIO_Init+0x128>)
 8005e84:	f7fb fb77 	bl	8001576 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCL_IO_Pin|SDA_IO_Pin, GPIO_PIN_SET);
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005e8e:	4829      	ldr	r0, [pc, #164]	; (8005f34 <MX_GPIO_Init+0x12c>)
 8005e90:	f7fb fb71 	bl	8001576 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_V_Pin|RE_DE_Pin;
 8005e94:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005e98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ea6:	f107 0310 	add.w	r3, r7, #16
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4820      	ldr	r0, [pc, #128]	; (8005f30 <MX_GPIO_Init+0x128>)
 8005eae:	f7fb f9f1 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T1_Pin;
 8005eb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005eb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(T1_GPIO_Port, &GPIO_InitStruct);
 8005ec0:	f107 0310 	add.w	r3, r7, #16
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	481a      	ldr	r0, [pc, #104]	; (8005f30 <MX_GPIO_Init+0x128>)
 8005ec8:	f7fb f9e4 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = T2_Pin|T3_Pin;
 8005ecc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005ed0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005eda:	f107 0310 	add.w	r3, r7, #16
 8005ede:	4619      	mov	r1, r3
 8005ee0:	4814      	ldr	r0, [pc, #80]	; (8005f34 <MX_GPIO_Init+0x12c>)
 8005ee2:	f7fb f9d7 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SCL_IO_Pin;
 8005ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005eea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005eec:	2311      	movs	r3, #17
 8005eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SCL_IO_GPIO_Port, &GPIO_InitStruct);
 8005ef8:	f107 0310 	add.w	r3, r7, #16
 8005efc:	4619      	mov	r1, r3
 8005efe:	480d      	ldr	r0, [pc, #52]	; (8005f34 <MX_GPIO_Init+0x12c>)
 8005f00:	f7fb f9c8 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDA_IO_Pin;
 8005f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f12:	2302      	movs	r3, #2
 8005f14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDA_IO_GPIO_Port, &GPIO_InitStruct);
 8005f16:	f107 0310 	add.w	r3, r7, #16
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	4805      	ldr	r0, [pc, #20]	; (8005f34 <MX_GPIO_Init+0x12c>)
 8005f1e:	f7fb f9b9 	bl	8001294 <HAL_GPIO_Init>

}
 8005f22:	bf00      	nop
 8005f24:	3720      	adds	r7, #32
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	40011000 	.word	0x40011000
 8005f34:	40010c00 	.word	0x40010c00

08005f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005f3c:	f7fa fbba 	bl	80006b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005f40:	f000 f89a 	bl	8006078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005f44:	f7ff ff60 	bl	8005e08 <MX_GPIO_Init>
  MX_TIM2_Init();
 8005f48:	f000 fa54 	bl	80063f4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8005f4c:	f000 fc6a 	bl	8006824 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8005f50:	f000 fc92 	bl	8006878 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8005f54:	f000 fae4 	bl	8006520 <MX_TIM3_Init>
  MX_ADC1_Init();
 8005f58:	f7ff fe88 	bl	8005c6c <MX_ADC1_Init>
  MX_TIM1_Init();
 8005f5c:	f000 f986 	bl	800626c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  GENE_I2C_Init(GPIOB, SDA_IO_Pin, GPIOB, SCL_IO_Pin);
 8005f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f64:	4a28      	ldr	r2, [pc, #160]	; (8006008 <main+0xd0>)
 8005f66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f6a:	4827      	ldr	r0, [pc, #156]	; (8006008 <main+0xd0>)
 8005f6c:	f7fd fa78 	bl	8003460 <GENE_I2C_Init>

  DMX_uart = &huart2;
 8005f70:	4b26      	ldr	r3, [pc, #152]	; (800600c <main+0xd4>)
 8005f72:	4a27      	ldr	r2, [pc, #156]	; (8006010 <main+0xd8>)
 8005f74:	601a      	str	r2, [r3, #0]

  LED1_pwmtimer = &htim1;
 8005f76:	4b27      	ldr	r3, [pc, #156]	; (8006014 <main+0xdc>)
 8005f78:	4a27      	ldr	r2, [pc, #156]	; (8006018 <main+0xe0>)
 8005f7a:	601a      	str	r2, [r3, #0]
  LED1_PWMchannel = TIM_CHANNEL_4;
 8005f7c:	4b27      	ldr	r3, [pc, #156]	; (800601c <main+0xe4>)
 8005f7e:	220c      	movs	r2, #12
 8005f80:	601a      	str	r2, [r3, #0]
  LED2_pwmtimer = &htim1;
 8005f82:	4b27      	ldr	r3, [pc, #156]	; (8006020 <main+0xe8>)
 8005f84:	4a24      	ldr	r2, [pc, #144]	; (8006018 <main+0xe0>)
 8005f86:	601a      	str	r2, [r3, #0]
  LED2_PWMchannel = TIM_CHANNEL_3;
 8005f88:	4b26      	ldr	r3, [pc, #152]	; (8006024 <main+0xec>)
 8005f8a:	2208      	movs	r2, #8
 8005f8c:	601a      	str	r2, [r3, #0]
  LED3_pwmtimer = &htim1;
 8005f8e:	4b26      	ldr	r3, [pc, #152]	; (8006028 <main+0xf0>)
 8005f90:	4a21      	ldr	r2, [pc, #132]	; (8006018 <main+0xe0>)
 8005f92:	601a      	str	r2, [r3, #0]
  LED3_PWMchannel = TIM_CHANNEL_2;
 8005f94:	4b25      	ldr	r3, [pc, #148]	; (800602c <main+0xf4>)
 8005f96:	2204      	movs	r2, #4
 8005f98:	601a      	str	r2, [r3, #0]
  LED4_pwmtimer = &htim1;
 8005f9a:	4b25      	ldr	r3, [pc, #148]	; (8006030 <main+0xf8>)
 8005f9c:	4a1e      	ldr	r2, [pc, #120]	; (8006018 <main+0xe0>)
 8005f9e:	601a      	str	r2, [r3, #0]
  LED4_PWMchannel = TIM_CHANNEL_1;
 8005fa0:	4b24      	ldr	r3, [pc, #144]	; (8006034 <main+0xfc>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	601a      	str	r2, [r3, #0]
  LED5_pwmtimer = &htim2;
 8005fa6:	4b24      	ldr	r3, [pc, #144]	; (8006038 <main+0x100>)
 8005fa8:	4a24      	ldr	r2, [pc, #144]	; (800603c <main+0x104>)
 8005faa:	601a      	str	r2, [r3, #0]
  LED5_PWMchannel = TIM_CHANNEL_1;
 8005fac:	4b24      	ldr	r3, [pc, #144]	; (8006040 <main+0x108>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]
  LED6_pwmtimer = &htim2;
 8005fb2:	4b24      	ldr	r3, [pc, #144]	; (8006044 <main+0x10c>)
 8005fb4:	4a21      	ldr	r2, [pc, #132]	; (800603c <main+0x104>)
 8005fb6:	601a      	str	r2, [r3, #0]
  LED6_PWMchannel = TIM_CHANNEL_2;
 8005fb8:	4b23      	ldr	r3, [pc, #140]	; (8006048 <main+0x110>)
 8005fba:	2204      	movs	r2, #4
 8005fbc:	601a      	str	r2, [r3, #0]
  LED7_pwmtimer = &htim2;
 8005fbe:	4b23      	ldr	r3, [pc, #140]	; (800604c <main+0x114>)
 8005fc0:	4a1e      	ldr	r2, [pc, #120]	; (800603c <main+0x104>)
 8005fc2:	601a      	str	r2, [r3, #0]
  LED7_PWMchannel = TIM_CHANNEL_3;
 8005fc4:	4b22      	ldr	r3, [pc, #136]	; (8006050 <main+0x118>)
 8005fc6:	2208      	movs	r2, #8
 8005fc8:	601a      	str	r2, [r3, #0]
  LED8_pwmtimer = &htim2;
 8005fca:	4b22      	ldr	r3, [pc, #136]	; (8006054 <main+0x11c>)
 8005fcc:	4a1b      	ldr	r2, [pc, #108]	; (800603c <main+0x104>)
 8005fce:	601a      	str	r2, [r3, #0]
  LED8_PWMchannel = TIM_CHANNEL_4;
 8005fd0:	4b21      	ldr	r3, [pc, #132]	; (8006058 <main+0x120>)
 8005fd2:	220c      	movs	r2, #12
 8005fd4:	601a      	str	r2, [r3, #0]
  LED9_pwmtimer = &htim3;
 8005fd6:	4b21      	ldr	r3, [pc, #132]	; (800605c <main+0x124>)
 8005fd8:	4a21      	ldr	r2, [pc, #132]	; (8006060 <main+0x128>)
 8005fda:	601a      	str	r2, [r3, #0]
  LED9_PWMchannel = TIM_CHANNEL_1;
 8005fdc:	4b21      	ldr	r3, [pc, #132]	; (8006064 <main+0x12c>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	601a      	str	r2, [r3, #0]
  LED10_pwmtimer = &htim3;
 8005fe2:	4b21      	ldr	r3, [pc, #132]	; (8006068 <main+0x130>)
 8005fe4:	4a1e      	ldr	r2, [pc, #120]	; (8006060 <main+0x128>)
 8005fe6:	601a      	str	r2, [r3, #0]
  LED10_PWMchannel = TIM_CHANNEL_2;
 8005fe8:	4b20      	ldr	r3, [pc, #128]	; (800606c <main+0x134>)
 8005fea:	2204      	movs	r2, #4
 8005fec:	601a      	str	r2, [r3, #0]

  FAN_pwmtimer = &htim3;
 8005fee:	4b20      	ldr	r3, [pc, #128]	; (8006070 <main+0x138>)
 8005ff0:	4a1b      	ldr	r2, [pc, #108]	; (8006060 <main+0x128>)
 8005ff2:	601a      	str	r2, [r3, #0]
  FAN_PWMchannel = TIM_CHANNEL_3;
 8005ff4:	4b1f      	ldr	r3, [pc, #124]	; (8006074 <main+0x13c>)
 8005ff6:	2208      	movs	r2, #8
 8005ff8:	601a      	str	r2, [r3, #0]

  //hi2c_display = &hi2c1;

  App_Init();
 8005ffa:	f7ff fcfb 	bl	80059f4 <App_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8005ffe:	f7ff fedf 	bl	8005dc0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8006002:	f7fd fb95 	bl	8003730 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8006006:	e7fe      	b.n	8006006 <main+0xce>
 8006008:	40010c00 	.word	0x40010c00
 800600c:	20001884 	.word	0x20001884
 8006010:	20001a1c 	.word	0x20001a1c
 8006014:	2000188c 	.word	0x2000188c
 8006018:	2000195c 	.word	0x2000195c
 800601c:	20001864 	.word	0x20001864
 8006020:	200018b8 	.word	0x200018b8
 8006024:	20001874 	.word	0x20001874
 8006028:	2000187c 	.word	0x2000187c
 800602c:	20001898 	.word	0x20001898
 8006030:	200018a8 	.word	0x200018a8
 8006034:	200018bc 	.word	0x200018bc
 8006038:	20001858 	.word	0x20001858
 800603c:	2000199c 	.word	0x2000199c
 8006040:	200018d8 	.word	0x200018d8
 8006044:	20001890 	.word	0x20001890
 8006048:	20001880 	.word	0x20001880
 800604c:	2000189c 	.word	0x2000189c
 8006050:	200018a0 	.word	0x200018a0
 8006054:	200018e0 	.word	0x200018e0
 8006058:	200018ac 	.word	0x200018ac
 800605c:	200018b4 	.word	0x200018b4
 8006060:	2000191c 	.word	0x2000191c
 8006064:	2000185c 	.word	0x2000185c
 8006068:	2000186c 	.word	0x2000186c
 800606c:	200018a4 	.word	0x200018a4
 8006070:	200018c4 	.word	0x200018c4
 8006074:	20001870 	.word	0x20001870

08006078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b094      	sub	sp, #80	; 0x50
 800607c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800607e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006082:	2228      	movs	r2, #40	; 0x28
 8006084:	2100      	movs	r1, #0
 8006086:	4618      	mov	r0, r3
 8006088:	f000 fd08 	bl	8006a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800608c:	f107 0314 	add.w	r3, r7, #20
 8006090:	2200      	movs	r2, #0
 8006092:	601a      	str	r2, [r3, #0]
 8006094:	605a      	str	r2, [r3, #4]
 8006096:	609a      	str	r2, [r3, #8]
 8006098:	60da      	str	r2, [r3, #12]
 800609a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800609c:	1d3b      	adds	r3, r7, #4
 800609e:	2200      	movs	r2, #0
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	605a      	str	r2, [r3, #4]
 80060a4:	609a      	str	r2, [r3, #8]
 80060a6:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80060a8:	2301      	movs	r3, #1
 80060aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80060ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80060b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80060b2:	2300      	movs	r3, #0
 80060b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80060b6:	2301      	movs	r3, #1
 80060b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80060ba:	2302      	movs	r3, #2
 80060bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80060be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80060c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80060c4:	2300      	movs	r3, #0
 80060c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80060c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fb fa6b 	bl	80015a8 <HAL_RCC_OscConfig>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <SystemClock_Config+0x64>
  {
    Error_Handler();
 80060d8:	f000 f826 	bl	8006128 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80060dc:	230f      	movs	r3, #15
 80060de:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80060e0:	2302      	movs	r3, #2
 80060e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80060e4:	2300      	movs	r3, #0
 80060e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80060e8:	2300      	movs	r3, #0
 80060ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80060ec:	2300      	movs	r3, #0
 80060ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80060f0:	f107 0314 	add.w	r3, r7, #20
 80060f4:	2100      	movs	r1, #0
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fb fcd6 	bl	8001aa8 <HAL_RCC_ClockConfig>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8006102:	f000 f811 	bl	8006128 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006106:	2302      	movs	r3, #2
 8006108:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800610e:	1d3b      	adds	r3, r7, #4
 8006110:	4618      	mov	r0, r3
 8006112:	f7fb fe65 	bl	8001de0 <HAL_RCCEx_PeriphCLKConfig>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800611c:	f000 f804 	bl	8006128 <Error_Handler>
  }
}
 8006120:	bf00      	nop
 8006122:	3750      	adds	r7, #80	; 0x50
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006128:	b480      	push	{r7}
 800612a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800612c:	bf00      	nop
 800612e:	46bd      	mov	sp, r7
 8006130:	bc80      	pop	{r7}
 8006132:	4770      	bx	lr

08006134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800613a:	4b18      	ldr	r3, [pc, #96]	; (800619c <HAL_MspInit+0x68>)
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	4a17      	ldr	r2, [pc, #92]	; (800619c <HAL_MspInit+0x68>)
 8006140:	f043 0301 	orr.w	r3, r3, #1
 8006144:	6193      	str	r3, [r2, #24]
 8006146:	4b15      	ldr	r3, [pc, #84]	; (800619c <HAL_MspInit+0x68>)
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	60bb      	str	r3, [r7, #8]
 8006150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006152:	4b12      	ldr	r3, [pc, #72]	; (800619c <HAL_MspInit+0x68>)
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	4a11      	ldr	r2, [pc, #68]	; (800619c <HAL_MspInit+0x68>)
 8006158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800615c:	61d3      	str	r3, [r2, #28]
 800615e:	4b0f      	ldr	r3, [pc, #60]	; (800619c <HAL_MspInit+0x68>)
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006166:	607b      	str	r3, [r7, #4]
 8006168:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800616a:	2200      	movs	r2, #0
 800616c:	210f      	movs	r1, #15
 800616e:	f06f 0001 	mvn.w	r0, #1
 8006172:	f7fa fde2 	bl	8000d3a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006176:	4b0a      	ldr	r3, [pc, #40]	; (80061a0 <HAL_MspInit+0x6c>)
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	4a04      	ldr	r2, [pc, #16]	; (80061a0 <HAL_MspInit+0x6c>)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006192:	bf00      	nop
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	40021000 	.word	0x40021000
 80061a0:	40010000 	.word	0x40010000

080061a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80061a4:	b480      	push	{r7}
 80061a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80061a8:	bf00      	nop
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bc80      	pop	{r7}
 80061ae:	4770      	bx	lr

080061b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80061b0:	b480      	push	{r7}
 80061b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80061b4:	e7fe      	b.n	80061b4 <HardFault_Handler+0x4>

080061b6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80061b6:	b480      	push	{r7}
 80061b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80061ba:	e7fe      	b.n	80061ba <MemManage_Handler+0x4>

080061bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80061c0:	e7fe      	b.n	80061c0 <BusFault_Handler+0x4>

080061c2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80061c2:	b480      	push	{r7}
 80061c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80061c6:	e7fe      	b.n	80061c6 <UsageFault_Handler+0x4>

080061c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80061cc:	bf00      	nop
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bc80      	pop	{r7}
 80061d2:	4770      	bx	lr

080061d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80061d8:	f7fa fab2 	bl	8000740 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80061dc:	f7fe f874 	bl	80042c8 <xTaskGetSchedulerState>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d001      	beq.n	80061ea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80061e6:	f7fe fa57 	bl	8004698 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80061ea:	bf00      	nop
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80061f4:	4802      	ldr	r0, [pc, #8]	; (8006200 <USART2_IRQHandler+0x10>)
 80061f6:	f7fc fc93 	bl	8002b20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80061fa:	bf00      	nop
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	20001a1c 	.word	0x20001a1c

08006204 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006204:	b480      	push	{r7}
 8006206:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006208:	4b15      	ldr	r3, [pc, #84]	; (8006260 <SystemInit+0x5c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a14      	ldr	r2, [pc, #80]	; (8006260 <SystemInit+0x5c>)
 800620e:	f043 0301 	orr.w	r3, r3, #1
 8006212:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8006214:	4b12      	ldr	r3, [pc, #72]	; (8006260 <SystemInit+0x5c>)
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	4911      	ldr	r1, [pc, #68]	; (8006260 <SystemInit+0x5c>)
 800621a:	4b12      	ldr	r3, [pc, #72]	; (8006264 <SystemInit+0x60>)
 800621c:	4013      	ands	r3, r2
 800621e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006220:	4b0f      	ldr	r3, [pc, #60]	; (8006260 <SystemInit+0x5c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a0e      	ldr	r2, [pc, #56]	; (8006260 <SystemInit+0x5c>)
 8006226:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800622a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800622e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006230:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <SystemInit+0x5c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a0a      	ldr	r2, [pc, #40]	; (8006260 <SystemInit+0x5c>)
 8006236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800623a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800623c:	4b08      	ldr	r3, [pc, #32]	; (8006260 <SystemInit+0x5c>)
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	4a07      	ldr	r2, [pc, #28]	; (8006260 <SystemInit+0x5c>)
 8006242:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006246:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006248:	4b05      	ldr	r3, [pc, #20]	; (8006260 <SystemInit+0x5c>)
 800624a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800624e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006250:	4b05      	ldr	r3, [pc, #20]	; (8006268 <SystemInit+0x64>)
 8006252:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006256:	609a      	str	r2, [r3, #8]
#endif 
}
 8006258:	bf00      	nop
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr
 8006260:	40021000 	.word	0x40021000
 8006264:	f8ff0000 	.word	0xf8ff0000
 8006268:	e000ed00 	.word	0xe000ed00

0800626c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b096      	sub	sp, #88	; 0x58
 8006270:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006272:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006276:	2200      	movs	r2, #0
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	605a      	str	r2, [r3, #4]
 800627c:	609a      	str	r2, [r3, #8]
 800627e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006280:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006284:	2200      	movs	r2, #0
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800628a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800628e:	2200      	movs	r2, #0
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	605a      	str	r2, [r3, #4]
 8006294:	609a      	str	r2, [r3, #8]
 8006296:	60da      	str	r2, [r3, #12]
 8006298:	611a      	str	r2, [r3, #16]
 800629a:	615a      	str	r2, [r3, #20]
 800629c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800629e:	1d3b      	adds	r3, r7, #4
 80062a0:	2220      	movs	r2, #32
 80062a2:	2100      	movs	r1, #0
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 fbf9 	bl	8006a9c <memset>

  htim1.Instance = TIM1;
 80062aa:	4b50      	ldr	r3, [pc, #320]	; (80063ec <MX_TIM1_Init+0x180>)
 80062ac:	4a50      	ldr	r2, [pc, #320]	; (80063f0 <MX_TIM1_Init+0x184>)
 80062ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 300;
 80062b0:	4b4e      	ldr	r3, [pc, #312]	; (80063ec <MX_TIM1_Init+0x180>)
 80062b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80062b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062b8:	4b4c      	ldr	r3, [pc, #304]	; (80063ec <MX_TIM1_Init+0x180>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 80062be:	4b4b      	ldr	r3, [pc, #300]	; (80063ec <MX_TIM1_Init+0x180>)
 80062c0:	22ff      	movs	r2, #255	; 0xff
 80062c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062c4:	4b49      	ldr	r3, [pc, #292]	; (80063ec <MX_TIM1_Init+0x180>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80062ca:	4b48      	ldr	r3, [pc, #288]	; (80063ec <MX_TIM1_Init+0x180>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062d0:	4b46      	ldr	r3, [pc, #280]	; (80063ec <MX_TIM1_Init+0x180>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80062d6:	4845      	ldr	r0, [pc, #276]	; (80063ec <MX_TIM1_Init+0x180>)
 80062d8:	f7fb fe38 	bl	8001f4c <HAL_TIM_Base_Init>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80062e2:	f7ff ff21 	bl	8006128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80062e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80062ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80062f0:	4619      	mov	r1, r3
 80062f2:	483e      	ldr	r0, [pc, #248]	; (80063ec <MX_TIM1_Init+0x180>)
 80062f4:	f7fb ff82 	bl	80021fc <HAL_TIM_ConfigClockSource>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80062fe:	f7ff ff13 	bl	8006128 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006302:	483a      	ldr	r0, [pc, #232]	; (80063ec <MX_TIM1_Init+0x180>)
 8006304:	f7fb fe4d 	bl	8001fa2 <HAL_TIM_PWM_Init>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800630e:	f7ff ff0b 	bl	8006128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006312:	2300      	movs	r3, #0
 8006314:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006316:	2300      	movs	r3, #0
 8006318:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800631a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800631e:	4619      	mov	r1, r3
 8006320:	4832      	ldr	r0, [pc, #200]	; (80063ec <MX_TIM1_Init+0x180>)
 8006322:	f7fc fac7 	bl	80028b4 <HAL_TIMEx_MasterConfigSynchronization>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800632c:	f7ff fefc 	bl	8006128 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006330:	2360      	movs	r3, #96	; 0x60
 8006332:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8006334:	2300      	movs	r3, #0
 8006336:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006338:	2300      	movs	r3, #0
 800633a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800633c:	2300      	movs	r3, #0
 800633e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006340:	2300      	movs	r3, #0
 8006342:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006344:	2300      	movs	r3, #0
 8006346:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006348:	2300      	movs	r3, #0
 800634a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800634c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006350:	2200      	movs	r2, #0
 8006352:	4619      	mov	r1, r3
 8006354:	4825      	ldr	r0, [pc, #148]	; (80063ec <MX_TIM1_Init+0x180>)
 8006356:	f7fb fe8b 	bl	8002070 <HAL_TIM_PWM_ConfigChannel>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8006360:	f7ff fee2 	bl	8006128 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006368:	2204      	movs	r2, #4
 800636a:	4619      	mov	r1, r3
 800636c:	481f      	ldr	r0, [pc, #124]	; (80063ec <MX_TIM1_Init+0x180>)
 800636e:	f7fb fe7f 	bl	8002070 <HAL_TIM_PWM_ConfigChannel>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8006378:	f7ff fed6 	bl	8006128 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800637c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006380:	2208      	movs	r2, #8
 8006382:	4619      	mov	r1, r3
 8006384:	4819      	ldr	r0, [pc, #100]	; (80063ec <MX_TIM1_Init+0x180>)
 8006386:	f7fb fe73 	bl	8002070 <HAL_TIM_PWM_ConfigChannel>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8006390:	f7ff feca 	bl	8006128 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006398:	220c      	movs	r2, #12
 800639a:	4619      	mov	r1, r3
 800639c:	4813      	ldr	r0, [pc, #76]	; (80063ec <MX_TIM1_Init+0x180>)
 800639e:	f7fb fe67 	bl	8002070 <HAL_TIM_PWM_ConfigChannel>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80063a8:	f7ff febe 	bl	8006128 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80063ac:	2300      	movs	r3, #0
 80063ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80063b0:	2300      	movs	r3, #0
 80063b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80063bc:	2300      	movs	r3, #0
 80063be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80063c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80063c6:	2300      	movs	r3, #0
 80063c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80063ca:	1d3b      	adds	r3, r7, #4
 80063cc:	4619      	mov	r1, r3
 80063ce:	4807      	ldr	r0, [pc, #28]	; (80063ec <MX_TIM1_Init+0x180>)
 80063d0:	f7fc fab4 	bl	800293c <HAL_TIMEx_ConfigBreakDeadTime>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80063da:	f7ff fea5 	bl	8006128 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80063de:	4803      	ldr	r0, [pc, #12]	; (80063ec <MX_TIM1_Init+0x180>)
 80063e0:	f000 f96e 	bl	80066c0 <HAL_TIM_MspPostInit>

}
 80063e4:	bf00      	nop
 80063e6:	3758      	adds	r7, #88	; 0x58
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	2000195c 	.word	0x2000195c
 80063f0:	40012c00 	.word	0x40012c00

080063f4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08e      	sub	sp, #56	; 0x38
 80063f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80063fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	605a      	str	r2, [r3, #4]
 8006404:	609a      	str	r2, [r3, #8]
 8006406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006408:	f107 0320 	add.w	r3, r7, #32
 800640c:	2200      	movs	r2, #0
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006412:	1d3b      	adds	r3, r7, #4
 8006414:	2200      	movs	r2, #0
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	605a      	str	r2, [r3, #4]
 800641a:	609a      	str	r2, [r3, #8]
 800641c:	60da      	str	r2, [r3, #12]
 800641e:	611a      	str	r2, [r3, #16]
 8006420:	615a      	str	r2, [r3, #20]
 8006422:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8006424:	4b3d      	ldr	r3, [pc, #244]	; (800651c <MX_TIM2_Init+0x128>)
 8006426:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800642a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 300;
 800642c:	4b3b      	ldr	r3, [pc, #236]	; (800651c <MX_TIM2_Init+0x128>)
 800642e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006432:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006434:	4b39      	ldr	r3, [pc, #228]	; (800651c <MX_TIM2_Init+0x128>)
 8006436:	2200      	movs	r2, #0
 8006438:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 800643a:	4b38      	ldr	r3, [pc, #224]	; (800651c <MX_TIM2_Init+0x128>)
 800643c:	22ff      	movs	r2, #255	; 0xff
 800643e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006440:	4b36      	ldr	r3, [pc, #216]	; (800651c <MX_TIM2_Init+0x128>)
 8006442:	2200      	movs	r2, #0
 8006444:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006446:	4b35      	ldr	r3, [pc, #212]	; (800651c <MX_TIM2_Init+0x128>)
 8006448:	2200      	movs	r2, #0
 800644a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800644c:	4833      	ldr	r0, [pc, #204]	; (800651c <MX_TIM2_Init+0x128>)
 800644e:	f7fb fd7d 	bl	8001f4c <HAL_TIM_Base_Init>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8006458:	f7ff fe66 	bl	8006128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800645c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006460:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006462:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006466:	4619      	mov	r1, r3
 8006468:	482c      	ldr	r0, [pc, #176]	; (800651c <MX_TIM2_Init+0x128>)
 800646a:	f7fb fec7 	bl	80021fc <HAL_TIM_ConfigClockSource>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8006474:	f7ff fe58 	bl	8006128 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006478:	4828      	ldr	r0, [pc, #160]	; (800651c <MX_TIM2_Init+0x128>)
 800647a:	f7fb fd92 	bl	8001fa2 <HAL_TIM_PWM_Init>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8006484:	f7ff fe50 	bl	8006128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006488:	2300      	movs	r3, #0
 800648a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800648c:	2300      	movs	r3, #0
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006490:	f107 0320 	add.w	r3, r7, #32
 8006494:	4619      	mov	r1, r3
 8006496:	4821      	ldr	r0, [pc, #132]	; (800651c <MX_TIM2_Init+0x128>)
 8006498:	f7fc fa0c 	bl	80028b4 <HAL_TIMEx_MasterConfigSynchronization>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80064a2:	f7ff fe41 	bl	8006128 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80064a6:	2360      	movs	r3, #96	; 0x60
 80064a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80064aa:	2300      	movs	r3, #0
 80064ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80064b2:	2300      	movs	r3, #0
 80064b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80064b6:	1d3b      	adds	r3, r7, #4
 80064b8:	2200      	movs	r2, #0
 80064ba:	4619      	mov	r1, r3
 80064bc:	4817      	ldr	r0, [pc, #92]	; (800651c <MX_TIM2_Init+0x128>)
 80064be:	f7fb fdd7 	bl	8002070 <HAL_TIM_PWM_ConfigChannel>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80064c8:	f7ff fe2e 	bl	8006128 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80064cc:	1d3b      	adds	r3, r7, #4
 80064ce:	2204      	movs	r2, #4
 80064d0:	4619      	mov	r1, r3
 80064d2:	4812      	ldr	r0, [pc, #72]	; (800651c <MX_TIM2_Init+0x128>)
 80064d4:	f7fb fdcc 	bl	8002070 <HAL_TIM_PWM_ConfigChannel>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80064de:	f7ff fe23 	bl	8006128 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80064e2:	1d3b      	adds	r3, r7, #4
 80064e4:	2208      	movs	r2, #8
 80064e6:	4619      	mov	r1, r3
 80064e8:	480c      	ldr	r0, [pc, #48]	; (800651c <MX_TIM2_Init+0x128>)
 80064ea:	f7fb fdc1 	bl	8002070 <HAL_TIM_PWM_ConfigChannel>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80064f4:	f7ff fe18 	bl	8006128 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80064f8:	1d3b      	adds	r3, r7, #4
 80064fa:	220c      	movs	r2, #12
 80064fc:	4619      	mov	r1, r3
 80064fe:	4807      	ldr	r0, [pc, #28]	; (800651c <MX_TIM2_Init+0x128>)
 8006500:	f7fb fdb6 	bl	8002070 <HAL_TIM_PWM_ConfigChannel>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 800650a:	f7ff fe0d 	bl	8006128 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800650e:	4803      	ldr	r0, [pc, #12]	; (800651c <MX_TIM2_Init+0x128>)
 8006510:	f000 f8d6 	bl	80066c0 <HAL_TIM_MspPostInit>

}
 8006514:	bf00      	nop
 8006516:	3738      	adds	r7, #56	; 0x38
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	2000199c 	.word	0x2000199c

08006520 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b08e      	sub	sp, #56	; 0x38
 8006524:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006526:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	605a      	str	r2, [r3, #4]
 8006530:	609a      	str	r2, [r3, #8]
 8006532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006534:	f107 0320 	add.w	r3, r7, #32
 8006538:	2200      	movs	r2, #0
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800653e:	1d3b      	adds	r3, r7, #4
 8006540:	2200      	movs	r2, #0
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	605a      	str	r2, [r3, #4]
 8006546:	609a      	str	r2, [r3, #8]
 8006548:	60da      	str	r2, [r3, #12]
 800654a:	611a      	str	r2, [r3, #16]
 800654c:	615a      	str	r2, [r3, #20]
 800654e:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8006550:	4b37      	ldr	r3, [pc, #220]	; (8006630 <MX_TIM3_Init+0x110>)
 8006552:	4a38      	ldr	r2, [pc, #224]	; (8006634 <MX_TIM3_Init+0x114>)
 8006554:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 300;
 8006556:	4b36      	ldr	r3, [pc, #216]	; (8006630 <MX_TIM3_Init+0x110>)
 8006558:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800655c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800655e:	4b34      	ldr	r3, [pc, #208]	; (8006630 <MX_TIM3_Init+0x110>)
 8006560:	2200      	movs	r2, #0
 8006562:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8006564:	4b32      	ldr	r3, [pc, #200]	; (8006630 <MX_TIM3_Init+0x110>)
 8006566:	22ff      	movs	r2, #255	; 0xff
 8006568:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800656a:	4b31      	ldr	r3, [pc, #196]	; (8006630 <MX_TIM3_Init+0x110>)
 800656c:	2200      	movs	r2, #0
 800656e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006570:	4b2f      	ldr	r3, [pc, #188]	; (8006630 <MX_TIM3_Init+0x110>)
 8006572:	2200      	movs	r2, #0
 8006574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006576:	482e      	ldr	r0, [pc, #184]	; (8006630 <MX_TIM3_Init+0x110>)
 8006578:	f7fb fce8 	bl	8001f4c <HAL_TIM_Base_Init>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8006582:	f7ff fdd1 	bl	8006128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800658a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800658c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006590:	4619      	mov	r1, r3
 8006592:	4827      	ldr	r0, [pc, #156]	; (8006630 <MX_TIM3_Init+0x110>)
 8006594:	f7fb fe32 	bl	80021fc <HAL_TIM_ConfigClockSource>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800659e:	f7ff fdc3 	bl	8006128 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80065a2:	4823      	ldr	r0, [pc, #140]	; (8006630 <MX_TIM3_Init+0x110>)
 80065a4:	f7fb fcfd 	bl	8001fa2 <HAL_TIM_PWM_Init>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80065ae:	f7ff fdbb 	bl	8006128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065b2:	2300      	movs	r3, #0
 80065b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065b6:	2300      	movs	r3, #0
 80065b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80065ba:	f107 0320 	add.w	r3, r7, #32
 80065be:	4619      	mov	r1, r3
 80065c0:	481b      	ldr	r0, [pc, #108]	; (8006630 <MX_TIM3_Init+0x110>)
 80065c2:	f7fc f977 	bl	80028b4 <HAL_TIMEx_MasterConfigSynchronization>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80065cc:	f7ff fdac 	bl	8006128 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80065d0:	2360      	movs	r3, #96	; 0x60
 80065d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80065d4:	2300      	movs	r3, #0
 80065d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80065d8:	2300      	movs	r3, #0
 80065da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80065dc:	2300      	movs	r3, #0
 80065de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80065e0:	1d3b      	adds	r3, r7, #4
 80065e2:	2200      	movs	r2, #0
 80065e4:	4619      	mov	r1, r3
 80065e6:	4812      	ldr	r0, [pc, #72]	; (8006630 <MX_TIM3_Init+0x110>)
 80065e8:	f7fb fd42 	bl	8002070 <HAL_TIM_PWM_ConfigChannel>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80065f2:	f7ff fd99 	bl	8006128 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80065f6:	1d3b      	adds	r3, r7, #4
 80065f8:	2204      	movs	r2, #4
 80065fa:	4619      	mov	r1, r3
 80065fc:	480c      	ldr	r0, [pc, #48]	; (8006630 <MX_TIM3_Init+0x110>)
 80065fe:	f7fb fd37 	bl	8002070 <HAL_TIM_PWM_ConfigChannel>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8006608:	f7ff fd8e 	bl	8006128 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800660c:	1d3b      	adds	r3, r7, #4
 800660e:	2208      	movs	r2, #8
 8006610:	4619      	mov	r1, r3
 8006612:	4807      	ldr	r0, [pc, #28]	; (8006630 <MX_TIM3_Init+0x110>)
 8006614:	f7fb fd2c 	bl	8002070 <HAL_TIM_PWM_ConfigChannel>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800661e:	f7ff fd83 	bl	8006128 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8006622:	4803      	ldr	r0, [pc, #12]	; (8006630 <MX_TIM3_Init+0x110>)
 8006624:	f000 f84c 	bl	80066c0 <HAL_TIM_MspPostInit>

}
 8006628:	bf00      	nop
 800662a:	3738      	adds	r7, #56	; 0x38
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	2000191c 	.word	0x2000191c
 8006634:	40000400 	.word	0x40000400

08006638 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a1b      	ldr	r2, [pc, #108]	; (80066b4 <HAL_TIM_Base_MspInit+0x7c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d10c      	bne.n	8006664 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800664a:	4b1b      	ldr	r3, [pc, #108]	; (80066b8 <HAL_TIM_Base_MspInit+0x80>)
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	4a1a      	ldr	r2, [pc, #104]	; (80066b8 <HAL_TIM_Base_MspInit+0x80>)
 8006650:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006654:	6193      	str	r3, [r2, #24]
 8006656:	4b18      	ldr	r3, [pc, #96]	; (80066b8 <HAL_TIM_Base_MspInit+0x80>)
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800665e:	617b      	str	r3, [r7, #20]
 8006660:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006662:	e022      	b.n	80066aa <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM2)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800666c:	d10c      	bne.n	8006688 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800666e:	4b12      	ldr	r3, [pc, #72]	; (80066b8 <HAL_TIM_Base_MspInit+0x80>)
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	4a11      	ldr	r2, [pc, #68]	; (80066b8 <HAL_TIM_Base_MspInit+0x80>)
 8006674:	f043 0301 	orr.w	r3, r3, #1
 8006678:	61d3      	str	r3, [r2, #28]
 800667a:	4b0f      	ldr	r3, [pc, #60]	; (80066b8 <HAL_TIM_Base_MspInit+0x80>)
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	613b      	str	r3, [r7, #16]
 8006684:	693b      	ldr	r3, [r7, #16]
}
 8006686:	e010      	b.n	80066aa <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a0b      	ldr	r2, [pc, #44]	; (80066bc <HAL_TIM_Base_MspInit+0x84>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d10b      	bne.n	80066aa <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006692:	4b09      	ldr	r3, [pc, #36]	; (80066b8 <HAL_TIM_Base_MspInit+0x80>)
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	4a08      	ldr	r2, [pc, #32]	; (80066b8 <HAL_TIM_Base_MspInit+0x80>)
 8006698:	f043 0302 	orr.w	r3, r3, #2
 800669c:	61d3      	str	r3, [r2, #28]
 800669e:	4b06      	ldr	r3, [pc, #24]	; (80066b8 <HAL_TIM_Base_MspInit+0x80>)
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	68fb      	ldr	r3, [r7, #12]
}
 80066aa:	bf00      	nop
 80066ac:	371c      	adds	r7, #28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bc80      	pop	{r7}
 80066b2:	4770      	bx	lr
 80066b4:	40012c00 	.word	0x40012c00
 80066b8:	40021000 	.word	0x40021000
 80066bc:	40000400 	.word	0x40000400

080066c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08c      	sub	sp, #48	; 0x30
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066c8:	f107 0318 	add.w	r3, r7, #24
 80066cc:	2200      	movs	r2, #0
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	605a      	str	r2, [r3, #4]
 80066d2:	609a      	str	r2, [r3, #8]
 80066d4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a4c      	ldr	r2, [pc, #304]	; (800680c <HAL_TIM_MspPostInit+0x14c>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d119      	bne.n	8006714 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066e0:	4b4b      	ldr	r3, [pc, #300]	; (8006810 <HAL_TIM_MspPostInit+0x150>)
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	4a4a      	ldr	r2, [pc, #296]	; (8006810 <HAL_TIM_MspPostInit+0x150>)
 80066e6:	f043 0304 	orr.w	r3, r3, #4
 80066ea:	6193      	str	r3, [r2, #24]
 80066ec:	4b48      	ldr	r3, [pc, #288]	; (8006810 <HAL_TIM_MspPostInit+0x150>)
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	617b      	str	r3, [r7, #20]
 80066f6:	697b      	ldr	r3, [r7, #20]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = PWM4_Pin|PWM3_Pin|PWM2_Pin|PWM1_Pin;
 80066f8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80066fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066fe:	2302      	movs	r3, #2
 8006700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006702:	2302      	movs	r3, #2
 8006704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006706:	f107 0318 	add.w	r3, r7, #24
 800670a:	4619      	mov	r1, r3
 800670c:	4841      	ldr	r0, [pc, #260]	; (8006814 <HAL_TIM_MspPostInit+0x154>)
 800670e:	f7fa fdc1 	bl	8001294 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006712:	e077      	b.n	8006804 <HAL_TIM_MspPostInit+0x144>
  else if(timHandle->Instance==TIM2)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800671c:	d143      	bne.n	80067a6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800671e:	4b3c      	ldr	r3, [pc, #240]	; (8006810 <HAL_TIM_MspPostInit+0x150>)
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	4a3b      	ldr	r2, [pc, #236]	; (8006810 <HAL_TIM_MspPostInit+0x150>)
 8006724:	f043 0304 	orr.w	r3, r3, #4
 8006728:	6193      	str	r3, [r2, #24]
 800672a:	4b39      	ldr	r3, [pc, #228]	; (8006810 <HAL_TIM_MspPostInit+0x150>)
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	f003 0304 	and.w	r3, r3, #4
 8006732:	613b      	str	r3, [r7, #16]
 8006734:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006736:	4b36      	ldr	r3, [pc, #216]	; (8006810 <HAL_TIM_MspPostInit+0x150>)
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	4a35      	ldr	r2, [pc, #212]	; (8006810 <HAL_TIM_MspPostInit+0x150>)
 800673c:	f043 0308 	orr.w	r3, r3, #8
 8006740:	6193      	str	r3, [r2, #24]
 8006742:	4b33      	ldr	r3, [pc, #204]	; (8006810 <HAL_TIM_MspPostInit+0x150>)
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	f003 0308 	and.w	r3, r3, #8
 800674a:	60fb      	str	r3, [r7, #12]
 800674c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM5_Pin|PWM6_Pin;
 800674e:	2303      	movs	r3, #3
 8006750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006752:	2302      	movs	r3, #2
 8006754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006756:	2302      	movs	r3, #2
 8006758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800675a:	f107 0318 	add.w	r3, r7, #24
 800675e:	4619      	mov	r1, r3
 8006760:	482c      	ldr	r0, [pc, #176]	; (8006814 <HAL_TIM_MspPostInit+0x154>)
 8006762:	f7fa fd97 	bl	8001294 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM7_Pin|PWM8_Pin;
 8006766:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800676a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800676c:	2302      	movs	r3, #2
 800676e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006770:	2302      	movs	r3, #2
 8006772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006774:	f107 0318 	add.w	r3, r7, #24
 8006778:	4619      	mov	r1, r3
 800677a:	4827      	ldr	r0, [pc, #156]	; (8006818 <HAL_TIM_MspPostInit+0x158>)
 800677c:	f7fa fd8a 	bl	8001294 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8006780:	4b26      	ldr	r3, [pc, #152]	; (800681c <HAL_TIM_MspPostInit+0x15c>)
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	62bb      	str	r3, [r7, #40]	; 0x28
 8006786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800678c:	62bb      	str	r3, [r7, #40]	; 0x28
 800678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006790:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8006794:	62bb      	str	r3, [r7, #40]	; 0x28
 8006796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006798:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800679c:	62bb      	str	r3, [r7, #40]	; 0x28
 800679e:	4a1f      	ldr	r2, [pc, #124]	; (800681c <HAL_TIM_MspPostInit+0x15c>)
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	6053      	str	r3, [r2, #4]
}
 80067a4:	e02e      	b.n	8006804 <HAL_TIM_MspPostInit+0x144>
  else if(timHandle->Instance==TIM3)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a1d      	ldr	r2, [pc, #116]	; (8006820 <HAL_TIM_MspPostInit+0x160>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d129      	bne.n	8006804 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067b0:	4b17      	ldr	r3, [pc, #92]	; (8006810 <HAL_TIM_MspPostInit+0x150>)
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	4a16      	ldr	r2, [pc, #88]	; (8006810 <HAL_TIM_MspPostInit+0x150>)
 80067b6:	f043 0308 	orr.w	r3, r3, #8
 80067ba:	6193      	str	r3, [r2, #24]
 80067bc:	4b14      	ldr	r3, [pc, #80]	; (8006810 <HAL_TIM_MspPostInit+0x150>)
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	f003 0308 	and.w	r3, r3, #8
 80067c4:	60bb      	str	r3, [r7, #8]
 80067c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|PWM9_Pin|PWM10_Pin;
 80067c8:	2331      	movs	r3, #49	; 0x31
 80067ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067cc:	2302      	movs	r3, #2
 80067ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067d0:	2302      	movs	r3, #2
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067d4:	f107 0318 	add.w	r3, r7, #24
 80067d8:	4619      	mov	r1, r3
 80067da:	480f      	ldr	r0, [pc, #60]	; (8006818 <HAL_TIM_MspPostInit+0x158>)
 80067dc:	f7fa fd5a 	bl	8001294 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80067e0:	4b0e      	ldr	r3, [pc, #56]	; (800681c <HAL_TIM_MspPostInit+0x15c>)
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80067ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80067f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80067fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067fe:	4a07      	ldr	r2, [pc, #28]	; (800681c <HAL_TIM_MspPostInit+0x15c>)
 8006800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006802:	6053      	str	r3, [r2, #4]
}
 8006804:	bf00      	nop
 8006806:	3730      	adds	r7, #48	; 0x30
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	40012c00 	.word	0x40012c00
 8006810:	40021000 	.word	0x40021000
 8006814:	40010800 	.word	0x40010800
 8006818:	40010c00 	.word	0x40010c00
 800681c:	40010000 	.word	0x40010000
 8006820:	40000400 	.word	0x40000400

08006824 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006828:	4b11      	ldr	r3, [pc, #68]	; (8006870 <MX_USART1_UART_Init+0x4c>)
 800682a:	4a12      	ldr	r2, [pc, #72]	; (8006874 <MX_USART1_UART_Init+0x50>)
 800682c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800682e:	4b10      	ldr	r3, [pc, #64]	; (8006870 <MX_USART1_UART_Init+0x4c>)
 8006830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006834:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006836:	4b0e      	ldr	r3, [pc, #56]	; (8006870 <MX_USART1_UART_Init+0x4c>)
 8006838:	2200      	movs	r2, #0
 800683a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800683c:	4b0c      	ldr	r3, [pc, #48]	; (8006870 <MX_USART1_UART_Init+0x4c>)
 800683e:	2200      	movs	r2, #0
 8006840:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006842:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <MX_USART1_UART_Init+0x4c>)
 8006844:	2200      	movs	r2, #0
 8006846:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006848:	4b09      	ldr	r3, [pc, #36]	; (8006870 <MX_USART1_UART_Init+0x4c>)
 800684a:	220c      	movs	r2, #12
 800684c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800684e:	4b08      	ldr	r3, [pc, #32]	; (8006870 <MX_USART1_UART_Init+0x4c>)
 8006850:	2200      	movs	r2, #0
 8006852:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006854:	4b06      	ldr	r3, [pc, #24]	; (8006870 <MX_USART1_UART_Init+0x4c>)
 8006856:	2200      	movs	r2, #0
 8006858:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800685a:	4805      	ldr	r0, [pc, #20]	; (8006870 <MX_USART1_UART_Init+0x4c>)
 800685c:	f7fc f8bf 	bl	80029de <HAL_UART_Init>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006866:	f7ff fc5f 	bl	8006128 <Error_Handler>
  }

}
 800686a:	bf00      	nop
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	200019dc 	.word	0x200019dc
 8006874:	40013800 	.word	0x40013800

08006878 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800687c:	4b11      	ldr	r3, [pc, #68]	; (80068c4 <MX_USART2_UART_Init+0x4c>)
 800687e:	4a12      	ldr	r2, [pc, #72]	; (80068c8 <MX_USART2_UART_Init+0x50>)
 8006880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 8006882:	4b10      	ldr	r3, [pc, #64]	; (80068c4 <MX_USART2_UART_Init+0x4c>)
 8006884:	4a11      	ldr	r2, [pc, #68]	; (80068cc <MX_USART2_UART_Init+0x54>)
 8006886:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006888:	4b0e      	ldr	r3, [pc, #56]	; (80068c4 <MX_USART2_UART_Init+0x4c>)
 800688a:	2200      	movs	r2, #0
 800688c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800688e:	4b0d      	ldr	r3, [pc, #52]	; (80068c4 <MX_USART2_UART_Init+0x4c>)
 8006890:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006894:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006896:	4b0b      	ldr	r3, [pc, #44]	; (80068c4 <MX_USART2_UART_Init+0x4c>)
 8006898:	2200      	movs	r2, #0
 800689a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 800689c:	4b09      	ldr	r3, [pc, #36]	; (80068c4 <MX_USART2_UART_Init+0x4c>)
 800689e:	2204      	movs	r2, #4
 80068a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068a2:	4b08      	ldr	r3, [pc, #32]	; (80068c4 <MX_USART2_UART_Init+0x4c>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80068a8:	4b06      	ldr	r3, [pc, #24]	; (80068c4 <MX_USART2_UART_Init+0x4c>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80068ae:	4805      	ldr	r0, [pc, #20]	; (80068c4 <MX_USART2_UART_Init+0x4c>)
 80068b0:	f7fc f895 	bl	80029de <HAL_UART_Init>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80068ba:	f7ff fc35 	bl	8006128 <Error_Handler>
  }

}
 80068be:	bf00      	nop
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	20001a1c 	.word	0x20001a1c
 80068c8:	40004400 	.word	0x40004400
 80068cc:	0003d090 	.word	0x0003d090

080068d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08c      	sub	sp, #48	; 0x30
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068d8:	f107 031c 	add.w	r3, r7, #28
 80068dc:	2200      	movs	r2, #0
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	605a      	str	r2, [r3, #4]
 80068e2:	609a      	str	r2, [r3, #8]
 80068e4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a41      	ldr	r2, [pc, #260]	; (80069f0 <HAL_UART_MspInit+0x120>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d13e      	bne.n	800696e <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80068f0:	4b40      	ldr	r3, [pc, #256]	; (80069f4 <HAL_UART_MspInit+0x124>)
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	4a3f      	ldr	r2, [pc, #252]	; (80069f4 <HAL_UART_MspInit+0x124>)
 80068f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068fa:	6193      	str	r3, [r2, #24]
 80068fc:	4b3d      	ldr	r3, [pc, #244]	; (80069f4 <HAL_UART_MspInit+0x124>)
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006908:	4b3a      	ldr	r3, [pc, #232]	; (80069f4 <HAL_UART_MspInit+0x124>)
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	4a39      	ldr	r2, [pc, #228]	; (80069f4 <HAL_UART_MspInit+0x124>)
 800690e:	f043 0308 	orr.w	r3, r3, #8
 8006912:	6193      	str	r3, [r2, #24]
 8006914:	4b37      	ldr	r3, [pc, #220]	; (80069f4 <HAL_UART_MspInit+0x124>)
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	f003 0308 	and.w	r3, r3, #8
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_DUBUG_Pin;
 8006920:	2340      	movs	r3, #64	; 0x40
 8006922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006924:	2302      	movs	r3, #2
 8006926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006928:	2303      	movs	r3, #3
 800692a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(USART_TX_DUBUG_GPIO_Port, &GPIO_InitStruct);
 800692c:	f107 031c 	add.w	r3, r7, #28
 8006930:	4619      	mov	r1, r3
 8006932:	4831      	ldr	r0, [pc, #196]	; (80069f8 <HAL_UART_MspInit+0x128>)
 8006934:	f7fa fcae 	bl	8001294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_DUBUG_Pin;
 8006938:	2380      	movs	r3, #128	; 0x80
 800693a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800693c:	2300      	movs	r3, #0
 800693e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006940:	2300      	movs	r3, #0
 8006942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USART_RX_DUBUG_GPIO_Port, &GPIO_InitStruct);
 8006944:	f107 031c 	add.w	r3, r7, #28
 8006948:	4619      	mov	r1, r3
 800694a:	482b      	ldr	r0, [pc, #172]	; (80069f8 <HAL_UART_MspInit+0x128>)
 800694c:	f7fa fca2 	bl	8001294 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8006950:	4b2a      	ldr	r3, [pc, #168]	; (80069fc <HAL_UART_MspInit+0x12c>)
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006958:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800695c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006960:	f043 0304 	orr.w	r3, r3, #4
 8006964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006966:	4a25      	ldr	r2, [pc, #148]	; (80069fc <HAL_UART_MspInit+0x12c>)
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	6053      	str	r3, [r2, #4]
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800696c:	e03c      	b.n	80069e8 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART2)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a23      	ldr	r2, [pc, #140]	; (8006a00 <HAL_UART_MspInit+0x130>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d137      	bne.n	80069e8 <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006978:	4b1e      	ldr	r3, [pc, #120]	; (80069f4 <HAL_UART_MspInit+0x124>)
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	4a1d      	ldr	r2, [pc, #116]	; (80069f4 <HAL_UART_MspInit+0x124>)
 800697e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006982:	61d3      	str	r3, [r2, #28]
 8006984:	4b1b      	ldr	r3, [pc, #108]	; (80069f4 <HAL_UART_MspInit+0x124>)
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698c:	613b      	str	r3, [r7, #16]
 800698e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006990:	4b18      	ldr	r3, [pc, #96]	; (80069f4 <HAL_UART_MspInit+0x124>)
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	4a17      	ldr	r2, [pc, #92]	; (80069f4 <HAL_UART_MspInit+0x124>)
 8006996:	f043 0304 	orr.w	r3, r3, #4
 800699a:	6193      	str	r3, [r2, #24]
 800699c:	4b15      	ldr	r3, [pc, #84]	; (80069f4 <HAL_UART_MspInit+0x124>)
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	f003 0304 	and.w	r3, r3, #4
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DMX_OUT_Pin;
 80069a8:	2304      	movs	r3, #4
 80069aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ac:	2302      	movs	r3, #2
 80069ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80069b0:	2303      	movs	r3, #3
 80069b2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(DMX_OUT_GPIO_Port, &GPIO_InitStruct);
 80069b4:	f107 031c 	add.w	r3, r7, #28
 80069b8:	4619      	mov	r1, r3
 80069ba:	4812      	ldr	r0, [pc, #72]	; (8006a04 <HAL_UART_MspInit+0x134>)
 80069bc:	f7fa fc6a 	bl	8001294 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DMX_IN_Pin;
 80069c0:	2308      	movs	r3, #8
 80069c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069c4:	2300      	movs	r3, #0
 80069c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c8:	2300      	movs	r3, #0
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DMX_IN_GPIO_Port, &GPIO_InitStruct);
 80069cc:	f107 031c 	add.w	r3, r7, #28
 80069d0:	4619      	mov	r1, r3
 80069d2:	480c      	ldr	r0, [pc, #48]	; (8006a04 <HAL_UART_MspInit+0x134>)
 80069d4:	f7fa fc5e 	bl	8001294 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80069d8:	2200      	movs	r2, #0
 80069da:	2105      	movs	r1, #5
 80069dc:	2026      	movs	r0, #38	; 0x26
 80069de:	f7fa f9ac 	bl	8000d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80069e2:	2026      	movs	r0, #38	; 0x26
 80069e4:	f7fa f9c5 	bl	8000d72 <HAL_NVIC_EnableIRQ>
}
 80069e8:	bf00      	nop
 80069ea:	3730      	adds	r7, #48	; 0x30
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	40013800 	.word	0x40013800
 80069f4:	40021000 	.word	0x40021000
 80069f8:	40010c00 	.word	0x40010c00
 80069fc:	40010000 	.word	0x40010000
 8006a00:	40004400 	.word	0x40004400
 8006a04:	40010800 	.word	0x40010800

08006a08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006a08:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006a0a:	e003      	b.n	8006a14 <LoopCopyDataInit>

08006a0c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006a0c:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006a0e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006a10:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006a12:	3104      	adds	r1, #4

08006a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006a14:	480a      	ldr	r0, [pc, #40]	; (8006a40 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006a16:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006a18:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006a1a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006a1c:	d3f6      	bcc.n	8006a0c <CopyDataInit>
  ldr r2, =_sbss
 8006a1e:	4a0a      	ldr	r2, [pc, #40]	; (8006a48 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006a20:	e002      	b.n	8006a28 <LoopFillZerobss>

08006a22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006a22:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006a24:	f842 3b04 	str.w	r3, [r2], #4

08006a28 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006a28:	4b08      	ldr	r3, [pc, #32]	; (8006a4c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006a2a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006a2c:	d3f9      	bcc.n	8006a22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006a2e:	f7ff fbe9 	bl	8006204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006a32:	f000 f80f 	bl	8006a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006a36:	f7ff fa7f 	bl	8005f38 <main>
  bx lr
 8006a3a:	4770      	bx	lr
  ldr r3, =_sidata
 8006a3c:	08007f74 	.word	0x08007f74
  ldr r0, =_sdata
 8006a40:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006a44:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8006a48:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 8006a4c:	20001a5c 	.word	0x20001a5c

08006a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006a50:	e7fe      	b.n	8006a50 <ADC1_2_IRQHandler>
	...

08006a54 <__libc_init_array>:
 8006a54:	b570      	push	{r4, r5, r6, lr}
 8006a56:	2500      	movs	r5, #0
 8006a58:	4e0c      	ldr	r6, [pc, #48]	; (8006a8c <__libc_init_array+0x38>)
 8006a5a:	4c0d      	ldr	r4, [pc, #52]	; (8006a90 <__libc_init_array+0x3c>)
 8006a5c:	1ba4      	subs	r4, r4, r6
 8006a5e:	10a4      	asrs	r4, r4, #2
 8006a60:	42a5      	cmp	r5, r4
 8006a62:	d109      	bne.n	8006a78 <__libc_init_array+0x24>
 8006a64:	f000 f822 	bl	8006aac <_init>
 8006a68:	2500      	movs	r5, #0
 8006a6a:	4e0a      	ldr	r6, [pc, #40]	; (8006a94 <__libc_init_array+0x40>)
 8006a6c:	4c0a      	ldr	r4, [pc, #40]	; (8006a98 <__libc_init_array+0x44>)
 8006a6e:	1ba4      	subs	r4, r4, r6
 8006a70:	10a4      	asrs	r4, r4, #2
 8006a72:	42a5      	cmp	r5, r4
 8006a74:	d105      	bne.n	8006a82 <__libc_init_array+0x2e>
 8006a76:	bd70      	pop	{r4, r5, r6, pc}
 8006a78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a7c:	4798      	blx	r3
 8006a7e:	3501      	adds	r5, #1
 8006a80:	e7ee      	b.n	8006a60 <__libc_init_array+0xc>
 8006a82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a86:	4798      	blx	r3
 8006a88:	3501      	adds	r5, #1
 8006a8a:	e7f2      	b.n	8006a72 <__libc_init_array+0x1e>
 8006a8c:	08007f6c 	.word	0x08007f6c
 8006a90:	08007f6c 	.word	0x08007f6c
 8006a94:	08007f6c 	.word	0x08007f6c
 8006a98:	08007f70 	.word	0x08007f70

08006a9c <memset>:
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	4402      	add	r2, r0
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d100      	bne.n	8006aa6 <memset+0xa>
 8006aa4:	4770      	bx	lr
 8006aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8006aaa:	e7f9      	b.n	8006aa0 <memset+0x4>

08006aac <_init>:
 8006aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aae:	bf00      	nop
 8006ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ab2:	bc08      	pop	{r3}
 8006ab4:	469e      	mov	lr, r3
 8006ab6:	4770      	bx	lr

08006ab8 <_fini>:
 8006ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aba:	bf00      	nop
 8006abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006abe:	bc08      	pop	{r3}
 8006ac0:	469e      	mov	lr, r3
 8006ac2:	4770      	bx	lr
