
Sunstrip_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006748  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002940  08006858  08006858  00016858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009198  08009198  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08009198  08009198  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009198  08009198  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009198  08009198  00019198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800919c  0800919c  0001919c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080091a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a38  20000090  0800922c  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001ac8  0800922c  00021ac8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f86  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004074  00000000  00000000  0003803b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001508  00000000  00000000  0003c0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012f0  00000000  00000000  0003d5b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018a57  00000000  00000000  0003e8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000130df  00000000  00000000  000572ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080a8e  00000000  00000000  0006a3de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eae6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005734  00000000  00000000  000eaee8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08006840 	.word	0x08006840

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08006840 	.word	0x08006840

08000150 <SSD1306_Init>:
	if (HAL_I2C_IsDeviceReady(ssd1306_i2c, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
		/* Return false */
		return 0;
	}
#else
	uint8_t SSD1306_Init() {
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0

		/* Init I2C */
		ssd1306_I2C_Init();
 8000156:	f000 fa17 	bl	8000588 <ssd1306_I2C_Init>
#endif
	
	/* A little delay */
	uint32_t p = 2500;
 800015a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800015e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000160:	e002      	b.n	8000168 <SSD1306_Init+0x18>
		p--;
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	3b01      	subs	r3, #1
 8000166:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2b00      	cmp	r3, #0
 800016c:	d1f9      	bne.n	8000162 <SSD1306_Init+0x12>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800016e:	22ae      	movs	r2, #174	; 0xae
 8000170:	2100      	movs	r1, #0
 8000172:	2078      	movs	r0, #120	; 0x78
 8000174:	f000 fa46 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000178:	2220      	movs	r2, #32
 800017a:	2100      	movs	r1, #0
 800017c:	2078      	movs	r0, #120	; 0x78
 800017e:	f000 fa41 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000182:	2210      	movs	r2, #16
 8000184:	2100      	movs	r1, #0
 8000186:	2078      	movs	r0, #120	; 0x78
 8000188:	f000 fa3c 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800018c:	22b0      	movs	r2, #176	; 0xb0
 800018e:	2100      	movs	r1, #0
 8000190:	2078      	movs	r0, #120	; 0x78
 8000192:	f000 fa37 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000196:	22c8      	movs	r2, #200	; 0xc8
 8000198:	2100      	movs	r1, #0
 800019a:	2078      	movs	r0, #120	; 0x78
 800019c:	f000 fa32 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80001a0:	2200      	movs	r2, #0
 80001a2:	2100      	movs	r1, #0
 80001a4:	2078      	movs	r0, #120	; 0x78
 80001a6:	f000 fa2d 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80001aa:	2210      	movs	r2, #16
 80001ac:	2100      	movs	r1, #0
 80001ae:	2078      	movs	r0, #120	; 0x78
 80001b0:	f000 fa28 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80001b4:	2240      	movs	r2, #64	; 0x40
 80001b6:	2100      	movs	r1, #0
 80001b8:	2078      	movs	r0, #120	; 0x78
 80001ba:	f000 fa23 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80001be:	2281      	movs	r2, #129	; 0x81
 80001c0:	2100      	movs	r1, #0
 80001c2:	2078      	movs	r0, #120	; 0x78
 80001c4:	f000 fa1e 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80001c8:	22ff      	movs	r2, #255	; 0xff
 80001ca:	2100      	movs	r1, #0
 80001cc:	2078      	movs	r0, #120	; 0x78
 80001ce:	f000 fa19 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80001d2:	22a1      	movs	r2, #161	; 0xa1
 80001d4:	2100      	movs	r1, #0
 80001d6:	2078      	movs	r0, #120	; 0x78
 80001d8:	f000 fa14 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80001dc:	22a6      	movs	r2, #166	; 0xa6
 80001de:	2100      	movs	r1, #0
 80001e0:	2078      	movs	r0, #120	; 0x78
 80001e2:	f000 fa0f 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80001e6:	22a8      	movs	r2, #168	; 0xa8
 80001e8:	2100      	movs	r1, #0
 80001ea:	2078      	movs	r0, #120	; 0x78
 80001ec:	f000 fa0a 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80001f0:	223f      	movs	r2, #63	; 0x3f
 80001f2:	2100      	movs	r1, #0
 80001f4:	2078      	movs	r0, #120	; 0x78
 80001f6:	f000 fa05 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80001fa:	22a4      	movs	r2, #164	; 0xa4
 80001fc:	2100      	movs	r1, #0
 80001fe:	2078      	movs	r0, #120	; 0x78
 8000200:	f000 fa00 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //--set display offset
 8000204:	22d3      	movs	r2, #211	; 0xd3
 8000206:	2100      	movs	r1, #0
 8000208:	2078      	movs	r0, #120	; 0x78
 800020a:	f000 f9fb 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //--not offset
 800020e:	2200      	movs	r2, #0
 8000210:	2100      	movs	r1, #0
 8000212:	2078      	movs	r0, #120	; 0x78
 8000214:	f000 f9f6 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000218:	22d5      	movs	r2, #213	; 0xd5
 800021a:	2100      	movs	r1, #0
 800021c:	2078      	movs	r0, #120	; 0x78
 800021e:	f000 f9f1 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000222:	22f0      	movs	r2, #240	; 0xf0
 8000224:	2100      	movs	r1, #0
 8000226:	2078      	movs	r0, #120	; 0x78
 8000228:	f000 f9ec 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800022c:	22d9      	movs	r2, #217	; 0xd9
 800022e:	2100      	movs	r1, #0
 8000230:	2078      	movs	r0, #120	; 0x78
 8000232:	f000 f9e7 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000236:	2222      	movs	r2, #34	; 0x22
 8000238:	2100      	movs	r1, #0
 800023a:	2078      	movs	r0, #120	; 0x78
 800023c:	f000 f9e2 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000240:	22da      	movs	r2, #218	; 0xda
 8000242:	2100      	movs	r1, #0
 8000244:	2078      	movs	r0, #120	; 0x78
 8000246:	f000 f9dd 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800024a:	2212      	movs	r2, #18
 800024c:	2100      	movs	r1, #0
 800024e:	2078      	movs	r0, #120	; 0x78
 8000250:	f000 f9d8 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000254:	22db      	movs	r2, #219	; 0xdb
 8000256:	2100      	movs	r1, #0
 8000258:	2078      	movs	r0, #120	; 0x78
 800025a:	f000 f9d3 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800025e:	2220      	movs	r2, #32
 8000260:	2100      	movs	r1, #0
 8000262:	2078      	movs	r0, #120	; 0x78
 8000264:	f000 f9ce 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000268:	228d      	movs	r2, #141	; 0x8d
 800026a:	2100      	movs	r1, #0
 800026c:	2078      	movs	r0, #120	; 0x78
 800026e:	f000 f9c9 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000272:	2214      	movs	r2, #20
 8000274:	2100      	movs	r1, #0
 8000276:	2078      	movs	r0, #120	; 0x78
 8000278:	f000 f9c4 	bl	8000604 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800027c:	22af      	movs	r2, #175	; 0xaf
 800027e:	2100      	movs	r1, #0
 8000280:	2078      	movs	r0, #120	; 0x78
 8000282:	f000 f9bf 	bl	8000604 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000286:	222e      	movs	r2, #46	; 0x2e
 8000288:	2100      	movs	r1, #0
 800028a:	2078      	movs	r0, #120	; 0x78
 800028c:	f000 f9ba 	bl	8000604 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000290:	2000      	movs	r0, #0
 8000292:	f000 f841 	bl	8000318 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000296:	f000 f811 	bl	80002bc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800029a:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <SSD1306_Init+0x168>)
 800029c:	2200      	movs	r2, #0
 800029e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <SSD1306_Init+0x168>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80002a6:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <SSD1306_Init+0x168>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80002ac:	2301      	movs	r3, #1
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	200004ac 	.word	0x200004ac

080002bc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80002c2:	2300      	movs	r3, #0
 80002c4:	71fb      	strb	r3, [r7, #7]
 80002c6:	e01d      	b.n	8000304 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	3b50      	subs	r3, #80	; 0x50
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	461a      	mov	r2, r3
 80002d0:	2100      	movs	r1, #0
 80002d2:	2078      	movs	r0, #120	; 0x78
 80002d4:	f000 f996 	bl	8000604 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80002d8:	2200      	movs	r2, #0
 80002da:	2100      	movs	r1, #0
 80002dc:	2078      	movs	r0, #120	; 0x78
 80002de:	f000 f991 	bl	8000604 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80002e2:	2210      	movs	r2, #16
 80002e4:	2100      	movs	r1, #0
 80002e6:	2078      	movs	r0, #120	; 0x78
 80002e8:	f000 f98c 	bl	8000604 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	01db      	lsls	r3, r3, #7
 80002f0:	4a08      	ldr	r2, [pc, #32]	; (8000314 <SSD1306_UpdateScreen+0x58>)
 80002f2:	441a      	add	r2, r3
 80002f4:	2380      	movs	r3, #128	; 0x80
 80002f6:	2140      	movs	r1, #64	; 0x40
 80002f8:	2078      	movs	r0, #120	; 0x78
 80002fa:	f000 f94b 	bl	8000594 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	3301      	adds	r3, #1
 8000302:	71fb      	strb	r3, [r7, #7]
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	2b07      	cmp	r3, #7
 8000308:	d9de      	bls.n	80002c8 <SSD1306_UpdateScreen+0xc>
	}
}
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	200000ac 	.word	0x200000ac

08000318 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d101      	bne.n	800032c <SSD1306_Fill+0x14>
 8000328:	2300      	movs	r3, #0
 800032a:	e000      	b.n	800032e <SSD1306_Fill+0x16>
 800032c:	23ff      	movs	r3, #255	; 0xff
 800032e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000332:	4619      	mov	r1, r3
 8000334:	4803      	ldr	r0, [pc, #12]	; (8000344 <SSD1306_Fill+0x2c>)
 8000336:	f005 fe72 	bl	800601e <memset>
}
 800033a:	bf00      	nop
 800033c:	3708      	adds	r7, #8
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	200000ac 	.word	0x200000ac

08000348 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	80fb      	strh	r3, [r7, #6]
 8000352:	460b      	mov	r3, r1
 8000354:	80bb      	strh	r3, [r7, #4]
 8000356:	4613      	mov	r3, r2
 8000358:	70fb      	strb	r3, [r7, #3]
	if (
 800035a:	88fb      	ldrh	r3, [r7, #6]
 800035c:	2b7f      	cmp	r3, #127	; 0x7f
 800035e:	d848      	bhi.n	80003f2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000360:	88bb      	ldrh	r3, [r7, #4]
 8000362:	2b3f      	cmp	r3, #63	; 0x3f
 8000364:	d845      	bhi.n	80003f2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000366:	4b25      	ldr	r3, [pc, #148]	; (80003fc <SSD1306_DrawPixel+0xb4>)
 8000368:	791b      	ldrb	r3, [r3, #4]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d006      	beq.n	800037c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800036e:	78fb      	ldrb	r3, [r7, #3]
 8000370:	2b00      	cmp	r3, #0
 8000372:	bf0c      	ite	eq
 8000374:	2301      	moveq	r3, #1
 8000376:	2300      	movne	r3, #0
 8000378:	b2db      	uxtb	r3, r3
 800037a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800037c:	78fb      	ldrb	r3, [r7, #3]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d11a      	bne.n	80003b8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000382:	88fa      	ldrh	r2, [r7, #6]
 8000384:	88bb      	ldrh	r3, [r7, #4]
 8000386:	08db      	lsrs	r3, r3, #3
 8000388:	b298      	uxth	r0, r3
 800038a:	4603      	mov	r3, r0
 800038c:	01db      	lsls	r3, r3, #7
 800038e:	4413      	add	r3, r2
 8000390:	4a1b      	ldr	r2, [pc, #108]	; (8000400 <SSD1306_DrawPixel+0xb8>)
 8000392:	5cd3      	ldrb	r3, [r2, r3]
 8000394:	b25a      	sxtb	r2, r3
 8000396:	88bb      	ldrh	r3, [r7, #4]
 8000398:	f003 0307 	and.w	r3, r3, #7
 800039c:	2101      	movs	r1, #1
 800039e:	fa01 f303 	lsl.w	r3, r1, r3
 80003a2:	b25b      	sxtb	r3, r3
 80003a4:	4313      	orrs	r3, r2
 80003a6:	b259      	sxtb	r1, r3
 80003a8:	88fa      	ldrh	r2, [r7, #6]
 80003aa:	4603      	mov	r3, r0
 80003ac:	01db      	lsls	r3, r3, #7
 80003ae:	4413      	add	r3, r2
 80003b0:	b2c9      	uxtb	r1, r1
 80003b2:	4a13      	ldr	r2, [pc, #76]	; (8000400 <SSD1306_DrawPixel+0xb8>)
 80003b4:	54d1      	strb	r1, [r2, r3]
 80003b6:	e01d      	b.n	80003f4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80003b8:	88fa      	ldrh	r2, [r7, #6]
 80003ba:	88bb      	ldrh	r3, [r7, #4]
 80003bc:	08db      	lsrs	r3, r3, #3
 80003be:	b298      	uxth	r0, r3
 80003c0:	4603      	mov	r3, r0
 80003c2:	01db      	lsls	r3, r3, #7
 80003c4:	4413      	add	r3, r2
 80003c6:	4a0e      	ldr	r2, [pc, #56]	; (8000400 <SSD1306_DrawPixel+0xb8>)
 80003c8:	5cd3      	ldrb	r3, [r2, r3]
 80003ca:	b25a      	sxtb	r2, r3
 80003cc:	88bb      	ldrh	r3, [r7, #4]
 80003ce:	f003 0307 	and.w	r3, r3, #7
 80003d2:	2101      	movs	r1, #1
 80003d4:	fa01 f303 	lsl.w	r3, r1, r3
 80003d8:	b25b      	sxtb	r3, r3
 80003da:	43db      	mvns	r3, r3
 80003dc:	b25b      	sxtb	r3, r3
 80003de:	4013      	ands	r3, r2
 80003e0:	b259      	sxtb	r1, r3
 80003e2:	88fa      	ldrh	r2, [r7, #6]
 80003e4:	4603      	mov	r3, r0
 80003e6:	01db      	lsls	r3, r3, #7
 80003e8:	4413      	add	r3, r2
 80003ea:	b2c9      	uxtb	r1, r1
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <SSD1306_DrawPixel+0xb8>)
 80003ee:	54d1      	strb	r1, [r2, r3]
 80003f0:	e000      	b.n	80003f4 <SSD1306_DrawPixel+0xac>
		return;
 80003f2:	bf00      	nop
	}
}
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	200004ac 	.word	0x200004ac
 8000400:	200000ac 	.word	0x200000ac

08000404 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	460a      	mov	r2, r1
 800040e:	80fb      	strh	r3, [r7, #6]
 8000410:	4613      	mov	r3, r2
 8000412:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000414:	4a05      	ldr	r2, [pc, #20]	; (800042c <SSD1306_GotoXY+0x28>)
 8000416:	88fb      	ldrh	r3, [r7, #6]
 8000418:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800041a:	4a04      	ldr	r2, [pc, #16]	; (800042c <SSD1306_GotoXY+0x28>)
 800041c:	88bb      	ldrh	r3, [r7, #4]
 800041e:	8053      	strh	r3, [r2, #2]
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	200004ac 	.word	0x200004ac

08000430 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	6039      	str	r1, [r7, #0]
 800043a:	71fb      	strb	r3, [r7, #7]
 800043c:	4613      	mov	r3, r2
 800043e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000440:	4b3a      	ldr	r3, [pc, #232]	; (800052c <SSD1306_Putc+0xfc>)
 8000442:	881b      	ldrh	r3, [r3, #0]
 8000444:	461a      	mov	r2, r3
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	4413      	add	r3, r2
	if (
 800044c:	2b7f      	cmp	r3, #127	; 0x7f
 800044e:	dc07      	bgt.n	8000460 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000450:	4b36      	ldr	r3, [pc, #216]	; (800052c <SSD1306_Putc+0xfc>)
 8000452:	885b      	ldrh	r3, [r3, #2]
 8000454:	461a      	mov	r2, r3
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	785b      	ldrb	r3, [r3, #1]
 800045a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800045c:	2b3f      	cmp	r3, #63	; 0x3f
 800045e:	dd01      	ble.n	8000464 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000460:	2300      	movs	r3, #0
 8000462:	e05e      	b.n	8000522 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
 8000468:	e04b      	b.n	8000502 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	685a      	ldr	r2, [r3, #4]
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	3b20      	subs	r3, #32
 8000472:	6839      	ldr	r1, [r7, #0]
 8000474:	7849      	ldrb	r1, [r1, #1]
 8000476:	fb01 f303 	mul.w	r3, r1, r3
 800047a:	4619      	mov	r1, r3
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	440b      	add	r3, r1
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	4413      	add	r3, r2
 8000484:	881b      	ldrh	r3, [r3, #0]
 8000486:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000488:	2300      	movs	r3, #0
 800048a:	613b      	str	r3, [r7, #16]
 800048c:	e030      	b.n	80004f0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800048e:	68fa      	ldr	r2, [r7, #12]
 8000490:	693b      	ldr	r3, [r7, #16]
 8000492:	fa02 f303 	lsl.w	r3, r2, r3
 8000496:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800049a:	2b00      	cmp	r3, #0
 800049c:	d010      	beq.n	80004c0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800049e:	4b23      	ldr	r3, [pc, #140]	; (800052c <SSD1306_Putc+0xfc>)
 80004a0:	881a      	ldrh	r2, [r3, #0]
 80004a2:	693b      	ldr	r3, [r7, #16]
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	4413      	add	r3, r2
 80004a8:	b298      	uxth	r0, r3
 80004aa:	4b20      	ldr	r3, [pc, #128]	; (800052c <SSD1306_Putc+0xfc>)
 80004ac:	885a      	ldrh	r2, [r3, #2]
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	b29b      	uxth	r3, r3
 80004b2:	4413      	add	r3, r2
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	79ba      	ldrb	r2, [r7, #6]
 80004b8:	4619      	mov	r1, r3
 80004ba:	f7ff ff45 	bl	8000348 <SSD1306_DrawPixel>
 80004be:	e014      	b.n	80004ea <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80004c0:	4b1a      	ldr	r3, [pc, #104]	; (800052c <SSD1306_Putc+0xfc>)
 80004c2:	881a      	ldrh	r2, [r3, #0]
 80004c4:	693b      	ldr	r3, [r7, #16]
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	4413      	add	r3, r2
 80004ca:	b298      	uxth	r0, r3
 80004cc:	4b17      	ldr	r3, [pc, #92]	; (800052c <SSD1306_Putc+0xfc>)
 80004ce:	885a      	ldrh	r2, [r3, #2]
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	b29b      	uxth	r3, r3
 80004d4:	4413      	add	r3, r2
 80004d6:	b299      	uxth	r1, r3
 80004d8:	79bb      	ldrb	r3, [r7, #6]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	bf0c      	ite	eq
 80004de:	2301      	moveq	r3, #1
 80004e0:	2300      	movne	r3, #0
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	461a      	mov	r2, r3
 80004e6:	f7ff ff2f 	bl	8000348 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80004ea:	693b      	ldr	r3, [r7, #16]
 80004ec:	3301      	adds	r3, #1
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	461a      	mov	r2, r3
 80004f6:	693b      	ldr	r3, [r7, #16]
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d3c8      	bcc.n	800048e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	3301      	adds	r3, #1
 8000500:	617b      	str	r3, [r7, #20]
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	785b      	ldrb	r3, [r3, #1]
 8000506:	461a      	mov	r2, r3
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	4293      	cmp	r3, r2
 800050c:	d3ad      	bcc.n	800046a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800050e:	4b07      	ldr	r3, [pc, #28]	; (800052c <SSD1306_Putc+0xfc>)
 8000510:	881a      	ldrh	r2, [r3, #0]
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	b29b      	uxth	r3, r3
 8000518:	4413      	add	r3, r2
 800051a:	b29a      	uxth	r2, r3
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <SSD1306_Putc+0xfc>)
 800051e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000520:	79fb      	ldrb	r3, [r7, #7]
}
 8000522:	4618      	mov	r0, r3
 8000524:	3718      	adds	r7, #24
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	200004ac 	.word	0x200004ac

08000530 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	4613      	mov	r3, r2
 800053c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800053e:	e012      	b.n	8000566 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	79fa      	ldrb	r2, [r7, #7]
 8000546:	68b9      	ldr	r1, [r7, #8]
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff ff71 	bl	8000430 <SSD1306_Putc>
 800054e:	4603      	mov	r3, r0
 8000550:	461a      	mov	r2, r3
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	429a      	cmp	r2, r3
 8000558:	d002      	beq.n	8000560 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	e008      	b.n	8000572 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3301      	adds	r3, #1
 8000564:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d1e8      	bne.n	8000540 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	781b      	ldrb	r3, [r3, #0]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff feca 	bl	8000318 <SSD1306_Fill>
    //SSD1306_UpdateScreen();
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}

08000588 <ssd1306_I2C_Init>:
}
#endif

//Generated I2C
#ifdef GENERATED_I2C
void ssd1306_I2C_Init() {
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000594:	b490      	push	{r4, r7}
 8000596:	b0c4      	sub	sp, #272	; 0x110
 8000598:	af00      	add	r7, sp, #0
 800059a:	4604      	mov	r4, r0
 800059c:	4608      	mov	r0, r1
 800059e:	4639      	mov	r1, r7
 80005a0:	600a      	str	r2, [r1, #0]
 80005a2:	4619      	mov	r1, r3
 80005a4:	1dfb      	adds	r3, r7, #7
 80005a6:	4622      	mov	r2, r4
 80005a8:	701a      	strb	r2, [r3, #0]
 80005aa:	1dbb      	adds	r3, r7, #6
 80005ac:	4602      	mov	r2, r0
 80005ae:	701a      	strb	r2, [r3, #0]
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	460a      	mov	r2, r1
 80005b4:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	1dba      	adds	r2, r7, #6
 80005bc:	7812      	ldrb	r2, [r2, #0]
 80005be:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 80005c0:	2300      	movs	r3, #0
 80005c2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80005c6:	e010      	b.n	80005ea <ssd1306_I2C_WriteMulti+0x56>
		dt[i+1] = data[i];
 80005c8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80005cc:	463a      	mov	r2, r7
 80005ce:	6812      	ldr	r2, [r2, #0]
 80005d0:	441a      	add	r2, r3
 80005d2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80005d6:	3301      	adds	r3, #1
 80005d8:	7811      	ldrb	r1, [r2, #0]
 80005da:	f107 020c 	add.w	r2, r7, #12
 80005de:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 80005e0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80005e4:	3301      	adds	r3, #1
 80005e6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80005ea:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	1d3a      	adds	r2, r7, #4
 80005f2:	8812      	ldrh	r2, [r2, #0]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d8e7      	bhi.n	80005c8 <ssd1306_I2C_WriteMulti+0x34>
	//HAL_I2C_Master_Transmit(ssd1306_i2c, address, dt, count+1, 10);
}
 80005f8:	bf00      	nop
 80005fa:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc90      	pop	{r4, r7}
 8000602:	4770      	bx	lr

08000604 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	460b      	mov	r3, r1
 8000610:	71bb      	strb	r3, [r7, #6]
 8000612:	4613      	mov	r3, r2
 8000614:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000616:	79bb      	ldrb	r3, [r7, #6]
 8000618:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800061a:	797b      	ldrb	r3, [r7, #5]
 800061c:	737b      	strb	r3, [r7, #13]
	//HAL_I2C_Master_Transmit(ssd1306_i2c, address, dt, 2, 10);
}
 800061e:	bf00      	nop
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr

08000628 <PWM_SetPWM>:
/* Private function -----------------------------------------------*/


/* Public function -----------------------------------------------*/
void PWM_SetPWM(TIM_HandleTypeDef* timer, uint32_t channel, uint16_t period,uint16_t pulse)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08c      	sub	sp, #48	; 0x30
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	4611      	mov	r1, r2
 8000634:	461a      	mov	r2, r3
 8000636:	460b      	mov	r3, r1
 8000638:	80fb      	strh	r3, [r7, #6]
 800063a:	4613      	mov	r3, r2
 800063c:	80bb      	strh	r3, [r7, #4]
	 HAL_TIM_PWM_Stop(timer, channel); // stop generation of pwm
 800063e:	68b9      	ldr	r1, [r7, #8]
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f001 fd23 	bl	800208c <HAL_TIM_PWM_Stop>
	 TIM_OC_InitTypeDef sConfigOC;
	 timer->Init.Period = period; // set the period duration
 8000646:	88fa      	ldrh	r2, [r7, #6]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	60da      	str	r2, [r3, #12]
	 HAL_TIM_PWM_Init(timer); // reinititialise with new period value
 800064c:	68f8      	ldr	r0, [r7, #12]
 800064e:	f001 fcb6 	bl	8001fbe <HAL_TIM_PWM_Init>
	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000652:	2360      	movs	r3, #96	; 0x60
 8000654:	617b      	str	r3, [r7, #20]
	 sConfigOC.Pulse = pulse; // set the pulse duration
 8000656:	88bb      	ldrh	r3, [r7, #4]
 8000658:	61bb      	str	r3, [r7, #24]
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
	 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800065e:	2300      	movs	r3, #0
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_TIM_PWM_ConfigChannel(timer, &sConfigOC, channel);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	68ba      	ldr	r2, [r7, #8]
 8000668:	4619      	mov	r1, r3
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	f001 fd5a 	bl	8002124 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_Start(timer, channel); // start pwm generation
 8000670:	68b9      	ldr	r1, [r7, #8]
 8000672:	68f8      	ldr	r0, [r7, #12]
 8000674:	f001 fcd8 	bl	8002028 <HAL_TIM_PWM_Start>
}
 8000678:	bf00      	nop
 800067a:	3730      	adds	r7, #48	; 0x30
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <PWM_SetDuty>:

void PWM_SetDuty(TIM_HandleTypeDef* timer, uint32_t channel, uint16_t pulse)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	4613      	mov	r3, r2
 800068c:	80fb      	strh	r3, [r7, #6]
	 __HAL_TIM_SET_COMPARE(timer, channel, pulse);
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d104      	bne.n	800069e <PWM_SetDuty+0x1e>
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	88fa      	ldrh	r2, [r7, #6]
 800069a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800069c:	e013      	b.n	80006c6 <PWM_SetDuty+0x46>
	 __HAL_TIM_SET_COMPARE(timer, channel, pulse);
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	2b04      	cmp	r3, #4
 80006a2:	d104      	bne.n	80006ae <PWM_SetDuty+0x2e>
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	88fa      	ldrh	r2, [r7, #6]
 80006aa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80006ac:	e00b      	b.n	80006c6 <PWM_SetDuty+0x46>
	 __HAL_TIM_SET_COMPARE(timer, channel, pulse);
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	2b08      	cmp	r3, #8
 80006b2:	d104      	bne.n	80006be <PWM_SetDuty+0x3e>
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	88fa      	ldrh	r2, [r7, #6]
 80006ba:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80006bc:	e003      	b.n	80006c6 <PWM_SetDuty+0x46>
	 __HAL_TIM_SET_COMPARE(timer, channel, pulse);
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	88fa      	ldrh	r2, [r7, #6]
 80006c4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80006c6:	bf00      	nop
 80006c8:	3714      	adds	r7, #20
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr

080006d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <HAL_Init+0x28>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <HAL_Init+0x28>)
 80006da:	f043 0310 	orr.w	r3, r3, #16
 80006de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e0:	2003      	movs	r0, #3
 80006e2:	f000 fb2d 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006e6:	200f      	movs	r0, #15
 80006e8:	f000 f808 	bl	80006fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006ec:	f004 ffa6 	bl	800563c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40022000 	.word	0x40022000

080006fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <HAL_InitTick+0x54>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_InitTick+0x58>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	4619      	mov	r1, r3
 800070e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000712:	fbb3 f3f1 	udiv	r3, r3, r1
 8000716:	fbb2 f3f3 	udiv	r3, r2, r3
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fb45 	bl	8000daa <HAL_SYSTICK_Config>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	e00e      	b.n	8000748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2b0f      	cmp	r3, #15
 800072e:	d80a      	bhi.n	8000746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000730:	2200      	movs	r2, #0
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	f04f 30ff 	mov.w	r0, #4294967295
 8000738:	f000 fb0d 	bl	8000d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800073c:	4a06      	ldr	r2, [pc, #24]	; (8000758 <HAL_InitTick+0x5c>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000742:	2300      	movs	r3, #0
 8000744:	e000      	b.n	8000748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
}
 8000748:	4618      	mov	r0, r3
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000024 	.word	0x20000024
 8000754:	2000001c 	.word	0x2000001c
 8000758:	20000018 	.word	0x20000018

0800075c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <HAL_IncTick+0x1c>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <HAL_IncTick+0x20>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4413      	add	r3, r2
 800076c:	4a03      	ldr	r2, [pc, #12]	; (800077c <HAL_IncTick+0x20>)
 800076e:	6013      	str	r3, [r2, #0]
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	2000001c 	.word	0x2000001c
 800077c:	2000146c 	.word	0x2000146c

08000780 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return uwTick;
 8000784:	4b02      	ldr	r3, [pc, #8]	; (8000790 <HAL_GetTick+0x10>)
 8000786:	681b      	ldr	r3, [r3, #0]
}
 8000788:	4618      	mov	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	2000146c 	.word	0x2000146c

08000794 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800079c:	2300      	movs	r3, #0
 800079e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d101      	bne.n	80007b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e0be      	b.n	8000934 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d109      	bne.n	80007d8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2200      	movs	r2, #0
 80007c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2200      	movs	r2, #0
 80007ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f004 fd3a 	bl	800524c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f000 f9ab 	bl	8000b34 <ADC_ConversionStop_Disable>
 80007de:	4603      	mov	r3, r0
 80007e0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e6:	f003 0310 	and.w	r3, r3, #16
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	f040 8099 	bne.w	8000922 <HAL_ADC_Init+0x18e>
 80007f0:	7dfb      	ldrb	r3, [r7, #23]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8095 	bne.w	8000922 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000800:	f023 0302 	bic.w	r3, r3, #2
 8000804:	f043 0202 	orr.w	r2, r3, #2
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000814:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	7b1b      	ldrb	r3, [r3, #12]
 800081a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800081c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	4313      	orrs	r3, r2
 8000822:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800082c:	d003      	beq.n	8000836 <HAL_ADC_Init+0xa2>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d102      	bne.n	800083c <HAL_ADC_Init+0xa8>
 8000836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800083a:	e000      	b.n	800083e <HAL_ADC_Init+0xaa>
 800083c:	2300      	movs	r3, #0
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	4313      	orrs	r3, r2
 8000842:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	7d1b      	ldrb	r3, [r3, #20]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d119      	bne.n	8000880 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7b1b      	ldrb	r3, [r3, #12]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d109      	bne.n	8000868 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	3b01      	subs	r3, #1
 800085a:	035a      	lsls	r2, r3, #13
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	4313      	orrs	r3, r2
 8000860:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	e00b      	b.n	8000880 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800086c:	f043 0220 	orr.w	r2, r3, #32
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000878:	f043 0201 	orr.w	r2, r3, #1
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	430a      	orrs	r2, r1
 8000892:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	689a      	ldr	r2, [r3, #8]
 800089a:	4b28      	ldr	r3, [pc, #160]	; (800093c <HAL_ADC_Init+0x1a8>)
 800089c:	4013      	ands	r3, r2
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	6812      	ldr	r2, [r2, #0]
 80008a2:	68b9      	ldr	r1, [r7, #8]
 80008a4:	430b      	orrs	r3, r1
 80008a6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008b0:	d003      	beq.n	80008ba <HAL_ADC_Init+0x126>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d104      	bne.n	80008c4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	691b      	ldr	r3, [r3, #16]
 80008be:	3b01      	subs	r3, #1
 80008c0:	051b      	lsls	r3, r3, #20
 80008c2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	430a      	orrs	r2, r1
 80008d6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	689a      	ldr	r2, [r3, #8]
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <HAL_ADC_Init+0x1ac>)
 80008e0:	4013      	ands	r3, r2
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d10b      	bne.n	8000900 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2200      	movs	r2, #0
 80008ec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f2:	f023 0303 	bic.w	r3, r3, #3
 80008f6:	f043 0201 	orr.w	r2, r3, #1
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008fe:	e018      	b.n	8000932 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000904:	f023 0312 	bic.w	r3, r3, #18
 8000908:	f043 0210 	orr.w	r2, r3, #16
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000914:	f043 0201 	orr.w	r2, r3, #1
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800091c:	2301      	movs	r3, #1
 800091e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000920:	e007      	b.n	8000932 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000926:	f043 0210 	orr.w	r2, r3, #16
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000932:	7dfb      	ldrb	r3, [r7, #23]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	ffe1f7fd 	.word	0xffe1f7fd
 8000940:	ff1f0efe 	.word	0xff1f0efe

08000944 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800094e:	2300      	movs	r3, #0
 8000950:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800095c:	2b01      	cmp	r3, #1
 800095e:	d101      	bne.n	8000964 <HAL_ADC_ConfigChannel+0x20>
 8000960:	2302      	movs	r3, #2
 8000962:	e0dc      	b.n	8000b1e <HAL_ADC_ConfigChannel+0x1da>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2201      	movs	r2, #1
 8000968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	2b06      	cmp	r3, #6
 8000972:	d81c      	bhi.n	80009ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685a      	ldr	r2, [r3, #4]
 800097e:	4613      	mov	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4413      	add	r3, r2
 8000984:	3b05      	subs	r3, #5
 8000986:	221f      	movs	r2, #31
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	43db      	mvns	r3, r3
 800098e:	4019      	ands	r1, r3
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	6818      	ldr	r0, [r3, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685a      	ldr	r2, [r3, #4]
 8000998:	4613      	mov	r3, r2
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	4413      	add	r3, r2
 800099e:	3b05      	subs	r3, #5
 80009a0:	fa00 f203 	lsl.w	r2, r0, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	430a      	orrs	r2, r1
 80009aa:	635a      	str	r2, [r3, #52]	; 0x34
 80009ac:	e03c      	b.n	8000a28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	2b0c      	cmp	r3, #12
 80009b4:	d81c      	bhi.n	80009f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685a      	ldr	r2, [r3, #4]
 80009c0:	4613      	mov	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	3b23      	subs	r3, #35	; 0x23
 80009c8:	221f      	movs	r2, #31
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	4019      	ands	r1, r3
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	6818      	ldr	r0, [r3, #0]
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685a      	ldr	r2, [r3, #4]
 80009da:	4613      	mov	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	4413      	add	r3, r2
 80009e0:	3b23      	subs	r3, #35	; 0x23
 80009e2:	fa00 f203 	lsl.w	r2, r0, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	430a      	orrs	r2, r1
 80009ec:	631a      	str	r2, [r3, #48]	; 0x30
 80009ee:	e01b      	b.n	8000a28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685a      	ldr	r2, [r3, #4]
 80009fa:	4613      	mov	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	3b41      	subs	r3, #65	; 0x41
 8000a02:	221f      	movs	r2, #31
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	4019      	ands	r1, r3
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	6818      	ldr	r0, [r3, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685a      	ldr	r2, [r3, #4]
 8000a14:	4613      	mov	r3, r2
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4413      	add	r3, r2
 8000a1a:	3b41      	subs	r3, #65	; 0x41
 8000a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	430a      	orrs	r2, r1
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b09      	cmp	r3, #9
 8000a2e:	d91c      	bls.n	8000a6a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	68d9      	ldr	r1, [r3, #12]
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	4413      	add	r3, r2
 8000a40:	3b1e      	subs	r3, #30
 8000a42:	2207      	movs	r2, #7
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	4019      	ands	r1, r3
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	6898      	ldr	r0, [r3, #8]
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4613      	mov	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	3b1e      	subs	r3, #30
 8000a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	430a      	orrs	r2, r1
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	e019      	b.n	8000a9e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	6919      	ldr	r1, [r3, #16]
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4613      	mov	r3, r2
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	4413      	add	r3, r2
 8000a7a:	2207      	movs	r2, #7
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	43db      	mvns	r3, r3
 8000a82:	4019      	ands	r1, r3
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	6898      	ldr	r0, [r3, #8]
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4413      	add	r3, r2
 8000a92:	fa00 f203 	lsl.w	r2, r0, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b10      	cmp	r3, #16
 8000aa4:	d003      	beq.n	8000aae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000aaa:	2b11      	cmp	r3, #17
 8000aac:	d132      	bne.n	8000b14 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a1d      	ldr	r2, [pc, #116]	; (8000b28 <HAL_ADC_ConfigChannel+0x1e4>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d125      	bne.n	8000b04 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d126      	bne.n	8000b14 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	689a      	ldr	r2, [r3, #8]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ad4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b10      	cmp	r3, #16
 8000adc:	d11a      	bne.n	8000b14 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <HAL_ADC_ConfigChannel+0x1e8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a13      	ldr	r2, [pc, #76]	; (8000b30 <HAL_ADC_ConfigChannel+0x1ec>)
 8000ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae8:	0c9a      	lsrs	r2, r3, #18
 8000aea:	4613      	mov	r3, r2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	4413      	add	r3, r2
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000af4:	e002      	b.n	8000afc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d1f9      	bne.n	8000af6 <HAL_ADC_ConfigChannel+0x1b2>
 8000b02:	e007      	b.n	8000b14 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b08:	f043 0220 	orr.w	r2, r3, #32
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	40012400 	.word	0x40012400
 8000b2c:	20000024 	.word	0x20000024
 8000b30:	431bde83 	.word	0x431bde83

08000b34 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d127      	bne.n	8000b9e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	689a      	ldr	r2, [r3, #8]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f022 0201 	bic.w	r2, r2, #1
 8000b5c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000b5e:	f7ff fe0f 	bl	8000780 <HAL_GetTick>
 8000b62:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000b64:	e014      	b.n	8000b90 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000b66:	f7ff fe0b 	bl	8000780 <HAL_GetTick>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d90d      	bls.n	8000b90 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b78:	f043 0210 	orr.w	r2, r3, #16
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b84:	f043 0201 	orr.w	r2, r3, #1
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e007      	b.n	8000ba0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d0e3      	beq.n	8000b66 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bda:	4a04      	ldr	r2, [pc, #16]	; (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	60d3      	str	r3, [r2, #12]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	f003 0307 	and.w	r3, r3, #7
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db0b      	blt.n	8000c36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f003 021f 	and.w	r2, r3, #31
 8000c24:	4906      	ldr	r1, [pc, #24]	; (8000c40 <__NVIC_EnableIRQ+0x34>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	095b      	lsrs	r3, r3, #5
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	; (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	; (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
         );
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	; 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d0c:	d301      	bcc.n	8000d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00f      	b.n	8000d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <SysTick_Config+0x40>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f7ff ff90 	bl	8000c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <SysTick_Config+0x40>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <SysTick_Config+0x40>)
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ff2d 	bl	8000ba8 <__NVIC_SetPriorityGrouping>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d68:	f7ff ff42 	bl	8000bf0 <__NVIC_GetPriorityGrouping>
 8000d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	6978      	ldr	r0, [r7, #20]
 8000d74:	f7ff ff90 	bl	8000c98 <NVIC_EncodePriority>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff5f 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff35 	bl	8000c0c <__NVIC_EnableIRQ>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffa2 	bl	8000cfc <SysTick_Config>
 8000db8:	4603      	mov	r3, r0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d005      	beq.n	8000de6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2204      	movs	r2, #4
 8000dde:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	73fb      	strb	r3, [r7, #15]
 8000de4:	e051      	b.n	8000e8a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f022 020e 	bic.w	r2, r2, #14
 8000df4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 0201 	bic.w	r2, r2, #1
 8000e04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a22      	ldr	r2, [pc, #136]	; (8000e94 <HAL_DMA_Abort_IT+0xd0>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d029      	beq.n	8000e64 <HAL_DMA_Abort_IT+0xa0>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a20      	ldr	r2, [pc, #128]	; (8000e98 <HAL_DMA_Abort_IT+0xd4>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d022      	beq.n	8000e60 <HAL_DMA_Abort_IT+0x9c>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a1f      	ldr	r2, [pc, #124]	; (8000e9c <HAL_DMA_Abort_IT+0xd8>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d01a      	beq.n	8000e5a <HAL_DMA_Abort_IT+0x96>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a1d      	ldr	r2, [pc, #116]	; (8000ea0 <HAL_DMA_Abort_IT+0xdc>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d012      	beq.n	8000e54 <HAL_DMA_Abort_IT+0x90>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a1c      	ldr	r2, [pc, #112]	; (8000ea4 <HAL_DMA_Abort_IT+0xe0>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d00a      	beq.n	8000e4e <HAL_DMA_Abort_IT+0x8a>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ea8 <HAL_DMA_Abort_IT+0xe4>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d102      	bne.n	8000e48 <HAL_DMA_Abort_IT+0x84>
 8000e42:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e46:	e00e      	b.n	8000e66 <HAL_DMA_Abort_IT+0xa2>
 8000e48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e4c:	e00b      	b.n	8000e66 <HAL_DMA_Abort_IT+0xa2>
 8000e4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e52:	e008      	b.n	8000e66 <HAL_DMA_Abort_IT+0xa2>
 8000e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e58:	e005      	b.n	8000e66 <HAL_DMA_Abort_IT+0xa2>
 8000e5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e5e:	e002      	b.n	8000e66 <HAL_DMA_Abort_IT+0xa2>
 8000e60:	2310      	movs	r3, #16
 8000e62:	e000      	b.n	8000e66 <HAL_DMA_Abort_IT+0xa2>
 8000e64:	2301      	movs	r3, #1
 8000e66:	4a11      	ldr	r2, [pc, #68]	; (8000eac <HAL_DMA_Abort_IT+0xe8>)
 8000e68:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	4798      	blx	r3
    } 
  }
  return status;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40020008 	.word	0x40020008
 8000e98:	4002001c 	.word	0x4002001c
 8000e9c:	40020030 	.word	0x40020030
 8000ea0:	40020044 	.word	0x40020044
 8000ea4:	40020058 	.word	0x40020058
 8000ea8:	4002006c 	.word	0x4002006c
 8000eac:	40020000 	.word	0x40020000

08000eb0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eb2:	b087      	sub	sp, #28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000eca:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <HAL_FLASH_Program+0xd8>)
 8000ecc:	7e1b      	ldrb	r3, [r3, #24]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d101      	bne.n	8000ed6 <HAL_FLASH_Program+0x26>
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	e054      	b.n	8000f80 <HAL_FLASH_Program+0xd0>
 8000ed6:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <HAL_FLASH_Program+0xd8>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000edc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ee0:	f000 f8a8 	bl	8001034 <FLASH_WaitForLastOperation>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000ee8:	7dfb      	ldrb	r3, [r7, #23]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d144      	bne.n	8000f78 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d102      	bne.n	8000efa <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	757b      	strb	r3, [r7, #21]
 8000ef8:	e007      	b.n	8000f0a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d102      	bne.n	8000f06 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000f00:	2302      	movs	r3, #2
 8000f02:	757b      	strb	r3, [r7, #21]
 8000f04:	e001      	b.n	8000f0a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000f06:	2304      	movs	r3, #4
 8000f08:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	75bb      	strb	r3, [r7, #22]
 8000f0e:	e02d      	b.n	8000f6c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000f10:	7dbb      	ldrb	r3, [r7, #22]
 8000f12:	005a      	lsls	r2, r3, #1
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	eb02 0c03 	add.w	ip, r2, r3
 8000f1a:	7dbb      	ldrb	r3, [r7, #22]
 8000f1c:	0119      	lsls	r1, r3, #4
 8000f1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f22:	f1c1 0620 	rsb	r6, r1, #32
 8000f26:	f1a1 0020 	sub.w	r0, r1, #32
 8000f2a:	fa22 f401 	lsr.w	r4, r2, r1
 8000f2e:	fa03 f606 	lsl.w	r6, r3, r6
 8000f32:	4334      	orrs	r4, r6
 8000f34:	fa23 f000 	lsr.w	r0, r3, r0
 8000f38:	4304      	orrs	r4, r0
 8000f3a:	fa23 f501 	lsr.w	r5, r3, r1
 8000f3e:	b2a3      	uxth	r3, r4
 8000f40:	4619      	mov	r1, r3
 8000f42:	4660      	mov	r0, ip
 8000f44:	f000 f85a 	bl	8000ffc <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f4c:	f000 f872 	bl	8001034 <FLASH_WaitForLastOperation>
 8000f50:	4603      	mov	r3, r0
 8000f52:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000f54:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <HAL_FLASH_Program+0xdc>)
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	4a0c      	ldr	r2, [pc, #48]	; (8000f8c <HAL_FLASH_Program+0xdc>)
 8000f5a:	f023 0301 	bic.w	r3, r3, #1
 8000f5e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d107      	bne.n	8000f76 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000f66:	7dbb      	ldrb	r3, [r7, #22]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	75bb      	strb	r3, [r7, #22]
 8000f6c:	7dba      	ldrb	r2, [r7, #22]
 8000f6e:	7d7b      	ldrb	r3, [r7, #21]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d3cd      	bcc.n	8000f10 <HAL_FLASH_Program+0x60>
 8000f74:	e000      	b.n	8000f78 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000f76:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_FLASH_Program+0xd8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	761a      	strb	r2, [r3, #24]

  return status;
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	371c      	adds	r7, #28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f88:	20001470 	.word	0x20001470
 8000f8c:	40022000 	.word	0x40022000

08000f90 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <HAL_FLASH_Unlock+0x40>)
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d00d      	beq.n	8000fc2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_FLASH_Unlock+0x40>)
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <HAL_FLASH_Unlock+0x44>)
 8000faa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_FLASH_Unlock+0x40>)
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <HAL_FLASH_Unlock+0x48>)
 8000fb0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <HAL_FLASH_Unlock+0x40>)
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40022000 	.word	0x40022000
 8000fd4:	45670123 	.word	0x45670123
 8000fd8:	cdef89ab 	.word	0xcdef89ab

08000fdc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_FLASH_Lock+0x1c>)
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_FLASH_Lock+0x1c>)
 8000fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fea:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40022000 	.word	0x40022000

08000ffc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <FLASH_Program_HalfWord+0x30>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <FLASH_Program_HalfWord+0x34>)
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	4a07      	ldr	r2, [pc, #28]	; (8001030 <FLASH_Program_HalfWord+0x34>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	887a      	ldrh	r2, [r7, #2]
 800101e:	801a      	strh	r2, [r3, #0]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20001470 	.word	0x20001470
 8001030:	40022000 	.word	0x40022000

08001034 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff fba0 	bl	8000780 <HAL_GetTick>
 8001040:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001042:	e010      	b.n	8001066 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104a:	d00c      	beq.n	8001066 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d007      	beq.n	8001062 <FLASH_WaitForLastOperation+0x2e>
 8001052:	f7ff fb95 	bl	8000780 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	429a      	cmp	r2, r3
 8001060:	d201      	bcs.n	8001066 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e025      	b.n	80010b2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <FLASH_WaitForLastOperation+0x88>)
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1e8      	bne.n	8001044 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <FLASH_WaitForLastOperation+0x88>)
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	f003 0320 	and.w	r3, r3, #32
 800107a:	2b00      	cmp	r3, #0
 800107c:	d002      	beq.n	8001084 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <FLASH_WaitForLastOperation+0x88>)
 8001080:	2220      	movs	r2, #32
 8001082:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <FLASH_WaitForLastOperation+0x88>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	f003 0310 	and.w	r3, r3, #16
 800108c:	2b00      	cmp	r3, #0
 800108e:	d10b      	bne.n	80010a8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <FLASH_WaitForLastOperation+0x88>)
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001098:	2b00      	cmp	r3, #0
 800109a:	d105      	bne.n	80010a8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <FLASH_WaitForLastOperation+0x88>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80010a8:	f000 f80a 	bl	80010c0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40022000 	.word	0x40022000

080010c0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80010ca:	4b23      	ldr	r3, [pc, #140]	; (8001158 <FLASH_SetErrorCode+0x98>)
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	f003 0310 	and.w	r3, r3, #16
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d009      	beq.n	80010ea <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <FLASH_SetErrorCode+0x9c>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	4a1f      	ldr	r2, [pc, #124]	; (800115c <FLASH_SetErrorCode+0x9c>)
 80010e0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f043 0310 	orr.w	r3, r3, #16
 80010e8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80010ea:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <FLASH_SetErrorCode+0x98>)
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d009      	beq.n	800110a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <FLASH_SetErrorCode+0x9c>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	4a17      	ldr	r2, [pc, #92]	; (800115c <FLASH_SetErrorCode+0x9c>)
 8001100:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <FLASH_SetErrorCode+0x98>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00b      	beq.n	800112e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <FLASH_SetErrorCode+0x9c>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f043 0304 	orr.w	r3, r3, #4
 800111e:	4a0f      	ldr	r2, [pc, #60]	; (800115c <FLASH_SetErrorCode+0x9c>)
 8001120:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <FLASH_SetErrorCode+0x98>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4a0c      	ldr	r2, [pc, #48]	; (8001158 <FLASH_SetErrorCode+0x98>)
 8001128:	f023 0301 	bic.w	r3, r3, #1
 800112c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f240 1201 	movw	r2, #257	; 0x101
 8001134:	4293      	cmp	r3, r2
 8001136:	d106      	bne.n	8001146 <FLASH_SetErrorCode+0x86>
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <FLASH_SetErrorCode+0x98>)
 800113a:	69db      	ldr	r3, [r3, #28]
 800113c:	4a06      	ldr	r2, [pc, #24]	; (8001158 <FLASH_SetErrorCode+0x98>)
 800113e:	f023 0301 	bic.w	r3, r3, #1
 8001142:	61d3      	str	r3, [r2, #28]
}  
 8001144:	e002      	b.n	800114c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001146:	4a04      	ldr	r2, [pc, #16]	; (8001158 <FLASH_SetErrorCode+0x98>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	60d3      	str	r3, [r2, #12]
}  
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40022000 	.word	0x40022000
 800115c:	20001470 	.word	0x20001470

08001160 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001172:	4b2f      	ldr	r3, [pc, #188]	; (8001230 <HAL_FLASHEx_Erase+0xd0>)
 8001174:	7e1b      	ldrb	r3, [r3, #24]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d101      	bne.n	800117e <HAL_FLASHEx_Erase+0x1e>
 800117a:	2302      	movs	r3, #2
 800117c:	e053      	b.n	8001226 <HAL_FLASHEx_Erase+0xc6>
 800117e:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <HAL_FLASHEx_Erase+0xd0>)
 8001180:	2201      	movs	r2, #1
 8001182:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d116      	bne.n	80011ba <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800118c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001190:	f7ff ff50 	bl	8001034 <FLASH_WaitForLastOperation>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d141      	bne.n	800121e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800119a:	2001      	movs	r0, #1
 800119c:	f000 f84c 	bl	8001238 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011a4:	f7ff ff46 	bl	8001034 <FLASH_WaitForLastOperation>
 80011a8:	4603      	mov	r3, r0
 80011aa:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80011ac:	4b21      	ldr	r3, [pc, #132]	; (8001234 <HAL_FLASHEx_Erase+0xd4>)
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	4a20      	ldr	r2, [pc, #128]	; (8001234 <HAL_FLASHEx_Erase+0xd4>)
 80011b2:	f023 0304 	bic.w	r3, r3, #4
 80011b6:	6113      	str	r3, [r2, #16]
 80011b8:	e031      	b.n	800121e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80011ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011be:	f7ff ff39 	bl	8001034 <FLASH_WaitForLastOperation>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d12a      	bne.n	800121e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	f04f 32ff 	mov.w	r2, #4294967295
 80011ce:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	e019      	b.n	800120c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80011d8:	68b8      	ldr	r0, [r7, #8]
 80011da:	f000 f849 	bl	8001270 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011de:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011e2:	f7ff ff27 	bl	8001034 <FLASH_WaitForLastOperation>
 80011e6:	4603      	mov	r3, r0
 80011e8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_FLASHEx_Erase+0xd4>)
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	4a11      	ldr	r2, [pc, #68]	; (8001234 <HAL_FLASHEx_Erase+0xd4>)
 80011f0:	f023 0302 	bic.w	r3, r3, #2
 80011f4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	601a      	str	r2, [r3, #0]
            break;
 8001202:	e00c      	b.n	800121e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800120a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	029a      	lsls	r2, r3, #10
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	429a      	cmp	r2, r3
 800121c:	d3dc      	bcc.n	80011d8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <HAL_FLASHEx_Erase+0xd0>)
 8001220:	2200      	movs	r2, #0
 8001222:	761a      	strb	r2, [r3, #24]

  return status;
 8001224:	7bfb      	ldrb	r3, [r7, #15]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20001470 	.word	0x20001470
 8001234:	40022000 	.word	0x40022000

08001238 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <FLASH_MassErase+0x30>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <FLASH_MassErase+0x34>)
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	4a08      	ldr	r2, [pc, #32]	; (800126c <FLASH_MassErase+0x34>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <FLASH_MassErase+0x34>)
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <FLASH_MassErase+0x34>)
 8001258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800125c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	20001470 	.word	0x20001470
 800126c:	40022000 	.word	0x40022000

08001270 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <FLASH_PageErase+0x38>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <FLASH_PageErase+0x3c>)
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <FLASH_PageErase+0x3c>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800128a:	4a08      	ldr	r2, [pc, #32]	; (80012ac <FLASH_PageErase+0x3c>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <FLASH_PageErase+0x3c>)
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	4a05      	ldr	r2, [pc, #20]	; (80012ac <FLASH_PageErase+0x3c>)
 8001296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800129a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20001470 	.word	0x20001470
 80012ac:	40022000 	.word	0x40022000

080012b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b08b      	sub	sp, #44	; 0x2c
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c2:	e127      	b.n	8001514 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012c4:	2201      	movs	r2, #1
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	69fa      	ldr	r2, [r7, #28]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	429a      	cmp	r2, r3
 80012de:	f040 8116 	bne.w	800150e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b12      	cmp	r3, #18
 80012e8:	d034      	beq.n	8001354 <HAL_GPIO_Init+0xa4>
 80012ea:	2b12      	cmp	r3, #18
 80012ec:	d80d      	bhi.n	800130a <HAL_GPIO_Init+0x5a>
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d02b      	beq.n	800134a <HAL_GPIO_Init+0x9a>
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d804      	bhi.n	8001300 <HAL_GPIO_Init+0x50>
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d031      	beq.n	800135e <HAL_GPIO_Init+0xae>
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d01c      	beq.n	8001338 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012fe:	e048      	b.n	8001392 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001300:	2b03      	cmp	r3, #3
 8001302:	d043      	beq.n	800138c <HAL_GPIO_Init+0xdc>
 8001304:	2b11      	cmp	r3, #17
 8001306:	d01b      	beq.n	8001340 <HAL_GPIO_Init+0x90>
          break;
 8001308:	e043      	b.n	8001392 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800130a:	4a89      	ldr	r2, [pc, #548]	; (8001530 <HAL_GPIO_Init+0x280>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d026      	beq.n	800135e <HAL_GPIO_Init+0xae>
 8001310:	4a87      	ldr	r2, [pc, #540]	; (8001530 <HAL_GPIO_Init+0x280>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d806      	bhi.n	8001324 <HAL_GPIO_Init+0x74>
 8001316:	4a87      	ldr	r2, [pc, #540]	; (8001534 <HAL_GPIO_Init+0x284>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d020      	beq.n	800135e <HAL_GPIO_Init+0xae>
 800131c:	4a86      	ldr	r2, [pc, #536]	; (8001538 <HAL_GPIO_Init+0x288>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d01d      	beq.n	800135e <HAL_GPIO_Init+0xae>
          break;
 8001322:	e036      	b.n	8001392 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001324:	4a85      	ldr	r2, [pc, #532]	; (800153c <HAL_GPIO_Init+0x28c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d019      	beq.n	800135e <HAL_GPIO_Init+0xae>
 800132a:	4a85      	ldr	r2, [pc, #532]	; (8001540 <HAL_GPIO_Init+0x290>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d016      	beq.n	800135e <HAL_GPIO_Init+0xae>
 8001330:	4a84      	ldr	r2, [pc, #528]	; (8001544 <HAL_GPIO_Init+0x294>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d013      	beq.n	800135e <HAL_GPIO_Init+0xae>
          break;
 8001336:	e02c      	b.n	8001392 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	623b      	str	r3, [r7, #32]
          break;
 800133e:	e028      	b.n	8001392 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	3304      	adds	r3, #4
 8001346:	623b      	str	r3, [r7, #32]
          break;
 8001348:	e023      	b.n	8001392 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	3308      	adds	r3, #8
 8001350:	623b      	str	r3, [r7, #32]
          break;
 8001352:	e01e      	b.n	8001392 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	330c      	adds	r3, #12
 800135a:	623b      	str	r3, [r7, #32]
          break;
 800135c:	e019      	b.n	8001392 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d102      	bne.n	800136c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001366:	2304      	movs	r3, #4
 8001368:	623b      	str	r3, [r7, #32]
          break;
 800136a:	e012      	b.n	8001392 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d105      	bne.n	8001380 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001374:	2308      	movs	r3, #8
 8001376:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	69fa      	ldr	r2, [r7, #28]
 800137c:	611a      	str	r2, [r3, #16]
          break;
 800137e:	e008      	b.n	8001392 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001380:	2308      	movs	r3, #8
 8001382:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	615a      	str	r2, [r3, #20]
          break;
 800138a:	e002      	b.n	8001392 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
          break;
 8001390:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	2bff      	cmp	r3, #255	; 0xff
 8001396:	d801      	bhi.n	800139c <HAL_GPIO_Init+0xec>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	e001      	b.n	80013a0 <HAL_GPIO_Init+0xf0>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3304      	adds	r3, #4
 80013a0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	2bff      	cmp	r3, #255	; 0xff
 80013a6:	d802      	bhi.n	80013ae <HAL_GPIO_Init+0xfe>
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_Init+0x104>
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	3b08      	subs	r3, #8
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	210f      	movs	r1, #15
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	401a      	ands	r2, r3
 80013c6:	6a39      	ldr	r1, [r7, #32]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	431a      	orrs	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 8096 	beq.w	800150e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013e2:	4b59      	ldr	r3, [pc, #356]	; (8001548 <HAL_GPIO_Init+0x298>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	4a58      	ldr	r2, [pc, #352]	; (8001548 <HAL_GPIO_Init+0x298>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6193      	str	r3, [r2, #24]
 80013ee:	4b56      	ldr	r3, [pc, #344]	; (8001548 <HAL_GPIO_Init+0x298>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013fa:	4a54      	ldr	r2, [pc, #336]	; (800154c <HAL_GPIO_Init+0x29c>)
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	3302      	adds	r3, #2
 8001402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001406:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	220f      	movs	r2, #15
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	4013      	ands	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4b      	ldr	r2, [pc, #300]	; (8001550 <HAL_GPIO_Init+0x2a0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d013      	beq.n	800144e <HAL_GPIO_Init+0x19e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4a      	ldr	r2, [pc, #296]	; (8001554 <HAL_GPIO_Init+0x2a4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d00d      	beq.n	800144a <HAL_GPIO_Init+0x19a>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a49      	ldr	r2, [pc, #292]	; (8001558 <HAL_GPIO_Init+0x2a8>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d007      	beq.n	8001446 <HAL_GPIO_Init+0x196>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a48      	ldr	r2, [pc, #288]	; (800155c <HAL_GPIO_Init+0x2ac>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d101      	bne.n	8001442 <HAL_GPIO_Init+0x192>
 800143e:	2303      	movs	r3, #3
 8001440:	e006      	b.n	8001450 <HAL_GPIO_Init+0x1a0>
 8001442:	2304      	movs	r3, #4
 8001444:	e004      	b.n	8001450 <HAL_GPIO_Init+0x1a0>
 8001446:	2302      	movs	r3, #2
 8001448:	e002      	b.n	8001450 <HAL_GPIO_Init+0x1a0>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <HAL_GPIO_Init+0x1a0>
 800144e:	2300      	movs	r3, #0
 8001450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001452:	f002 0203 	and.w	r2, r2, #3
 8001456:	0092      	lsls	r2, r2, #2
 8001458:	4093      	lsls	r3, r2
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	4313      	orrs	r3, r2
 800145e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001460:	493a      	ldr	r1, [pc, #232]	; (800154c <HAL_GPIO_Init+0x29c>)
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d006      	beq.n	8001488 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800147a:	4b39      	ldr	r3, [pc, #228]	; (8001560 <HAL_GPIO_Init+0x2b0>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4938      	ldr	r1, [pc, #224]	; (8001560 <HAL_GPIO_Init+0x2b0>)
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	600b      	str	r3, [r1, #0]
 8001486:	e006      	b.n	8001496 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001488:	4b35      	ldr	r3, [pc, #212]	; (8001560 <HAL_GPIO_Init+0x2b0>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	43db      	mvns	r3, r3
 8001490:	4933      	ldr	r1, [pc, #204]	; (8001560 <HAL_GPIO_Init+0x2b0>)
 8001492:	4013      	ands	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d006      	beq.n	80014b0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014a2:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <HAL_GPIO_Init+0x2b0>)
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	492e      	ldr	r1, [pc, #184]	; (8001560 <HAL_GPIO_Init+0x2b0>)
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	604b      	str	r3, [r1, #4]
 80014ae:	e006      	b.n	80014be <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014b0:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <HAL_GPIO_Init+0x2b0>)
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	4929      	ldr	r1, [pc, #164]	; (8001560 <HAL_GPIO_Init+0x2b0>)
 80014ba:	4013      	ands	r3, r2
 80014bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d006      	beq.n	80014d8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014ca:	4b25      	ldr	r3, [pc, #148]	; (8001560 <HAL_GPIO_Init+0x2b0>)
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	4924      	ldr	r1, [pc, #144]	; (8001560 <HAL_GPIO_Init+0x2b0>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	608b      	str	r3, [r1, #8]
 80014d6:	e006      	b.n	80014e6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <HAL_GPIO_Init+0x2b0>)
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	43db      	mvns	r3, r3
 80014e0:	491f      	ldr	r1, [pc, #124]	; (8001560 <HAL_GPIO_Init+0x2b0>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d006      	beq.n	8001500 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014f2:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <HAL_GPIO_Init+0x2b0>)
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	491a      	ldr	r1, [pc, #104]	; (8001560 <HAL_GPIO_Init+0x2b0>)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	60cb      	str	r3, [r1, #12]
 80014fe:	e006      	b.n	800150e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001500:	4b17      	ldr	r3, [pc, #92]	; (8001560 <HAL_GPIO_Init+0x2b0>)
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	43db      	mvns	r3, r3
 8001508:	4915      	ldr	r1, [pc, #84]	; (8001560 <HAL_GPIO_Init+0x2b0>)
 800150a:	4013      	ands	r3, r2
 800150c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	3301      	adds	r3, #1
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	fa22 f303 	lsr.w	r3, r2, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	f47f aed0 	bne.w	80012c4 <HAL_GPIO_Init+0x14>
  }
}
 8001524:	bf00      	nop
 8001526:	372c      	adds	r7, #44	; 0x2c
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	10210000 	.word	0x10210000
 8001534:	10110000 	.word	0x10110000
 8001538:	10120000 	.word	0x10120000
 800153c:	10310000 	.word	0x10310000
 8001540:	10320000 	.word	0x10320000
 8001544:	10220000 	.word	0x10220000
 8001548:	40021000 	.word	0x40021000
 800154c:	40010000 	.word	0x40010000
 8001550:	40010800 	.word	0x40010800
 8001554:	40010c00 	.word	0x40010c00
 8001558:	40011000 	.word	0x40011000
 800155c:	40011400 	.word	0x40011400
 8001560:	40010400 	.word	0x40010400

08001564 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	887b      	ldrh	r3, [r7, #2]
 8001576:	4013      	ands	r3, r2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800157c:	2301      	movs	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	e001      	b.n	8001586 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001586:	7bfb      	ldrb	r3, [r7, #15]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr

08001592 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	460b      	mov	r3, r1
 800159c:	807b      	strh	r3, [r7, #2]
 800159e:	4613      	mov	r3, r2
 80015a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015a2:	787b      	ldrb	r3, [r7, #1]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a8:	887a      	ldrh	r2, [r7, #2]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015ae:	e003      	b.n	80015b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015b0:	887b      	ldrh	r3, [r7, #2]
 80015b2:	041a      	lsls	r2, r3, #16
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	611a      	str	r2, [r3, #16]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
	...

080015c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e26c      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 8087 	beq.w	80016f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015e4:	4b92      	ldr	r3, [pc, #584]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 030c 	and.w	r3, r3, #12
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d00c      	beq.n	800160a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015f0:	4b8f      	ldr	r3, [pc, #572]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 030c 	and.w	r3, r3, #12
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d112      	bne.n	8001622 <HAL_RCC_OscConfig+0x5e>
 80015fc:	4b8c      	ldr	r3, [pc, #560]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001608:	d10b      	bne.n	8001622 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160a:	4b89      	ldr	r3, [pc, #548]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d06c      	beq.n	80016f0 <HAL_RCC_OscConfig+0x12c>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d168      	bne.n	80016f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e246      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800162a:	d106      	bne.n	800163a <HAL_RCC_OscConfig+0x76>
 800162c:	4b80      	ldr	r3, [pc, #512]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a7f      	ldr	r2, [pc, #508]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	e02e      	b.n	8001698 <HAL_RCC_OscConfig+0xd4>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0x98>
 8001642:	4b7b      	ldr	r3, [pc, #492]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a7a      	ldr	r2, [pc, #488]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b78      	ldr	r3, [pc, #480]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a77      	ldr	r2, [pc, #476]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001654:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e01d      	b.n	8001698 <HAL_RCC_OscConfig+0xd4>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001664:	d10c      	bne.n	8001680 <HAL_RCC_OscConfig+0xbc>
 8001666:	4b72      	ldr	r3, [pc, #456]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a71      	ldr	r2, [pc, #452]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 800166c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	4b6f      	ldr	r3, [pc, #444]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a6e      	ldr	r2, [pc, #440]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e00b      	b.n	8001698 <HAL_RCC_OscConfig+0xd4>
 8001680:	4b6b      	ldr	r3, [pc, #428]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a6a      	ldr	r2, [pc, #424]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	4b68      	ldr	r3, [pc, #416]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a67      	ldr	r2, [pc, #412]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001696:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d013      	beq.n	80016c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff f86e 	bl	8000780 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a8:	f7ff f86a 	bl	8000780 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b64      	cmp	r3, #100	; 0x64
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e1fa      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ba:	4b5d      	ldr	r3, [pc, #372]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0xe4>
 80016c6:	e014      	b.n	80016f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c8:	f7ff f85a 	bl	8000780 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d0:	f7ff f856 	bl	8000780 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b64      	cmp	r3, #100	; 0x64
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e1e6      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e2:	4b53      	ldr	r3, [pc, #332]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x10c>
 80016ee:	e000      	b.n	80016f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d063      	beq.n	80017c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016fe:	4b4c      	ldr	r3, [pc, #304]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00b      	beq.n	8001722 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800170a:	4b49      	ldr	r3, [pc, #292]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	2b08      	cmp	r3, #8
 8001714:	d11c      	bne.n	8001750 <HAL_RCC_OscConfig+0x18c>
 8001716:	4b46      	ldr	r3, [pc, #280]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d116      	bne.n	8001750 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001722:	4b43      	ldr	r3, [pc, #268]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d005      	beq.n	800173a <HAL_RCC_OscConfig+0x176>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d001      	beq.n	800173a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e1ba      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173a:	4b3d      	ldr	r3, [pc, #244]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	4939      	ldr	r1, [pc, #228]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 800174a:	4313      	orrs	r3, r2
 800174c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174e:	e03a      	b.n	80017c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d020      	beq.n	800179a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001758:	4b36      	ldr	r3, [pc, #216]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175e:	f7ff f80f 	bl	8000780 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001766:	f7ff f80b 	bl	8000780 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e19b      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001778:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001784:	4b2a      	ldr	r3, [pc, #168]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	4927      	ldr	r1, [pc, #156]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001794:	4313      	orrs	r3, r2
 8001796:	600b      	str	r3, [r1, #0]
 8001798:	e015      	b.n	80017c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800179a:	4b26      	ldr	r3, [pc, #152]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a0:	f7fe ffee 	bl	8000780 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a8:	f7fe ffea 	bl	8000780 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e17a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ba:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d03a      	beq.n	8001848 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d019      	beq.n	800180e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017da:	4b17      	ldr	r3, [pc, #92]	; (8001838 <HAL_RCC_OscConfig+0x274>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e0:	f7fe ffce 	bl	8000780 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e8:	f7fe ffca 	bl	8000780 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e15a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001806:	2001      	movs	r0, #1
 8001808:	f000 fada 	bl	8001dc0 <RCC_Delay>
 800180c:	e01c      	b.n	8001848 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_RCC_OscConfig+0x274>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001814:	f7fe ffb4 	bl	8000780 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181a:	e00f      	b.n	800183c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181c:	f7fe ffb0 	bl	8000780 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d908      	bls.n	800183c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e140      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4ec>
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000
 8001834:	42420000 	.word	0x42420000
 8001838:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183c:	4b9e      	ldr	r3, [pc, #632]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1e9      	bne.n	800181c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 80a6 	beq.w	80019a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185a:	4b97      	ldr	r3, [pc, #604]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10d      	bne.n	8001882 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	4b94      	ldr	r3, [pc, #592]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	4a93      	ldr	r2, [pc, #588]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 800186c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001870:	61d3      	str	r3, [r2, #28]
 8001872:	4b91      	ldr	r3, [pc, #580]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800187e:	2301      	movs	r3, #1
 8001880:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001882:	4b8e      	ldr	r3, [pc, #568]	; (8001abc <HAL_RCC_OscConfig+0x4f8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188a:	2b00      	cmp	r3, #0
 800188c:	d118      	bne.n	80018c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800188e:	4b8b      	ldr	r3, [pc, #556]	; (8001abc <HAL_RCC_OscConfig+0x4f8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a8a      	ldr	r2, [pc, #552]	; (8001abc <HAL_RCC_OscConfig+0x4f8>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189a:	f7fe ff71 	bl	8000780 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a2:	f7fe ff6d 	bl	8000780 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b64      	cmp	r3, #100	; 0x64
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e0fd      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b4:	4b81      	ldr	r3, [pc, #516]	; (8001abc <HAL_RCC_OscConfig+0x4f8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d106      	bne.n	80018d6 <HAL_RCC_OscConfig+0x312>
 80018c8:	4b7b      	ldr	r3, [pc, #492]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	4a7a      	ldr	r2, [pc, #488]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6213      	str	r3, [r2, #32]
 80018d4:	e02d      	b.n	8001932 <HAL_RCC_OscConfig+0x36e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x334>
 80018de:	4b76      	ldr	r3, [pc, #472]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	4a75      	ldr	r2, [pc, #468]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	6213      	str	r3, [r2, #32]
 80018ea:	4b73      	ldr	r3, [pc, #460]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4a72      	ldr	r2, [pc, #456]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 80018f0:	f023 0304 	bic.w	r3, r3, #4
 80018f4:	6213      	str	r3, [r2, #32]
 80018f6:	e01c      	b.n	8001932 <HAL_RCC_OscConfig+0x36e>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2b05      	cmp	r3, #5
 80018fe:	d10c      	bne.n	800191a <HAL_RCC_OscConfig+0x356>
 8001900:	4b6d      	ldr	r3, [pc, #436]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	4a6c      	ldr	r2, [pc, #432]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 8001906:	f043 0304 	orr.w	r3, r3, #4
 800190a:	6213      	str	r3, [r2, #32]
 800190c:	4b6a      	ldr	r3, [pc, #424]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	4a69      	ldr	r2, [pc, #420]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6213      	str	r3, [r2, #32]
 8001918:	e00b      	b.n	8001932 <HAL_RCC_OscConfig+0x36e>
 800191a:	4b67      	ldr	r3, [pc, #412]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	4a66      	ldr	r2, [pc, #408]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	6213      	str	r3, [r2, #32]
 8001926:	4b64      	ldr	r3, [pc, #400]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	4a63      	ldr	r2, [pc, #396]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 800192c:	f023 0304 	bic.w	r3, r3, #4
 8001930:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d015      	beq.n	8001966 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193a:	f7fe ff21 	bl	8000780 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001940:	e00a      	b.n	8001958 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001942:	f7fe ff1d 	bl	8000780 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001950:	4293      	cmp	r3, r2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e0ab      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001958:	4b57      	ldr	r3, [pc, #348]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0ee      	beq.n	8001942 <HAL_RCC_OscConfig+0x37e>
 8001964:	e014      	b.n	8001990 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001966:	f7fe ff0b 	bl	8000780 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196c:	e00a      	b.n	8001984 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196e:	f7fe ff07 	bl	8000780 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	f241 3288 	movw	r2, #5000	; 0x1388
 800197c:	4293      	cmp	r3, r2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e095      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001984:	4b4c      	ldr	r3, [pc, #304]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1ee      	bne.n	800196e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001990:	7dfb      	ldrb	r3, [r7, #23]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d105      	bne.n	80019a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001996:	4b48      	ldr	r3, [pc, #288]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4a47      	ldr	r2, [pc, #284]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 800199c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 8081 	beq.w	8001aae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ac:	4b42      	ldr	r3, [pc, #264]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d061      	beq.n	8001a7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d146      	bne.n	8001a4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c0:	4b3f      	ldr	r3, [pc, #252]	; (8001ac0 <HAL_RCC_OscConfig+0x4fc>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c6:	f7fe fedb 	bl	8000780 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ce:	f7fe fed7 	bl	8000780 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e067      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e0:	4b35      	ldr	r3, [pc, #212]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f0      	bne.n	80019ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f4:	d108      	bne.n	8001a08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019f6:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	492d      	ldr	r1, [pc, #180]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a08:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a19      	ldr	r1, [r3, #32]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	4927      	ldr	r1, [pc, #156]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a20:	4b27      	ldr	r3, [pc, #156]	; (8001ac0 <HAL_RCC_OscConfig+0x4fc>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a26:	f7fe feab 	bl	8000780 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2e:	f7fe fea7 	bl	8000780 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e037      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0x46a>
 8001a4c:	e02f      	b.n	8001aae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <HAL_RCC_OscConfig+0x4fc>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7fe fe94 	bl	8000780 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5c:	f7fe fe90 	bl	8000780 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e020      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x498>
 8001a7a:	e018      	b.n	8001aae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e013      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_OscConfig+0x4f4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d106      	bne.n	8001aaa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d001      	beq.n	8001aae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40007000 	.word	0x40007000
 8001ac0:	42420060 	.word	0x42420060

08001ac4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0d0      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b6a      	ldr	r3, [pc, #424]	; (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d910      	bls.n	8001b08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b67      	ldr	r3, [pc, #412]	; (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 0207 	bic.w	r2, r3, #7
 8001aee:	4965      	ldr	r1, [pc, #404]	; (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af6:	4b63      	ldr	r3, [pc, #396]	; (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0b8      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d020      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b20:	4b59      	ldr	r3, [pc, #356]	; (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	4a58      	ldr	r2, [pc, #352]	; (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b38:	4b53      	ldr	r3, [pc, #332]	; (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4a52      	ldr	r2, [pc, #328]	; (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b44:	4b50      	ldr	r3, [pc, #320]	; (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	494d      	ldr	r1, [pc, #308]	; (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d040      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d107      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6a:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d115      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e07f      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d107      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b82:	4b41      	ldr	r3, [pc, #260]	; (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d109      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e073      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b92:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e06b      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba2:	4b39      	ldr	r3, [pc, #228]	; (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f023 0203 	bic.w	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4936      	ldr	r1, [pc, #216]	; (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb4:	f7fe fde4 	bl	8000780 <HAL_GetTick>
 8001bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bbc:	f7fe fde0 	bl	8000780 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e053      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	4b2d      	ldr	r3, [pc, #180]	; (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 020c 	and.w	r2, r3, #12
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d1eb      	bne.n	8001bbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be4:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d210      	bcs.n	8001c14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf2:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 0207 	bic.w	r2, r3, #7
 8001bfa:	4922      	ldr	r1, [pc, #136]	; (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c02:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e032      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d008      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c20:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	4916      	ldr	r1, [pc, #88]	; (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d009      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c3e:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	490e      	ldr	r1, [pc, #56]	; (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c52:	f000 f821 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8001c56:	4601      	mov	r1, r0
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	091b      	lsrs	r3, r3, #4
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_RCC_ClockConfig+0x1c8>)
 8001c64:	5cd3      	ldrb	r3, [r2, r3]
 8001c66:	fa21 f303 	lsr.w	r3, r1, r3
 8001c6a:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <HAL_RCC_ClockConfig+0x1cc>)
 8001c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_RCC_ClockConfig+0x1d0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fd42 	bl	80006fc <HAL_InitTick>

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40022000 	.word	0x40022000
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	0800914c 	.word	0x0800914c
 8001c90:	20000024 	.word	0x20000024
 8001c94:	20000018 	.word	0x20000018

08001c98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c98:	b490      	push	{r4, r7}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c9e:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ca0:	1d3c      	adds	r4, r7, #4
 8001ca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ca8:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cc2:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f003 030c 	and.w	r3, r3, #12
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d002      	beq.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x40>
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d003      	beq.n	8001cde <HAL_RCC_GetSysClockFreq+0x46>
 8001cd6:	e02d      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cd8:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cda:	623b      	str	r3, [r7, #32]
      break;
 8001cdc:	e02d      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	0c9b      	lsrs	r3, r3, #18
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cea:	4413      	add	r3, r2
 8001cec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cf0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d013      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cfc:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	0c5b      	lsrs	r3, r3, #17
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d10:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	4a0f      	ldr	r2, [pc, #60]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d16:	fb02 f203 	mul.w	r2, r2, r3
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
 8001d22:	e004      	b.n	8001d2e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	4a0c      	ldr	r2, [pc, #48]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d28:	fb02 f303 	mul.w	r3, r2, r3
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	623b      	str	r3, [r7, #32]
      break;
 8001d32:	e002      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d36:	623b      	str	r3, [r7, #32]
      break;
 8001d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3728      	adds	r7, #40	; 0x28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc90      	pop	{r4, r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	08006858 	.word	0x08006858
 8001d4c:	08006868 	.word	0x08006868
 8001d50:	40021000 	.word	0x40021000
 8001d54:	007a1200 	.word	0x007a1200
 8001d58:	003d0900 	.word	0x003d0900

08001d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d60:	4b02      	ldr	r3, [pc, #8]	; (8001d6c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	20000024 	.word	0x20000024

08001d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d74:	f7ff fff2 	bl	8001d5c <HAL_RCC_GetHCLKFreq>
 8001d78:	4601      	mov	r1, r0
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	0a1b      	lsrs	r3, r3, #8
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	4a03      	ldr	r2, [pc, #12]	; (8001d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d86:	5cd3      	ldrb	r3, [r2, r3]
 8001d88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000
 8001d94:	0800915c 	.word	0x0800915c

08001d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d9c:	f7ff ffde 	bl	8001d5c <HAL_RCC_GetHCLKFreq>
 8001da0:	4601      	mov	r1, r0
 8001da2:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	0adb      	lsrs	r3, r3, #11
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	4a03      	ldr	r2, [pc, #12]	; (8001dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dae:	5cd3      	ldrb	r3, [r2, r3]
 8001db0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	0800915c 	.word	0x0800915c

08001dc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dc8:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <RCC_Delay+0x34>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <RCC_Delay+0x38>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	0a5b      	lsrs	r3, r3, #9
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	fb02 f303 	mul.w	r3, r2, r3
 8001dda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ddc:	bf00      	nop
  }
  while (Delay --);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1e5a      	subs	r2, r3, #1
 8001de2:	60fa      	str	r2, [r7, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f9      	bne.n	8001ddc <RCC_Delay+0x1c>
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000024 	.word	0x20000024
 8001df8:	10624dd3 	.word	0x10624dd3

08001dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d07d      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e1c:	4b4f      	ldr	r3, [pc, #316]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10d      	bne.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e28:	4b4c      	ldr	r3, [pc, #304]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	4a4b      	ldr	r2, [pc, #300]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e32:	61d3      	str	r3, [r2, #28]
 8001e34:	4b49      	ldr	r3, [pc, #292]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e40:	2301      	movs	r3, #1
 8001e42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	4b46      	ldr	r3, [pc, #280]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d118      	bne.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e50:	4b43      	ldr	r3, [pc, #268]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a42      	ldr	r2, [pc, #264]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e5c:	f7fe fc90 	bl	8000780 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e62:	e008      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e64:	f7fe fc8c 	bl	8000780 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b64      	cmp	r3, #100	; 0x64
 8001e70:	d901      	bls.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e06d      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e76:	4b3a      	ldr	r3, [pc, #232]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e82:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d02e      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d027      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ea0:	4b2e      	ldr	r3, [pc, #184]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ea8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eaa:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eb0:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001eb6:	4a29      	ldr	r2, [pc, #164]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d014      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7fe fc5b 	bl	8000780 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ece:	f7fe fc57 	bl	8000780 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e036      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0ee      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4917      	ldr	r1, [pc, #92]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f02:	7dfb      	ldrb	r3, [r7, #23]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d105      	bne.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f08:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	4a13      	ldr	r2, [pc, #76]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	490b      	ldr	r1, [pc, #44]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d008      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f3e:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	4904      	ldr	r1, [pc, #16]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40007000 	.word	0x40007000
 8001f64:	42420440 	.word	0x42420440

08001f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e01d      	b.n	8001fb6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d106      	bne.n	8001f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f003 fe02 	bl	8005b98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2202      	movs	r2, #2
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	f000 fa3a 	bl	8002420 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e01d      	b.n	800200c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d106      	bne.n	8001fea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f815 	bl	8002014 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2202      	movs	r2, #2
 8001fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	f000 fa0f 	bl	8002420 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
	...

08002028 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2201      	movs	r2, #1
 8002038:	6839      	ldr	r1, [r7, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fc70 	bl	8002920 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a10      	ldr	r2, [pc, #64]	; (8002088 <HAL_TIM_PWM_Start+0x60>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d107      	bne.n	800205a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002058:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b06      	cmp	r3, #6
 800206a:	d007      	beq.n	800207c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40012c00 	.word	0x40012c00

0800208c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2200      	movs	r2, #0
 800209c:	6839      	ldr	r1, [r7, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fc3e 	bl	8002920 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a1d      	ldr	r2, [pc, #116]	; (8002120 <HAL_TIM_PWM_Stop+0x94>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d117      	bne.n	80020de <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6a1a      	ldr	r2, [r3, #32]
 80020b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10f      	bne.n	80020de <HAL_TIM_PWM_Stop+0x52>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6a1a      	ldr	r2, [r3, #32]
 80020c4:	f240 4344 	movw	r3, #1092	; 0x444
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d107      	bne.n	80020de <HAL_TIM_PWM_Stop+0x52>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6a1a      	ldr	r2, [r3, #32]
 80020e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10f      	bne.n	800210e <HAL_TIM_PWM_Stop+0x82>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6a1a      	ldr	r2, [r3, #32]
 80020f4:	f240 4344 	movw	r3, #1092	; 0x444
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d107      	bne.n	800210e <HAL_TIM_PWM_Stop+0x82>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0201 	bic.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40012c00 	.word	0x40012c00

08002124 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800213a:	2302      	movs	r3, #2
 800213c:	e0b4      	b.n	80022a8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2202      	movs	r2, #2
 800214a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b0c      	cmp	r3, #12
 8002152:	f200 809f 	bhi.w	8002294 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002156:	a201      	add	r2, pc, #4	; (adr r2, 800215c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215c:	08002191 	.word	0x08002191
 8002160:	08002295 	.word	0x08002295
 8002164:	08002295 	.word	0x08002295
 8002168:	08002295 	.word	0x08002295
 800216c:	080021d1 	.word	0x080021d1
 8002170:	08002295 	.word	0x08002295
 8002174:	08002295 	.word	0x08002295
 8002178:	08002295 	.word	0x08002295
 800217c:	08002213 	.word	0x08002213
 8002180:	08002295 	.word	0x08002295
 8002184:	08002295 	.word	0x08002295
 8002188:	08002295 	.word	0x08002295
 800218c:	08002253 	.word	0x08002253
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f9a4 	bl	80024e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699a      	ldr	r2, [r3, #24]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0208 	orr.w	r2, r2, #8
 80021aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699a      	ldr	r2, [r3, #24]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0204 	bic.w	r2, r2, #4
 80021ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6999      	ldr	r1, [r3, #24]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	619a      	str	r2, [r3, #24]
      break;
 80021ce:	e062      	b.n	8002296 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f9ea 	bl	80025b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6999      	ldr	r1, [r3, #24]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	021a      	lsls	r2, r3, #8
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	619a      	str	r2, [r3, #24]
      break;
 8002210:	e041      	b.n	8002296 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	4618      	mov	r0, r3
 800221a:	f000 fa33 	bl	8002684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	69da      	ldr	r2, [r3, #28]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0208 	orr.w	r2, r2, #8
 800222c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	69da      	ldr	r2, [r3, #28]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0204 	bic.w	r2, r2, #4
 800223c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	69d9      	ldr	r1, [r3, #28]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	61da      	str	r2, [r3, #28]
      break;
 8002250:	e021      	b.n	8002296 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	4618      	mov	r0, r3
 800225a:	f000 fa7d 	bl	8002758 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	69da      	ldr	r2, [r3, #28]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800226c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	69da      	ldr	r2, [r3, #28]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800227c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	69d9      	ldr	r1, [r3, #28]
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	021a      	lsls	r2, r3, #8
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	61da      	str	r2, [r3, #28]
      break;
 8002292:	e000      	b.n	8002296 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002294:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_TIM_ConfigClockSource+0x18>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e0a6      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x166>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b40      	cmp	r3, #64	; 0x40
 80022fe:	d067      	beq.n	80023d0 <HAL_TIM_ConfigClockSource+0x120>
 8002300:	2b40      	cmp	r3, #64	; 0x40
 8002302:	d80b      	bhi.n	800231c <HAL_TIM_ConfigClockSource+0x6c>
 8002304:	2b10      	cmp	r3, #16
 8002306:	d073      	beq.n	80023f0 <HAL_TIM_ConfigClockSource+0x140>
 8002308:	2b10      	cmp	r3, #16
 800230a:	d802      	bhi.n	8002312 <HAL_TIM_ConfigClockSource+0x62>
 800230c:	2b00      	cmp	r3, #0
 800230e:	d06f      	beq.n	80023f0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002310:	e078      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002312:	2b20      	cmp	r3, #32
 8002314:	d06c      	beq.n	80023f0 <HAL_TIM_ConfigClockSource+0x140>
 8002316:	2b30      	cmp	r3, #48	; 0x30
 8002318:	d06a      	beq.n	80023f0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800231a:	e073      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800231c:	2b70      	cmp	r3, #112	; 0x70
 800231e:	d00d      	beq.n	800233c <HAL_TIM_ConfigClockSource+0x8c>
 8002320:	2b70      	cmp	r3, #112	; 0x70
 8002322:	d804      	bhi.n	800232e <HAL_TIM_ConfigClockSource+0x7e>
 8002324:	2b50      	cmp	r3, #80	; 0x50
 8002326:	d033      	beq.n	8002390 <HAL_TIM_ConfigClockSource+0xe0>
 8002328:	2b60      	cmp	r3, #96	; 0x60
 800232a:	d041      	beq.n	80023b0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800232c:	e06a      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800232e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002332:	d066      	beq.n	8002402 <HAL_TIM_ConfigClockSource+0x152>
 8002334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002338:	d017      	beq.n	800236a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800233a:	e063      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	6899      	ldr	r1, [r3, #8]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f000 fac9 	bl	80028e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800235e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	609a      	str	r2, [r3, #8]
      break;
 8002368:	e04c      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	6899      	ldr	r1, [r3, #8]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f000 fab2 	bl	80028e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800238c:	609a      	str	r2, [r3, #8]
      break;
 800238e:	e039      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	6859      	ldr	r1, [r3, #4]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	461a      	mov	r2, r3
 800239e:	f000 fa29 	bl	80027f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2150      	movs	r1, #80	; 0x50
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fa80 	bl	80028ae <TIM_ITRx_SetConfig>
      break;
 80023ae:	e029      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	6859      	ldr	r1, [r3, #4]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	461a      	mov	r2, r3
 80023be:	f000 fa47 	bl	8002850 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2160      	movs	r1, #96	; 0x60
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 fa70 	bl	80028ae <TIM_ITRx_SetConfig>
      break;
 80023ce:	e019      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	6859      	ldr	r1, [r3, #4]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	461a      	mov	r2, r3
 80023de:	f000 fa09 	bl	80027f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2140      	movs	r1, #64	; 0x40
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 fa60 	bl	80028ae <TIM_ITRx_SetConfig>
      break;
 80023ee:	e009      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4619      	mov	r1, r3
 80023fa:	4610      	mov	r0, r2
 80023fc:	f000 fa57 	bl	80028ae <TIM_ITRx_SetConfig>
      break;
 8002400:	e000      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a29      	ldr	r2, [pc, #164]	; (80024d8 <TIM_Base_SetConfig+0xb8>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d00b      	beq.n	8002450 <TIM_Base_SetConfig+0x30>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243e:	d007      	beq.n	8002450 <TIM_Base_SetConfig+0x30>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a26      	ldr	r2, [pc, #152]	; (80024dc <TIM_Base_SetConfig+0xbc>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d003      	beq.n	8002450 <TIM_Base_SetConfig+0x30>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a25      	ldr	r2, [pc, #148]	; (80024e0 <TIM_Base_SetConfig+0xc0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d108      	bne.n	8002462 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	4313      	orrs	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a1c      	ldr	r2, [pc, #112]	; (80024d8 <TIM_Base_SetConfig+0xb8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d00b      	beq.n	8002482 <TIM_Base_SetConfig+0x62>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002470:	d007      	beq.n	8002482 <TIM_Base_SetConfig+0x62>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a19      	ldr	r2, [pc, #100]	; (80024dc <TIM_Base_SetConfig+0xbc>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d003      	beq.n	8002482 <TIM_Base_SetConfig+0x62>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a18      	ldr	r2, [pc, #96]	; (80024e0 <TIM_Base_SetConfig+0xc0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d108      	bne.n	8002494 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4313      	orrs	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	4313      	orrs	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <TIM_Base_SetConfig+0xb8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d103      	bne.n	80024c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	615a      	str	r2, [r3, #20]
}
 80024ce:	bf00      	nop
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	40012c00 	.word	0x40012c00
 80024dc:	40000400 	.word	0x40000400
 80024e0:	40000800 	.word	0x40000800

080024e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	f023 0201 	bic.w	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 0303 	bic.w	r3, r3, #3
 800251a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f023 0302 	bic.w	r3, r3, #2
 800252c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a1c      	ldr	r2, [pc, #112]	; (80025ac <TIM_OC1_SetConfig+0xc8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d10c      	bne.n	800255a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f023 0308 	bic.w	r3, r3, #8
 8002546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	4313      	orrs	r3, r2
 8002550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f023 0304 	bic.w	r3, r3, #4
 8002558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a13      	ldr	r2, [pc, #76]	; (80025ac <TIM_OC1_SetConfig+0xc8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d111      	bne.n	8002586 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	621a      	str	r2, [r3, #32]
}
 80025a0:	bf00      	nop
 80025a2:	371c      	adds	r7, #28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40012c00 	.word	0x40012c00

080025b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	f023 0210 	bic.w	r2, r3, #16
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	021b      	lsls	r3, r3, #8
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f023 0320 	bic.w	r3, r3, #32
 80025fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	4313      	orrs	r3, r2
 8002606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a1d      	ldr	r2, [pc, #116]	; (8002680 <TIM_OC2_SetConfig+0xd0>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d10d      	bne.n	800262c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4313      	orrs	r3, r2
 8002622:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800262a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a14      	ldr	r2, [pc, #80]	; (8002680 <TIM_OC2_SetConfig+0xd0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d113      	bne.n	800265c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800263a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002642:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	621a      	str	r2, [r3, #32]
}
 8002676:	bf00      	nop
 8002678:	371c      	adds	r7, #28
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	40012c00 	.word	0x40012c00

08002684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f023 0303 	bic.w	r3, r3, #3
 80026ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a1d      	ldr	r2, [pc, #116]	; (8002754 <TIM_OC3_SetConfig+0xd0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d10d      	bne.n	80026fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a14      	ldr	r2, [pc, #80]	; (8002754 <TIM_OC3_SetConfig+0xd0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d113      	bne.n	800272e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800270c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	621a      	str	r2, [r3, #32]
}
 8002748:	bf00      	nop
 800274a:	371c      	adds	r7, #28
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40012c00 	.word	0x40012c00

08002758 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800278e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4313      	orrs	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	031b      	lsls	r3, r3, #12
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a0f      	ldr	r2, [pc, #60]	; (80027f0 <TIM_OC4_SetConfig+0x98>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d109      	bne.n	80027cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	019b      	lsls	r3, r3, #6
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	621a      	str	r2, [r3, #32]
}
 80027e6:	bf00      	nop
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	40012c00 	.word	0x40012c00

080027f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	f023 0201 	bic.w	r2, r3, #1
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800281e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f023 030a 	bic.w	r3, r3, #10
 8002830:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4313      	orrs	r3, r2
 8002838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	621a      	str	r2, [r3, #32]
}
 8002846:	bf00      	nop
 8002848:	371c      	adds	r7, #28
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	f023 0210 	bic.w	r2, r3, #16
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800287a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	031b      	lsls	r3, r3, #12
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4313      	orrs	r3, r2
 8002884:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800288c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	621a      	str	r2, [r3, #32]
}
 80028a4:	bf00      	nop
 80028a6:	371c      	adds	r7, #28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b085      	sub	sp, #20
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f043 0307 	orr.w	r3, r3, #7
 80028d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	609a      	str	r2, [r3, #8]
}
 80028d8:	bf00      	nop
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b087      	sub	sp, #28
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	021a      	lsls	r2, r3, #8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	431a      	orrs	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	4313      	orrs	r3, r2
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	609a      	str	r2, [r3, #8]
}
 8002916:	bf00      	nop
 8002918:	371c      	adds	r7, #28
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f003 031f 	and.w	r3, r3, #31
 8002932:	2201      	movs	r2, #1
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a1a      	ldr	r2, [r3, #32]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	43db      	mvns	r3, r3
 8002942:	401a      	ands	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a1a      	ldr	r2, [r3, #32]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f003 031f 	and.w	r3, r3, #31
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	fa01 f303 	lsl.w	r3, r1, r3
 8002958:	431a      	orrs	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	621a      	str	r2, [r3, #32]
}
 800295e:	bf00      	nop
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800297c:	2302      	movs	r3, #2
 800297e:	e032      	b.n	80029e6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029b8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e03d      	b.n	8002a88 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e03f      	b.n	8002b24 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d106      	bne.n	8002abe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f003 f9b9 	bl	8005e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2224      	movs	r2, #36	; 0x24
 8002ac2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ad4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 faaa 	bl	8003030 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691a      	ldr	r2, [r3, #16]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695a      	ldr	r2, [r3, #20]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002afa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b0a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	4613      	mov	r3, r2
 8002b38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	d140      	bne.n	8002bc8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <HAL_UART_Receive_IT+0x26>
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e039      	b.n	8002bca <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_UART_Receive_IT+0x38>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e032      	b.n	8002bca <HAL_UART_Receive_IT+0x9e>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	88fa      	ldrh	r2, [r7, #6]
 8002b76:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	88fa      	ldrh	r2, [r7, #6]
 8002b7c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2222      	movs	r2, #34	; 0x22
 8002b88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ba2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0220 	orr.w	r2, r2, #32
 8002bc2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	e000      	b.n	8002bca <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002bc8:	2302      	movs	r3, #2
  }
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10d      	bne.n	8002c26 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f003 0320 	and.w	r3, r3, #32
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_UART_IRQHandler+0x52>
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	f003 0320 	and.w	r3, r3, #32
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f984 	bl	8002f2c <UART_Receive_IT>
      return;
 8002c24:	e0cc      	b.n	8002dc0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80ab 	beq.w	8002d84 <HAL_UART_IRQHandler+0x1b0>
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d105      	bne.n	8002c44 <HAL_UART_IRQHandler+0x70>
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 80a0 	beq.w	8002d84 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_UART_IRQHandler+0x90>
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5c:	f043 0201 	orr.w	r2, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <HAL_UART_IRQHandler+0xb0>
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7c:	f043 0202 	orr.w	r2, r3, #2
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_UART_IRQHandler+0xd0>
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9c:	f043 0204 	orr.w	r2, r3, #4
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <HAL_UART_IRQHandler+0xf0>
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbc:	f043 0208 	orr.w	r2, r3, #8
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d078      	beq.n	8002dbe <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x112>
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f923 	bl	8002f2c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf14      	ite	ne
 8002cf4:	2301      	movne	r3, #1
 8002cf6:	2300      	moveq	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d102      	bne.n	8002d0e <HAL_UART_IRQHandler+0x13a>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d031      	beq.n	8002d72 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f86e 	bl	8002df0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d023      	beq.n	8002d6a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d30:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d013      	beq.n	8002d62 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3e:	4a22      	ldr	r2, [pc, #136]	; (8002dc8 <HAL_UART_IRQHandler+0x1f4>)
 8002d40:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe f83c 	bl	8000dc4 <HAL_DMA_Abort_IT>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d016      	beq.n	8002d80 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d60:	e00e      	b.n	8002d80 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f83b 	bl	8002dde <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d68:	e00a      	b.n	8002d80 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f837 	bl	8002dde <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d70:	e006      	b.n	8002d80 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f833 	bl	8002dde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002d7e:	e01e      	b.n	8002dbe <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d80:	bf00      	nop
    return;
 8002d82:	e01c      	b.n	8002dbe <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d008      	beq.n	8002da0 <HAL_UART_IRQHandler+0x1cc>
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f85a 	bl	8002e52 <UART_Transmit_IT>
    return;
 8002d9e:	e00f      	b.n	8002dc0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x1ec>
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f8a1 	bl	8002efc <UART_EndTransmit_IT>
    return;
 8002dba:	bf00      	nop
 8002dbc:	e000      	b.n	8002dc0 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002dbe:	bf00      	nop
  }
}
 8002dc0:	3720      	adds	r7, #32
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	08002e2b 	.word	0x08002e2b

08002dcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e06:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0201 	bic.w	r2, r2, #1
 8002e16:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr

08002e2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f7ff ffca 	bl	8002dde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b085      	sub	sp, #20
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b21      	cmp	r3, #33	; 0x21
 8002e64:	d144      	bne.n	8002ef0 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6e:	d11a      	bne.n	8002ea6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e84:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d105      	bne.n	8002e9a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	1c9a      	adds	r2, r3, #2
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	621a      	str	r2, [r3, #32]
 8002e98:	e00e      	b.n	8002eb8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	621a      	str	r2, [r3, #32]
 8002ea4:	e008      	b.n	8002eb8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	1c59      	adds	r1, r3, #1
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6211      	str	r1, [r2, #32]
 8002eb0:	781a      	ldrb	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10f      	bne.n	8002eec <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	e000      	b.n	8002ef2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002ef0:	2302      	movs	r3, #2
  }
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr

08002efc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f12:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff ff55 	bl	8002dcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b22      	cmp	r3, #34	; 0x22
 8002f3e:	d171      	bne.n	8003024 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f48:	d123      	bne.n	8002f92 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10e      	bne.n	8002f76 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	1c9a      	adds	r2, r3, #2
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	629a      	str	r2, [r3, #40]	; 0x28
 8002f74:	e029      	b.n	8002fca <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f90:	e01b      	b.n	8002fca <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10a      	bne.n	8002fb0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6858      	ldr	r0, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	1c59      	adds	r1, r3, #1
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6291      	str	r1, [r2, #40]	; 0x28
 8002faa:	b2c2      	uxtb	r2, r0
 8002fac:	701a      	strb	r2, [r3, #0]
 8002fae:	e00c      	b.n	8002fca <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	1c58      	adds	r0, r3, #1
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	6288      	str	r0, [r1, #40]	; 0x28
 8002fc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d120      	bne.n	8003020 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0220 	bic.w	r2, r2, #32
 8002fec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ffc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695a      	ldr	r2, [r3, #20]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0201 	bic.w	r2, r2, #1
 800300c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f002 f8ce 	bl	80051b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	e002      	b.n	8003026 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	e000      	b.n	8003026 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003024:	2302      	movs	r3, #2
  }
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800306a:	f023 030c 	bic.w	r3, r3, #12
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6812      	ldr	r2, [r2, #0]
 8003072:	68f9      	ldr	r1, [r7, #12]
 8003074:	430b      	orrs	r3, r1
 8003076:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699a      	ldr	r2, [r3, #24]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a52      	ldr	r2, [pc, #328]	; (80031dc <UART_SetConfig+0x1ac>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d14e      	bne.n	8003136 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003098:	f7fe fe7e 	bl	8001d98 <HAL_RCC_GetPCLK2Freq>
 800309c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	009a      	lsls	r2, r3, #2
 80030a8:	441a      	add	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b4:	4a4a      	ldr	r2, [pc, #296]	; (80031e0 <UART_SetConfig+0x1b0>)
 80030b6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	0119      	lsls	r1, r3, #4
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	009a      	lsls	r2, r3, #2
 80030c8:	441a      	add	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030d4:	4b42      	ldr	r3, [pc, #264]	; (80031e0 <UART_SetConfig+0x1b0>)
 80030d6:	fba3 0302 	umull	r0, r3, r3, r2
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	2064      	movs	r0, #100	; 0x64
 80030de:	fb00 f303 	mul.w	r3, r0, r3
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	3332      	adds	r3, #50	; 0x32
 80030e8:	4a3d      	ldr	r2, [pc, #244]	; (80031e0 <UART_SetConfig+0x1b0>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030f4:	4419      	add	r1, r3
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	009a      	lsls	r2, r3, #2
 8003100:	441a      	add	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	fbb2 f2f3 	udiv	r2, r2, r3
 800310c:	4b34      	ldr	r3, [pc, #208]	; (80031e0 <UART_SetConfig+0x1b0>)
 800310e:	fba3 0302 	umull	r0, r3, r3, r2
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	2064      	movs	r0, #100	; 0x64
 8003116:	fb00 f303 	mul.w	r3, r0, r3
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	3332      	adds	r3, #50	; 0x32
 8003120:	4a2f      	ldr	r2, [pc, #188]	; (80031e0 <UART_SetConfig+0x1b0>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	f003 020f 	and.w	r2, r3, #15
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	440a      	add	r2, r1
 8003132:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003134:	e04d      	b.n	80031d2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003136:	f7fe fe1b 	bl	8001d70 <HAL_RCC_GetPCLK1Freq>
 800313a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	009a      	lsls	r2, r3, #2
 8003146:	441a      	add	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003152:	4a23      	ldr	r2, [pc, #140]	; (80031e0 <UART_SetConfig+0x1b0>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	095b      	lsrs	r3, r3, #5
 800315a:	0119      	lsls	r1, r3, #4
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	009a      	lsls	r2, r3, #2
 8003166:	441a      	add	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003172:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <UART_SetConfig+0x1b0>)
 8003174:	fba3 0302 	umull	r0, r3, r3, r2
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	2064      	movs	r0, #100	; 0x64
 800317c:	fb00 f303 	mul.w	r3, r0, r3
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	3332      	adds	r3, #50	; 0x32
 8003186:	4a16      	ldr	r2, [pc, #88]	; (80031e0 <UART_SetConfig+0x1b0>)
 8003188:	fba2 2303 	umull	r2, r3, r2, r3
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003192:	4419      	add	r1, r3
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	009a      	lsls	r2, r3, #2
 800319e:	441a      	add	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80031aa:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <UART_SetConfig+0x1b0>)
 80031ac:	fba3 0302 	umull	r0, r3, r3, r2
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	2064      	movs	r0, #100	; 0x64
 80031b4:	fb00 f303 	mul.w	r3, r0, r3
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	3332      	adds	r3, #50	; 0x32
 80031be:	4a08      	ldr	r2, [pc, #32]	; (80031e0 <UART_SetConfig+0x1b0>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	095b      	lsrs	r3, r3, #5
 80031c6:	f003 020f 	and.w	r2, r3, #15
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	440a      	add	r2, r1
 80031d0:	609a      	str	r2, [r3, #8]
}
 80031d2:	bf00      	nop
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40013800 	.word	0x40013800
 80031e0:	51eb851f 	.word	0x51eb851f

080031e4 <FlashManager_PageAddress>:
/* Private variables ---------------------------------------------------------*/
uint32_t flash_temp_data[FLASH_PAGE_SIZE/4];

/* Private function -----------------------------------------------*/
uint32_t FlashManager_PageAddress(uint32_t address)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
	uint32_t begin_page_address;
	uint32_t offset_page_address;

	if(address>=SYSTEM_FLASH_ADDRESS_BEGIN && address<SYSTEM_FLASH_ADDRESS_END)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031f2:	d30d      	bcc.n	8003210 <FlashManager_PageAddress+0x2c>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a09      	ldr	r2, [pc, #36]	; (800321c <FlashManager_PageAddress+0x38>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d809      	bhi.n	8003210 <FlashManager_PageAddress+0x2c>
	{
		offset_page_address=address%FLASH_PAGE_SIZE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003202:	60fb      	str	r3, [r7, #12]
		begin_page_address=address-offset_page_address;
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	60bb      	str	r3, [r7, #8]
		return begin_page_address;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	e000      	b.n	8003212 <FlashManager_PageAddress+0x2e>
	}
	else
		return FLASH_ERROR_ADDRESS;
 8003210:	2302      	movs	r3, #2
}
 8003212:	4618      	mov	r0, r3
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr
 800321c:	0800ffff 	.word	0x0800ffff

08003220 <FlashManager_ErasePage>:

/* Public function -----------------------------------------------*/
FlashManager_Error_Code FlashManager_ErasePage(uint32_t address)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
	uint32_t errorcode;
	uint32_t SectorError = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitTypeDef EraseInitStruct;

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800322c:	2300      	movs	r3, #0
 800322e:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.Banks = FLASH_BANK_1;
 8003230:	2301      	movs	r3, #1
 8003232:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.PageAddress = FlashManager_PageAddress(address);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff ffd5 	bl	80031e4 <FlashManager_PageAddress>
 800323a:	4603      	mov	r3, r0
 800323c:	613b      	str	r3, [r7, #16]
	EraseInitStruct.NbPages = 1;
 800323e:	2301      	movs	r3, #1
 8003240:	617b      	str	r3, [r7, #20]

	errorcode=HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8003242:	f107 0218 	add.w	r2, r7, #24
 8003246:	f107 0308 	add.w	r3, r7, #8
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f7fd ff87 	bl	8001160 <HAL_FLASHEx_Erase>
 8003252:	4603      	mov	r3, r0
 8003254:	61fb      	str	r3, [r7, #28]
	if(errorcode!=HAL_OK)
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <FlashManager_ErasePage+0x40>
		return FLASH_ERASE_ERROR;
 800325c:	2303      	movs	r3, #3
 800325e:	e000      	b.n	8003262 <FlashManager_ErasePage+0x42>
	else
		return FLASH_NO_ERROR;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3720      	adds	r7, #32
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <FlashManager_WriteMulti>:
	else
		return FLASH_ERROR_ADDRESS;
}

FlashManager_Error_Code FlashManager_WriteMulti(uint32_t address, uint32_t NbWord, uint32_t* data)
{
 800326c:	b590      	push	{r4, r7, lr}
 800326e:	b08b      	sub	sp, #44	; 0x2c
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
	uint32_t begin_page_address;
	uint32_t offset_page_address;
	uint32_t pWriteFlash;
	__IO uint32_t* pReadFlash;

	if(address>=SYSTEM_FLASH_ADDRESS_BEGIN && address<SYSTEM_FLASH_ADDRESS_END && address%4==0)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800327e:	d362      	bcc.n	8003346 <FlashManager_WriteMulti+0xda>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4a33      	ldr	r2, [pc, #204]	; (8003350 <FlashManager_WriteMulti+0xe4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d85e      	bhi.n	8003346 <FlashManager_WriteMulti+0xda>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d159      	bne.n	8003346 <FlashManager_WriteMulti+0xda>
	{
		offset_page_address=address%FLASH_PAGE_SIZE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003298:	623b      	str	r3, [r7, #32]
		begin_page_address=address-offset_page_address;
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	61fb      	str	r3, [r7, #28]

		//Read page
		for(cpt_address=0; cpt_address<(FLASH_PAGE_SIZE/4) ;cpt_address++)
 80032a2:	2300      	movs	r3, #0
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
 80032a6:	e00d      	b.n	80032c4 <FlashManager_WriteMulti+0x58>
		{
			pReadFlash = begin_page_address+(cpt_address*4);
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	009a      	lsls	r2, r3, #2
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	4413      	add	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]
			flash_temp_data[cpt_address]=*pReadFlash;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	4927      	ldr	r1, [pc, #156]	; (8003354 <FlashManager_WriteMulti+0xe8>)
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(cpt_address=0; cpt_address<(FLASH_PAGE_SIZE/4) ;cpt_address++)
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	3301      	adds	r3, #1
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	2bff      	cmp	r3, #255	; 0xff
 80032c8:	d9ee      	bls.n	80032a8 <FlashManager_WriteMulti+0x3c>
		}

		//Erase page
		HAL_FLASH_Unlock();
 80032ca:	f7fd fe61 	bl	8000f90 <HAL_FLASH_Unlock>
		FlashManager_ErasePage(address);
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f7ff ffa6 	bl	8003220 <FlashManager_ErasePage>

		//Change Data
		for(cpt_address=0; cpt_address<NbWord ;cpt_address++)
 80032d4:	2300      	movs	r3, #0
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
 80032d8:	e00e      	b.n	80032f8 <FlashManager_WriteMulti+0x8c>
		{
			flash_temp_data[(offset_page_address/4)+cpt_address]=data[cpt_address];
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	441a      	add	r2, r3
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	0899      	lsrs	r1, r3, #2
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	440b      	add	r3, r1
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	4919      	ldr	r1, [pc, #100]	; (8003354 <FlashManager_WriteMulti+0xe8>)
 80032ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(cpt_address=0; cpt_address<NbWord ;cpt_address++)
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	3301      	adds	r3, #1
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24
 80032f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d3ec      	bcc.n	80032da <FlashManager_WriteMulti+0x6e>
		}

		//Write page
		for(cpt_address=0; cpt_address<(FLASH_PAGE_SIZE/4) ;cpt_address++)
 8003300:	2300      	movs	r3, #0
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
 8003304:	e018      	b.n	8003338 <FlashManager_WriteMulti+0xcc>
		{
			pWriteFlash = begin_page_address+(cpt_address*4);
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	69fa      	ldr	r2, [r7, #28]
 800330c:	4413      	add	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pWriteFlash, flash_temp_data[cpt_address]) != HAL_OK)
 8003310:	4a10      	ldr	r2, [pc, #64]	; (8003354 <FlashManager_WriteMulti+0xe8>)
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003318:	f04f 0400 	mov.w	r4, #0
 800331c:	461a      	mov	r2, r3
 800331e:	4623      	mov	r3, r4
 8003320:	69b9      	ldr	r1, [r7, #24]
 8003322:	2002      	movs	r0, #2
 8003324:	f7fd fdc4 	bl	8000eb0 <HAL_FLASH_Program>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <FlashManager_WriteMulti+0xc6>
				return FLASH_WRITE_ERROR;
 800332e:	2304      	movs	r3, #4
 8003330:	e00a      	b.n	8003348 <FlashManager_WriteMulti+0xdc>
		for(cpt_address=0; cpt_address<(FLASH_PAGE_SIZE/4) ;cpt_address++)
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	3301      	adds	r3, #1
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	2bff      	cmp	r3, #255	; 0xff
 800333c:	d9e3      	bls.n	8003306 <FlashManager_WriteMulti+0x9a>
		}

		HAL_FLASH_Lock();
 800333e:	f7fd fe4d 	bl	8000fdc <HAL_FLASH_Lock>

		return FLASH_NO_ERROR;
 8003342:	2300      	movs	r3, #0
 8003344:	e000      	b.n	8003348 <FlashManager_WriteMulti+0xdc>
	}
	else
		return FLASH_ERROR_ADDRESS;
 8003346:	2302      	movs	r3, #2
}
 8003348:	4618      	mov	r0, r3
 800334a:	372c      	adds	r7, #44	; 0x2c
 800334c:	46bd      	mov	sp, r7
 800334e:	bd90      	pop	{r4, r7, pc}
 8003350:	0800ffff 	.word	0x0800ffff
 8003354:	20001490 	.word	0x20001490

08003358 <FlashManager_ReadInt32>:

uint32_t FlashManager_ReadInt32(uint32_t address)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
	__IO uint32_t* pReadFlash;

	pReadFlash = address;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	60fb      	str	r3, [r7, #12]
	return *pReadFlash;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr
	...

08003374 <Protocol_DMX_init>:
/* Private function -----------------------------------------------*/

/* Public function -----------------------------------------------*/

void Protocol_DMX_init(uint16_t address,UART_HandleTypeDef *ref_uart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	6039      	str	r1, [r7, #0]
 800337e:	80fb      	strh	r3, [r7, #6]
	uint8_t i;

	//init variables
	dmx_Last_Error=DMX_NO_ERROR;
 8003380:	4b20      	ldr	r3, [pc, #128]	; (8003404 <Protocol_DMX_init+0x90>)
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]
	dmx_rx_buff[0]=0;
 8003386:	4b20      	ldr	r3, [pc, #128]	; (8003408 <Protocol_DMX_init+0x94>)
 8003388:	2200      	movs	r2, #0
 800338a:	701a      	strb	r2, [r3, #0]
	dmx_cptAddress=0;
 800338c:	4b1f      	ldr	r3, [pc, #124]	; (800340c <Protocol_DMX_init+0x98>)
 800338e:	2200      	movs	r2, #0
 8003390:	801a      	strh	r2, [r3, #0]
	dmx_cptByte=0;
 8003392:	4b1f      	ldr	r3, [pc, #124]	; (8003410 <Protocol_DMX_init+0x9c>)
 8003394:	2200      	movs	r2, #0
 8003396:	801a      	strh	r2, [r3, #0]
	dmx_ref_buffer=1;
 8003398:	4b1e      	ldr	r3, [pc, #120]	; (8003414 <Protocol_DMX_init+0xa0>)
 800339a:	2201      	movs	r2, #1
 800339c:	701a      	strb	r2, [r3, #0]
	dmx_address_begin = address;
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <Protocol_DMX_init+0xa4>)
 80033a4:	701a      	strb	r2, [r3, #0]
	dmx_address_end = address + DMX_SIZE_CHANNEL - 1;
 80033a6:	88fb      	ldrh	r3, [r7, #6]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	330b      	adds	r3, #11
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	4b1b      	ldr	r3, [pc, #108]	; (800341c <Protocol_DMX_init+0xa8>)
 80033b0:	701a      	strb	r2, [r3, #0]
	for (i=0; i<DMX_SIZE_CHANNEL; i++)
 80033b2:	2300      	movs	r3, #0
 80033b4:	73fb      	strb	r3, [r7, #15]
 80033b6:	e00e      	b.n	80033d6 <Protocol_DMX_init+0x62>
	{
		dmx_buff1[i]=0;
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	4a19      	ldr	r2, [pc, #100]	; (8003420 <Protocol_DMX_init+0xac>)
 80033bc:	2100      	movs	r1, #0
 80033be:	54d1      	strb	r1, [r2, r3]
		dmx_buff2[i]=0;
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	4a18      	ldr	r2, [pc, #96]	; (8003424 <Protocol_DMX_init+0xb0>)
 80033c4:	2100      	movs	r1, #0
 80033c6:	54d1      	strb	r1, [r2, r3]
		dmx_buff_valid[i]=0;
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	4a17      	ldr	r2, [pc, #92]	; (8003428 <Protocol_DMX_init+0xb4>)
 80033cc:	2100      	movs	r1, #0
 80033ce:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<DMX_SIZE_CHANNEL; i++)
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	3301      	adds	r3, #1
 80033d4:	73fb      	strb	r3, [r7, #15]
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	2b0b      	cmp	r3, #11
 80033da:	d9ed      	bls.n	80033b8 <Protocol_DMX_init+0x44>
	}

	dmx_LastTick = HAL_GetTick();
 80033dc:	f7fd f9d0 	bl	8000780 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	4b12      	ldr	r3, [pc, #72]	; (800342c <Protocol_DMX_init+0xb8>)
 80033e4:	601a      	str	r2, [r3, #0]

	/* Receive one byte in interrupt mode */
	dmx_ref_uart = ref_uart;
 80033e6:	4a12      	ldr	r2, [pc, #72]	; (8003430 <Protocol_DMX_init+0xbc>)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(dmx_ref_uart, dmx_rx_buff, 1);
 80033ec:	4b10      	ldr	r3, [pc, #64]	; (8003430 <Protocol_DMX_init+0xbc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2201      	movs	r2, #1
 80033f2:	4905      	ldr	r1, [pc, #20]	; (8003408 <Protocol_DMX_init+0x94>)
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff fb99 	bl	8002b2c <HAL_UART_Receive_IT>

}
 80033fa:	bf00      	nop
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	200018a8 	.word	0x200018a8
 8003408:	200018ac 	.word	0x200018ac
 800340c:	200018ae 	.word	0x200018ae
 8003410:	200018c8 	.word	0x200018c8
 8003414:	200018ad 	.word	0x200018ad
 8003418:	200018a9 	.word	0x200018a9
 800341c:	20001894 	.word	0x20001894
 8003420:	200018b0 	.word	0x200018b0
 8003424:	200018bc 	.word	0x200018bc
 8003428:	20001898 	.word	0x20001898
 800342c:	20001890 	.word	0x20001890
 8003430:	200018a4 	.word	0x200018a4

08003434 <Protocol_DMX_UartCallback>:


void Protocol_DMX_UartCallback(UART_HandleTypeDef *huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
	uint32_t err_code;
	err_code = huart->ErrorCode;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003440:	60fb      	str	r3, [r7, #12]
	if (huart->Instance == dmx_ref_uart->Instance)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	4b29      	ldr	r3, [pc, #164]	; (80034ec <Protocol_DMX_UartCallback+0xb8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d148      	bne.n	80034e2 <Protocol_DMX_UartCallback+0xae>
	{
		/* Receive one byte in interrupt mode */
		HAL_UART_Receive_IT(dmx_ref_uart, dmx_rx_buff, 1);
 8003450:	4b26      	ldr	r3, [pc, #152]	; (80034ec <Protocol_DMX_UartCallback+0xb8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2201      	movs	r2, #1
 8003456:	4926      	ldr	r1, [pc, #152]	; (80034f0 <Protocol_DMX_UartCallback+0xbc>)
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fb67 	bl	8002b2c <HAL_UART_Receive_IT>

		//Load buffer
		if(dmx_cptAddress>=dmx_address_begin && dmx_cptAddress<=dmx_address_end)
 800345e:	4b25      	ldr	r3, [pc, #148]	; (80034f4 <Protocol_DMX_UartCallback+0xc0>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	b29a      	uxth	r2, r3
 8003464:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <Protocol_DMX_UartCallback+0xc4>)
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d813      	bhi.n	8003494 <Protocol_DMX_UartCallback+0x60>
 800346c:	4b23      	ldr	r3, [pc, #140]	; (80034fc <Protocol_DMX_UartCallback+0xc8>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	b29a      	uxth	r2, r3
 8003472:	4b21      	ldr	r3, [pc, #132]	; (80034f8 <Protocol_DMX_UartCallback+0xc4>)
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d30c      	bcc.n	8003494 <Protocol_DMX_UartCallback+0x60>
				dmx_Last_Error=DMX_ERROR_BUFF;

			if(dmx_buff1[dmx_cptByte] == dmx_buff2[dmx_cptByte])
				dmx_buff_valid[dmx_cptByte] = dmx_buff1[dmx_cptByte];
#else
			dmx_buff_valid[dmx_cptByte]=dmx_rx_buff[0];
 800347a:	4b21      	ldr	r3, [pc, #132]	; (8003500 <Protocol_DMX_UartCallback+0xcc>)
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	4b1b      	ldr	r3, [pc, #108]	; (80034f0 <Protocol_DMX_UartCallback+0xbc>)
 8003482:	7819      	ldrb	r1, [r3, #0]
 8003484:	4b1f      	ldr	r3, [pc, #124]	; (8003504 <Protocol_DMX_UartCallback+0xd0>)
 8003486:	5499      	strb	r1, [r3, r2]
#endif

			dmx_cptByte++;
 8003488:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <Protocol_DMX_UartCallback+0xcc>)
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	3301      	adds	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <Protocol_DMX_UartCallback+0xcc>)
 8003492:	801a      	strh	r2, [r3, #0]
		}
		dmx_cptAddress++;
 8003494:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <Protocol_DMX_UartCallback+0xc4>)
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	3301      	adds	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	4b16      	ldr	r3, [pc, #88]	; (80034f8 <Protocol_DMX_UartCallback+0xc4>)
 800349e:	801a      	strh	r2, [r3, #0]

		//New frame detection
		if(err_code==HAL_UART_ERROR_FE)// && rx_buff[0]==0)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d11d      	bne.n	80034e2 <Protocol_DMX_UartCallback+0xae>
		{
			dmx_LastTick = HAL_GetTick();
 80034a6:	f7fd f96b 	bl	8000780 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	4b16      	ldr	r3, [pc, #88]	; (8003508 <Protocol_DMX_UartCallback+0xd4>)
 80034ae:	601a      	str	r2, [r3, #0]

			dmx_cptAddress=0;
 80034b0:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <Protocol_DMX_UartCallback+0xc4>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	801a      	strh	r2, [r3, #0]
			dmx_cptByte=0;
 80034b6:	4b12      	ldr	r3, [pc, #72]	; (8003500 <Protocol_DMX_UartCallback+0xcc>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	801a      	strh	r2, [r3, #0]

			if (dmx_ref_buffer==1)
 80034bc:	4b13      	ldr	r3, [pc, #76]	; (800350c <Protocol_DMX_UartCallback+0xd8>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d103      	bne.n	80034cc <Protocol_DMX_UartCallback+0x98>
				dmx_ref_buffer=2;
 80034c4:	4b11      	ldr	r3, [pc, #68]	; (800350c <Protocol_DMX_UartCallback+0xd8>)
 80034c6:	2202      	movs	r2, #2
 80034c8:	701a      	strb	r2, [r3, #0]
				dmx_ref_buffer=1;
			else
				dmx_Last_Error=DMX_ERROR_BUFF;
		}
	}
}
 80034ca:	e00a      	b.n	80034e2 <Protocol_DMX_UartCallback+0xae>
			else if (dmx_ref_buffer==2)
 80034cc:	4b0f      	ldr	r3, [pc, #60]	; (800350c <Protocol_DMX_UartCallback+0xd8>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d103      	bne.n	80034dc <Protocol_DMX_UartCallback+0xa8>
				dmx_ref_buffer=1;
 80034d4:	4b0d      	ldr	r3, [pc, #52]	; (800350c <Protocol_DMX_UartCallback+0xd8>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	701a      	strb	r2, [r3, #0]
}
 80034da:	e002      	b.n	80034e2 <Protocol_DMX_UartCallback+0xae>
				dmx_Last_Error=DMX_ERROR_BUFF;
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <Protocol_DMX_UartCallback+0xdc>)
 80034de:	2201      	movs	r2, #1
 80034e0:	701a      	strb	r2, [r3, #0]
}
 80034e2:	bf00      	nop
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	200018a4 	.word	0x200018a4
 80034f0:	200018ac 	.word	0x200018ac
 80034f4:	200018a9 	.word	0x200018a9
 80034f8:	200018ae 	.word	0x200018ae
 80034fc:	20001894 	.word	0x20001894
 8003500:	200018c8 	.word	0x200018c8
 8003504:	20001898 	.word	0x20001898
 8003508:	20001890 	.word	0x20001890
 800350c:	200018ad 	.word	0x200018ad
 8003510:	200018a8 	.word	0x200018a8

08003514 <Protocol_DMX_GetValue>:


uint8_t Protocol_DMX_GetValue (uint8_t channel)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	71fb      	strb	r3, [r7, #7]
	if(channel==0 || channel>DMX_SIZE_CHANNEL)
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <Protocol_DMX_GetValue+0x16>
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	2b0c      	cmp	r3, #12
 8003528:	d901      	bls.n	800352e <Protocol_DMX_GetValue+0x1a>
		return 0;
 800352a:	2300      	movs	r3, #0
 800352c:	e003      	b.n	8003536 <Protocol_DMX_GetValue+0x22>
	else
		return dmx_buff_valid[channel-1];
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	3b01      	subs	r3, #1
 8003532:	4a03      	ldr	r2, [pc, #12]	; (8003540 <Protocol_DMX_GetValue+0x2c>)
 8003534:	5cd3      	ldrb	r3, [r2, r3]
}
 8003536:	4618      	mov	r0, r3
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	20001898 	.word	0x20001898

08003544 <Protocol_DMX_GetLastTickFrame>:


uint32_t Protocol_DMX_GetLastTickFrame (void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
	return dmx_LastTick;
 8003548:	4b02      	ldr	r3, [pc, #8]	; (8003554 <Protocol_DMX_GetLastTickFrame+0x10>)
 800354a:	681b      	ldr	r3, [r3, #0]
}
 800354c:	4618      	mov	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr
 8003554:	20001890 	.word	0x20001890

08003558 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800356a:	2b84      	cmp	r3, #132	; 0x84
 800356c:	d005      	beq.n	800357a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800356e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4413      	add	r3, r2
 8003576:	3303      	adds	r3, #3
 8003578:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800357a:	68fb      	ldr	r3, [r7, #12]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr

08003586 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800358a:	f000 facd 	bl	8003b28 <vTaskStartScheduler>
  
  return osOK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	bd80      	pop	{r7, pc}

08003594 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003596:	b089      	sub	sp, #36	; 0x24
 8003598:	af04      	add	r7, sp, #16
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d020      	beq.n	80035e8 <osThreadCreate+0x54>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d01c      	beq.n	80035e8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685c      	ldr	r4, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681d      	ldr	r5, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691e      	ldr	r6, [r3, #16]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff ffc9 	bl	8003558 <makeFreeRtosPriority>
 80035c6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035d0:	9202      	str	r2, [sp, #8]
 80035d2:	9301      	str	r3, [sp, #4]
 80035d4:	9100      	str	r1, [sp, #0]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	4632      	mov	r2, r6
 80035da:	4629      	mov	r1, r5
 80035dc:	4620      	mov	r0, r4
 80035de:	f000 f8e8 	bl	80037b2 <xTaskCreateStatic>
 80035e2:	4603      	mov	r3, r0
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	e01c      	b.n	8003622 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685c      	ldr	r4, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035f4:	b29e      	uxth	r6, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ffab 	bl	8003558 <makeFreeRtosPriority>
 8003602:	4602      	mov	r2, r0
 8003604:	f107 030c 	add.w	r3, r7, #12
 8003608:	9301      	str	r3, [sp, #4]
 800360a:	9200      	str	r2, [sp, #0]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	4632      	mov	r2, r6
 8003610:	4629      	mov	r1, r5
 8003612:	4620      	mov	r0, r4
 8003614:	f000 f926 	bl	8003864 <xTaskCreate>
 8003618:	4603      	mov	r3, r0
 800361a:	2b01      	cmp	r3, #1
 800361c:	d001      	beq.n	8003622 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800361e:	2300      	movs	r3, #0
 8003620:	e000      	b.n	8003624 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003622:	68fb      	ldr	r3, [r7, #12]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800362c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <osDelay+0x16>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	e000      	b.n	8003644 <osDelay+0x18>
 8003642:	2301      	movs	r3, #1
 8003644:	4618      	mov	r0, r3
 8003646:	f000 fa3b 	bl	8003ac0 <vTaskDelay>
  
  return osOK;
 800364a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f103 0208 	add.w	r2, r3, #8
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f04f 32ff 	mov.w	r2, #4294967295
 800366c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f103 0208 	add.w	r2, r3, #8
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f103 0208 	add.w	r2, r3, #8
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr

08003692 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr

080036aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036aa:	b480      	push	{r7}
 80036ac:	b085      	sub	sp, #20
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	601a      	str	r2, [r3, #0]
}
 80036e6:	bf00      	nop
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003706:	d103      	bne.n	8003710 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	e00c      	b.n	800372a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3308      	adds	r3, #8
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	e002      	b.n	800371e <vListInsert+0x2e>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	429a      	cmp	r2, r3
 8003728:	d2f6      	bcs.n	8003718 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	601a      	str	r2, [r3, #0]
}
 8003756:	bf00      	nop
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr

08003760 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6892      	ldr	r2, [r2, #8]
 8003776:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6852      	ldr	r2, [r2, #4]
 8003780:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	429a      	cmp	r2, r3
 800378a:	d103      	bne.n	8003794 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	1e5a      	subs	r2, r3, #1
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr

080037b2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b08e      	sub	sp, #56	; 0x38
 80037b6:	af04      	add	r7, sp, #16
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	607a      	str	r2, [r7, #4]
 80037be:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80037c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d109      	bne.n	80037da <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	623b      	str	r3, [r7, #32]
 80037d8:	e7fe      	b.n	80037d8 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80037da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d109      	bne.n	80037f4 <xTaskCreateStatic+0x42>
 80037e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	e7fe      	b.n	80037f2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80037f4:	2354      	movs	r3, #84	; 0x54
 80037f6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	2b54      	cmp	r3, #84	; 0x54
 80037fc:	d009      	beq.n	8003812 <xTaskCreateStatic+0x60>
 80037fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003802:	f383 8811 	msr	BASEPRI, r3
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	61bb      	str	r3, [r7, #24]
 8003810:	e7fe      	b.n	8003810 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01e      	beq.n	8003856 <xTaskCreateStatic+0xa4>
 8003818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800381a:	2b00      	cmp	r3, #0
 800381c:	d01b      	beq.n	8003856 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800381e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003826:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	2202      	movs	r2, #2
 800382c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003830:	2300      	movs	r3, #0
 8003832:	9303      	str	r3, [sp, #12]
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	9302      	str	r3, [sp, #8]
 8003838:	f107 0314 	add.w	r3, r7, #20
 800383c:	9301      	str	r3, [sp, #4]
 800383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	68b9      	ldr	r1, [r7, #8]
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f850 	bl	80038ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800384e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003850:	f000 f8cc 	bl	80039ec <prvAddNewTaskToReadyList>
 8003854:	e001      	b.n	800385a <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800385a:	697b      	ldr	r3, [r7, #20]
	}
 800385c:	4618      	mov	r0, r3
 800385e:	3728      	adds	r7, #40	; 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08c      	sub	sp, #48	; 0x30
 8003868:	af04      	add	r7, sp, #16
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	4613      	mov	r3, r2
 8003872:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003874:	88fb      	ldrh	r3, [r7, #6]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fe6f 	bl	800455c <pvPortMalloc>
 800387e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00e      	beq.n	80038a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003886:	2054      	movs	r0, #84	; 0x54
 8003888:	f000 fe68 	bl	800455c <pvPortMalloc>
 800388c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	631a      	str	r2, [r3, #48]	; 0x30
 800389a:	e005      	b.n	80038a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800389c:	6978      	ldr	r0, [r7, #20]
 800389e:	f000 ff1f 	bl	80046e0 <vPortFree>
 80038a2:	e001      	b.n	80038a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d017      	beq.n	80038de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038b6:	88fa      	ldrh	r2, [r7, #6]
 80038b8:	2300      	movs	r3, #0
 80038ba:	9303      	str	r3, [sp, #12]
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	9302      	str	r3, [sp, #8]
 80038c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c2:	9301      	str	r3, [sp, #4]
 80038c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f80e 	bl	80038ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038d2:	69f8      	ldr	r0, [r7, #28]
 80038d4:	f000 f88a 	bl	80039ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038d8:	2301      	movs	r3, #1
 80038da:	61bb      	str	r3, [r7, #24]
 80038dc:	e002      	b.n	80038e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038de:	f04f 33ff 	mov.w	r3, #4294967295
 80038e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038e4:	69bb      	ldr	r3, [r7, #24]
	}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3720      	adds	r7, #32
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b088      	sub	sp, #32
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]
 80038fa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80038fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003906:	3b01      	subs	r3, #1
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	f023 0307 	bic.w	r3, r3, #7
 8003914:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	2b00      	cmp	r3, #0
 800391e:	d009      	beq.n	8003934 <prvInitialiseNewTask+0x46>
 8003920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	e7fe      	b.n	8003932 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003934:	2300      	movs	r3, #0
 8003936:	61fb      	str	r3, [r7, #28]
 8003938:	e012      	b.n	8003960 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	4413      	add	r3, r2
 8003940:	7819      	ldrb	r1, [r3, #0]
 8003942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	4413      	add	r3, r2
 8003948:	3334      	adds	r3, #52	; 0x34
 800394a:	460a      	mov	r2, r1
 800394c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	4413      	add	r3, r2
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d006      	beq.n	8003968 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	3301      	adds	r3, #1
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	2b0f      	cmp	r3, #15
 8003964:	d9e9      	bls.n	800393a <prvInitialiseNewTask+0x4c>
 8003966:	e000      	b.n	800396a <prvInitialiseNewTask+0x7c>
		{
			break;
 8003968:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003974:	2b06      	cmp	r3, #6
 8003976:	d901      	bls.n	800397c <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003978:	2306      	movs	r3, #6
 800397a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003980:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003986:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398a:	2200      	movs	r2, #0
 800398c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	3304      	adds	r3, #4
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff fe7d 	bl	8003692 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399a:	3318      	adds	r3, #24
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff fe78 	bl	8003692 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039aa:	f1c3 0207 	rsb	r2, r3, #7
 80039ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	2200      	movs	r2, #0
 80039bc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	68f9      	ldr	r1, [r7, #12]
 80039ca:	69b8      	ldr	r0, [r7, #24]
 80039cc:	f000 fc24 	bl	8004218 <pxPortInitialiseStack>
 80039d0:	4602      	mov	r2, r0
 80039d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80039d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039e2:	bf00      	nop
 80039e4:	3720      	adds	r7, #32
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80039f4:	f000 fcf8 	bl	80043e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80039f8:	4b2a      	ldr	r3, [pc, #168]	; (8003aa4 <prvAddNewTaskToReadyList+0xb8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3301      	adds	r3, #1
 80039fe:	4a29      	ldr	r2, [pc, #164]	; (8003aa4 <prvAddNewTaskToReadyList+0xb8>)
 8003a00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a02:	4b29      	ldr	r3, [pc, #164]	; (8003aa8 <prvAddNewTaskToReadyList+0xbc>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a0a:	4a27      	ldr	r2, [pc, #156]	; (8003aa8 <prvAddNewTaskToReadyList+0xbc>)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a10:	4b24      	ldr	r3, [pc, #144]	; (8003aa4 <prvAddNewTaskToReadyList+0xb8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d110      	bne.n	8003a3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a18:	f000 fabc 	bl	8003f94 <prvInitialiseTaskLists>
 8003a1c:	e00d      	b.n	8003a3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a1e:	4b23      	ldr	r3, [pc, #140]	; (8003aac <prvAddNewTaskToReadyList+0xc0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a26:	4b20      	ldr	r3, [pc, #128]	; (8003aa8 <prvAddNewTaskToReadyList+0xbc>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d802      	bhi.n	8003a3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a34:	4a1c      	ldr	r2, [pc, #112]	; (8003aa8 <prvAddNewTaskToReadyList+0xbc>)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a3a:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <prvAddNewTaskToReadyList+0xc4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	4a1b      	ldr	r2, [pc, #108]	; (8003ab0 <prvAddNewTaskToReadyList+0xc4>)
 8003a42:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	2201      	movs	r2, #1
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	4b19      	ldr	r3, [pc, #100]	; (8003ab4 <prvAddNewTaskToReadyList+0xc8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	4a18      	ldr	r2, [pc, #96]	; (8003ab4 <prvAddNewTaskToReadyList+0xc8>)
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4a15      	ldr	r2, [pc, #84]	; (8003ab8 <prvAddNewTaskToReadyList+0xcc>)
 8003a64:	441a      	add	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	f7ff fe1c 	bl	80036aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a72:	f000 fce7 	bl	8004444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a76:	4b0d      	ldr	r3, [pc, #52]	; (8003aac <prvAddNewTaskToReadyList+0xc0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00e      	beq.n	8003a9c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a7e:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <prvAddNewTaskToReadyList+0xbc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d207      	bcs.n	8003a9c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <prvAddNewTaskToReadyList+0xd0>)
 8003a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	200005b4 	.word	0x200005b4
 8003aa8:	200004b4 	.word	0x200004b4
 8003aac:	200005c0 	.word	0x200005c0
 8003ab0:	200005d0 	.word	0x200005d0
 8003ab4:	200005bc 	.word	0x200005bc
 8003ab8:	200004b8 	.word	0x200004b8
 8003abc:	e000ed04 	.word	0xe000ed04

08003ac0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d016      	beq.n	8003b00 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ad2:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <vTaskDelay+0x60>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <vTaskDelay+0x2e>
 8003ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ade:	f383 8811 	msr	BASEPRI, r3
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	f3bf 8f4f 	dsb	sy
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	e7fe      	b.n	8003aec <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003aee:	f000 f879 	bl	8003be4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003af2:	2100      	movs	r1, #0
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fb29 	bl	800414c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003afa:	f000 f881 	bl	8003c00 <xTaskResumeAll>
 8003afe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d107      	bne.n	8003b16 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003b06:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <vTaskDelay+0x64>)
 8003b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	200005dc 	.word	0x200005dc
 8003b24:	e000ed04 	.word	0xe000ed04

08003b28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08a      	sub	sp, #40	; 0x28
 8003b2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b36:	463a      	mov	r2, r7
 8003b38:	1d39      	adds	r1, r7, #4
 8003b3a:	f107 0308 	add.w	r3, r7, #8
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f001 fbd8 	bl	80052f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b44:	6839      	ldr	r1, [r7, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	9202      	str	r2, [sp, #8]
 8003b4c:	9301      	str	r3, [sp, #4]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	2300      	movs	r3, #0
 8003b54:	460a      	mov	r2, r1
 8003b56:	491d      	ldr	r1, [pc, #116]	; (8003bcc <vTaskStartScheduler+0xa4>)
 8003b58:	481d      	ldr	r0, [pc, #116]	; (8003bd0 <vTaskStartScheduler+0xa8>)
 8003b5a:	f7ff fe2a 	bl	80037b2 <xTaskCreateStatic>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	4b1c      	ldr	r3, [pc, #112]	; (8003bd4 <vTaskStartScheduler+0xac>)
 8003b62:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b64:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <vTaskStartScheduler+0xac>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	e001      	b.n	8003b76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d115      	bne.n	8003ba8 <vTaskStartScheduler+0x80>
 8003b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b80:	f383 8811 	msr	BASEPRI, r3
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b8e:	4b12      	ldr	r3, [pc, #72]	; (8003bd8 <vTaskStartScheduler+0xb0>)
 8003b90:	f04f 32ff 	mov.w	r2, #4294967295
 8003b94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b96:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <vTaskStartScheduler+0xb4>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003b9c:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <vTaskStartScheduler+0xb8>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ba2:	f000 fbb1 	bl	8004308 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ba6:	e00d      	b.n	8003bc4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bae:	d109      	bne.n	8003bc4 <vTaskStartScheduler+0x9c>
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	e7fe      	b.n	8003bc2 <vTaskStartScheduler+0x9a>
}
 8003bc4:	bf00      	nop
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	0800686c 	.word	0x0800686c
 8003bd0:	08003f65 	.word	0x08003f65
 8003bd4:	200005d8 	.word	0x200005d8
 8003bd8:	200005d4 	.word	0x200005d4
 8003bdc:	200005c0 	.word	0x200005c0
 8003be0:	200005b8 	.word	0x200005b8

08003be4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003be8:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <vTaskSuspendAll+0x18>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3301      	adds	r3, #1
 8003bee:	4a03      	ldr	r2, [pc, #12]	; (8003bfc <vTaskSuspendAll+0x18>)
 8003bf0:	6013      	str	r3, [r2, #0]
}
 8003bf2:	bf00      	nop
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc80      	pop	{r7}
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	200005dc 	.word	0x200005dc

08003c00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c0e:	4b41      	ldr	r3, [pc, #260]	; (8003d14 <xTaskResumeAll+0x114>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d109      	bne.n	8003c2a <xTaskResumeAll+0x2a>
 8003c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	603b      	str	r3, [r7, #0]
 8003c28:	e7fe      	b.n	8003c28 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c2a:	f000 fbdd 	bl	80043e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c2e:	4b39      	ldr	r3, [pc, #228]	; (8003d14 <xTaskResumeAll+0x114>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	4a37      	ldr	r2, [pc, #220]	; (8003d14 <xTaskResumeAll+0x114>)
 8003c36:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c38:	4b36      	ldr	r3, [pc, #216]	; (8003d14 <xTaskResumeAll+0x114>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d161      	bne.n	8003d04 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c40:	4b35      	ldr	r3, [pc, #212]	; (8003d18 <xTaskResumeAll+0x118>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d05d      	beq.n	8003d04 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c48:	e02e      	b.n	8003ca8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c4a:	4b34      	ldr	r3, [pc, #208]	; (8003d1c <xTaskResumeAll+0x11c>)
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	3318      	adds	r3, #24
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff fd82 	bl	8003760 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff fd7d 	bl	8003760 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	4b2c      	ldr	r3, [pc, #176]	; (8003d20 <xTaskResumeAll+0x120>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	4a2a      	ldr	r2, [pc, #168]	; (8003d20 <xTaskResumeAll+0x120>)
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4a27      	ldr	r2, [pc, #156]	; (8003d24 <xTaskResumeAll+0x124>)
 8003c86:	441a      	add	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4610      	mov	r0, r2
 8003c90:	f7ff fd0b 	bl	80036aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c98:	4b23      	ldr	r3, [pc, #140]	; (8003d28 <xTaskResumeAll+0x128>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d302      	bcc.n	8003ca8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003ca2:	4b22      	ldr	r3, [pc, #136]	; (8003d2c <xTaskResumeAll+0x12c>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ca8:	4b1c      	ldr	r3, [pc, #112]	; (8003d1c <xTaskResumeAll+0x11c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1cc      	bne.n	8003c4a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cb6:	f000 fa07 	bl	80040c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003cba:	4b1d      	ldr	r3, [pc, #116]	; (8003d30 <xTaskResumeAll+0x130>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d010      	beq.n	8003ce8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cc6:	f000 f837 	bl	8003d38 <xTaskIncrementTick>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003cd0:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <xTaskResumeAll+0x12c>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f1      	bne.n	8003cc6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003ce2:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <xTaskResumeAll+0x130>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ce8:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <xTaskResumeAll+0x12c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d009      	beq.n	8003d04 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cf4:	4b0f      	ldr	r3, [pc, #60]	; (8003d34 <xTaskResumeAll+0x134>)
 8003cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d04:	f000 fb9e 	bl	8004444 <vPortExitCritical>

	return xAlreadyYielded;
 8003d08:	68bb      	ldr	r3, [r7, #8]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	200005dc 	.word	0x200005dc
 8003d18:	200005b4 	.word	0x200005b4
 8003d1c:	20000574 	.word	0x20000574
 8003d20:	200005bc 	.word	0x200005bc
 8003d24:	200004b8 	.word	0x200004b8
 8003d28:	200004b4 	.word	0x200004b4
 8003d2c:	200005c8 	.word	0x200005c8
 8003d30:	200005c4 	.word	0x200005c4
 8003d34:	e000ed04 	.word	0xe000ed04

08003d38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d42:	4b50      	ldr	r3, [pc, #320]	; (8003e84 <xTaskIncrementTick+0x14c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f040 808c 	bne.w	8003e64 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d4c:	4b4e      	ldr	r3, [pc, #312]	; (8003e88 <xTaskIncrementTick+0x150>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3301      	adds	r3, #1
 8003d52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d54:	4a4c      	ldr	r2, [pc, #304]	; (8003e88 <xTaskIncrementTick+0x150>)
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d11f      	bne.n	8003da0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d60:	4b4a      	ldr	r3, [pc, #296]	; (8003e8c <xTaskIncrementTick+0x154>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d009      	beq.n	8003d7e <xTaskIncrementTick+0x46>
 8003d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	e7fe      	b.n	8003d7c <xTaskIncrementTick+0x44>
 8003d7e:	4b43      	ldr	r3, [pc, #268]	; (8003e8c <xTaskIncrementTick+0x154>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	4b42      	ldr	r3, [pc, #264]	; (8003e90 <xTaskIncrementTick+0x158>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a40      	ldr	r2, [pc, #256]	; (8003e8c <xTaskIncrementTick+0x154>)
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	4a40      	ldr	r2, [pc, #256]	; (8003e90 <xTaskIncrementTick+0x158>)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4b40      	ldr	r3, [pc, #256]	; (8003e94 <xTaskIncrementTick+0x15c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3301      	adds	r3, #1
 8003d98:	4a3e      	ldr	r2, [pc, #248]	; (8003e94 <xTaskIncrementTick+0x15c>)
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	f000 f994 	bl	80040c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003da0:	4b3d      	ldr	r3, [pc, #244]	; (8003e98 <xTaskIncrementTick+0x160>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d34d      	bcc.n	8003e46 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003daa:	4b38      	ldr	r3, [pc, #224]	; (8003e8c <xTaskIncrementTick+0x154>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <xTaskIncrementTick+0x80>
 8003db4:	2301      	movs	r3, #1
 8003db6:	e000      	b.n	8003dba <xTaskIncrementTick+0x82>
 8003db8:	2300      	movs	r3, #0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d004      	beq.n	8003dc8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dbe:	4b36      	ldr	r3, [pc, #216]	; (8003e98 <xTaskIncrementTick+0x160>)
 8003dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc4:	601a      	str	r2, [r3, #0]
					break;
 8003dc6:	e03e      	b.n	8003e46 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003dc8:	4b30      	ldr	r3, [pc, #192]	; (8003e8c <xTaskIncrementTick+0x154>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d203      	bcs.n	8003de8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003de0:	4a2d      	ldr	r2, [pc, #180]	; (8003e98 <xTaskIncrementTick+0x160>)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6013      	str	r3, [r2, #0]
						break;
 8003de6:	e02e      	b.n	8003e46 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	3304      	adds	r3, #4
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff fcb7 	bl	8003760 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d004      	beq.n	8003e04 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	3318      	adds	r3, #24
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff fcae 	bl	8003760 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	2201      	movs	r2, #1
 8003e0a:	409a      	lsls	r2, r3
 8003e0c:	4b23      	ldr	r3, [pc, #140]	; (8003e9c <xTaskIncrementTick+0x164>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	4a22      	ldr	r2, [pc, #136]	; (8003e9c <xTaskIncrementTick+0x164>)
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4a1f      	ldr	r2, [pc, #124]	; (8003ea0 <xTaskIncrementTick+0x168>)
 8003e24:	441a      	add	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	f7ff fc3c 	bl	80036aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e36:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <xTaskIncrementTick+0x16c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d3b4      	bcc.n	8003daa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003e40:	2301      	movs	r3, #1
 8003e42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e44:	e7b1      	b.n	8003daa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e46:	4b17      	ldr	r3, [pc, #92]	; (8003ea4 <xTaskIncrementTick+0x16c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4c:	4914      	ldr	r1, [pc, #80]	; (8003ea0 <xTaskIncrementTick+0x168>)
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d907      	bls.n	8003e6e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	e004      	b.n	8003e6e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003e64:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <xTaskIncrementTick+0x170>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	4a0f      	ldr	r2, [pc, #60]	; (8003ea8 <xTaskIncrementTick+0x170>)
 8003e6c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <xTaskIncrementTick+0x174>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003e76:	2301      	movs	r3, #1
 8003e78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003e7a:	697b      	ldr	r3, [r7, #20]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3718      	adds	r7, #24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	200005dc 	.word	0x200005dc
 8003e88:	200005b8 	.word	0x200005b8
 8003e8c:	2000056c 	.word	0x2000056c
 8003e90:	20000570 	.word	0x20000570
 8003e94:	200005cc 	.word	0x200005cc
 8003e98:	200005d4 	.word	0x200005d4
 8003e9c:	200005bc 	.word	0x200005bc
 8003ea0:	200004b8 	.word	0x200004b8
 8003ea4:	200004b4 	.word	0x200004b4
 8003ea8:	200005c4 	.word	0x200005c4
 8003eac:	200005c8 	.word	0x200005c8

08003eb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003eb6:	4b26      	ldr	r3, [pc, #152]	; (8003f50 <vTaskSwitchContext+0xa0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ebe:	4b25      	ldr	r3, [pc, #148]	; (8003f54 <vTaskSwitchContext+0xa4>)
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ec4:	e03e      	b.n	8003f44 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003ec6:	4b23      	ldr	r3, [pc, #140]	; (8003f54 <vTaskSwitchContext+0xa4>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003ecc:	4b22      	ldr	r3, [pc, #136]	; (8003f58 <vTaskSwitchContext+0xa8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	fab3 f383 	clz	r3, r3
 8003ed8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003eda:	7afb      	ldrb	r3, [r7, #11]
 8003edc:	f1c3 031f 	rsb	r3, r3, #31
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	491e      	ldr	r1, [pc, #120]	; (8003f5c <vTaskSwitchContext+0xac>)
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d109      	bne.n	8003f0a <vTaskSwitchContext+0x5a>
	__asm volatile
 8003ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	607b      	str	r3, [r7, #4]
 8003f08:	e7fe      	b.n	8003f08 <vTaskSwitchContext+0x58>
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4a11      	ldr	r2, [pc, #68]	; (8003f5c <vTaskSwitchContext+0xac>)
 8003f16:	4413      	add	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	605a      	str	r2, [r3, #4]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	3308      	adds	r3, #8
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d104      	bne.n	8003f3a <vTaskSwitchContext+0x8a>
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	4a07      	ldr	r2, [pc, #28]	; (8003f60 <vTaskSwitchContext+0xb0>)
 8003f42:	6013      	str	r3, [r2, #0]
}
 8003f44:	bf00      	nop
 8003f46:	371c      	adds	r7, #28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	200005dc 	.word	0x200005dc
 8003f54:	200005c8 	.word	0x200005c8
 8003f58:	200005bc 	.word	0x200005bc
 8003f5c:	200004b8 	.word	0x200004b8
 8003f60:	200004b4 	.word	0x200004b4

08003f64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f6c:	f000 f852 	bl	8004014 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f70:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <prvIdleTask+0x28>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d9f9      	bls.n	8003f6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <prvIdleTask+0x2c>)
 8003f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f88:	e7f0      	b.n	8003f6c <prvIdleTask+0x8>
 8003f8a:	bf00      	nop
 8003f8c:	200004b8 	.word	0x200004b8
 8003f90:	e000ed04 	.word	0xe000ed04

08003f94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	607b      	str	r3, [r7, #4]
 8003f9e:	e00c      	b.n	8003fba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4a12      	ldr	r2, [pc, #72]	; (8003ff4 <prvInitialiseTaskLists+0x60>)
 8003fac:	4413      	add	r3, r2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff fb50 	bl	8003654 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	607b      	str	r3, [r7, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b06      	cmp	r3, #6
 8003fbe:	d9ef      	bls.n	8003fa0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fc0:	480d      	ldr	r0, [pc, #52]	; (8003ff8 <prvInitialiseTaskLists+0x64>)
 8003fc2:	f7ff fb47 	bl	8003654 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fc6:	480d      	ldr	r0, [pc, #52]	; (8003ffc <prvInitialiseTaskLists+0x68>)
 8003fc8:	f7ff fb44 	bl	8003654 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fcc:	480c      	ldr	r0, [pc, #48]	; (8004000 <prvInitialiseTaskLists+0x6c>)
 8003fce:	f7ff fb41 	bl	8003654 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fd2:	480c      	ldr	r0, [pc, #48]	; (8004004 <prvInitialiseTaskLists+0x70>)
 8003fd4:	f7ff fb3e 	bl	8003654 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fd8:	480b      	ldr	r0, [pc, #44]	; (8004008 <prvInitialiseTaskLists+0x74>)
 8003fda:	f7ff fb3b 	bl	8003654 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fde:	4b0b      	ldr	r3, [pc, #44]	; (800400c <prvInitialiseTaskLists+0x78>)
 8003fe0:	4a05      	ldr	r2, [pc, #20]	; (8003ff8 <prvInitialiseTaskLists+0x64>)
 8003fe2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <prvInitialiseTaskLists+0x7c>)
 8003fe6:	4a05      	ldr	r2, [pc, #20]	; (8003ffc <prvInitialiseTaskLists+0x68>)
 8003fe8:	601a      	str	r2, [r3, #0]
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	200004b8 	.word	0x200004b8
 8003ff8:	20000544 	.word	0x20000544
 8003ffc:	20000558 	.word	0x20000558
 8004000:	20000574 	.word	0x20000574
 8004004:	20000588 	.word	0x20000588
 8004008:	200005a0 	.word	0x200005a0
 800400c:	2000056c 	.word	0x2000056c
 8004010:	20000570 	.word	0x20000570

08004014 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800401a:	e019      	b.n	8004050 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800401c:	f000 f9e4 	bl	80043e8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004020:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <prvCheckTasksWaitingTermination+0x4c>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3304      	adds	r3, #4
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff fb97 	bl	8003760 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004032:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <prvCheckTasksWaitingTermination+0x50>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3b01      	subs	r3, #1
 8004038:	4a0a      	ldr	r2, [pc, #40]	; (8004064 <prvCheckTasksWaitingTermination+0x50>)
 800403a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800403c:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <prvCheckTasksWaitingTermination+0x54>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3b01      	subs	r3, #1
 8004042:	4a09      	ldr	r2, [pc, #36]	; (8004068 <prvCheckTasksWaitingTermination+0x54>)
 8004044:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004046:	f000 f9fd 	bl	8004444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f80e 	bl	800406c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004050:	4b05      	ldr	r3, [pc, #20]	; (8004068 <prvCheckTasksWaitingTermination+0x54>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e1      	bne.n	800401c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004058:	bf00      	nop
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20000588 	.word	0x20000588
 8004064:	200005b4 	.word	0x200005b4
 8004068:	2000059c 	.word	0x2000059c

0800406c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800407a:	2b00      	cmp	r3, #0
 800407c:	d108      	bne.n	8004090 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fb2c 	bl	80046e0 <vPortFree>
				vPortFree( pxTCB );
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fb29 	bl	80046e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800408e:	e017      	b.n	80040c0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004096:	2b01      	cmp	r3, #1
 8004098:	d103      	bne.n	80040a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 fb20 	bl	80046e0 <vPortFree>
	}
 80040a0:	e00e      	b.n	80040c0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d009      	beq.n	80040c0 <prvDeleteTCB+0x54>
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	e7fe      	b.n	80040be <prvDeleteTCB+0x52>
	}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040ce:	4b0e      	ldr	r3, [pc, #56]	; (8004108 <prvResetNextTaskUnblockTime+0x40>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <prvResetNextTaskUnblockTime+0x14>
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <prvResetNextTaskUnblockTime+0x16>
 80040dc:	2300      	movs	r3, #0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d004      	beq.n	80040ec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040e2:	4b0a      	ldr	r3, [pc, #40]	; (800410c <prvResetNextTaskUnblockTime+0x44>)
 80040e4:	f04f 32ff 	mov.w	r2, #4294967295
 80040e8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040ea:	e008      	b.n	80040fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040ec:	4b06      	ldr	r3, [pc, #24]	; (8004108 <prvResetNextTaskUnblockTime+0x40>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	4a04      	ldr	r2, [pc, #16]	; (800410c <prvResetNextTaskUnblockTime+0x44>)
 80040fc:	6013      	str	r3, [r2, #0]
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr
 8004108:	2000056c 	.word	0x2000056c
 800410c:	200005d4 	.word	0x200005d4

08004110 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004116:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <xTaskGetSchedulerState+0x34>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d102      	bne.n	8004124 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800411e:	2301      	movs	r3, #1
 8004120:	607b      	str	r3, [r7, #4]
 8004122:	e008      	b.n	8004136 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004124:	4b08      	ldr	r3, [pc, #32]	; (8004148 <xTaskGetSchedulerState+0x38>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d102      	bne.n	8004132 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800412c:	2302      	movs	r3, #2
 800412e:	607b      	str	r3, [r7, #4]
 8004130:	e001      	b.n	8004136 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004132:	2300      	movs	r3, #0
 8004134:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004136:	687b      	ldr	r3, [r7, #4]
	}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	200005c0 	.word	0x200005c0
 8004148:	200005dc 	.word	0x200005dc

0800414c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004156:	4b29      	ldr	r3, [pc, #164]	; (80041fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800415c:	4b28      	ldr	r3, [pc, #160]	; (8004200 <prvAddCurrentTaskToDelayedList+0xb4>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3304      	adds	r3, #4
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff fafc 	bl	8003760 <uxListRemove>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10b      	bne.n	8004186 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800416e:	4b24      	ldr	r3, [pc, #144]	; (8004200 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	2201      	movs	r2, #1
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43da      	mvns	r2, r3
 800417c:	4b21      	ldr	r3, [pc, #132]	; (8004204 <prvAddCurrentTaskToDelayedList+0xb8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4013      	ands	r3, r2
 8004182:	4a20      	ldr	r2, [pc, #128]	; (8004204 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004184:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418c:	d10a      	bne.n	80041a4 <prvAddCurrentTaskToDelayedList+0x58>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d007      	beq.n	80041a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004194:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3304      	adds	r3, #4
 800419a:	4619      	mov	r1, r3
 800419c:	481a      	ldr	r0, [pc, #104]	; (8004208 <prvAddCurrentTaskToDelayedList+0xbc>)
 800419e:	f7ff fa84 	bl	80036aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80041a2:	e026      	b.n	80041f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4413      	add	r3, r2
 80041aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041ac:	4b14      	ldr	r3, [pc, #80]	; (8004200 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d209      	bcs.n	80041d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041bc:	4b13      	ldr	r3, [pc, #76]	; (800420c <prvAddCurrentTaskToDelayedList+0xc0>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	4b0f      	ldr	r3, [pc, #60]	; (8004200 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3304      	adds	r3, #4
 80041c6:	4619      	mov	r1, r3
 80041c8:	4610      	mov	r0, r2
 80041ca:	f7ff fa91 	bl	80036f0 <vListInsert>
}
 80041ce:	e010      	b.n	80041f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041d0:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <prvAddCurrentTaskToDelayedList+0xc4>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3304      	adds	r3, #4
 80041da:	4619      	mov	r1, r3
 80041dc:	4610      	mov	r0, r2
 80041de:	f7ff fa87 	bl	80036f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041e2:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <prvAddCurrentTaskToDelayedList+0xc8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d202      	bcs.n	80041f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80041ec:	4a09      	ldr	r2, [pc, #36]	; (8004214 <prvAddCurrentTaskToDelayedList+0xc8>)
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	6013      	str	r3, [r2, #0]
}
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	200005b8 	.word	0x200005b8
 8004200:	200004b4 	.word	0x200004b4
 8004204:	200005bc 	.word	0x200005bc
 8004208:	200005a0 	.word	0x200005a0
 800420c:	20000570 	.word	0x20000570
 8004210:	2000056c 	.word	0x2000056c
 8004214:	200005d4 	.word	0x200005d4

08004218 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3b04      	subs	r3, #4
 8004228:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004230:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	3b04      	subs	r3, #4
 8004236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f023 0201 	bic.w	r2, r3, #1
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	3b04      	subs	r3, #4
 8004246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004248:	4a08      	ldr	r2, [pc, #32]	; (800426c <pxPortInitialiseStack+0x54>)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3b14      	subs	r3, #20
 8004252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	3b20      	subs	r3, #32
 800425e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004260:	68fb      	ldr	r3, [r7, #12]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr
 800426c:	08004271 	.word	0x08004271

08004270 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004276:	2300      	movs	r3, #0
 8004278:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800427a:	4b10      	ldr	r3, [pc, #64]	; (80042bc <prvTaskExitError+0x4c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004282:	d009      	beq.n	8004298 <prvTaskExitError+0x28>
 8004284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	e7fe      	b.n	8004296 <prvTaskExitError+0x26>
 8004298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042aa:	bf00      	nop
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0fc      	beq.n	80042ac <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042b2:	bf00      	nop
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr
 80042bc:	20000020 	.word	0x20000020

080042c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042c0:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <pxCurrentTCBConst2>)
 80042c2:	6819      	ldr	r1, [r3, #0]
 80042c4:	6808      	ldr	r0, [r1, #0]
 80042c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042ca:	f380 8809 	msr	PSP, r0
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f04f 0000 	mov.w	r0, #0
 80042d6:	f380 8811 	msr	BASEPRI, r0
 80042da:	f04e 0e0d 	orr.w	lr, lr, #13
 80042de:	4770      	bx	lr

080042e0 <pxCurrentTCBConst2>:
 80042e0:	200004b4 	.word	0x200004b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop

080042e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80042e8:	4806      	ldr	r0, [pc, #24]	; (8004304 <prvPortStartFirstTask+0x1c>)
 80042ea:	6800      	ldr	r0, [r0, #0]
 80042ec:	6800      	ldr	r0, [r0, #0]
 80042ee:	f380 8808 	msr	MSP, r0
 80042f2:	b662      	cpsie	i
 80042f4:	b661      	cpsie	f
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	df00      	svc	0
 8004300:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004302:	bf00      	nop
 8004304:	e000ed08 	.word	0xe000ed08

08004308 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800430e:	4b31      	ldr	r3, [pc, #196]	; (80043d4 <xPortStartScheduler+0xcc>)
 8004310:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	22ff      	movs	r2, #255	; 0xff
 800431e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004330:	b2da      	uxtb	r2, r3
 8004332:	4b29      	ldr	r3, [pc, #164]	; (80043d8 <xPortStartScheduler+0xd0>)
 8004334:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004336:	4b29      	ldr	r3, [pc, #164]	; (80043dc <xPortStartScheduler+0xd4>)
 8004338:	2207      	movs	r2, #7
 800433a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800433c:	e009      	b.n	8004352 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800433e:	4b27      	ldr	r3, [pc, #156]	; (80043dc <xPortStartScheduler+0xd4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3b01      	subs	r3, #1
 8004344:	4a25      	ldr	r2, [pc, #148]	; (80043dc <xPortStartScheduler+0xd4>)
 8004346:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	b2db      	uxtb	r3, r3
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	b2db      	uxtb	r3, r3
 8004350:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435a:	2b80      	cmp	r3, #128	; 0x80
 800435c:	d0ef      	beq.n	800433e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800435e:	4b1f      	ldr	r3, [pc, #124]	; (80043dc <xPortStartScheduler+0xd4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f1c3 0307 	rsb	r3, r3, #7
 8004366:	2b04      	cmp	r3, #4
 8004368:	d009      	beq.n	800437e <xPortStartScheduler+0x76>
 800436a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	60bb      	str	r3, [r7, #8]
 800437c:	e7fe      	b.n	800437c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800437e:	4b17      	ldr	r3, [pc, #92]	; (80043dc <xPortStartScheduler+0xd4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	4a15      	ldr	r2, [pc, #84]	; (80043dc <xPortStartScheduler+0xd4>)
 8004386:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004388:	4b14      	ldr	r3, [pc, #80]	; (80043dc <xPortStartScheduler+0xd4>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004390:	4a12      	ldr	r2, [pc, #72]	; (80043dc <xPortStartScheduler+0xd4>)
 8004392:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	b2da      	uxtb	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800439c:	4b10      	ldr	r3, [pc, #64]	; (80043e0 <xPortStartScheduler+0xd8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a0f      	ldr	r2, [pc, #60]	; (80043e0 <xPortStartScheduler+0xd8>)
 80043a2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043a8:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <xPortStartScheduler+0xd8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a0c      	ldr	r2, [pc, #48]	; (80043e0 <xPortStartScheduler+0xd8>)
 80043ae:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043b4:	f000 f8b0 	bl	8004518 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043b8:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <xPortStartScheduler+0xdc>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043be:	f7ff ff93 	bl	80042e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80043c2:	f7ff fd75 	bl	8003eb0 <vTaskSwitchContext>
	prvTaskExitError();
 80043c6:	f7ff ff53 	bl	8004270 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	e000e400 	.word	0xe000e400
 80043d8:	200005e0 	.word	0x200005e0
 80043dc:	200005e4 	.word	0x200005e4
 80043e0:	e000ed20 	.word	0xe000ed20
 80043e4:	20000020 	.word	0x20000020

080043e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004400:	4b0e      	ldr	r3, [pc, #56]	; (800443c <vPortEnterCritical+0x54>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3301      	adds	r3, #1
 8004406:	4a0d      	ldr	r2, [pc, #52]	; (800443c <vPortEnterCritical+0x54>)
 8004408:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800440a:	4b0c      	ldr	r3, [pc, #48]	; (800443c <vPortEnterCritical+0x54>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d10e      	bne.n	8004430 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004412:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <vPortEnterCritical+0x58>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d009      	beq.n	8004430 <vPortEnterCritical+0x48>
 800441c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	603b      	str	r3, [r7, #0]
 800442e:	e7fe      	b.n	800442e <vPortEnterCritical+0x46>
	}
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	20000020 	.word	0x20000020
 8004440:	e000ed04 	.word	0xe000ed04

08004444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800444a:	4b10      	ldr	r3, [pc, #64]	; (800448c <vPortExitCritical+0x48>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d109      	bne.n	8004466 <vPortExitCritical+0x22>
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	607b      	str	r3, [r7, #4]
 8004464:	e7fe      	b.n	8004464 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004466:	4b09      	ldr	r3, [pc, #36]	; (800448c <vPortExitCritical+0x48>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3b01      	subs	r3, #1
 800446c:	4a07      	ldr	r2, [pc, #28]	; (800448c <vPortExitCritical+0x48>)
 800446e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <vPortExitCritical+0x48>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d104      	bne.n	8004482 <vPortExitCritical+0x3e>
 8004478:	2300      	movs	r3, #0
 800447a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr
 800448c:	20000020 	.word	0x20000020

08004490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004490:	f3ef 8009 	mrs	r0, PSP
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	4b0d      	ldr	r3, [pc, #52]	; (80044d0 <pxCurrentTCBConst>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044a0:	6010      	str	r0, [r2, #0]
 80044a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80044a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044aa:	f380 8811 	msr	BASEPRI, r0
 80044ae:	f7ff fcff 	bl	8003eb0 <vTaskSwitchContext>
 80044b2:	f04f 0000 	mov.w	r0, #0
 80044b6:	f380 8811 	msr	BASEPRI, r0
 80044ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80044be:	6819      	ldr	r1, [r3, #0]
 80044c0:	6808      	ldr	r0, [r1, #0]
 80044c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044c6:	f380 8809 	msr	PSP, r0
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	4770      	bx	lr

080044d0 <pxCurrentTCBConst>:
 80044d0:	200004b4 	.word	0x200004b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop

080044d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044f0:	f7ff fc22 	bl	8003d38 <xTaskIncrementTick>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <xPortSysTickHandler+0x3c>)
 80044fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	2300      	movs	r3, #0
 8004504:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800450c:	bf00      	nop
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	e000ed04 	.word	0xe000ed04

08004518 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800451c:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <vPortSetupTimerInterrupt+0x30>)
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004522:	4b0a      	ldr	r3, [pc, #40]	; (800454c <vPortSetupTimerInterrupt+0x34>)
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004528:	4b09      	ldr	r3, [pc, #36]	; (8004550 <vPortSetupTimerInterrupt+0x38>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a09      	ldr	r2, [pc, #36]	; (8004554 <vPortSetupTimerInterrupt+0x3c>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	099b      	lsrs	r3, r3, #6
 8004534:	4a08      	ldr	r2, [pc, #32]	; (8004558 <vPortSetupTimerInterrupt+0x40>)
 8004536:	3b01      	subs	r3, #1
 8004538:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800453a:	4b03      	ldr	r3, [pc, #12]	; (8004548 <vPortSetupTimerInterrupt+0x30>)
 800453c:	2207      	movs	r2, #7
 800453e:	601a      	str	r2, [r3, #0]
}
 8004540:	bf00      	nop
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr
 8004548:	e000e010 	.word	0xe000e010
 800454c:	e000e018 	.word	0xe000e018
 8004550:	20000024 	.word	0x20000024
 8004554:	10624dd3 	.word	0x10624dd3
 8004558:	e000e014 	.word	0xe000e014

0800455c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08a      	sub	sp, #40	; 0x28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004564:	2300      	movs	r3, #0
 8004566:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004568:	f7ff fb3c 	bl	8003be4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800456c:	4b57      	ldr	r3, [pc, #348]	; (80046cc <pvPortMalloc+0x170>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004574:	f000 f90c 	bl	8004790 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004578:	4b55      	ldr	r3, [pc, #340]	; (80046d0 <pvPortMalloc+0x174>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4013      	ands	r3, r2
 8004580:	2b00      	cmp	r3, #0
 8004582:	f040 808c 	bne.w	800469e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d01c      	beq.n	80045c6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800458c:	2208      	movs	r2, #8
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4413      	add	r3, r2
 8004592:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	2b00      	cmp	r3, #0
 800459c:	d013      	beq.n	80045c6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f023 0307 	bic.w	r3, r3, #7
 80045a4:	3308      	adds	r3, #8
 80045a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d009      	beq.n	80045c6 <pvPortMalloc+0x6a>
	__asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	e7fe      	b.n	80045c4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d068      	beq.n	800469e <pvPortMalloc+0x142>
 80045cc:	4b41      	ldr	r3, [pc, #260]	; (80046d4 <pvPortMalloc+0x178>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d863      	bhi.n	800469e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045d6:	4b40      	ldr	r3, [pc, #256]	; (80046d8 <pvPortMalloc+0x17c>)
 80045d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045da:	4b3f      	ldr	r3, [pc, #252]	; (80046d8 <pvPortMalloc+0x17c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045e0:	e004      	b.n	80045ec <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d903      	bls.n	80045fe <pvPortMalloc+0xa2>
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f1      	bne.n	80045e2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045fe:	4b33      	ldr	r3, [pc, #204]	; (80046cc <pvPortMalloc+0x170>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004604:	429a      	cmp	r2, r3
 8004606:	d04a      	beq.n	800469e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2208      	movs	r2, #8
 800460e:	4413      	add	r3, r2
 8004610:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	1ad2      	subs	r2, r2, r3
 8004622:	2308      	movs	r3, #8
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	429a      	cmp	r2, r3
 8004628:	d91e      	bls.n	8004668 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800462a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4413      	add	r3, r2
 8004630:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	2b00      	cmp	r3, #0
 800463a:	d009      	beq.n	8004650 <pvPortMalloc+0xf4>
 800463c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	e7fe      	b.n	800464e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	1ad2      	subs	r2, r2, r3
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004662:	69b8      	ldr	r0, [r7, #24]
 8004664:	f000 f8f6 	bl	8004854 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004668:	4b1a      	ldr	r3, [pc, #104]	; (80046d4 <pvPortMalloc+0x178>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	4a18      	ldr	r2, [pc, #96]	; (80046d4 <pvPortMalloc+0x178>)
 8004674:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004676:	4b17      	ldr	r3, [pc, #92]	; (80046d4 <pvPortMalloc+0x178>)
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	4b18      	ldr	r3, [pc, #96]	; (80046dc <pvPortMalloc+0x180>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d203      	bcs.n	800468a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004682:	4b14      	ldr	r3, [pc, #80]	; (80046d4 <pvPortMalloc+0x178>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a15      	ldr	r2, [pc, #84]	; (80046dc <pvPortMalloc+0x180>)
 8004688:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	4b10      	ldr	r3, [pc, #64]	; (80046d0 <pvPortMalloc+0x174>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	431a      	orrs	r2, r3
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800469e:	f7ff faaf 	bl	8003c00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d009      	beq.n	80046c0 <pvPortMalloc+0x164>
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	e7fe      	b.n	80046be <pvPortMalloc+0x162>
	return pvReturn;
 80046c0:	69fb      	ldr	r3, [r7, #28]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3728      	adds	r7, #40	; 0x28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	200011f0 	.word	0x200011f0
 80046d0:	200011fc 	.word	0x200011fc
 80046d4:	200011f4 	.word	0x200011f4
 80046d8:	200011e8 	.word	0x200011e8
 80046dc:	200011f8 	.word	0x200011f8

080046e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d046      	beq.n	8004780 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80046f2:	2308      	movs	r3, #8
 80046f4:	425b      	negs	r3, r3
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4413      	add	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	4b20      	ldr	r3, [pc, #128]	; (8004788 <vPortFree+0xa8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4013      	ands	r3, r2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d109      	bne.n	8004722 <vPortFree+0x42>
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	e7fe      	b.n	8004720 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d009      	beq.n	800473e <vPortFree+0x5e>
 800472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	60bb      	str	r3, [r7, #8]
 800473c:	e7fe      	b.n	800473c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	4b11      	ldr	r3, [pc, #68]	; (8004788 <vPortFree+0xa8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4013      	ands	r3, r2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d019      	beq.n	8004780 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d115      	bne.n	8004780 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <vPortFree+0xa8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	43db      	mvns	r3, r3
 800475e:	401a      	ands	r2, r3
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004764:	f7ff fa3e 	bl	8003be4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	4b07      	ldr	r3, [pc, #28]	; (800478c <vPortFree+0xac>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4413      	add	r3, r2
 8004772:	4a06      	ldr	r2, [pc, #24]	; (800478c <vPortFree+0xac>)
 8004774:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004776:	6938      	ldr	r0, [r7, #16]
 8004778:	f000 f86c 	bl	8004854 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800477c:	f7ff fa40 	bl	8003c00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004780:	bf00      	nop
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	200011fc 	.word	0x200011fc
 800478c:	200011f4 	.word	0x200011f4

08004790 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004796:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800479a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800479c:	4b27      	ldr	r3, [pc, #156]	; (800483c <prvHeapInit+0xac>)
 800479e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00c      	beq.n	80047c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3307      	adds	r3, #7
 80047ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0307 	bic.w	r3, r3, #7
 80047b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	4a1f      	ldr	r2, [pc, #124]	; (800483c <prvHeapInit+0xac>)
 80047c0:	4413      	add	r3, r2
 80047c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047c8:	4a1d      	ldr	r2, [pc, #116]	; (8004840 <prvHeapInit+0xb0>)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047ce:	4b1c      	ldr	r3, [pc, #112]	; (8004840 <prvHeapInit+0xb0>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	4413      	add	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80047dc:	2208      	movs	r2, #8
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0307 	bic.w	r3, r3, #7
 80047ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4a15      	ldr	r2, [pc, #84]	; (8004844 <prvHeapInit+0xb4>)
 80047f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80047f2:	4b14      	ldr	r3, [pc, #80]	; (8004844 <prvHeapInit+0xb4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2200      	movs	r2, #0
 80047f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80047fa:	4b12      	ldr	r3, [pc, #72]	; (8004844 <prvHeapInit+0xb4>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	1ad2      	subs	r2, r2, r3
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004810:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <prvHeapInit+0xb4>)
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	4a0a      	ldr	r2, [pc, #40]	; (8004848 <prvHeapInit+0xb8>)
 800481e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	4a09      	ldr	r2, [pc, #36]	; (800484c <prvHeapInit+0xbc>)
 8004826:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004828:	4b09      	ldr	r3, [pc, #36]	; (8004850 <prvHeapInit+0xc0>)
 800482a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800482e:	601a      	str	r2, [r3, #0]
}
 8004830:	bf00      	nop
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	200005e8 	.word	0x200005e8
 8004840:	200011e8 	.word	0x200011e8
 8004844:	200011f0 	.word	0x200011f0
 8004848:	200011f8 	.word	0x200011f8
 800484c:	200011f4 	.word	0x200011f4
 8004850:	200011fc 	.word	0x200011fc

08004854 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800485c:	4b27      	ldr	r3, [pc, #156]	; (80048fc <prvInsertBlockIntoFreeList+0xa8>)
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	e002      	b.n	8004868 <prvInsertBlockIntoFreeList+0x14>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	429a      	cmp	r2, r3
 8004870:	d8f7      	bhi.n	8004862 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	4413      	add	r3, r2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	d108      	bne.n	8004896 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	441a      	add	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	441a      	add	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d118      	bne.n	80048dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	4b14      	ldr	r3, [pc, #80]	; (8004900 <prvInsertBlockIntoFreeList+0xac>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d00d      	beq.n	80048d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	441a      	add	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	e008      	b.n	80048e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048d2:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <prvInsertBlockIntoFreeList+0xac>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	e003      	b.n	80048e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d002      	beq.n	80048f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048f2:	bf00      	nop
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr
 80048fc:	200011e8 	.word	0x200011e8
 8004900:	200011f0 	.word	0x200011f0

08004904 <Load_Param>:
BP_Status 			Bp_Down;
BP_Status 			Bp_Ok;

/* Private function -----------------------------------------------*/
uint8_t Load_Param()
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
	uint32_t val_param;

	if(ParamExist())
 800490a:	4814      	ldr	r0, [pc, #80]	; (800495c <Load_Param+0x58>)
 800490c:	f7fe fd24 	bl	8003358 <FlashManager_ReadInt32>
 8004910:	4602      	mov	r2, r0
 8004912:	4b13      	ldr	r3, [pc, #76]	; (8004960 <Load_Param+0x5c>)
 8004914:	429a      	cmp	r2, r3
 8004916:	d113      	bne.n	8004940 <Load_Param+0x3c>
	{
		val_param = 	FlashManager_ReadInt32(PARAM_DMX_PARAM);
 8004918:	4812      	ldr	r0, [pc, #72]	; (8004964 <Load_Param+0x60>)
 800491a:	f7fe fd1d 	bl	8003358 <FlashManager_ReadInt32>
 800491e:	6078      	str	r0, [r7, #4]
		Current_Mode = 	(val_param&0xFF000000)>>24;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	0e1b      	lsrs	r3, r3, #24
 8004924:	b2da      	uxtb	r2, r3
 8004926:	4b10      	ldr	r3, [pc, #64]	; (8004968 <Load_Param+0x64>)
 8004928:	701a      	strb	r2, [r3, #0]
		Manu_value = 	(val_param&0x00FF0000)>>16;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	0c1b      	lsrs	r3, r3, #16
 800492e:	b2da      	uxtb	r2, r3
 8004930:	4b0e      	ldr	r3, [pc, #56]	; (800496c <Load_Param+0x68>)
 8004932:	701a      	strb	r2, [r3, #0]
		DMX_Adress = 	(val_param&0x0000FFFF);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	b29a      	uxth	r2, r3
 8004938:	4b0d      	ldr	r3, [pc, #52]	; (8004970 <Load_Param+0x6c>)
 800493a:	801a      	strh	r2, [r3, #0]
		return __TRUE;
 800493c:	2301      	movs	r3, #1
 800493e:	e009      	b.n	8004954 <Load_Param+0x50>
	}
	else
	{
		Current_Mode = MODE_OFF;
 8004940:	4b09      	ldr	r3, [pc, #36]	; (8004968 <Load_Param+0x64>)
 8004942:	2200      	movs	r2, #0
 8004944:	701a      	strb	r2, [r3, #0]
		Manu_value = 100;
 8004946:	4b09      	ldr	r3, [pc, #36]	; (800496c <Load_Param+0x68>)
 8004948:	2264      	movs	r2, #100	; 0x64
 800494a:	701a      	strb	r2, [r3, #0]
		DMX_Adress = 1;
 800494c:	4b08      	ldr	r3, [pc, #32]	; (8004970 <Load_Param+0x6c>)
 800494e:	2201      	movs	r2, #1
 8004950:	801a      	strh	r2, [r3, #0]
		return __FALSE;
 8004952:	2300      	movs	r3, #0
	}
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	0800f800 	.word	0x0800f800
 8004960:	55aa00ff 	.word	0x55aa00ff
 8004964:	0800f804 	.word	0x0800f804
 8004968:	20001904 	.word	0x20001904
 800496c:	200018d8 	.word	0x200018d8
 8004970:	20001944 	.word	0x20001944

08004974 <Write_Param>:

uint8_t Write_Param()
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
	uint32_t data[2];
	data[0] = PARAM_EXIST_CODE;
 800497a:	4b10      	ldr	r3, [pc, #64]	; (80049bc <Write_Param+0x48>)
 800497c:	603b      	str	r3, [r7, #0]
	data[1] = 0x00;
 800497e:	2300      	movs	r3, #0
 8004980:	607b      	str	r3, [r7, #4]
	data[1] |= (Current_Mode<<24);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a0e      	ldr	r2, [pc, #56]	; (80049c0 <Write_Param+0x4c>)
 8004986:	7812      	ldrb	r2, [r2, #0]
 8004988:	0612      	lsls	r2, r2, #24
 800498a:	4313      	orrs	r3, r2
 800498c:	607b      	str	r3, [r7, #4]
	data[1] |= (Manu_value<<16);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a0c      	ldr	r2, [pc, #48]	; (80049c4 <Write_Param+0x50>)
 8004992:	7812      	ldrb	r2, [r2, #0]
 8004994:	0412      	lsls	r2, r2, #16
 8004996:	4313      	orrs	r3, r2
 8004998:	607b      	str	r3, [r7, #4]
	data[1] |= (DMX_Adress);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a0a      	ldr	r2, [pc, #40]	; (80049c8 <Write_Param+0x54>)
 800499e:	8812      	ldrh	r2, [r2, #0]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	607b      	str	r3, [r7, #4]

	FlashManager_WriteMulti(PARAM_EXIST_ADDRESS,2,data);
 80049a4:	463b      	mov	r3, r7
 80049a6:	461a      	mov	r2, r3
 80049a8:	2102      	movs	r1, #2
 80049aa:	4808      	ldr	r0, [pc, #32]	; (80049cc <Write_Param+0x58>)
 80049ac:	f7fe fc5e 	bl	800326c <FlashManager_WriteMulti>
}
 80049b0:	bf00      	nop
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	55aa00ff 	.word	0x55aa00ff
 80049c0:	20001904 	.word	0x20001904
 80049c4:	200018d8 	.word	0x200018d8
 80049c8:	20001944 	.word	0x20001944
 80049cc:	0800f800 	.word	0x0800f800

080049d0 <Update_Display>:

void Update_Display()
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
	char Str_percent[]="000";
 80049d6:	4b61      	ldr	r3, [pc, #388]	; (8004b5c <Update_Display+0x18c>)
 80049d8:	60bb      	str	r3, [r7, #8]
    char Str_dmx[]="000";
 80049da:	4b60      	ldr	r3, [pc, #384]	; (8004b5c <Update_Display+0x18c>)
 80049dc:	607b      	str	r3, [r7, #4]
    char Str_add[]="000";
 80049de:	4b5f      	ldr	r3, [pc, #380]	; (8004b5c <Update_Display+0x18c>)
 80049e0:	603b      	str	r3, [r7, #0]
    uint8_t percent_value;

    SSD1306_Clear();
 80049e2:	f7fb fdca 	bl	800057a <SSD1306_Clear>

    if(Current_Mode == MODE_OFF)			//OFF
 80049e6:	4b5e      	ldr	r3, [pc, #376]	; (8004b60 <Update_Display+0x190>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d109      	bne.n	8004a02 <Update_Display+0x32>
    {
    	SSD1306_GotoXY (40,0);
 80049ee:	2100      	movs	r1, #0
 80049f0:	2028      	movs	r0, #40	; 0x28
 80049f2:	f7fb fd07 	bl	8000404 <SSD1306_GotoXY>
    	SSD1306_Puts ("OFF", &Font_16x26, 1);
 80049f6:	2201      	movs	r2, #1
 80049f8:	495a      	ldr	r1, [pc, #360]	; (8004b64 <Update_Display+0x194>)
 80049fa:	485b      	ldr	r0, [pc, #364]	; (8004b68 <Update_Display+0x198>)
 80049fc:	f7fb fd98 	bl	8000530 <SSD1306_Puts>
 8004a00:	e0a5      	b.n	8004b4e <Update_Display+0x17e>
    }
    else if(Current_Mode == MODE_MANU)		//MANU
 8004a02:	4b57      	ldr	r3, [pc, #348]	; (8004b60 <Update_Display+0x190>)
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d127      	bne.n	8004a5a <Update_Display+0x8a>
    {
    	percent_value = Manu_value;
 8004a0a:	4b58      	ldr	r3, [pc, #352]	; (8004b6c <Update_Display+0x19c>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	73fb      	strb	r3, [r7, #15]
    	sprintf(Str_percent,"%03d",percent_value);
 8004a10:	7bfa      	ldrb	r2, [r7, #15]
 8004a12:	f107 0308 	add.w	r3, r7, #8
 8004a16:	4956      	ldr	r1, [pc, #344]	; (8004b70 <Update_Display+0x1a0>)
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f001 fb09 	bl	8006030 <siprintf>
    	SSD1306_GotoXY (25,0);
 8004a1e:	2100      	movs	r1, #0
 8004a20:	2019      	movs	r0, #25
 8004a22:	f7fb fcef 	bl	8000404 <SSD1306_GotoXY>
    	SSD1306_Puts (Str_percent, &Font_16x26, 1);
 8004a26:	f107 0308 	add.w	r3, r7, #8
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	494d      	ldr	r1, [pc, #308]	; (8004b64 <Update_Display+0x194>)
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fb fd7e 	bl	8000530 <SSD1306_Puts>
    	SSD1306_GotoXY (74,0);
 8004a34:	2100      	movs	r1, #0
 8004a36:	204a      	movs	r0, #74	; 0x4a
 8004a38:	f7fb fce4 	bl	8000404 <SSD1306_GotoXY>
    	SSD1306_Puts ("%", &Font_16x26, 1);
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	4949      	ldr	r1, [pc, #292]	; (8004b64 <Update_Display+0x194>)
 8004a40:	484c      	ldr	r0, [pc, #304]	; (8004b74 <Update_Display+0x1a4>)
 8004a42:	f7fb fd75 	bl	8000530 <SSD1306_Puts>
    	SSD1306_GotoXY (0, 45);
 8004a46:	212d      	movs	r1, #45	; 0x2d
 8004a48:	2000      	movs	r0, #0
 8004a4a:	f7fb fcdb 	bl	8000404 <SSD1306_GotoXY>
    	SSD1306_Puts ("MODE:MANUAL", &Font_11x18, 1);
 8004a4e:	2201      	movs	r2, #1
 8004a50:	4949      	ldr	r1, [pc, #292]	; (8004b78 <Update_Display+0x1a8>)
 8004a52:	484a      	ldr	r0, [pc, #296]	; (8004b7c <Update_Display+0x1ac>)
 8004a54:	f7fb fd6c 	bl	8000530 <SSD1306_Puts>
 8004a58:	e079      	b.n	8004b4e <Update_Display+0x17e>
    }
    else								//DMX
    {
    	percent_value = (DMX_values[0]*100/255);
 8004a5a:	4b49      	ldr	r3, [pc, #292]	; (8004b80 <Update_Display+0x1b0>)
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	2364      	movs	r3, #100	; 0x64
 8004a62:	fb03 f302 	mul.w	r3, r3, r2
 8004a66:	4a47      	ldr	r2, [pc, #284]	; (8004b84 <Update_Display+0x1b4>)
 8004a68:	fb82 1203 	smull	r1, r2, r2, r3
 8004a6c:	441a      	add	r2, r3
 8004a6e:	11d2      	asrs	r2, r2, #7
 8004a70:	17db      	asrs	r3, r3, #31
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	73fb      	strb	r3, [r7, #15]
    	sprintf(Str_add,"%03d",DMX_Adress);
 8004a76:	4b44      	ldr	r3, [pc, #272]	; (8004b88 <Update_Display+0x1b8>)
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	463b      	mov	r3, r7
 8004a7e:	493c      	ldr	r1, [pc, #240]	; (8004b70 <Update_Display+0x1a0>)
 8004a80:	4618      	mov	r0, r3
 8004a82:	f001 fad5 	bl	8006030 <siprintf>
    	if(DMX_signal_OK)
 8004a86:	4b41      	ldr	r3, [pc, #260]	; (8004b8c <Update_Display+0x1bc>)
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d018      	beq.n	8004ac0 <Update_Display+0xf0>
		{
			SSD1306_GotoXY (0, 45);
 8004a8e:	212d      	movs	r1, #45	; 0x2d
 8004a90:	2000      	movs	r0, #0
 8004a92:	f7fb fcb7 	bl	8000404 <SSD1306_GotoXY>
			SSD1306_Puts ("SIGNAL :OK", &Font_11x18, 1);
 8004a96:	2201      	movs	r2, #1
 8004a98:	4937      	ldr	r1, [pc, #220]	; (8004b78 <Update_Display+0x1a8>)
 8004a9a:	483d      	ldr	r0, [pc, #244]	; (8004b90 <Update_Display+0x1c0>)
 8004a9c:	f7fb fd48 	bl	8000530 <SSD1306_Puts>
			sprintf(Str_percent,"%03d",percent_value);
 8004aa0:	7bfa      	ldrb	r2, [r7, #15]
 8004aa2:	f107 0308 	add.w	r3, r7, #8
 8004aa6:	4932      	ldr	r1, [pc, #200]	; (8004b70 <Update_Display+0x1a0>)
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f001 fac1 	bl	8006030 <siprintf>
			sprintf(Str_dmx,"%03d",DMX_values[0]);
 8004aae:	4b34      	ldr	r3, [pc, #208]	; (8004b80 <Update_Display+0x1b0>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	1d3b      	adds	r3, r7, #4
 8004ab6:	492e      	ldr	r1, [pc, #184]	; (8004b70 <Update_Display+0x1a0>)
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f001 fab9 	bl	8006030 <siprintf>
 8004abe:	e00c      	b.n	8004ada <Update_Display+0x10a>
		}
		else
		{
			SSD1306_GotoXY (0, 45);
 8004ac0:	212d      	movs	r1, #45	; 0x2d
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	f7fb fc9e 	bl	8000404 <SSD1306_GotoXY>
			SSD1306_Puts ("SIGNAL :ERR", &Font_11x18, 1);
 8004ac8:	2201      	movs	r2, #1
 8004aca:	492b      	ldr	r1, [pc, #172]	; (8004b78 <Update_Display+0x1a8>)
 8004acc:	4831      	ldr	r0, [pc, #196]	; (8004b94 <Update_Display+0x1c4>)
 8004ace:	f7fb fd2f 	bl	8000530 <SSD1306_Puts>
			sprintf(Str_percent,"---");
 8004ad2:	4b31      	ldr	r3, [pc, #196]	; (8004b98 <Update_Display+0x1c8>)
 8004ad4:	60bb      	str	r3, [r7, #8]
			sprintf(Str_dmx,"---");
 8004ad6:	4b30      	ldr	r3, [pc, #192]	; (8004b98 <Update_Display+0x1c8>)
 8004ad8:	607b      	str	r3, [r7, #4]
		}
    	SSD1306_GotoXY (25,0);
 8004ada:	2100      	movs	r1, #0
 8004adc:	2019      	movs	r0, #25
 8004ade:	f7fb fc91 	bl	8000404 <SSD1306_GotoXY>
		SSD1306_Puts (Str_percent, &Font_16x26, 1);
 8004ae2:	f107 0308 	add.w	r3, r7, #8
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	491e      	ldr	r1, [pc, #120]	; (8004b64 <Update_Display+0x194>)
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fb fd20 	bl	8000530 <SSD1306_Puts>
		SSD1306_GotoXY (74,0);
 8004af0:	2100      	movs	r1, #0
 8004af2:	204a      	movs	r0, #74	; 0x4a
 8004af4:	f7fb fc86 	bl	8000404 <SSD1306_GotoXY>
		SSD1306_Puts ("%", &Font_16x26, 1);
 8004af8:	2201      	movs	r2, #1
 8004afa:	491a      	ldr	r1, [pc, #104]	; (8004b64 <Update_Display+0x194>)
 8004afc:	481d      	ldr	r0, [pc, #116]	; (8004b74 <Update_Display+0x1a4>)
 8004afe:	f7fb fd17 	bl	8000530 <SSD1306_Puts>
		SSD1306_GotoXY (0, 27);
 8004b02:	211b      	movs	r1, #27
 8004b04:	2000      	movs	r0, #0
 8004b06:	f7fb fc7d 	bl	8000404 <SSD1306_GotoXY>
		SSD1306_Puts ("DMX ADD:", &Font_11x18, 1);
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	491a      	ldr	r1, [pc, #104]	; (8004b78 <Update_Display+0x1a8>)
 8004b0e:	4823      	ldr	r0, [pc, #140]	; (8004b9c <Update_Display+0x1cc>)
 8004b10:	f7fb fd0e 	bl	8000530 <SSD1306_Puts>
		SSD1306_GotoXY (89, 27);
 8004b14:	211b      	movs	r1, #27
 8004b16:	2059      	movs	r0, #89	; 0x59
 8004b18:	f7fb fc74 	bl	8000404 <SSD1306_GotoXY>
		SSD1306_Puts (Str_add, &Font_11x18, 1);
 8004b1c:	463b      	mov	r3, r7
 8004b1e:	2201      	movs	r2, #1
 8004b20:	4915      	ldr	r1, [pc, #84]	; (8004b78 <Update_Display+0x1a8>)
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fb fd04 	bl	8000530 <SSD1306_Puts>
		SSD1306_GotoXY (105, 0);
 8004b28:	2100      	movs	r1, #0
 8004b2a:	2069      	movs	r0, #105	; 0x69
 8004b2c:	f7fb fc6a 	bl	8000404 <SSD1306_GotoXY>
		SSD1306_Puts ("DMX", &Font_7x10, 1);
 8004b30:	2201      	movs	r2, #1
 8004b32:	491b      	ldr	r1, [pc, #108]	; (8004ba0 <Update_Display+0x1d0>)
 8004b34:	481b      	ldr	r0, [pc, #108]	; (8004ba4 <Update_Display+0x1d4>)
 8004b36:	f7fb fcfb 	bl	8000530 <SSD1306_Puts>
		SSD1306_GotoXY (105, 10);
 8004b3a:	210a      	movs	r1, #10
 8004b3c:	2069      	movs	r0, #105	; 0x69
 8004b3e:	f7fb fc61 	bl	8000404 <SSD1306_GotoXY>
		SSD1306_Puts (Str_dmx, &Font_7x10, 1);
 8004b42:	1d3b      	adds	r3, r7, #4
 8004b44:	2201      	movs	r2, #1
 8004b46:	4916      	ldr	r1, [pc, #88]	; (8004ba0 <Update_Display+0x1d0>)
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fb fcf1 	bl	8000530 <SSD1306_Puts>
    }
	SSD1306_UpdateScreen(); //display
 8004b4e:	f7fb fbb5 	bl	80002bc <SSD1306_UpdateScreen>
}
 8004b52:	bf00      	nop
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	00303030 	.word	0x00303030
 8004b60:	20001904 	.word	0x20001904
 8004b64:	20000010 	.word	0x20000010
 8004b68:	08006874 	.word	0x08006874
 8004b6c:	200018d8 	.word	0x200018d8
 8004b70:	08006878 	.word	0x08006878
 8004b74:	08006880 	.word	0x08006880
 8004b78:	20000008 	.word	0x20000008
 8004b7c:	08006884 	.word	0x08006884
 8004b80:	20001934 	.word	0x20001934
 8004b84:	80808081 	.word	0x80808081
 8004b88:	20001944 	.word	0x20001944
 8004b8c:	200018d9 	.word	0x200018d9
 8004b90:	08006890 	.word	0x08006890
 8004b94:	0800689c 	.word	0x0800689c
 8004b98:	002d2d2d 	.word	0x002d2d2d
 8004b9c:	080068a8 	.word	0x080068a8
 8004ba0:	20000000 	.word	0x20000000
 8004ba4:	080068b4 	.word	0x080068b4

08004ba8 <Manage_Button>:

void Manage_Button()
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
	static uint32_t time_BpUp=0;
	static uint32_t time_BpDown=0;
	static uint32_t time_BpOk=0;

	//UP
	if(!HAL_GPIO_ReadPin(T1_GPIO_Port, T1_Pin))
 8004bac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004bb0:	484a      	ldr	r0, [pc, #296]	; (8004cdc <Manage_Button+0x134>)
 8004bb2:	f7fc fcd7 	bl	8001564 <HAL_GPIO_ReadPin>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d126      	bne.n	8004c0a <Manage_Button+0x62>
	{
		if(Bp_Up==BP_OFF)
 8004bbc:	4b48      	ldr	r3, [pc, #288]	; (8004ce0 <Manage_Button+0x138>)
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d108      	bne.n	8004bd6 <Manage_Button+0x2e>
		{
			Bp_Up=BP_CLICK;
 8004bc4:	4b46      	ldr	r3, [pc, #280]	; (8004ce0 <Manage_Button+0x138>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	701a      	strb	r2, [r3, #0]
			time_BpUp = HAL_GetTick();
 8004bca:	f7fb fdd9 	bl	8000780 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	4b44      	ldr	r3, [pc, #272]	; (8004ce4 <Manage_Button+0x13c>)
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	e01c      	b.n	8004c10 <Manage_Button+0x68>
		}
		else if((HAL_GetTick() > time_BpUp+TIME_LONG_BP) && Bp_Up==BP_IDLE)
 8004bd6:	f7fb fdd3 	bl	8000780 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	4b41      	ldr	r3, [pc, #260]	; (8004ce4 <Manage_Button+0x13c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d90c      	bls.n	8004c02 <Manage_Button+0x5a>
 8004be8:	4b3d      	ldr	r3, [pc, #244]	; (8004ce0 <Manage_Button+0x138>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	d108      	bne.n	8004c02 <Manage_Button+0x5a>
		{
			time_BpUp = HAL_GetTick();
 8004bf0:	f7fb fdc6 	bl	8000780 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	4b3b      	ldr	r3, [pc, #236]	; (8004ce4 <Manage_Button+0x13c>)
 8004bf8:	601a      	str	r2, [r3, #0]
			Bp_Up=BP_1s;
 8004bfa:	4b39      	ldr	r3, [pc, #228]	; (8004ce0 <Manage_Button+0x138>)
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	701a      	strb	r2, [r3, #0]
 8004c00:	e006      	b.n	8004c10 <Manage_Button+0x68>
		}
		else
			Bp_Up = BP_IDLE;
 8004c02:	4b37      	ldr	r3, [pc, #220]	; (8004ce0 <Manage_Button+0x138>)
 8004c04:	2203      	movs	r2, #3
 8004c06:	701a      	strb	r2, [r3, #0]
 8004c08:	e002      	b.n	8004c10 <Manage_Button+0x68>
	}
	else
		Bp_Up=BP_OFF;
 8004c0a:	4b35      	ldr	r3, [pc, #212]	; (8004ce0 <Manage_Button+0x138>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]

	//DOWN
	if(!HAL_GPIO_ReadPin(T3_GPIO_Port, T3_Pin))
 8004c10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c14:	4834      	ldr	r0, [pc, #208]	; (8004ce8 <Manage_Button+0x140>)
 8004c16:	f7fc fca5 	bl	8001564 <HAL_GPIO_ReadPin>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d126      	bne.n	8004c6e <Manage_Button+0xc6>
	{
		if(Bp_Down==BP_OFF)
 8004c20:	4b32      	ldr	r3, [pc, #200]	; (8004cec <Manage_Button+0x144>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d108      	bne.n	8004c3a <Manage_Button+0x92>
		{
			Bp_Down=BP_CLICK;
 8004c28:	4b30      	ldr	r3, [pc, #192]	; (8004cec <Manage_Button+0x144>)
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	701a      	strb	r2, [r3, #0]
			time_BpDown = HAL_GetTick();
 8004c2e:	f7fb fda7 	bl	8000780 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	4b2e      	ldr	r3, [pc, #184]	; (8004cf0 <Manage_Button+0x148>)
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	e01c      	b.n	8004c74 <Manage_Button+0xcc>
		}
		else if((HAL_GetTick() > time_BpDown+TIME_LONG_BP) && Bp_Down==BP_IDLE)
 8004c3a:	f7fb fda1 	bl	8000780 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	4b2b      	ldr	r3, [pc, #172]	; (8004cf0 <Manage_Button+0x148>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d90c      	bls.n	8004c66 <Manage_Button+0xbe>
 8004c4c:	4b27      	ldr	r3, [pc, #156]	; (8004cec <Manage_Button+0x144>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b03      	cmp	r3, #3
 8004c52:	d108      	bne.n	8004c66 <Manage_Button+0xbe>
		{
			time_BpDown = HAL_GetTick();
 8004c54:	f7fb fd94 	bl	8000780 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	4b25      	ldr	r3, [pc, #148]	; (8004cf0 <Manage_Button+0x148>)
 8004c5c:	601a      	str	r2, [r3, #0]
			Bp_Down=BP_1s;
 8004c5e:	4b23      	ldr	r3, [pc, #140]	; (8004cec <Manage_Button+0x144>)
 8004c60:	2202      	movs	r2, #2
 8004c62:	701a      	strb	r2, [r3, #0]
 8004c64:	e006      	b.n	8004c74 <Manage_Button+0xcc>
		}
		else
			Bp_Down = BP_IDLE;
 8004c66:	4b21      	ldr	r3, [pc, #132]	; (8004cec <Manage_Button+0x144>)
 8004c68:	2203      	movs	r2, #3
 8004c6a:	701a      	strb	r2, [r3, #0]
 8004c6c:	e002      	b.n	8004c74 <Manage_Button+0xcc>
	}
	else
		Bp_Down=BP_OFF;
 8004c6e:	4b1f      	ldr	r3, [pc, #124]	; (8004cec <Manage_Button+0x144>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]

	//OK
	if(!HAL_GPIO_ReadPin(T2_GPIO_Port, T2_Pin))
 8004c74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c78:	481b      	ldr	r0, [pc, #108]	; (8004ce8 <Manage_Button+0x140>)
 8004c7a:	f7fc fc73 	bl	8001564 <HAL_GPIO_ReadPin>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d126      	bne.n	8004cd2 <Manage_Button+0x12a>
	{
		if(Bp_Ok==BP_OFF)
 8004c84:	4b1b      	ldr	r3, [pc, #108]	; (8004cf4 <Manage_Button+0x14c>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d108      	bne.n	8004c9e <Manage_Button+0xf6>
		{
			Bp_Ok=BP_CLICK;
 8004c8c:	4b19      	ldr	r3, [pc, #100]	; (8004cf4 <Manage_Button+0x14c>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	701a      	strb	r2, [r3, #0]
			time_BpOk = HAL_GetTick();
 8004c92:	f7fb fd75 	bl	8000780 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	4b17      	ldr	r3, [pc, #92]	; (8004cf8 <Manage_Button+0x150>)
 8004c9a:	601a      	str	r2, [r3, #0]
		else
			Bp_Ok = BP_IDLE;
	}
	else
		Bp_Ok=BP_OFF;
}
 8004c9c:	e01c      	b.n	8004cd8 <Manage_Button+0x130>
		else if((HAL_GetTick()>time_BpOk+TIME_LONG_BP) && Bp_Ok==BP_IDLE)
 8004c9e:	f7fb fd6f 	bl	8000780 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	4b14      	ldr	r3, [pc, #80]	; (8004cf8 <Manage_Button+0x150>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d90c      	bls.n	8004cca <Manage_Button+0x122>
 8004cb0:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <Manage_Button+0x14c>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b03      	cmp	r3, #3
 8004cb6:	d108      	bne.n	8004cca <Manage_Button+0x122>
			time_BpOk = HAL_GetTick();
 8004cb8:	f7fb fd62 	bl	8000780 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	4b0e      	ldr	r3, [pc, #56]	; (8004cf8 <Manage_Button+0x150>)
 8004cc0:	601a      	str	r2, [r3, #0]
			Bp_Ok=BP_1s;
 8004cc2:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <Manage_Button+0x14c>)
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	701a      	strb	r2, [r3, #0]
}
 8004cc8:	e006      	b.n	8004cd8 <Manage_Button+0x130>
			Bp_Ok = BP_IDLE;
 8004cca:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <Manage_Button+0x14c>)
 8004ccc:	2203      	movs	r2, #3
 8004cce:	701a      	strb	r2, [r3, #0]
}
 8004cd0:	e002      	b.n	8004cd8 <Manage_Button+0x130>
		Bp_Ok=BP_OFF;
 8004cd2:	4b08      	ldr	r3, [pc, #32]	; (8004cf4 <Manage_Button+0x14c>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	701a      	strb	r2, [r3, #0]
}
 8004cd8:	bf00      	nop
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40011000 	.word	0x40011000
 8004ce0:	2000193e 	.word	0x2000193e
 8004ce4:	20001200 	.word	0x20001200
 8004ce8:	40010c00 	.word	0x40010c00
 8004cec:	200018e8 	.word	0x200018e8
 8004cf0:	20001204 	.word	0x20001204
 8004cf4:	20001920 	.word	0x20001920
 8004cf8:	20001208 	.word	0x20001208

08004cfc <AppLEDTask>:

void AppLEDTask(void const * argument)
{
 8004cfc:	b590      	push	{r4, r7, lr}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		osDelay(TASK_DELAY_LED);
 8004d04:	2032      	movs	r0, #50	; 0x32
 8004d06:	f7fe fc91 	bl	800362c <osDelay>

		if(Current_Mode == MODE_OFF)
 8004d0a:	4b25      	ldr	r3, [pc, #148]	; (8004da0 <AppLEDTask+0xa4>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d108      	bne.n	8004d24 <AppLEDTask+0x28>
			PWM_SetDuty(LED1_pwmtimer,LED1_PWMchannel,0);
 8004d12:	4b24      	ldr	r3, [pc, #144]	; (8004da4 <AppLEDTask+0xa8>)
 8004d14:	6818      	ldr	r0, [r3, #0]
 8004d16:	4b24      	ldr	r3, [pc, #144]	; (8004da8 <AppLEDTask+0xac>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	f7fb fcaf 	bl	8000680 <PWM_SetDuty>
 8004d22:	e7ef      	b.n	8004d04 <AppLEDTask+0x8>
		else if(Current_Mode == MODE_MANU)
 8004d24:	4b1e      	ldr	r3, [pc, #120]	; (8004da0 <AppLEDTask+0xa4>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d112      	bne.n	8004d52 <AppLEDTask+0x56>
			PWM_SetDuty(LED1_pwmtimer,LED1_PWMchannel,(uint32_t)Manu_value*255/100);
 8004d2c:	4b1d      	ldr	r3, [pc, #116]	; (8004da4 <AppLEDTask+0xa8>)
 8004d2e:	6818      	ldr	r0, [r3, #0]
 8004d30:	4b1d      	ldr	r3, [pc, #116]	; (8004da8 <AppLEDTask+0xac>)
 8004d32:	6819      	ldr	r1, [r3, #0]
 8004d34:	4b1d      	ldr	r3, [pc, #116]	; (8004dac <AppLEDTask+0xb0>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	021b      	lsls	r3, r3, #8
 8004d3e:	1a9b      	subs	r3, r3, r2
 8004d40:	4a1b      	ldr	r2, [pc, #108]	; (8004db0 <AppLEDTask+0xb4>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f7fb fc98 	bl	8000680 <PWM_SetDuty>
 8004d50:	e7d8      	b.n	8004d04 <AppLEDTask+0x8>
		else
		{
			DMX_values[0] = Protocol_DMX_GetValue(1);									//CHANNEL 1
 8004d52:	2001      	movs	r0, #1
 8004d54:	f7fe fbde 	bl	8003514 <Protocol_DMX_GetValue>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	4b15      	ldr	r3, [pc, #84]	; (8004db4 <AppLEDTask+0xb8>)
 8004d5e:	701a      	strb	r2, [r3, #0]
			if(HAL_GetTick()>Protocol_DMX_GetLastTickFrame()+TIMOUT_DMX_SIGNAL)
 8004d60:	f7fb fd0e 	bl	8000780 <HAL_GetTick>
 8004d64:	4604      	mov	r4, r0
 8004d66:	f7fe fbed 	bl	8003544 <Protocol_DMX_GetLastTickFrame>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8004d70:	429c      	cmp	r4, r3
 8004d72:	d906      	bls.n	8004d82 <AppLEDTask+0x86>
			{
				DMX_values[0]=0;				//OFF LED if no signal
 8004d74:	4b0f      	ldr	r3, [pc, #60]	; (8004db4 <AppLEDTask+0xb8>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	701a      	strb	r2, [r3, #0]
				DMX_signal_OK = __FALSE;
 8004d7a:	4b0f      	ldr	r3, [pc, #60]	; (8004db8 <AppLEDTask+0xbc>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	701a      	strb	r2, [r3, #0]
 8004d80:	e002      	b.n	8004d88 <AppLEDTask+0x8c>
			}
			else
			{
				DMX_signal_OK = __TRUE;
 8004d82:	4b0d      	ldr	r3, [pc, #52]	; (8004db8 <AppLEDTask+0xbc>)
 8004d84:	2201      	movs	r2, #1
 8004d86:	701a      	strb	r2, [r3, #0]
			}
			PWM_SetDuty(LED1_pwmtimer,LED1_PWMchannel,(uint32_t)DMX_values[0]);
 8004d88:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <AppLEDTask+0xa8>)
 8004d8a:	6818      	ldr	r0, [r3, #0]
 8004d8c:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <AppLEDTask+0xac>)
 8004d8e:	6819      	ldr	r1, [r3, #0]
 8004d90:	4b08      	ldr	r3, [pc, #32]	; (8004db4 <AppLEDTask+0xb8>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	461a      	mov	r2, r3
 8004d98:	f7fb fc72 	bl	8000680 <PWM_SetDuty>
		osDelay(TASK_DELAY_LED);
 8004d9c:	e7b2      	b.n	8004d04 <AppLEDTask+0x8>
 8004d9e:	bf00      	nop
 8004da0:	20001904 	.word	0x20001904
 8004da4:	200018fc 	.word	0x200018fc
 8004da8:	200018d4 	.word	0x200018d4
 8004dac:	200018d8 	.word	0x200018d8
 8004db0:	51eb851f 	.word	0x51eb851f
 8004db4:	20001934 	.word	0x20001934
 8004db8:	200018d9 	.word	0x200018d9

08004dbc <AppIHMTask>:
		}
	}
}

void AppIHMTask(void const * argument)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
	uint32_t cpt_refresh=0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	617b      	str	r3, [r7, #20]
	uint32_t tick_save_param;
	uint32_t param_changed = __FALSE;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		osDelay(TASK_DELAY_IHM);
 8004dcc:	2032      	movs	r0, #50	; 0x32
 8004dce:	f7fe fc2d 	bl	800362c <osDelay>

		cpt_refresh++;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	617b      	str	r3, [r7, #20]
		if(cpt_refresh>=REFRESH_DISPLAY)
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d903      	bls.n	8004de6 <AppIHMTask+0x2a>
		{
			Update_Display();
 8004dde:	f7ff fdf7 	bl	80049d0 <Update_Display>
			cpt_refresh=0;
 8004de2:	2300      	movs	r3, #0
 8004de4:	617b      	str	r3, [r7, #20]
		}

		Manage_Button();
 8004de6:	f7ff fedf 	bl	8004ba8 <Manage_Button>

		if(Bp_Ok == BP_CLICK)
 8004dea:	4b81      	ldr	r3, [pc, #516]	; (8004ff0 <AppIHMTask+0x234>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d117      	bne.n	8004e22 <AppIHMTask+0x66>
		{
			if(Current_Mode==MODE_OFF)
 8004df2:	4b80      	ldr	r3, [pc, #512]	; (8004ff4 <AppIHMTask+0x238>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d103      	bne.n	8004e02 <AppIHMTask+0x46>
				Current_Mode=MODE_MANU;
 8004dfa:	4b7e      	ldr	r3, [pc, #504]	; (8004ff4 <AppIHMTask+0x238>)
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	701a      	strb	r2, [r3, #0]
 8004e00:	e00a      	b.n	8004e18 <AppIHMTask+0x5c>
			else if(Current_Mode==MODE_MANU)
 8004e02:	4b7c      	ldr	r3, [pc, #496]	; (8004ff4 <AppIHMTask+0x238>)
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d103      	bne.n	8004e12 <AppIHMTask+0x56>
				Current_Mode=MODE_DMX;
 8004e0a:	4b7a      	ldr	r3, [pc, #488]	; (8004ff4 <AppIHMTask+0x238>)
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	701a      	strb	r2, [r3, #0]
 8004e10:	e002      	b.n	8004e18 <AppIHMTask+0x5c>
			else
				Current_Mode=MODE_OFF;
 8004e12:	4b78      	ldr	r3, [pc, #480]	; (8004ff4 <AppIHMTask+0x238>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	701a      	strb	r2, [r3, #0]

			param_changed = __TRUE;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	60fb      	str	r3, [r7, #12]
			tick_save_param = HAL_GetTick();
 8004e1c:	f7fb fcb0 	bl	8000780 <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]
		}

		if(Current_Mode==MODE_MANU)
 8004e22:	4b74      	ldr	r3, [pc, #464]	; (8004ff4 <AppIHMTask+0x238>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d153      	bne.n	8004ed2 <AppIHMTask+0x116>
		{
			if(Bp_Up == BP_CLICK)
 8004e2a:	4b73      	ldr	r3, [pc, #460]	; (8004ff8 <AppIHMTask+0x23c>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d10e      	bne.n	8004e50 <AppIHMTask+0x94>
			{
				if(Manu_value<100)
 8004e32:	4b72      	ldr	r3, [pc, #456]	; (8004ffc <AppIHMTask+0x240>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2b63      	cmp	r3, #99	; 0x63
 8004e38:	d805      	bhi.n	8004e46 <AppIHMTask+0x8a>
					Manu_value++;
 8004e3a:	4b70      	ldr	r3, [pc, #448]	; (8004ffc <AppIHMTask+0x240>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	4b6e      	ldr	r3, [pc, #440]	; (8004ffc <AppIHMTask+0x240>)
 8004e44:	701a      	strb	r2, [r3, #0]
				param_changed = __TRUE;
 8004e46:	2301      	movs	r3, #1
 8004e48:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 8004e4a:	f7fb fc99 	bl	8000780 <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]
			}
			if(Bp_Up == BP_1s)
 8004e50:	4b69      	ldr	r3, [pc, #420]	; (8004ff8 <AppIHMTask+0x23c>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d112      	bne.n	8004e7e <AppIHMTask+0xc2>
			{
				if(Manu_value<=90)
 8004e58:	4b68      	ldr	r3, [pc, #416]	; (8004ffc <AppIHMTask+0x240>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b5a      	cmp	r3, #90	; 0x5a
 8004e5e:	d806      	bhi.n	8004e6e <AppIHMTask+0xb2>
					Manu_value+=10;
 8004e60:	4b66      	ldr	r3, [pc, #408]	; (8004ffc <AppIHMTask+0x240>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	330a      	adds	r3, #10
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	4b64      	ldr	r3, [pc, #400]	; (8004ffc <AppIHMTask+0x240>)
 8004e6a:	701a      	strb	r2, [r3, #0]
 8004e6c:	e002      	b.n	8004e74 <AppIHMTask+0xb8>
				else
					Manu_value=100;
 8004e6e:	4b63      	ldr	r3, [pc, #396]	; (8004ffc <AppIHMTask+0x240>)
 8004e70:	2264      	movs	r2, #100	; 0x64
 8004e72:	701a      	strb	r2, [r3, #0]
				param_changed = __TRUE;
 8004e74:	2301      	movs	r3, #1
 8004e76:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 8004e78:	f7fb fc82 	bl	8000780 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]
			}
			if(Bp_Down == BP_CLICK)
 8004e7e:	4b60      	ldr	r3, [pc, #384]	; (8005000 <AppIHMTask+0x244>)
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d10e      	bne.n	8004ea4 <AppIHMTask+0xe8>
			{
				if(Manu_value>0)
 8004e86:	4b5d      	ldr	r3, [pc, #372]	; (8004ffc <AppIHMTask+0x240>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d005      	beq.n	8004e9a <AppIHMTask+0xde>
					Manu_value--;
 8004e8e:	4b5b      	ldr	r3, [pc, #364]	; (8004ffc <AppIHMTask+0x240>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	4b59      	ldr	r3, [pc, #356]	; (8004ffc <AppIHMTask+0x240>)
 8004e98:	701a      	strb	r2, [r3, #0]
				param_changed = __TRUE;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 8004e9e:	f7fb fc6f 	bl	8000780 <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]
			}
			if(Bp_Down == BP_1s)
 8004ea4:	4b56      	ldr	r3, [pc, #344]	; (8005000 <AppIHMTask+0x244>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d112      	bne.n	8004ed2 <AppIHMTask+0x116>
			{
				if(Manu_value>=10)
 8004eac:	4b53      	ldr	r3, [pc, #332]	; (8004ffc <AppIHMTask+0x240>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	2b09      	cmp	r3, #9
 8004eb2:	d906      	bls.n	8004ec2 <AppIHMTask+0x106>
					Manu_value-=10;
 8004eb4:	4b51      	ldr	r3, [pc, #324]	; (8004ffc <AppIHMTask+0x240>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	3b0a      	subs	r3, #10
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	4b4f      	ldr	r3, [pc, #316]	; (8004ffc <AppIHMTask+0x240>)
 8004ebe:	701a      	strb	r2, [r3, #0]
 8004ec0:	e002      	b.n	8004ec8 <AppIHMTask+0x10c>
				else
					Manu_value=0;
 8004ec2:	4b4e      	ldr	r3, [pc, #312]	; (8004ffc <AppIHMTask+0x240>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	701a      	strb	r2, [r3, #0]
				param_changed = __TRUE;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 8004ecc:	f7fb fc58 	bl	8000780 <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]
			}
		}

		if(Current_Mode==MODE_DMX)
 8004ed2:	4b48      	ldr	r3, [pc, #288]	; (8004ff4 <AppIHMTask+0x238>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d176      	bne.n	8004fc8 <AppIHMTask+0x20c>
		{
			if(Bp_Up == BP_CLICK)
 8004eda:	4b47      	ldr	r3, [pc, #284]	; (8004ff8 <AppIHMTask+0x23c>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d117      	bne.n	8004f12 <AppIHMTask+0x156>
			{
				if(DMX_Adress<512)
 8004ee2:	4b48      	ldr	r3, [pc, #288]	; (8005004 <AppIHMTask+0x248>)
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eea:	d205      	bcs.n	8004ef8 <AppIHMTask+0x13c>
					DMX_Adress++;
 8004eec:	4b45      	ldr	r3, [pc, #276]	; (8005004 <AppIHMTask+0x248>)
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	4b43      	ldr	r3, [pc, #268]	; (8005004 <AppIHMTask+0x248>)
 8004ef6:	801a      	strh	r2, [r3, #0]
				param_changed = __TRUE;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 8004efc:	f7fb fc40 	bl	8000780 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]
				Protocol_DMX_init(DMX_Adress,DMX_uart);
 8004f02:	4b40      	ldr	r3, [pc, #256]	; (8005004 <AppIHMTask+0x248>)
 8004f04:	881a      	ldrh	r2, [r3, #0]
 8004f06:	4b40      	ldr	r3, [pc, #256]	; (8005008 <AppIHMTask+0x24c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	f7fe fa31 	bl	8003374 <Protocol_DMX_init>
			}
			if(Bp_Up == BP_1s)
 8004f12:	4b39      	ldr	r3, [pc, #228]	; (8004ff8 <AppIHMTask+0x23c>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d11c      	bne.n	8004f54 <AppIHMTask+0x198>
			{
				if(DMX_Adress<=502)
 8004f1a:	4b3a      	ldr	r3, [pc, #232]	; (8005004 <AppIHMTask+0x248>)
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8004f22:	d806      	bhi.n	8004f32 <AppIHMTask+0x176>
					DMX_Adress+=10;
 8004f24:	4b37      	ldr	r3, [pc, #220]	; (8005004 <AppIHMTask+0x248>)
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	330a      	adds	r3, #10
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	4b35      	ldr	r3, [pc, #212]	; (8005004 <AppIHMTask+0x248>)
 8004f2e:	801a      	strh	r2, [r3, #0]
 8004f30:	e003      	b.n	8004f3a <AppIHMTask+0x17e>
				else
					DMX_Adress=512;
 8004f32:	4b34      	ldr	r3, [pc, #208]	; (8005004 <AppIHMTask+0x248>)
 8004f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f38:	801a      	strh	r2, [r3, #0]
				param_changed = __TRUE;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 8004f3e:	f7fb fc1f 	bl	8000780 <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]
				Protocol_DMX_init(DMX_Adress,DMX_uart);
 8004f44:	4b2f      	ldr	r3, [pc, #188]	; (8005004 <AppIHMTask+0x248>)
 8004f46:	881a      	ldrh	r2, [r3, #0]
 8004f48:	4b2f      	ldr	r3, [pc, #188]	; (8005008 <AppIHMTask+0x24c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4610      	mov	r0, r2
 8004f50:	f7fe fa10 	bl	8003374 <Protocol_DMX_init>
			}
			if(Bp_Down == BP_CLICK)
 8004f54:	4b2a      	ldr	r3, [pc, #168]	; (8005000 <AppIHMTask+0x244>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d116      	bne.n	8004f8a <AppIHMTask+0x1ce>
			{
				if(DMX_Adress>1)
 8004f5c:	4b29      	ldr	r3, [pc, #164]	; (8005004 <AppIHMTask+0x248>)
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d905      	bls.n	8004f70 <AppIHMTask+0x1b4>
					DMX_Adress--;
 8004f64:	4b27      	ldr	r3, [pc, #156]	; (8005004 <AppIHMTask+0x248>)
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	4b25      	ldr	r3, [pc, #148]	; (8005004 <AppIHMTask+0x248>)
 8004f6e:	801a      	strh	r2, [r3, #0]
				param_changed = __TRUE;
 8004f70:	2301      	movs	r3, #1
 8004f72:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 8004f74:	f7fb fc04 	bl	8000780 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]
				Protocol_DMX_init(DMX_Adress,DMX_uart);
 8004f7a:	4b22      	ldr	r3, [pc, #136]	; (8005004 <AppIHMTask+0x248>)
 8004f7c:	881a      	ldrh	r2, [r3, #0]
 8004f7e:	4b22      	ldr	r3, [pc, #136]	; (8005008 <AppIHMTask+0x24c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4619      	mov	r1, r3
 8004f84:	4610      	mov	r0, r2
 8004f86:	f7fe f9f5 	bl	8003374 <Protocol_DMX_init>
			}
			if(Bp_Down == BP_1s)
 8004f8a:	4b1d      	ldr	r3, [pc, #116]	; (8005000 <AppIHMTask+0x244>)
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d11a      	bne.n	8004fc8 <AppIHMTask+0x20c>
			{
				if(DMX_Adress>=11)
 8004f92:	4b1c      	ldr	r3, [pc, #112]	; (8005004 <AppIHMTask+0x248>)
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	2b0a      	cmp	r3, #10
 8004f98:	d906      	bls.n	8004fa8 <AppIHMTask+0x1ec>
					DMX_Adress-=10;
 8004f9a:	4b1a      	ldr	r3, [pc, #104]	; (8005004 <AppIHMTask+0x248>)
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	3b0a      	subs	r3, #10
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	4b18      	ldr	r3, [pc, #96]	; (8005004 <AppIHMTask+0x248>)
 8004fa4:	801a      	strh	r2, [r3, #0]
 8004fa6:	e002      	b.n	8004fae <AppIHMTask+0x1f2>
				else
					DMX_Adress=1;
 8004fa8:	4b16      	ldr	r3, [pc, #88]	; (8005004 <AppIHMTask+0x248>)
 8004faa:	2201      	movs	r2, #1
 8004fac:	801a      	strh	r2, [r3, #0]
				param_changed = __TRUE;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 8004fb2:	f7fb fbe5 	bl	8000780 <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]
				Protocol_DMX_init(DMX_Adress,DMX_uart);
 8004fb8:	4b12      	ldr	r3, [pc, #72]	; (8005004 <AppIHMTask+0x248>)
 8004fba:	881a      	ldrh	r2, [r3, #0]
 8004fbc:	4b12      	ldr	r3, [pc, #72]	; (8005008 <AppIHMTask+0x24c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	f7fe f9d6 	bl	8003374 <Protocol_DMX_init>
			}
		}

		if(HAL_GetTick()>tick_save_param+DELAY_SAVE_PARAM && param_changed==__TRUE)
 8004fc8:	f7fb fbda 	bl	8000780 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004fd4:	3308      	adds	r3, #8
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	f67f aef8 	bls.w	8004dcc <AppIHMTask+0x10>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	f47f aef4 	bne.w	8004dcc <AppIHMTask+0x10>
		{
			param_changed = __FALSE;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]
			Write_Param();
 8004fe8:	f7ff fcc4 	bl	8004974 <Write_Param>
		osDelay(TASK_DELAY_IHM);
 8004fec:	e6ee      	b.n	8004dcc <AppIHMTask+0x10>
 8004fee:	bf00      	nop
 8004ff0:	20001920 	.word	0x20001920
 8004ff4:	20001904 	.word	0x20001904
 8004ff8:	2000193e 	.word	0x2000193e
 8004ffc:	200018d8 	.word	0x200018d8
 8005000:	200018e8 	.word	0x200018e8
 8005004:	20001944 	.word	0x20001944
 8005008:	200018f4 	.word	0x200018f4

0800500c <App_Init>:
	}
}

/* Public function -----------------------------------------------*/
void App_Init()
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
	Load_Param();
 8005010:	f7ff fc78 	bl	8004904 <Load_Param>

	DMX_signal_OK = __FALSE;
 8005014:	4b34      	ldr	r3, [pc, #208]	; (80050e8 <App_Init+0xdc>)
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]

	PWM_SetPWM(LED1_pwmtimer,LED1_PWMchannel,LED_PWM_PERIOD_VALUE,0);		//PWM Off
 800501a:	4b34      	ldr	r3, [pc, #208]	; (80050ec <App_Init+0xe0>)
 800501c:	6818      	ldr	r0, [r3, #0]
 800501e:	4b34      	ldr	r3, [pc, #208]	; (80050f0 <App_Init+0xe4>)
 8005020:	6819      	ldr	r1, [r3, #0]
 8005022:	2300      	movs	r3, #0
 8005024:	22ff      	movs	r2, #255	; 0xff
 8005026:	f7fb faff 	bl	8000628 <PWM_SetPWM>
	PWM_SetPWM(LED2_pwmtimer,LED2_PWMchannel,LED_PWM_PERIOD_VALUE,0);		//PWM Off
 800502a:	4b32      	ldr	r3, [pc, #200]	; (80050f4 <App_Init+0xe8>)
 800502c:	6818      	ldr	r0, [r3, #0]
 800502e:	4b32      	ldr	r3, [pc, #200]	; (80050f8 <App_Init+0xec>)
 8005030:	6819      	ldr	r1, [r3, #0]
 8005032:	2300      	movs	r3, #0
 8005034:	22ff      	movs	r2, #255	; 0xff
 8005036:	f7fb faf7 	bl	8000628 <PWM_SetPWM>
	PWM_SetPWM(LED3_pwmtimer,LED3_PWMchannel,LED_PWM_PERIOD_VALUE,0);		//PWM Off
 800503a:	4b30      	ldr	r3, [pc, #192]	; (80050fc <App_Init+0xf0>)
 800503c:	6818      	ldr	r0, [r3, #0]
 800503e:	4b30      	ldr	r3, [pc, #192]	; (8005100 <App_Init+0xf4>)
 8005040:	6819      	ldr	r1, [r3, #0]
 8005042:	2300      	movs	r3, #0
 8005044:	22ff      	movs	r2, #255	; 0xff
 8005046:	f7fb faef 	bl	8000628 <PWM_SetPWM>
	PWM_SetPWM(LED4_pwmtimer,LED4_PWMchannel,LED_PWM_PERIOD_VALUE,0);		//PWM Off
 800504a:	4b2e      	ldr	r3, [pc, #184]	; (8005104 <App_Init+0xf8>)
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	4b2e      	ldr	r3, [pc, #184]	; (8005108 <App_Init+0xfc>)
 8005050:	6819      	ldr	r1, [r3, #0]
 8005052:	2300      	movs	r3, #0
 8005054:	22ff      	movs	r2, #255	; 0xff
 8005056:	f7fb fae7 	bl	8000628 <PWM_SetPWM>
	PWM_SetPWM(LED5_pwmtimer,LED5_PWMchannel,LED_PWM_PERIOD_VALUE,0);		//PWM Off
 800505a:	4b2c      	ldr	r3, [pc, #176]	; (800510c <App_Init+0x100>)
 800505c:	6818      	ldr	r0, [r3, #0]
 800505e:	4b2c      	ldr	r3, [pc, #176]	; (8005110 <App_Init+0x104>)
 8005060:	6819      	ldr	r1, [r3, #0]
 8005062:	2300      	movs	r3, #0
 8005064:	22ff      	movs	r2, #255	; 0xff
 8005066:	f7fb fadf 	bl	8000628 <PWM_SetPWM>
	PWM_SetPWM(LED6_pwmtimer,LED6_PWMchannel,LED_PWM_PERIOD_VALUE,0);		//PWM Off
 800506a:	4b2a      	ldr	r3, [pc, #168]	; (8005114 <App_Init+0x108>)
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	4b2a      	ldr	r3, [pc, #168]	; (8005118 <App_Init+0x10c>)
 8005070:	6819      	ldr	r1, [r3, #0]
 8005072:	2300      	movs	r3, #0
 8005074:	22ff      	movs	r2, #255	; 0xff
 8005076:	f7fb fad7 	bl	8000628 <PWM_SetPWM>
	PWM_SetPWM(LED7_pwmtimer,LED7_PWMchannel,LED_PWM_PERIOD_VALUE,0);		//PWM Off
 800507a:	4b28      	ldr	r3, [pc, #160]	; (800511c <App_Init+0x110>)
 800507c:	6818      	ldr	r0, [r3, #0]
 800507e:	4b28      	ldr	r3, [pc, #160]	; (8005120 <App_Init+0x114>)
 8005080:	6819      	ldr	r1, [r3, #0]
 8005082:	2300      	movs	r3, #0
 8005084:	22ff      	movs	r2, #255	; 0xff
 8005086:	f7fb facf 	bl	8000628 <PWM_SetPWM>
	PWM_SetPWM(LED8_pwmtimer,LED8_PWMchannel,LED_PWM_PERIOD_VALUE,0);		//PWM Off
 800508a:	4b26      	ldr	r3, [pc, #152]	; (8005124 <App_Init+0x118>)
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	4b26      	ldr	r3, [pc, #152]	; (8005128 <App_Init+0x11c>)
 8005090:	6819      	ldr	r1, [r3, #0]
 8005092:	2300      	movs	r3, #0
 8005094:	22ff      	movs	r2, #255	; 0xff
 8005096:	f7fb fac7 	bl	8000628 <PWM_SetPWM>
	PWM_SetPWM(LED9_pwmtimer,LED9_PWMchannel,LED_PWM_PERIOD_VALUE,0);		//PWM Off*/
 800509a:	4b24      	ldr	r3, [pc, #144]	; (800512c <App_Init+0x120>)
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	4b24      	ldr	r3, [pc, #144]	; (8005130 <App_Init+0x124>)
 80050a0:	6819      	ldr	r1, [r3, #0]
 80050a2:	2300      	movs	r3, #0
 80050a4:	22ff      	movs	r2, #255	; 0xff
 80050a6:	f7fb fabf 	bl	8000628 <PWM_SetPWM>
	PWM_SetPWM(LED10_pwmtimer,LED10_PWMchannel,LED_PWM_PERIOD_VALUE,10);		//PWM Off
 80050aa:	4b22      	ldr	r3, [pc, #136]	; (8005134 <App_Init+0x128>)
 80050ac:	6818      	ldr	r0, [r3, #0]
 80050ae:	4b22      	ldr	r3, [pc, #136]	; (8005138 <App_Init+0x12c>)
 80050b0:	6819      	ldr	r1, [r3, #0]
 80050b2:	230a      	movs	r3, #10
 80050b4:	22ff      	movs	r2, #255	; 0xff
 80050b6:	f7fb fab7 	bl	8000628 <PWM_SetPWM>

	Protocol_DMX_init(DMX_Adress,DMX_uart);
 80050ba:	4b20      	ldr	r3, [pc, #128]	; (800513c <App_Init+0x130>)
 80050bc:	881a      	ldrh	r2, [r3, #0]
 80050be:	4b20      	ldr	r3, [pc, #128]	; (8005140 <App_Init+0x134>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4619      	mov	r1, r3
 80050c4:	4610      	mov	r0, r2
 80050c6:	f7fe f955 	bl	8003374 <Protocol_DMX_init>
	//SSD1306_Init(hi2c_display);  // initialise
	SSD1306_Init();  // initialise
 80050ca:	f7fb f841 	bl	8000150 <SSD1306_Init>

	Bp_Up = BP_OFF;
 80050ce:	4b1d      	ldr	r3, [pc, #116]	; (8005144 <App_Init+0x138>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	701a      	strb	r2, [r3, #0]
	Bp_Down = BP_OFF;
 80050d4:	4b1c      	ldr	r3, [pc, #112]	; (8005148 <App_Init+0x13c>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	701a      	strb	r2, [r3, #0]
	Bp_Ok = BP_OFF;
 80050da:	4b1c      	ldr	r3, [pc, #112]	; (800514c <App_Init+0x140>)
 80050dc:	2200      	movs	r2, #0
 80050de:	701a      	strb	r2, [r3, #0]

	CreatAppTasks();
 80050e0:	f000 f836 	bl	8005150 <CreatAppTasks>
}
 80050e4:	bf00      	nop
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	200018d9 	.word	0x200018d9
 80050ec:	200018fc 	.word	0x200018fc
 80050f0:	200018d4 	.word	0x200018d4
 80050f4:	20001928 	.word	0x20001928
 80050f8:	200018e4 	.word	0x200018e4
 80050fc:	200018ec 	.word	0x200018ec
 8005100:	20001908 	.word	0x20001908
 8005104:	20001918 	.word	0x20001918
 8005108:	2000192c 	.word	0x2000192c
 800510c:	200018cc 	.word	0x200018cc
 8005110:	20001940 	.word	0x20001940
 8005114:	20001900 	.word	0x20001900
 8005118:	200018f0 	.word	0x200018f0
 800511c:	2000190c 	.word	0x2000190c
 8005120:	20001910 	.word	0x20001910
 8005124:	20001948 	.word	0x20001948
 8005128:	2000191c 	.word	0x2000191c
 800512c:	20001924 	.word	0x20001924
 8005130:	200018d0 	.word	0x200018d0
 8005134:	200018dc 	.word	0x200018dc
 8005138:	20001914 	.word	0x20001914
 800513c:	20001944 	.word	0x20001944
 8005140:	200018f4 	.word	0x200018f4
 8005144:	2000193e 	.word	0x2000193e
 8005148:	200018e8 	.word	0x200018e8
 800514c:	20001920 	.word	0x20001920

08005150 <CreatAppTasks>:

void CreatAppTasks (void)
{
 8005150:	b5b0      	push	{r4, r5, r7, lr}
 8005152:	b08e      	sub	sp, #56	; 0x38
 8005154:	af00      	add	r7, sp, #0
	osThreadDef(App_LED_Task, AppLEDTask, osPriorityHigh, 0, 128);
 8005156:	4b14      	ldr	r3, [pc, #80]	; (80051a8 <CreatAppTasks+0x58>)
 8005158:	f107 041c 	add.w	r4, r7, #28
 800515c:	461d      	mov	r5, r3
 800515e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005160:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005162:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005166:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	AppLEDTaskHandle = osThreadCreate(osThread(App_LED_Task), NULL);
 800516a:	f107 031c 	add.w	r3, r7, #28
 800516e:	2100      	movs	r1, #0
 8005170:	4618      	mov	r0, r3
 8005172:	f7fe fa0f 	bl	8003594 <osThreadCreate>
 8005176:	4602      	mov	r2, r0
 8005178:	4b0c      	ldr	r3, [pc, #48]	; (80051ac <CreatAppTasks+0x5c>)
 800517a:	601a      	str	r2, [r3, #0]

	osThreadDef(App_IHM_Task, AppIHMTask, osPriorityNormal, 0, 256);
 800517c:	4b0c      	ldr	r3, [pc, #48]	; (80051b0 <CreatAppTasks+0x60>)
 800517e:	463c      	mov	r4, r7
 8005180:	461d      	mov	r5, r3
 8005182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005186:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800518a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	AppIHMTaskHandle = osThreadCreate(osThread(App_IHM_Task), NULL);
 800518e:	463b      	mov	r3, r7
 8005190:	2100      	movs	r1, #0
 8005192:	4618      	mov	r0, r3
 8005194:	f7fe f9fe 	bl	8003594 <osThreadCreate>
 8005198:	4602      	mov	r2, r0
 800519a:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <CreatAppTasks+0x64>)
 800519c:	601a      	str	r2, [r3, #0]
}
 800519e:	bf00      	nop
 80051a0:	3738      	adds	r7, #56	; 0x38
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bdb0      	pop	{r4, r5, r7, pc}
 80051a6:	bf00      	nop
 80051a8:	080068c8 	.word	0x080068c8
 80051ac:	2000194c 	.word	0x2000194c
 80051b0:	080068f4 	.word	0x080068f4
 80051b4:	200018f8 	.word	0x200018f8

080051b8 <HAL_UART_RxCpltCallback>:


HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
	Protocol_DMX_UartCallback(huart);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7fe f937 	bl	8003434 <Protocol_DMX_UartCallback>
}
 80051c6:	bf00      	nop
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80051d6:	1d3b      	adds	r3, r7, #4
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	605a      	str	r2, [r3, #4]
 80051de:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80051e0:	4b18      	ldr	r3, [pc, #96]	; (8005244 <MX_ADC1_Init+0x74>)
 80051e2:	4a19      	ldr	r2, [pc, #100]	; (8005248 <MX_ADC1_Init+0x78>)
 80051e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80051e6:	4b17      	ldr	r3, [pc, #92]	; (8005244 <MX_ADC1_Init+0x74>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80051ec:	4b15      	ldr	r3, [pc, #84]	; (8005244 <MX_ADC1_Init+0x74>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80051f2:	4b14      	ldr	r3, [pc, #80]	; (8005244 <MX_ADC1_Init+0x74>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80051f8:	4b12      	ldr	r3, [pc, #72]	; (8005244 <MX_ADC1_Init+0x74>)
 80051fa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80051fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005200:	4b10      	ldr	r3, [pc, #64]	; (8005244 <MX_ADC1_Init+0x74>)
 8005202:	2200      	movs	r2, #0
 8005204:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8005206:	4b0f      	ldr	r3, [pc, #60]	; (8005244 <MX_ADC1_Init+0x74>)
 8005208:	2201      	movs	r2, #1
 800520a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800520c:	480d      	ldr	r0, [pc, #52]	; (8005244 <MX_ADC1_Init+0x74>)
 800520e:	f7fb fac1 	bl	8000794 <HAL_ADC_Init>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8005218:	f000 fa0a 	bl	8005630 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800521c:	2309      	movs	r3, #9
 800521e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005220:	2301      	movs	r3, #1
 8005222:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005224:	2300      	movs	r3, #0
 8005226:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005228:	1d3b      	adds	r3, r7, #4
 800522a:	4619      	mov	r1, r3
 800522c:	4805      	ldr	r0, [pc, #20]	; (8005244 <MX_ADC1_Init+0x74>)
 800522e:	f7fb fb89 	bl	8000944 <HAL_ADC_ConfigChannel>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8005238:	f000 f9fa 	bl	8005630 <Error_Handler>
  }

}
 800523c:	bf00      	nop
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	20001950 	.word	0x20001950
 8005248:	40012400 	.word	0x40012400

0800524c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08a      	sub	sp, #40	; 0x28
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005254:	f107 0318 	add.w	r3, r7, #24
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	605a      	str	r2, [r3, #4]
 800525e:	609a      	str	r2, [r3, #8]
 8005260:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a1f      	ldr	r2, [pc, #124]	; (80052e4 <HAL_ADC_MspInit+0x98>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d137      	bne.n	80052dc <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800526c:	4b1e      	ldr	r3, [pc, #120]	; (80052e8 <HAL_ADC_MspInit+0x9c>)
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	4a1d      	ldr	r2, [pc, #116]	; (80052e8 <HAL_ADC_MspInit+0x9c>)
 8005272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005276:	6193      	str	r3, [r2, #24]
 8005278:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <HAL_ADC_MspInit+0x9c>)
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005284:	4b18      	ldr	r3, [pc, #96]	; (80052e8 <HAL_ADC_MspInit+0x9c>)
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	4a17      	ldr	r2, [pc, #92]	; (80052e8 <HAL_ADC_MspInit+0x9c>)
 800528a:	f043 0304 	orr.w	r3, r3, #4
 800528e:	6193      	str	r3, [r2, #24]
 8005290:	4b15      	ldr	r3, [pc, #84]	; (80052e8 <HAL_ADC_MspInit+0x9c>)
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800529c:	4b12      	ldr	r3, [pc, #72]	; (80052e8 <HAL_ADC_MspInit+0x9c>)
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	4a11      	ldr	r2, [pc, #68]	; (80052e8 <HAL_ADC_MspInit+0x9c>)
 80052a2:	f043 0308 	orr.w	r3, r3, #8
 80052a6:	6193      	str	r3, [r2, #24]
 80052a8:	4b0f      	ldr	r3, [pc, #60]	; (80052e8 <HAL_ADC_MspInit+0x9c>)
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = CTN_Pin;
 80052b4:	2380      	movs	r3, #128	; 0x80
 80052b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052b8:	2303      	movs	r3, #3
 80052ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CTN_GPIO_Port, &GPIO_InitStruct);
 80052bc:	f107 0318 	add.w	r3, r7, #24
 80052c0:	4619      	mov	r1, r3
 80052c2:	480a      	ldr	r0, [pc, #40]	; (80052ec <HAL_ADC_MspInit+0xa0>)
 80052c4:	f7fb fff4 	bl	80012b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VOLTAGE_Pin;
 80052c8:	2302      	movs	r3, #2
 80052ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052cc:	2303      	movs	r3, #3
 80052ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80052d0:	f107 0318 	add.w	r3, r7, #24
 80052d4:	4619      	mov	r1, r3
 80052d6:	4806      	ldr	r0, [pc, #24]	; (80052f0 <HAL_ADC_MspInit+0xa4>)
 80052d8:	f7fb ffea 	bl	80012b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80052dc:	bf00      	nop
 80052de:	3728      	adds	r7, #40	; 0x28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40012400 	.word	0x40012400
 80052e8:	40021000 	.word	0x40021000
 80052ec:	40010800 	.word	0x40010800
 80052f0:	40010c00 	.word	0x40010c00

080052f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4a06      	ldr	r2, [pc, #24]	; (800531c <vApplicationGetIdleTaskMemory+0x28>)
 8005304:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	4a05      	ldr	r2, [pc, #20]	; (8005320 <vApplicationGetIdleTaskMemory+0x2c>)
 800530a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2280      	movs	r2, #128	; 0x80
 8005310:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8005312:	bf00      	nop
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr
 800531c:	2000120c 	.word	0x2000120c
 8005320:	20001260 	.word	0x20001260

08005324 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8005324:	b5b0      	push	{r4, r5, r7, lr}
 8005326:	b088      	sub	sp, #32
 8005328:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800532a:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <MX_FREERTOS_Init+0x30>)
 800532c:	1d3c      	adds	r4, r7, #4
 800532e:	461d      	mov	r5, r3
 8005330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005334:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005338:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800533c:	1d3b      	adds	r3, r7, #4
 800533e:	2100      	movs	r1, #0
 8005340:	4618      	mov	r0, r3
 8005342:	f7fe f927 	bl	8003594 <osThreadCreate>
 8005346:	4602      	mov	r2, r0
 8005348:	4b03      	ldr	r3, [pc, #12]	; (8005358 <MX_FREERTOS_Init+0x34>)
 800534a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800534c:	bf00      	nop
 800534e:	3720      	adds	r7, #32
 8005350:	46bd      	mov	sp, r7
 8005352:	bdb0      	pop	{r4, r5, r7, pc}
 8005354:	0800691c 	.word	0x0800691c
 8005358:	20001980 	.word	0x20001980

0800535c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8005364:	2001      	movs	r0, #1
 8005366:	f7fe f961 	bl	800362c <osDelay>
 800536a:	e7fb      	b.n	8005364 <StartDefaultTask+0x8>

0800536c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005372:	f107 0310 	add.w	r3, r7, #16
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	605a      	str	r2, [r3, #4]
 800537c:	609a      	str	r2, [r3, #8]
 800537e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005380:	4b31      	ldr	r3, [pc, #196]	; (8005448 <MX_GPIO_Init+0xdc>)
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	4a30      	ldr	r2, [pc, #192]	; (8005448 <MX_GPIO_Init+0xdc>)
 8005386:	f043 0310 	orr.w	r3, r3, #16
 800538a:	6193      	str	r3, [r2, #24]
 800538c:	4b2e      	ldr	r3, [pc, #184]	; (8005448 <MX_GPIO_Init+0xdc>)
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005398:	4b2b      	ldr	r3, [pc, #172]	; (8005448 <MX_GPIO_Init+0xdc>)
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	4a2a      	ldr	r2, [pc, #168]	; (8005448 <MX_GPIO_Init+0xdc>)
 800539e:	f043 0320 	orr.w	r3, r3, #32
 80053a2:	6193      	str	r3, [r2, #24]
 80053a4:	4b28      	ldr	r3, [pc, #160]	; (8005448 <MX_GPIO_Init+0xdc>)
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	60bb      	str	r3, [r7, #8]
 80053ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80053b0:	4b25      	ldr	r3, [pc, #148]	; (8005448 <MX_GPIO_Init+0xdc>)
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	4a24      	ldr	r2, [pc, #144]	; (8005448 <MX_GPIO_Init+0xdc>)
 80053b6:	f043 0304 	orr.w	r3, r3, #4
 80053ba:	6193      	str	r3, [r2, #24]
 80053bc:	4b22      	ldr	r3, [pc, #136]	; (8005448 <MX_GPIO_Init+0xdc>)
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	607b      	str	r3, [r7, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80053c8:	4b1f      	ldr	r3, [pc, #124]	; (8005448 <MX_GPIO_Init+0xdc>)
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	4a1e      	ldr	r2, [pc, #120]	; (8005448 <MX_GPIO_Init+0xdc>)
 80053ce:	f043 0308 	orr.w	r3, r3, #8
 80053d2:	6193      	str	r3, [r2, #24]
 80053d4:	4b1c      	ldr	r3, [pc, #112]	; (8005448 <MX_GPIO_Init+0xdc>)
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	603b      	str	r3, [r7, #0]
 80053de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_V_Pin|RE_DE_Pin, GPIO_PIN_RESET);
 80053e0:	2200      	movs	r2, #0
 80053e2:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80053e6:	4819      	ldr	r0, [pc, #100]	; (800544c <MX_GPIO_Init+0xe0>)
 80053e8:	f7fc f8d3 	bl	8001592 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_V_Pin|RE_DE_Pin;
 80053ec:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80053f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053f2:	2301      	movs	r3, #1
 80053f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053fa:	2302      	movs	r3, #2
 80053fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053fe:	f107 0310 	add.w	r3, r7, #16
 8005402:	4619      	mov	r1, r3
 8005404:	4811      	ldr	r0, [pc, #68]	; (800544c <MX_GPIO_Init+0xe0>)
 8005406:	f7fb ff53 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T1_Pin;
 800540a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800540e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005414:	2300      	movs	r3, #0
 8005416:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(T1_GPIO_Port, &GPIO_InitStruct);
 8005418:	f107 0310 	add.w	r3, r7, #16
 800541c:	4619      	mov	r1, r3
 800541e:	480b      	ldr	r0, [pc, #44]	; (800544c <MX_GPIO_Init+0xe0>)
 8005420:	f7fb ff46 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = T2_Pin|T3_Pin;
 8005424:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800542a:	2300      	movs	r3, #0
 800542c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800542e:	2300      	movs	r3, #0
 8005430:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005432:	f107 0310 	add.w	r3, r7, #16
 8005436:	4619      	mov	r1, r3
 8005438:	4805      	ldr	r0, [pc, #20]	; (8005450 <MX_GPIO_Init+0xe4>)
 800543a:	f7fb ff39 	bl	80012b0 <HAL_GPIO_Init>

}
 800543e:	bf00      	nop
 8005440:	3720      	adds	r7, #32
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40021000 	.word	0x40021000
 800544c:	40011000 	.word	0x40011000
 8005450:	40010c00 	.word	0x40010c00

08005454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005458:	f7fb f93a 	bl	80006d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800545c:	f000 f890 	bl	8005580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005460:	f7ff ff84 	bl	800536c <MX_GPIO_Init>
  MX_TIM2_Init();
 8005464:	f000 fa76 	bl	8005954 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8005468:	f000 fc8c 	bl	8005d84 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800546c:	f000 fcb4 	bl	8005dd8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8005470:	f000 fb06 	bl	8005a80 <MX_TIM3_Init>
  MX_ADC1_Init();
 8005474:	f7ff feac 	bl	80051d0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8005478:	f000 f9a8 	bl	80057cc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  DMX_uart = &huart2;
 800547c:	4b25      	ldr	r3, [pc, #148]	; (8005514 <main+0xc0>)
 800547e:	4a26      	ldr	r2, [pc, #152]	; (8005518 <main+0xc4>)
 8005480:	601a      	str	r2, [r3, #0]

  LED1_pwmtimer = &htim1;
 8005482:	4b26      	ldr	r3, [pc, #152]	; (800551c <main+0xc8>)
 8005484:	4a26      	ldr	r2, [pc, #152]	; (8005520 <main+0xcc>)
 8005486:	601a      	str	r2, [r3, #0]
  LED1_PWMchannel = TIM_CHANNEL_1;
 8005488:	4b26      	ldr	r3, [pc, #152]	; (8005524 <main+0xd0>)
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]
  LED2_pwmtimer = &htim1;
 800548e:	4b26      	ldr	r3, [pc, #152]	; (8005528 <main+0xd4>)
 8005490:	4a23      	ldr	r2, [pc, #140]	; (8005520 <main+0xcc>)
 8005492:	601a      	str	r2, [r3, #0]
  LED2_PWMchannel = TIM_CHANNEL_2;
 8005494:	4b25      	ldr	r3, [pc, #148]	; (800552c <main+0xd8>)
 8005496:	2204      	movs	r2, #4
 8005498:	601a      	str	r2, [r3, #0]
  LED3_pwmtimer = &htim1;
 800549a:	4b25      	ldr	r3, [pc, #148]	; (8005530 <main+0xdc>)
 800549c:	4a20      	ldr	r2, [pc, #128]	; (8005520 <main+0xcc>)
 800549e:	601a      	str	r2, [r3, #0]
  LED3_PWMchannel = TIM_CHANNEL_3;
 80054a0:	4b24      	ldr	r3, [pc, #144]	; (8005534 <main+0xe0>)
 80054a2:	2208      	movs	r2, #8
 80054a4:	601a      	str	r2, [r3, #0]
  LED4_pwmtimer = &htim1;
 80054a6:	4b24      	ldr	r3, [pc, #144]	; (8005538 <main+0xe4>)
 80054a8:	4a1d      	ldr	r2, [pc, #116]	; (8005520 <main+0xcc>)
 80054aa:	601a      	str	r2, [r3, #0]
  LED4_PWMchannel = TIM_CHANNEL_4;
 80054ac:	4b23      	ldr	r3, [pc, #140]	; (800553c <main+0xe8>)
 80054ae:	220c      	movs	r2, #12
 80054b0:	601a      	str	r2, [r3, #0]
  LED5_pwmtimer = &htim2;
 80054b2:	4b23      	ldr	r3, [pc, #140]	; (8005540 <main+0xec>)
 80054b4:	4a23      	ldr	r2, [pc, #140]	; (8005544 <main+0xf0>)
 80054b6:	601a      	str	r2, [r3, #0]
  LED5_PWMchannel = TIM_CHANNEL_1;
 80054b8:	4b23      	ldr	r3, [pc, #140]	; (8005548 <main+0xf4>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]
  LED6_pwmtimer = &htim2;
 80054be:	4b23      	ldr	r3, [pc, #140]	; (800554c <main+0xf8>)
 80054c0:	4a20      	ldr	r2, [pc, #128]	; (8005544 <main+0xf0>)
 80054c2:	601a      	str	r2, [r3, #0]
  LED6_PWMchannel = TIM_CHANNEL_2;
 80054c4:	4b22      	ldr	r3, [pc, #136]	; (8005550 <main+0xfc>)
 80054c6:	2204      	movs	r2, #4
 80054c8:	601a      	str	r2, [r3, #0]
  LED7_pwmtimer = &htim2;
 80054ca:	4b22      	ldr	r3, [pc, #136]	; (8005554 <main+0x100>)
 80054cc:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <main+0xf0>)
 80054ce:	601a      	str	r2, [r3, #0]
  LED7_PWMchannel = TIM_CHANNEL_3;
 80054d0:	4b21      	ldr	r3, [pc, #132]	; (8005558 <main+0x104>)
 80054d2:	2208      	movs	r2, #8
 80054d4:	601a      	str	r2, [r3, #0]
  LED8_pwmtimer = &htim2;
 80054d6:	4b21      	ldr	r3, [pc, #132]	; (800555c <main+0x108>)
 80054d8:	4a1a      	ldr	r2, [pc, #104]	; (8005544 <main+0xf0>)
 80054da:	601a      	str	r2, [r3, #0]
  LED8_PWMchannel = TIM_CHANNEL_4;
 80054dc:	4b20      	ldr	r3, [pc, #128]	; (8005560 <main+0x10c>)
 80054de:	220c      	movs	r2, #12
 80054e0:	601a      	str	r2, [r3, #0]
  LED9_pwmtimer = &htim3;
 80054e2:	4b20      	ldr	r3, [pc, #128]	; (8005564 <main+0x110>)
 80054e4:	4a20      	ldr	r2, [pc, #128]	; (8005568 <main+0x114>)
 80054e6:	601a      	str	r2, [r3, #0]
  LED9_PWMchannel = TIM_CHANNEL_1;
 80054e8:	4b20      	ldr	r3, [pc, #128]	; (800556c <main+0x118>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	601a      	str	r2, [r3, #0]
  LED10_pwmtimer = &htim3;
 80054ee:	4b20      	ldr	r3, [pc, #128]	; (8005570 <main+0x11c>)
 80054f0:	4a1d      	ldr	r2, [pc, #116]	; (8005568 <main+0x114>)
 80054f2:	601a      	str	r2, [r3, #0]
  LED10_PWMchannel = TIM_CHANNEL_2;
 80054f4:	4b1f      	ldr	r3, [pc, #124]	; (8005574 <main+0x120>)
 80054f6:	2204      	movs	r2, #4
 80054f8:	601a      	str	r2, [r3, #0]

  FAN_pwmtimer = &htim3;
 80054fa:	4b1f      	ldr	r3, [pc, #124]	; (8005578 <main+0x124>)
 80054fc:	4a1a      	ldr	r2, [pc, #104]	; (8005568 <main+0x114>)
 80054fe:	601a      	str	r2, [r3, #0]
  FAN_PWMchannel = TIM_CHANNEL_3;
 8005500:	4b1e      	ldr	r3, [pc, #120]	; (800557c <main+0x128>)
 8005502:	2208      	movs	r2, #8
 8005504:	601a      	str	r2, [r3, #0]

  //hi2c_display = &hi2c1;

  App_Init();
 8005506:	f7ff fd81 	bl	800500c <App_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 800550a:	f7ff ff0b 	bl	8005324 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800550e:	f7fe f83a 	bl	8003586 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8005512:	e7fe      	b.n	8005512 <main+0xbe>
 8005514:	200018f4 	.word	0x200018f4
 8005518:	20001a84 	.word	0x20001a84
 800551c:	200018fc 	.word	0x200018fc
 8005520:	200019c4 	.word	0x200019c4
 8005524:	200018d4 	.word	0x200018d4
 8005528:	20001928 	.word	0x20001928
 800552c:	200018e4 	.word	0x200018e4
 8005530:	200018ec 	.word	0x200018ec
 8005534:	20001908 	.word	0x20001908
 8005538:	20001918 	.word	0x20001918
 800553c:	2000192c 	.word	0x2000192c
 8005540:	200018cc 	.word	0x200018cc
 8005544:	20001a04 	.word	0x20001a04
 8005548:	20001940 	.word	0x20001940
 800554c:	20001900 	.word	0x20001900
 8005550:	200018f0 	.word	0x200018f0
 8005554:	2000190c 	.word	0x2000190c
 8005558:	20001910 	.word	0x20001910
 800555c:	20001948 	.word	0x20001948
 8005560:	2000191c 	.word	0x2000191c
 8005564:	20001924 	.word	0x20001924
 8005568:	20001984 	.word	0x20001984
 800556c:	200018d0 	.word	0x200018d0
 8005570:	200018dc 	.word	0x200018dc
 8005574:	20001914 	.word	0x20001914
 8005578:	20001930 	.word	0x20001930
 800557c:	200018e0 	.word	0x200018e0

08005580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b094      	sub	sp, #80	; 0x50
 8005584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800558a:	2228      	movs	r2, #40	; 0x28
 800558c:	2100      	movs	r1, #0
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fd45 	bl	800601e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005594:	f107 0314 	add.w	r3, r7, #20
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	605a      	str	r2, [r3, #4]
 800559e:	609a      	str	r2, [r3, #8]
 80055a0:	60da      	str	r2, [r3, #12]
 80055a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80055a4:	1d3b      	adds	r3, r7, #4
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	605a      	str	r2, [r3, #4]
 80055ac:	609a      	str	r2, [r3, #8]
 80055ae:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80055b0:	2301      	movs	r3, #1
 80055b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80055b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80055ba:	2300      	movs	r3, #0
 80055bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80055be:	2301      	movs	r3, #1
 80055c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80055c2:	2302      	movs	r3, #2
 80055c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80055c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80055cc:	2300      	movs	r3, #0
 80055ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80055d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fb fff5 	bl	80015c4 <HAL_RCC_OscConfig>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80055e0:	f000 f826 	bl	8005630 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80055e4:	230f      	movs	r3, #15
 80055e6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80055e8:	2302      	movs	r3, #2
 80055ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80055ec:	2300      	movs	r3, #0
 80055ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80055f0:	2300      	movs	r3, #0
 80055f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80055f4:	2300      	movs	r3, #0
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80055f8:	f107 0314 	add.w	r3, r7, #20
 80055fc:	2100      	movs	r1, #0
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fc fa60 	bl	8001ac4 <HAL_RCC_ClockConfig>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800560a:	f000 f811 	bl	8005630 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800560e:	2302      	movs	r3, #2
 8005610:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005616:	1d3b      	adds	r3, r7, #4
 8005618:	4618      	mov	r0, r3
 800561a:	f7fc fbef 	bl	8001dfc <HAL_RCCEx_PeriphCLKConfig>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8005624:	f000 f804 	bl	8005630 <Error_Handler>
  }
}
 8005628:	bf00      	nop
 800562a:	3750      	adds	r7, #80	; 0x50
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005634:	bf00      	nop
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr

0800563c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005642:	4b18      	ldr	r3, [pc, #96]	; (80056a4 <HAL_MspInit+0x68>)
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	4a17      	ldr	r2, [pc, #92]	; (80056a4 <HAL_MspInit+0x68>)
 8005648:	f043 0301 	orr.w	r3, r3, #1
 800564c:	6193      	str	r3, [r2, #24]
 800564e:	4b15      	ldr	r3, [pc, #84]	; (80056a4 <HAL_MspInit+0x68>)
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	60bb      	str	r3, [r7, #8]
 8005658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800565a:	4b12      	ldr	r3, [pc, #72]	; (80056a4 <HAL_MspInit+0x68>)
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	4a11      	ldr	r2, [pc, #68]	; (80056a4 <HAL_MspInit+0x68>)
 8005660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005664:	61d3      	str	r3, [r2, #28]
 8005666:	4b0f      	ldr	r3, [pc, #60]	; (80056a4 <HAL_MspInit+0x68>)
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566e:	607b      	str	r3, [r7, #4]
 8005670:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005672:	2200      	movs	r2, #0
 8005674:	210f      	movs	r1, #15
 8005676:	f06f 0001 	mvn.w	r0, #1
 800567a:	f7fb fb6c 	bl	8000d56 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800567e:	4b0a      	ldr	r3, [pc, #40]	; (80056a8 <HAL_MspInit+0x6c>)
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	4a04      	ldr	r2, [pc, #16]	; (80056a8 <HAL_MspInit+0x6c>)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800569a:	bf00      	nop
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40021000 	.word	0x40021000
 80056a8:	40010000 	.word	0x40010000

080056ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80056b0:	bf00      	nop
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bc80      	pop	{r7}
 80056b6:	4770      	bx	lr

080056b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056bc:	e7fe      	b.n	80056bc <HardFault_Handler+0x4>

080056be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056be:	b480      	push	{r7}
 80056c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056c2:	e7fe      	b.n	80056c2 <MemManage_Handler+0x4>

080056c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056c8:	e7fe      	b.n	80056c8 <BusFault_Handler+0x4>

080056ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056ca:	b480      	push	{r7}
 80056cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056ce:	e7fe      	b.n	80056ce <UsageFault_Handler+0x4>

080056d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056d4:	bf00      	nop
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr

080056dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056e0:	f7fb f83c 	bl	800075c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80056e4:	f7fe fd14 	bl	8004110 <xTaskGetSchedulerState>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d001      	beq.n	80056f2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80056ee:	f7fe fef3 	bl	80044d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80056f2:	bf00      	nop
 80056f4:	bd80      	pop	{r7, pc}
	...

080056f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80056fc:	4802      	ldr	r0, [pc, #8]	; (8005708 <USART2_IRQHandler+0x10>)
 80056fe:	f7fd fa69 	bl	8002bd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005702:	bf00      	nop
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20001a84 	.word	0x20001a84

0800570c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005714:	4b11      	ldr	r3, [pc, #68]	; (800575c <_sbrk+0x50>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d102      	bne.n	8005722 <_sbrk+0x16>
		heap_end = &end;
 800571c:	4b0f      	ldr	r3, [pc, #60]	; (800575c <_sbrk+0x50>)
 800571e:	4a10      	ldr	r2, [pc, #64]	; (8005760 <_sbrk+0x54>)
 8005720:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005722:	4b0e      	ldr	r3, [pc, #56]	; (800575c <_sbrk+0x50>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005728:	4b0c      	ldr	r3, [pc, #48]	; (800575c <_sbrk+0x50>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4413      	add	r3, r2
 8005730:	466a      	mov	r2, sp
 8005732:	4293      	cmp	r3, r2
 8005734:	d907      	bls.n	8005746 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005736:	f000 fc3d 	bl	8005fb4 <__errno>
 800573a:	4602      	mov	r2, r0
 800573c:	230c      	movs	r3, #12
 800573e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005740:	f04f 33ff 	mov.w	r3, #4294967295
 8005744:	e006      	b.n	8005754 <_sbrk+0x48>
	}

	heap_end += incr;
 8005746:	4b05      	ldr	r3, [pc, #20]	; (800575c <_sbrk+0x50>)
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4413      	add	r3, r2
 800574e:	4a03      	ldr	r2, [pc, #12]	; (800575c <_sbrk+0x50>)
 8005750:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005752:	68fb      	ldr	r3, [r7, #12]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	20001460 	.word	0x20001460
 8005760:	20001ac8 	.word	0x20001ac8

08005764 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005768:	4b15      	ldr	r3, [pc, #84]	; (80057c0 <SystemInit+0x5c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a14      	ldr	r2, [pc, #80]	; (80057c0 <SystemInit+0x5c>)
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005774:	4b12      	ldr	r3, [pc, #72]	; (80057c0 <SystemInit+0x5c>)
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	4911      	ldr	r1, [pc, #68]	; (80057c0 <SystemInit+0x5c>)
 800577a:	4b12      	ldr	r3, [pc, #72]	; (80057c4 <SystemInit+0x60>)
 800577c:	4013      	ands	r3, r2
 800577e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005780:	4b0f      	ldr	r3, [pc, #60]	; (80057c0 <SystemInit+0x5c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a0e      	ldr	r2, [pc, #56]	; (80057c0 <SystemInit+0x5c>)
 8005786:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800578a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800578e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005790:	4b0b      	ldr	r3, [pc, #44]	; (80057c0 <SystemInit+0x5c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a0a      	ldr	r2, [pc, #40]	; (80057c0 <SystemInit+0x5c>)
 8005796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800579a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800579c:	4b08      	ldr	r3, [pc, #32]	; (80057c0 <SystemInit+0x5c>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	4a07      	ldr	r2, [pc, #28]	; (80057c0 <SystemInit+0x5c>)
 80057a2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80057a6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80057a8:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <SystemInit+0x5c>)
 80057aa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80057ae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80057b0:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <SystemInit+0x64>)
 80057b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80057b6:	609a      	str	r2, [r3, #8]
#endif 
}
 80057b8:	bf00      	nop
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr
 80057c0:	40021000 	.word	0x40021000
 80057c4:	f8ff0000 	.word	0xf8ff0000
 80057c8:	e000ed00 	.word	0xe000ed00

080057cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b096      	sub	sp, #88	; 0x58
 80057d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80057d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80057d6:	2200      	movs	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	605a      	str	r2, [r3, #4]
 80057dc:	609a      	str	r2, [r3, #8]
 80057de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80057ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ee:	2200      	movs	r2, #0
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	605a      	str	r2, [r3, #4]
 80057f4:	609a      	str	r2, [r3, #8]
 80057f6:	60da      	str	r2, [r3, #12]
 80057f8:	611a      	str	r2, [r3, #16]
 80057fa:	615a      	str	r2, [r3, #20]
 80057fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80057fe:	1d3b      	adds	r3, r7, #4
 8005800:	2220      	movs	r2, #32
 8005802:	2100      	movs	r1, #0
 8005804:	4618      	mov	r0, r3
 8005806:	f000 fc0a 	bl	800601e <memset>

  htim1.Instance = TIM1;
 800580a:	4b50      	ldr	r3, [pc, #320]	; (800594c <MX_TIM1_Init+0x180>)
 800580c:	4a50      	ldr	r2, [pc, #320]	; (8005950 <MX_TIM1_Init+0x184>)
 800580e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 300;
 8005810:	4b4e      	ldr	r3, [pc, #312]	; (800594c <MX_TIM1_Init+0x180>)
 8005812:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005816:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005818:	4b4c      	ldr	r3, [pc, #304]	; (800594c <MX_TIM1_Init+0x180>)
 800581a:	2200      	movs	r2, #0
 800581c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800581e:	4b4b      	ldr	r3, [pc, #300]	; (800594c <MX_TIM1_Init+0x180>)
 8005820:	22ff      	movs	r2, #255	; 0xff
 8005822:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005824:	4b49      	ldr	r3, [pc, #292]	; (800594c <MX_TIM1_Init+0x180>)
 8005826:	2200      	movs	r2, #0
 8005828:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800582a:	4b48      	ldr	r3, [pc, #288]	; (800594c <MX_TIM1_Init+0x180>)
 800582c:	2200      	movs	r2, #0
 800582e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005830:	4b46      	ldr	r3, [pc, #280]	; (800594c <MX_TIM1_Init+0x180>)
 8005832:	2200      	movs	r2, #0
 8005834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005836:	4845      	ldr	r0, [pc, #276]	; (800594c <MX_TIM1_Init+0x180>)
 8005838:	f7fc fb96 	bl	8001f68 <HAL_TIM_Base_Init>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005842:	f7ff fef5 	bl	8005630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800584a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800584c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005850:	4619      	mov	r1, r3
 8005852:	483e      	ldr	r0, [pc, #248]	; (800594c <MX_TIM1_Init+0x180>)
 8005854:	f7fc fd2c 	bl	80022b0 <HAL_TIM_ConfigClockSource>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800585e:	f7ff fee7 	bl	8005630 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005862:	483a      	ldr	r0, [pc, #232]	; (800594c <MX_TIM1_Init+0x180>)
 8005864:	f7fc fbab 	bl	8001fbe <HAL_TIM_PWM_Init>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800586e:	f7ff fedf 	bl	8005630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005872:	2300      	movs	r3, #0
 8005874:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005876:	2300      	movs	r3, #0
 8005878:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800587a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800587e:	4619      	mov	r1, r3
 8005880:	4832      	ldr	r0, [pc, #200]	; (800594c <MX_TIM1_Init+0x180>)
 8005882:	f7fd f871 	bl	8002968 <HAL_TIMEx_MasterConfigSynchronization>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800588c:	f7ff fed0 	bl	8005630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005890:	2360      	movs	r3, #96	; 0x60
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005894:	2300      	movs	r3, #0
 8005896:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005898:	2300      	movs	r3, #0
 800589a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800589c:	2300      	movs	r3, #0
 800589e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80058a0:	2300      	movs	r3, #0
 80058a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80058a4:	2300      	movs	r3, #0
 80058a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80058a8:	2300      	movs	r3, #0
 80058aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80058ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058b0:	2200      	movs	r2, #0
 80058b2:	4619      	mov	r1, r3
 80058b4:	4825      	ldr	r0, [pc, #148]	; (800594c <MX_TIM1_Init+0x180>)
 80058b6:	f7fc fc35 	bl	8002124 <HAL_TIM_PWM_ConfigChannel>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80058c0:	f7ff feb6 	bl	8005630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80058c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058c8:	2204      	movs	r2, #4
 80058ca:	4619      	mov	r1, r3
 80058cc:	481f      	ldr	r0, [pc, #124]	; (800594c <MX_TIM1_Init+0x180>)
 80058ce:	f7fc fc29 	bl	8002124 <HAL_TIM_PWM_ConfigChannel>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80058d8:	f7ff feaa 	bl	8005630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80058dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058e0:	2208      	movs	r2, #8
 80058e2:	4619      	mov	r1, r3
 80058e4:	4819      	ldr	r0, [pc, #100]	; (800594c <MX_TIM1_Init+0x180>)
 80058e6:	f7fc fc1d 	bl	8002124 <HAL_TIM_PWM_ConfigChannel>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80058f0:	f7ff fe9e 	bl	8005630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80058f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058f8:	220c      	movs	r2, #12
 80058fa:	4619      	mov	r1, r3
 80058fc:	4813      	ldr	r0, [pc, #76]	; (800594c <MX_TIM1_Init+0x180>)
 80058fe:	f7fc fc11 	bl	8002124 <HAL_TIM_PWM_ConfigChannel>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8005908:	f7ff fe92 	bl	8005630 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800590c:	2300      	movs	r3, #0
 800590e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005910:	2300      	movs	r3, #0
 8005912:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005914:	2300      	movs	r3, #0
 8005916:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800591c:	2300      	movs	r3, #0
 800591e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005924:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005926:	2300      	movs	r3, #0
 8005928:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800592a:	1d3b      	adds	r3, r7, #4
 800592c:	4619      	mov	r1, r3
 800592e:	4807      	ldr	r0, [pc, #28]	; (800594c <MX_TIM1_Init+0x180>)
 8005930:	f7fd f85e 	bl	80029f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800593a:	f7ff fe79 	bl	8005630 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800593e:	4803      	ldr	r0, [pc, #12]	; (800594c <MX_TIM1_Init+0x180>)
 8005940:	f000 f96e 	bl	8005c20 <HAL_TIM_MspPostInit>

}
 8005944:	bf00      	nop
 8005946:	3758      	adds	r7, #88	; 0x58
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	200019c4 	.word	0x200019c4
 8005950:	40012c00 	.word	0x40012c00

08005954 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b08e      	sub	sp, #56	; 0x38
 8005958:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800595a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	605a      	str	r2, [r3, #4]
 8005964:	609a      	str	r2, [r3, #8]
 8005966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005968:	f107 0320 	add.w	r3, r7, #32
 800596c:	2200      	movs	r2, #0
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005972:	1d3b      	adds	r3, r7, #4
 8005974:	2200      	movs	r2, #0
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	605a      	str	r2, [r3, #4]
 800597a:	609a      	str	r2, [r3, #8]
 800597c:	60da      	str	r2, [r3, #12]
 800597e:	611a      	str	r2, [r3, #16]
 8005980:	615a      	str	r2, [r3, #20]
 8005982:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8005984:	4b3d      	ldr	r3, [pc, #244]	; (8005a7c <MX_TIM2_Init+0x128>)
 8005986:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800598a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 300;
 800598c:	4b3b      	ldr	r3, [pc, #236]	; (8005a7c <MX_TIM2_Init+0x128>)
 800598e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005992:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005994:	4b39      	ldr	r3, [pc, #228]	; (8005a7c <MX_TIM2_Init+0x128>)
 8005996:	2200      	movs	r2, #0
 8005998:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 800599a:	4b38      	ldr	r3, [pc, #224]	; (8005a7c <MX_TIM2_Init+0x128>)
 800599c:	22ff      	movs	r2, #255	; 0xff
 800599e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059a0:	4b36      	ldr	r3, [pc, #216]	; (8005a7c <MX_TIM2_Init+0x128>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059a6:	4b35      	ldr	r3, [pc, #212]	; (8005a7c <MX_TIM2_Init+0x128>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80059ac:	4833      	ldr	r0, [pc, #204]	; (8005a7c <MX_TIM2_Init+0x128>)
 80059ae:	f7fc fadb 	bl	8001f68 <HAL_TIM_Base_Init>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80059b8:	f7ff fe3a 	bl	8005630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80059bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80059c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059c6:	4619      	mov	r1, r3
 80059c8:	482c      	ldr	r0, [pc, #176]	; (8005a7c <MX_TIM2_Init+0x128>)
 80059ca:	f7fc fc71 	bl	80022b0 <HAL_TIM_ConfigClockSource>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80059d4:	f7ff fe2c 	bl	8005630 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80059d8:	4828      	ldr	r0, [pc, #160]	; (8005a7c <MX_TIM2_Init+0x128>)
 80059da:	f7fc faf0 	bl	8001fbe <HAL_TIM_PWM_Init>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80059e4:	f7ff fe24 	bl	8005630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059e8:	2300      	movs	r3, #0
 80059ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059ec:	2300      	movs	r3, #0
 80059ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80059f0:	f107 0320 	add.w	r3, r7, #32
 80059f4:	4619      	mov	r1, r3
 80059f6:	4821      	ldr	r0, [pc, #132]	; (8005a7c <MX_TIM2_Init+0x128>)
 80059f8:	f7fc ffb6 	bl	8002968 <HAL_TIMEx_MasterConfigSynchronization>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8005a02:	f7ff fe15 	bl	8005630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a06:	2360      	movs	r3, #96	; 0x60
 8005a08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a12:	2300      	movs	r3, #0
 8005a14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005a16:	1d3b      	adds	r3, r7, #4
 8005a18:	2200      	movs	r2, #0
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	4817      	ldr	r0, [pc, #92]	; (8005a7c <MX_TIM2_Init+0x128>)
 8005a1e:	f7fc fb81 	bl	8002124 <HAL_TIM_PWM_ConfigChannel>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8005a28:	f7ff fe02 	bl	8005630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005a2c:	1d3b      	adds	r3, r7, #4
 8005a2e:	2204      	movs	r2, #4
 8005a30:	4619      	mov	r1, r3
 8005a32:	4812      	ldr	r0, [pc, #72]	; (8005a7c <MX_TIM2_Init+0x128>)
 8005a34:	f7fc fb76 	bl	8002124 <HAL_TIM_PWM_ConfigChannel>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8005a3e:	f7ff fdf7 	bl	8005630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005a42:	1d3b      	adds	r3, r7, #4
 8005a44:	2208      	movs	r2, #8
 8005a46:	4619      	mov	r1, r3
 8005a48:	480c      	ldr	r0, [pc, #48]	; (8005a7c <MX_TIM2_Init+0x128>)
 8005a4a:	f7fc fb6b 	bl	8002124 <HAL_TIM_PWM_ConfigChannel>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8005a54:	f7ff fdec 	bl	8005630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005a58:	1d3b      	adds	r3, r7, #4
 8005a5a:	220c      	movs	r2, #12
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	4807      	ldr	r0, [pc, #28]	; (8005a7c <MX_TIM2_Init+0x128>)
 8005a60:	f7fc fb60 	bl	8002124 <HAL_TIM_PWM_ConfigChannel>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8005a6a:	f7ff fde1 	bl	8005630 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8005a6e:	4803      	ldr	r0, [pc, #12]	; (8005a7c <MX_TIM2_Init+0x128>)
 8005a70:	f000 f8d6 	bl	8005c20 <HAL_TIM_MspPostInit>

}
 8005a74:	bf00      	nop
 8005a76:	3738      	adds	r7, #56	; 0x38
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	20001a04 	.word	0x20001a04

08005a80 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b08e      	sub	sp, #56	; 0x38
 8005a84:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	605a      	str	r2, [r3, #4]
 8005a90:	609a      	str	r2, [r3, #8]
 8005a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a94:	f107 0320 	add.w	r3, r7, #32
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a9e:	1d3b      	adds	r3, r7, #4
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	605a      	str	r2, [r3, #4]
 8005aa6:	609a      	str	r2, [r3, #8]
 8005aa8:	60da      	str	r2, [r3, #12]
 8005aaa:	611a      	str	r2, [r3, #16]
 8005aac:	615a      	str	r2, [r3, #20]
 8005aae:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8005ab0:	4b37      	ldr	r3, [pc, #220]	; (8005b90 <MX_TIM3_Init+0x110>)
 8005ab2:	4a38      	ldr	r2, [pc, #224]	; (8005b94 <MX_TIM3_Init+0x114>)
 8005ab4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 300;
 8005ab6:	4b36      	ldr	r3, [pc, #216]	; (8005b90 <MX_TIM3_Init+0x110>)
 8005ab8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005abc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005abe:	4b34      	ldr	r3, [pc, #208]	; (8005b90 <MX_TIM3_Init+0x110>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8005ac4:	4b32      	ldr	r3, [pc, #200]	; (8005b90 <MX_TIM3_Init+0x110>)
 8005ac6:	22ff      	movs	r2, #255	; 0xff
 8005ac8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005aca:	4b31      	ldr	r3, [pc, #196]	; (8005b90 <MX_TIM3_Init+0x110>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ad0:	4b2f      	ldr	r3, [pc, #188]	; (8005b90 <MX_TIM3_Init+0x110>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005ad6:	482e      	ldr	r0, [pc, #184]	; (8005b90 <MX_TIM3_Init+0x110>)
 8005ad8:	f7fc fa46 	bl	8001f68 <HAL_TIM_Base_Init>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005ae2:	f7ff fda5 	bl	8005630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005aec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005af0:	4619      	mov	r1, r3
 8005af2:	4827      	ldr	r0, [pc, #156]	; (8005b90 <MX_TIM3_Init+0x110>)
 8005af4:	f7fc fbdc 	bl	80022b0 <HAL_TIM_ConfigClockSource>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005afe:	f7ff fd97 	bl	8005630 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005b02:	4823      	ldr	r0, [pc, #140]	; (8005b90 <MX_TIM3_Init+0x110>)
 8005b04:	f7fc fa5b 	bl	8001fbe <HAL_TIM_PWM_Init>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005b0e:	f7ff fd8f 	bl	8005630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b12:	2300      	movs	r3, #0
 8005b14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b16:	2300      	movs	r3, #0
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005b1a:	f107 0320 	add.w	r3, r7, #32
 8005b1e:	4619      	mov	r1, r3
 8005b20:	481b      	ldr	r0, [pc, #108]	; (8005b90 <MX_TIM3_Init+0x110>)
 8005b22:	f7fc ff21 	bl	8002968 <HAL_TIMEx_MasterConfigSynchronization>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005b2c:	f7ff fd80 	bl	8005630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b30:	2360      	movs	r3, #96	; 0x60
 8005b32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005b34:	2300      	movs	r3, #0
 8005b36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b40:	1d3b      	adds	r3, r7, #4
 8005b42:	2200      	movs	r2, #0
 8005b44:	4619      	mov	r1, r3
 8005b46:	4812      	ldr	r0, [pc, #72]	; (8005b90 <MX_TIM3_Init+0x110>)
 8005b48:	f7fc faec 	bl	8002124 <HAL_TIM_PWM_ConfigChannel>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005b52:	f7ff fd6d 	bl	8005630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005b56:	1d3b      	adds	r3, r7, #4
 8005b58:	2204      	movs	r2, #4
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	480c      	ldr	r0, [pc, #48]	; (8005b90 <MX_TIM3_Init+0x110>)
 8005b5e:	f7fc fae1 	bl	8002124 <HAL_TIM_PWM_ConfigChannel>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8005b68:	f7ff fd62 	bl	8005630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005b6c:	1d3b      	adds	r3, r7, #4
 8005b6e:	2208      	movs	r2, #8
 8005b70:	4619      	mov	r1, r3
 8005b72:	4807      	ldr	r0, [pc, #28]	; (8005b90 <MX_TIM3_Init+0x110>)
 8005b74:	f7fc fad6 	bl	8002124 <HAL_TIM_PWM_ConfigChannel>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8005b7e:	f7ff fd57 	bl	8005630 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8005b82:	4803      	ldr	r0, [pc, #12]	; (8005b90 <MX_TIM3_Init+0x110>)
 8005b84:	f000 f84c 	bl	8005c20 <HAL_TIM_MspPostInit>

}
 8005b88:	bf00      	nop
 8005b8a:	3738      	adds	r7, #56	; 0x38
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	20001984 	.word	0x20001984
 8005b94:	40000400 	.word	0x40000400

08005b98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a1b      	ldr	r2, [pc, #108]	; (8005c14 <HAL_TIM_Base_MspInit+0x7c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d10c      	bne.n	8005bc4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005baa:	4b1b      	ldr	r3, [pc, #108]	; (8005c18 <HAL_TIM_Base_MspInit+0x80>)
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	4a1a      	ldr	r2, [pc, #104]	; (8005c18 <HAL_TIM_Base_MspInit+0x80>)
 8005bb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005bb4:	6193      	str	r3, [r2, #24]
 8005bb6:	4b18      	ldr	r3, [pc, #96]	; (8005c18 <HAL_TIM_Base_MspInit+0x80>)
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005bc2:	e022      	b.n	8005c0a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM2)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bcc:	d10c      	bne.n	8005be8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005bce:	4b12      	ldr	r3, [pc, #72]	; (8005c18 <HAL_TIM_Base_MspInit+0x80>)
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	4a11      	ldr	r2, [pc, #68]	; (8005c18 <HAL_TIM_Base_MspInit+0x80>)
 8005bd4:	f043 0301 	orr.w	r3, r3, #1
 8005bd8:	61d3      	str	r3, [r2, #28]
 8005bda:	4b0f      	ldr	r3, [pc, #60]	; (8005c18 <HAL_TIM_Base_MspInit+0x80>)
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	613b      	str	r3, [r7, #16]
 8005be4:	693b      	ldr	r3, [r7, #16]
}
 8005be6:	e010      	b.n	8005c0a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a0b      	ldr	r2, [pc, #44]	; (8005c1c <HAL_TIM_Base_MspInit+0x84>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d10b      	bne.n	8005c0a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005bf2:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <HAL_TIM_Base_MspInit+0x80>)
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	4a08      	ldr	r2, [pc, #32]	; (8005c18 <HAL_TIM_Base_MspInit+0x80>)
 8005bf8:	f043 0302 	orr.w	r3, r3, #2
 8005bfc:	61d3      	str	r3, [r2, #28]
 8005bfe:	4b06      	ldr	r3, [pc, #24]	; (8005c18 <HAL_TIM_Base_MspInit+0x80>)
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	68fb      	ldr	r3, [r7, #12]
}
 8005c0a:	bf00      	nop
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bc80      	pop	{r7}
 8005c12:	4770      	bx	lr
 8005c14:	40012c00 	.word	0x40012c00
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	40000400 	.word	0x40000400

08005c20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08c      	sub	sp, #48	; 0x30
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c28:	f107 0318 	add.w	r3, r7, #24
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	605a      	str	r2, [r3, #4]
 8005c32:	609a      	str	r2, [r3, #8]
 8005c34:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a4c      	ldr	r2, [pc, #304]	; (8005d6c <HAL_TIM_MspPostInit+0x14c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d119      	bne.n	8005c74 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c40:	4b4b      	ldr	r3, [pc, #300]	; (8005d70 <HAL_TIM_MspPostInit+0x150>)
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	4a4a      	ldr	r2, [pc, #296]	; (8005d70 <HAL_TIM_MspPostInit+0x150>)
 8005c46:	f043 0304 	orr.w	r3, r3, #4
 8005c4a:	6193      	str	r3, [r2, #24]
 8005c4c:	4b48      	ldr	r3, [pc, #288]	; (8005d70 <HAL_TIM_MspPostInit+0x150>)
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	f003 0304 	and.w	r3, r3, #4
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	697b      	ldr	r3, [r7, #20]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = PWM4_Pin|PWM3_Pin|PWM2_Pin|PWM1_Pin;
 8005c58:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8005c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c5e:	2302      	movs	r3, #2
 8005c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c62:	2302      	movs	r3, #2
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c66:	f107 0318 	add.w	r3, r7, #24
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4841      	ldr	r0, [pc, #260]	; (8005d74 <HAL_TIM_MspPostInit+0x154>)
 8005c6e:	f7fb fb1f 	bl	80012b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005c72:	e077      	b.n	8005d64 <HAL_TIM_MspPostInit+0x144>
  else if(timHandle->Instance==TIM2)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7c:	d143      	bne.n	8005d06 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c7e:	4b3c      	ldr	r3, [pc, #240]	; (8005d70 <HAL_TIM_MspPostInit+0x150>)
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	4a3b      	ldr	r2, [pc, #236]	; (8005d70 <HAL_TIM_MspPostInit+0x150>)
 8005c84:	f043 0304 	orr.w	r3, r3, #4
 8005c88:	6193      	str	r3, [r2, #24]
 8005c8a:	4b39      	ldr	r3, [pc, #228]	; (8005d70 <HAL_TIM_MspPostInit+0x150>)
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	f003 0304 	and.w	r3, r3, #4
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c96:	4b36      	ldr	r3, [pc, #216]	; (8005d70 <HAL_TIM_MspPostInit+0x150>)
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	4a35      	ldr	r2, [pc, #212]	; (8005d70 <HAL_TIM_MspPostInit+0x150>)
 8005c9c:	f043 0308 	orr.w	r3, r3, #8
 8005ca0:	6193      	str	r3, [r2, #24]
 8005ca2:	4b33      	ldr	r3, [pc, #204]	; (8005d70 <HAL_TIM_MspPostInit+0x150>)
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	f003 0308 	and.w	r3, r3, #8
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM5_Pin|PWM6_Pin;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cba:	f107 0318 	add.w	r3, r7, #24
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	482c      	ldr	r0, [pc, #176]	; (8005d74 <HAL_TIM_MspPostInit+0x154>)
 8005cc2:	f7fb faf5 	bl	80012b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM7_Pin|PWM8_Pin;
 8005cc6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ccc:	2302      	movs	r3, #2
 8005cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cd4:	f107 0318 	add.w	r3, r7, #24
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4827      	ldr	r0, [pc, #156]	; (8005d78 <HAL_TIM_MspPostInit+0x158>)
 8005cdc:	f7fb fae8 	bl	80012b0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8005ce0:	4b26      	ldr	r3, [pc, #152]	; (8005d7c <HAL_TIM_MspPostInit+0x15c>)
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cfe:	4a1f      	ldr	r2, [pc, #124]	; (8005d7c <HAL_TIM_MspPostInit+0x15c>)
 8005d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d02:	6053      	str	r3, [r2, #4]
}
 8005d04:	e02e      	b.n	8005d64 <HAL_TIM_MspPostInit+0x144>
  else if(timHandle->Instance==TIM3)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a1d      	ldr	r2, [pc, #116]	; (8005d80 <HAL_TIM_MspPostInit+0x160>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d129      	bne.n	8005d64 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d10:	4b17      	ldr	r3, [pc, #92]	; (8005d70 <HAL_TIM_MspPostInit+0x150>)
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	4a16      	ldr	r2, [pc, #88]	; (8005d70 <HAL_TIM_MspPostInit+0x150>)
 8005d16:	f043 0308 	orr.w	r3, r3, #8
 8005d1a:	6193      	str	r3, [r2, #24]
 8005d1c:	4b14      	ldr	r3, [pc, #80]	; (8005d70 <HAL_TIM_MspPostInit+0x150>)
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	60bb      	str	r3, [r7, #8]
 8005d26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|PWM9_Pin|PWM10_Pin;
 8005d28:	2331      	movs	r3, #49	; 0x31
 8005d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d30:	2302      	movs	r3, #2
 8005d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d34:	f107 0318 	add.w	r3, r7, #24
 8005d38:	4619      	mov	r1, r3
 8005d3a:	480f      	ldr	r0, [pc, #60]	; (8005d78 <HAL_TIM_MspPostInit+0x158>)
 8005d3c:	f7fb fab8 	bl	80012b0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8005d40:	4b0e      	ldr	r3, [pc, #56]	; (8005d7c <HAL_TIM_MspPostInit+0x15c>)
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d48:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d50:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d5e:	4a07      	ldr	r2, [pc, #28]	; (8005d7c <HAL_TIM_MspPostInit+0x15c>)
 8005d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d62:	6053      	str	r3, [r2, #4]
}
 8005d64:	bf00      	nop
 8005d66:	3730      	adds	r7, #48	; 0x30
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40012c00 	.word	0x40012c00
 8005d70:	40021000 	.word	0x40021000
 8005d74:	40010800 	.word	0x40010800
 8005d78:	40010c00 	.word	0x40010c00
 8005d7c:	40010000 	.word	0x40010000
 8005d80:	40000400 	.word	0x40000400

08005d84 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8005d88:	4b11      	ldr	r3, [pc, #68]	; (8005dd0 <MX_USART1_UART_Init+0x4c>)
 8005d8a:	4a12      	ldr	r2, [pc, #72]	; (8005dd4 <MX_USART1_UART_Init+0x50>)
 8005d8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005d8e:	4b10      	ldr	r3, [pc, #64]	; (8005dd0 <MX_USART1_UART_Init+0x4c>)
 8005d90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005d96:	4b0e      	ldr	r3, [pc, #56]	; (8005dd0 <MX_USART1_UART_Init+0x4c>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005d9c:	4b0c      	ldr	r3, [pc, #48]	; (8005dd0 <MX_USART1_UART_Init+0x4c>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005da2:	4b0b      	ldr	r3, [pc, #44]	; (8005dd0 <MX_USART1_UART_Init+0x4c>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005da8:	4b09      	ldr	r3, [pc, #36]	; (8005dd0 <MX_USART1_UART_Init+0x4c>)
 8005daa:	220c      	movs	r2, #12
 8005dac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005dae:	4b08      	ldr	r3, [pc, #32]	; (8005dd0 <MX_USART1_UART_Init+0x4c>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005db4:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <MX_USART1_UART_Init+0x4c>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005dba:	4805      	ldr	r0, [pc, #20]	; (8005dd0 <MX_USART1_UART_Init+0x4c>)
 8005dbc:	f7fc fe69 	bl	8002a92 <HAL_UART_Init>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005dc6:	f7ff fc33 	bl	8005630 <Error_Handler>
  }

}
 8005dca:	bf00      	nop
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20001a44 	.word	0x20001a44
 8005dd4:	40013800 	.word	0x40013800

08005dd8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8005ddc:	4b11      	ldr	r3, [pc, #68]	; (8005e24 <MX_USART2_UART_Init+0x4c>)
 8005dde:	4a12      	ldr	r2, [pc, #72]	; (8005e28 <MX_USART2_UART_Init+0x50>)
 8005de0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 8005de2:	4b10      	ldr	r3, [pc, #64]	; (8005e24 <MX_USART2_UART_Init+0x4c>)
 8005de4:	4a11      	ldr	r2, [pc, #68]	; (8005e2c <MX_USART2_UART_Init+0x54>)
 8005de6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005de8:	4b0e      	ldr	r3, [pc, #56]	; (8005e24 <MX_USART2_UART_Init+0x4c>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8005dee:	4b0d      	ldr	r3, [pc, #52]	; (8005e24 <MX_USART2_UART_Init+0x4c>)
 8005df0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005df4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005df6:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <MX_USART2_UART_Init+0x4c>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8005dfc:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <MX_USART2_UART_Init+0x4c>)
 8005dfe:	2204      	movs	r2, #4
 8005e00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e02:	4b08      	ldr	r3, [pc, #32]	; (8005e24 <MX_USART2_UART_Init+0x4c>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e08:	4b06      	ldr	r3, [pc, #24]	; (8005e24 <MX_USART2_UART_Init+0x4c>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005e0e:	4805      	ldr	r0, [pc, #20]	; (8005e24 <MX_USART2_UART_Init+0x4c>)
 8005e10:	f7fc fe3f 	bl	8002a92 <HAL_UART_Init>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005e1a:	f7ff fc09 	bl	8005630 <Error_Handler>
  }

}
 8005e1e:	bf00      	nop
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20001a84 	.word	0x20001a84
 8005e28:	40004400 	.word	0x40004400
 8005e2c:	0003d090 	.word	0x0003d090

08005e30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08c      	sub	sp, #48	; 0x30
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e38:	f107 031c 	add.w	r3, r7, #28
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	605a      	str	r2, [r3, #4]
 8005e42:	609a      	str	r2, [r3, #8]
 8005e44:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a41      	ldr	r2, [pc, #260]	; (8005f50 <HAL_UART_MspInit+0x120>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d13e      	bne.n	8005ece <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005e50:	4b40      	ldr	r3, [pc, #256]	; (8005f54 <HAL_UART_MspInit+0x124>)
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	4a3f      	ldr	r2, [pc, #252]	; (8005f54 <HAL_UART_MspInit+0x124>)
 8005e56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e5a:	6193      	str	r3, [r2, #24]
 8005e5c:	4b3d      	ldr	r3, [pc, #244]	; (8005f54 <HAL_UART_MspInit+0x124>)
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e64:	61bb      	str	r3, [r7, #24]
 8005e66:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e68:	4b3a      	ldr	r3, [pc, #232]	; (8005f54 <HAL_UART_MspInit+0x124>)
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	4a39      	ldr	r2, [pc, #228]	; (8005f54 <HAL_UART_MspInit+0x124>)
 8005e6e:	f043 0308 	orr.w	r3, r3, #8
 8005e72:	6193      	str	r3, [r2, #24]
 8005e74:	4b37      	ldr	r3, [pc, #220]	; (8005f54 <HAL_UART_MspInit+0x124>)
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	f003 0308 	and.w	r3, r3, #8
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_DUBUG_Pin;
 8005e80:	2340      	movs	r3, #64	; 0x40
 8005e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e84:	2302      	movs	r3, #2
 8005e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(USART_TX_DUBUG_GPIO_Port, &GPIO_InitStruct);
 8005e8c:	f107 031c 	add.w	r3, r7, #28
 8005e90:	4619      	mov	r1, r3
 8005e92:	4831      	ldr	r0, [pc, #196]	; (8005f58 <HAL_UART_MspInit+0x128>)
 8005e94:	f7fb fa0c 	bl	80012b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_DUBUG_Pin;
 8005e98:	2380      	movs	r3, #128	; 0x80
 8005e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USART_RX_DUBUG_GPIO_Port, &GPIO_InitStruct);
 8005ea4:	f107 031c 	add.w	r3, r7, #28
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	482b      	ldr	r0, [pc, #172]	; (8005f58 <HAL_UART_MspInit+0x128>)
 8005eac:	f7fb fa00 	bl	80012b0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8005eb0:	4b2a      	ldr	r3, [pc, #168]	; (8005f5c <HAL_UART_MspInit+0x12c>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec0:	f043 0304 	orr.w	r3, r3, #4
 8005ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ec6:	4a25      	ldr	r2, [pc, #148]	; (8005f5c <HAL_UART_MspInit+0x12c>)
 8005ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eca:	6053      	str	r3, [r2, #4]
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005ecc:	e03c      	b.n	8005f48 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART2)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a23      	ldr	r2, [pc, #140]	; (8005f60 <HAL_UART_MspInit+0x130>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d137      	bne.n	8005f48 <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005ed8:	4b1e      	ldr	r3, [pc, #120]	; (8005f54 <HAL_UART_MspInit+0x124>)
 8005eda:	69db      	ldr	r3, [r3, #28]
 8005edc:	4a1d      	ldr	r2, [pc, #116]	; (8005f54 <HAL_UART_MspInit+0x124>)
 8005ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ee2:	61d3      	str	r3, [r2, #28]
 8005ee4:	4b1b      	ldr	r3, [pc, #108]	; (8005f54 <HAL_UART_MspInit+0x124>)
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eec:	613b      	str	r3, [r7, #16]
 8005eee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ef0:	4b18      	ldr	r3, [pc, #96]	; (8005f54 <HAL_UART_MspInit+0x124>)
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	4a17      	ldr	r2, [pc, #92]	; (8005f54 <HAL_UART_MspInit+0x124>)
 8005ef6:	f043 0304 	orr.w	r3, r3, #4
 8005efa:	6193      	str	r3, [r2, #24]
 8005efc:	4b15      	ldr	r3, [pc, #84]	; (8005f54 <HAL_UART_MspInit+0x124>)
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	60fb      	str	r3, [r7, #12]
 8005f06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DMX_OUT_Pin;
 8005f08:	2304      	movs	r3, #4
 8005f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f10:	2303      	movs	r3, #3
 8005f12:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(DMX_OUT_GPIO_Port, &GPIO_InitStruct);
 8005f14:	f107 031c 	add.w	r3, r7, #28
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4812      	ldr	r0, [pc, #72]	; (8005f64 <HAL_UART_MspInit+0x134>)
 8005f1c:	f7fb f9c8 	bl	80012b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DMX_IN_Pin;
 8005f20:	2308      	movs	r3, #8
 8005f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f24:	2300      	movs	r3, #0
 8005f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DMX_IN_GPIO_Port, &GPIO_InitStruct);
 8005f2c:	f107 031c 	add.w	r3, r7, #28
 8005f30:	4619      	mov	r1, r3
 8005f32:	480c      	ldr	r0, [pc, #48]	; (8005f64 <HAL_UART_MspInit+0x134>)
 8005f34:	f7fb f9bc 	bl	80012b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005f38:	2200      	movs	r2, #0
 8005f3a:	2105      	movs	r1, #5
 8005f3c:	2026      	movs	r0, #38	; 0x26
 8005f3e:	f7fa ff0a 	bl	8000d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005f42:	2026      	movs	r0, #38	; 0x26
 8005f44:	f7fa ff23 	bl	8000d8e <HAL_NVIC_EnableIRQ>
}
 8005f48:	bf00      	nop
 8005f4a:	3730      	adds	r7, #48	; 0x30
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	40013800 	.word	0x40013800
 8005f54:	40021000 	.word	0x40021000
 8005f58:	40010c00 	.word	0x40010c00
 8005f5c:	40010000 	.word	0x40010000
 8005f60:	40004400 	.word	0x40004400
 8005f64:	40010800 	.word	0x40010800

08005f68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005f68:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005f6a:	e003      	b.n	8005f74 <LoopCopyDataInit>

08005f6c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005f6c:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005f6e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005f70:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005f72:	3104      	adds	r1, #4

08005f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005f74:	480a      	ldr	r0, [pc, #40]	; (8005fa0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005f76:	4b0b      	ldr	r3, [pc, #44]	; (8005fa4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005f78:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005f7a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005f7c:	d3f6      	bcc.n	8005f6c <CopyDataInit>
  ldr r2, =_sbss
 8005f7e:	4a0a      	ldr	r2, [pc, #40]	; (8005fa8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005f80:	e002      	b.n	8005f88 <LoopFillZerobss>

08005f82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005f82:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005f84:	f842 3b04 	str.w	r3, [r2], #4

08005f88 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005f88:	4b08      	ldr	r3, [pc, #32]	; (8005fac <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005f8a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005f8c:	d3f9      	bcc.n	8005f82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005f8e:	f7ff fbe9 	bl	8005764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f92:	f000 f815 	bl	8005fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005f96:	f7ff fa5d 	bl	8005454 <main>
  bx lr
 8005f9a:	4770      	bx	lr
  ldr r3, =_sidata
 8005f9c:	080091a0 	.word	0x080091a0
  ldr r0, =_sdata
 8005fa0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005fa4:	2000008c 	.word	0x2000008c
  ldr r2, =_sbss
 8005fa8:	20000090 	.word	0x20000090
  ldr r3, = _ebss
 8005fac:	20001ac8 	.word	0x20001ac8

08005fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005fb0:	e7fe      	b.n	8005fb0 <ADC1_2_IRQHandler>
	...

08005fb4 <__errno>:
 8005fb4:	4b01      	ldr	r3, [pc, #4]	; (8005fbc <__errno+0x8>)
 8005fb6:	6818      	ldr	r0, [r3, #0]
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	20000028 	.word	0x20000028

08005fc0 <__libc_init_array>:
 8005fc0:	b570      	push	{r4, r5, r6, lr}
 8005fc2:	2500      	movs	r5, #0
 8005fc4:	4e0c      	ldr	r6, [pc, #48]	; (8005ff8 <__libc_init_array+0x38>)
 8005fc6:	4c0d      	ldr	r4, [pc, #52]	; (8005ffc <__libc_init_array+0x3c>)
 8005fc8:	1ba4      	subs	r4, r4, r6
 8005fca:	10a4      	asrs	r4, r4, #2
 8005fcc:	42a5      	cmp	r5, r4
 8005fce:	d109      	bne.n	8005fe4 <__libc_init_array+0x24>
 8005fd0:	f000 fc36 	bl	8006840 <_init>
 8005fd4:	2500      	movs	r5, #0
 8005fd6:	4e0a      	ldr	r6, [pc, #40]	; (8006000 <__libc_init_array+0x40>)
 8005fd8:	4c0a      	ldr	r4, [pc, #40]	; (8006004 <__libc_init_array+0x44>)
 8005fda:	1ba4      	subs	r4, r4, r6
 8005fdc:	10a4      	asrs	r4, r4, #2
 8005fde:	42a5      	cmp	r5, r4
 8005fe0:	d105      	bne.n	8005fee <__libc_init_array+0x2e>
 8005fe2:	bd70      	pop	{r4, r5, r6, pc}
 8005fe4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fe8:	4798      	blx	r3
 8005fea:	3501      	adds	r5, #1
 8005fec:	e7ee      	b.n	8005fcc <__libc_init_array+0xc>
 8005fee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ff2:	4798      	blx	r3
 8005ff4:	3501      	adds	r5, #1
 8005ff6:	e7f2      	b.n	8005fde <__libc_init_array+0x1e>
 8005ff8:	08009198 	.word	0x08009198
 8005ffc:	08009198 	.word	0x08009198
 8006000:	08009198 	.word	0x08009198
 8006004:	0800919c 	.word	0x0800919c

08006008 <memcpy>:
 8006008:	b510      	push	{r4, lr}
 800600a:	1e43      	subs	r3, r0, #1
 800600c:	440a      	add	r2, r1
 800600e:	4291      	cmp	r1, r2
 8006010:	d100      	bne.n	8006014 <memcpy+0xc>
 8006012:	bd10      	pop	{r4, pc}
 8006014:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006018:	f803 4f01 	strb.w	r4, [r3, #1]!
 800601c:	e7f7      	b.n	800600e <memcpy+0x6>

0800601e <memset>:
 800601e:	4603      	mov	r3, r0
 8006020:	4402      	add	r2, r0
 8006022:	4293      	cmp	r3, r2
 8006024:	d100      	bne.n	8006028 <memset+0xa>
 8006026:	4770      	bx	lr
 8006028:	f803 1b01 	strb.w	r1, [r3], #1
 800602c:	e7f9      	b.n	8006022 <memset+0x4>
	...

08006030 <siprintf>:
 8006030:	b40e      	push	{r1, r2, r3}
 8006032:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006036:	b500      	push	{lr}
 8006038:	b09c      	sub	sp, #112	; 0x70
 800603a:	ab1d      	add	r3, sp, #116	; 0x74
 800603c:	9002      	str	r0, [sp, #8]
 800603e:	9006      	str	r0, [sp, #24]
 8006040:	9107      	str	r1, [sp, #28]
 8006042:	9104      	str	r1, [sp, #16]
 8006044:	4808      	ldr	r0, [pc, #32]	; (8006068 <siprintf+0x38>)
 8006046:	4909      	ldr	r1, [pc, #36]	; (800606c <siprintf+0x3c>)
 8006048:	f853 2b04 	ldr.w	r2, [r3], #4
 800604c:	9105      	str	r1, [sp, #20]
 800604e:	6800      	ldr	r0, [r0, #0]
 8006050:	a902      	add	r1, sp, #8
 8006052:	9301      	str	r3, [sp, #4]
 8006054:	f000 f866 	bl	8006124 <_svfiprintf_r>
 8006058:	2200      	movs	r2, #0
 800605a:	9b02      	ldr	r3, [sp, #8]
 800605c:	701a      	strb	r2, [r3, #0]
 800605e:	b01c      	add	sp, #112	; 0x70
 8006060:	f85d eb04 	ldr.w	lr, [sp], #4
 8006064:	b003      	add	sp, #12
 8006066:	4770      	bx	lr
 8006068:	20000028 	.word	0x20000028
 800606c:	ffff0208 	.word	0xffff0208

08006070 <__ssputs_r>:
 8006070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006074:	688e      	ldr	r6, [r1, #8]
 8006076:	4682      	mov	sl, r0
 8006078:	429e      	cmp	r6, r3
 800607a:	460c      	mov	r4, r1
 800607c:	4690      	mov	r8, r2
 800607e:	4699      	mov	r9, r3
 8006080:	d837      	bhi.n	80060f2 <__ssputs_r+0x82>
 8006082:	898a      	ldrh	r2, [r1, #12]
 8006084:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006088:	d031      	beq.n	80060ee <__ssputs_r+0x7e>
 800608a:	2302      	movs	r3, #2
 800608c:	6825      	ldr	r5, [r4, #0]
 800608e:	6909      	ldr	r1, [r1, #16]
 8006090:	1a6f      	subs	r7, r5, r1
 8006092:	6965      	ldr	r5, [r4, #20]
 8006094:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006098:	fb95 f5f3 	sdiv	r5, r5, r3
 800609c:	f109 0301 	add.w	r3, r9, #1
 80060a0:	443b      	add	r3, r7
 80060a2:	429d      	cmp	r5, r3
 80060a4:	bf38      	it	cc
 80060a6:	461d      	movcc	r5, r3
 80060a8:	0553      	lsls	r3, r2, #21
 80060aa:	d530      	bpl.n	800610e <__ssputs_r+0x9e>
 80060ac:	4629      	mov	r1, r5
 80060ae:	f000 fb2d 	bl	800670c <_malloc_r>
 80060b2:	4606      	mov	r6, r0
 80060b4:	b950      	cbnz	r0, 80060cc <__ssputs_r+0x5c>
 80060b6:	230c      	movs	r3, #12
 80060b8:	f04f 30ff 	mov.w	r0, #4294967295
 80060bc:	f8ca 3000 	str.w	r3, [sl]
 80060c0:	89a3      	ldrh	r3, [r4, #12]
 80060c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060c6:	81a3      	strh	r3, [r4, #12]
 80060c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060cc:	463a      	mov	r2, r7
 80060ce:	6921      	ldr	r1, [r4, #16]
 80060d0:	f7ff ff9a 	bl	8006008 <memcpy>
 80060d4:	89a3      	ldrh	r3, [r4, #12]
 80060d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060de:	81a3      	strh	r3, [r4, #12]
 80060e0:	6126      	str	r6, [r4, #16]
 80060e2:	443e      	add	r6, r7
 80060e4:	6026      	str	r6, [r4, #0]
 80060e6:	464e      	mov	r6, r9
 80060e8:	6165      	str	r5, [r4, #20]
 80060ea:	1bed      	subs	r5, r5, r7
 80060ec:	60a5      	str	r5, [r4, #8]
 80060ee:	454e      	cmp	r6, r9
 80060f0:	d900      	bls.n	80060f4 <__ssputs_r+0x84>
 80060f2:	464e      	mov	r6, r9
 80060f4:	4632      	mov	r2, r6
 80060f6:	4641      	mov	r1, r8
 80060f8:	6820      	ldr	r0, [r4, #0]
 80060fa:	f000 faa1 	bl	8006640 <memmove>
 80060fe:	68a3      	ldr	r3, [r4, #8]
 8006100:	2000      	movs	r0, #0
 8006102:	1b9b      	subs	r3, r3, r6
 8006104:	60a3      	str	r3, [r4, #8]
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	441e      	add	r6, r3
 800610a:	6026      	str	r6, [r4, #0]
 800610c:	e7dc      	b.n	80060c8 <__ssputs_r+0x58>
 800610e:	462a      	mov	r2, r5
 8006110:	f000 fb56 	bl	80067c0 <_realloc_r>
 8006114:	4606      	mov	r6, r0
 8006116:	2800      	cmp	r0, #0
 8006118:	d1e2      	bne.n	80060e0 <__ssputs_r+0x70>
 800611a:	6921      	ldr	r1, [r4, #16]
 800611c:	4650      	mov	r0, sl
 800611e:	f000 faa9 	bl	8006674 <_free_r>
 8006122:	e7c8      	b.n	80060b6 <__ssputs_r+0x46>

08006124 <_svfiprintf_r>:
 8006124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006128:	461d      	mov	r5, r3
 800612a:	898b      	ldrh	r3, [r1, #12]
 800612c:	b09d      	sub	sp, #116	; 0x74
 800612e:	061f      	lsls	r7, r3, #24
 8006130:	4680      	mov	r8, r0
 8006132:	460c      	mov	r4, r1
 8006134:	4616      	mov	r6, r2
 8006136:	d50f      	bpl.n	8006158 <_svfiprintf_r+0x34>
 8006138:	690b      	ldr	r3, [r1, #16]
 800613a:	b96b      	cbnz	r3, 8006158 <_svfiprintf_r+0x34>
 800613c:	2140      	movs	r1, #64	; 0x40
 800613e:	f000 fae5 	bl	800670c <_malloc_r>
 8006142:	6020      	str	r0, [r4, #0]
 8006144:	6120      	str	r0, [r4, #16]
 8006146:	b928      	cbnz	r0, 8006154 <_svfiprintf_r+0x30>
 8006148:	230c      	movs	r3, #12
 800614a:	f8c8 3000 	str.w	r3, [r8]
 800614e:	f04f 30ff 	mov.w	r0, #4294967295
 8006152:	e0c8      	b.n	80062e6 <_svfiprintf_r+0x1c2>
 8006154:	2340      	movs	r3, #64	; 0x40
 8006156:	6163      	str	r3, [r4, #20]
 8006158:	2300      	movs	r3, #0
 800615a:	9309      	str	r3, [sp, #36]	; 0x24
 800615c:	2320      	movs	r3, #32
 800615e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006162:	2330      	movs	r3, #48	; 0x30
 8006164:	f04f 0b01 	mov.w	fp, #1
 8006168:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800616c:	9503      	str	r5, [sp, #12]
 800616e:	4637      	mov	r7, r6
 8006170:	463d      	mov	r5, r7
 8006172:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006176:	b10b      	cbz	r3, 800617c <_svfiprintf_r+0x58>
 8006178:	2b25      	cmp	r3, #37	; 0x25
 800617a:	d13e      	bne.n	80061fa <_svfiprintf_r+0xd6>
 800617c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006180:	d00b      	beq.n	800619a <_svfiprintf_r+0x76>
 8006182:	4653      	mov	r3, sl
 8006184:	4632      	mov	r2, r6
 8006186:	4621      	mov	r1, r4
 8006188:	4640      	mov	r0, r8
 800618a:	f7ff ff71 	bl	8006070 <__ssputs_r>
 800618e:	3001      	adds	r0, #1
 8006190:	f000 80a4 	beq.w	80062dc <_svfiprintf_r+0x1b8>
 8006194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006196:	4453      	add	r3, sl
 8006198:	9309      	str	r3, [sp, #36]	; 0x24
 800619a:	783b      	ldrb	r3, [r7, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 809d 	beq.w	80062dc <_svfiprintf_r+0x1b8>
 80061a2:	2300      	movs	r3, #0
 80061a4:	f04f 32ff 	mov.w	r2, #4294967295
 80061a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061ac:	9304      	str	r3, [sp, #16]
 80061ae:	9307      	str	r3, [sp, #28]
 80061b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061b4:	931a      	str	r3, [sp, #104]	; 0x68
 80061b6:	462f      	mov	r7, r5
 80061b8:	2205      	movs	r2, #5
 80061ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80061be:	4850      	ldr	r0, [pc, #320]	; (8006300 <_svfiprintf_r+0x1dc>)
 80061c0:	f000 fa30 	bl	8006624 <memchr>
 80061c4:	9b04      	ldr	r3, [sp, #16]
 80061c6:	b9d0      	cbnz	r0, 80061fe <_svfiprintf_r+0xda>
 80061c8:	06d9      	lsls	r1, r3, #27
 80061ca:	bf44      	itt	mi
 80061cc:	2220      	movmi	r2, #32
 80061ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80061d2:	071a      	lsls	r2, r3, #28
 80061d4:	bf44      	itt	mi
 80061d6:	222b      	movmi	r2, #43	; 0x2b
 80061d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80061dc:	782a      	ldrb	r2, [r5, #0]
 80061de:	2a2a      	cmp	r2, #42	; 0x2a
 80061e0:	d015      	beq.n	800620e <_svfiprintf_r+0xea>
 80061e2:	462f      	mov	r7, r5
 80061e4:	2000      	movs	r0, #0
 80061e6:	250a      	movs	r5, #10
 80061e8:	9a07      	ldr	r2, [sp, #28]
 80061ea:	4639      	mov	r1, r7
 80061ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061f0:	3b30      	subs	r3, #48	; 0x30
 80061f2:	2b09      	cmp	r3, #9
 80061f4:	d94d      	bls.n	8006292 <_svfiprintf_r+0x16e>
 80061f6:	b1b8      	cbz	r0, 8006228 <_svfiprintf_r+0x104>
 80061f8:	e00f      	b.n	800621a <_svfiprintf_r+0xf6>
 80061fa:	462f      	mov	r7, r5
 80061fc:	e7b8      	b.n	8006170 <_svfiprintf_r+0x4c>
 80061fe:	4a40      	ldr	r2, [pc, #256]	; (8006300 <_svfiprintf_r+0x1dc>)
 8006200:	463d      	mov	r5, r7
 8006202:	1a80      	subs	r0, r0, r2
 8006204:	fa0b f000 	lsl.w	r0, fp, r0
 8006208:	4318      	orrs	r0, r3
 800620a:	9004      	str	r0, [sp, #16]
 800620c:	e7d3      	b.n	80061b6 <_svfiprintf_r+0x92>
 800620e:	9a03      	ldr	r2, [sp, #12]
 8006210:	1d11      	adds	r1, r2, #4
 8006212:	6812      	ldr	r2, [r2, #0]
 8006214:	9103      	str	r1, [sp, #12]
 8006216:	2a00      	cmp	r2, #0
 8006218:	db01      	blt.n	800621e <_svfiprintf_r+0xfa>
 800621a:	9207      	str	r2, [sp, #28]
 800621c:	e004      	b.n	8006228 <_svfiprintf_r+0x104>
 800621e:	4252      	negs	r2, r2
 8006220:	f043 0302 	orr.w	r3, r3, #2
 8006224:	9207      	str	r2, [sp, #28]
 8006226:	9304      	str	r3, [sp, #16]
 8006228:	783b      	ldrb	r3, [r7, #0]
 800622a:	2b2e      	cmp	r3, #46	; 0x2e
 800622c:	d10c      	bne.n	8006248 <_svfiprintf_r+0x124>
 800622e:	787b      	ldrb	r3, [r7, #1]
 8006230:	2b2a      	cmp	r3, #42	; 0x2a
 8006232:	d133      	bne.n	800629c <_svfiprintf_r+0x178>
 8006234:	9b03      	ldr	r3, [sp, #12]
 8006236:	3702      	adds	r7, #2
 8006238:	1d1a      	adds	r2, r3, #4
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	9203      	str	r2, [sp, #12]
 800623e:	2b00      	cmp	r3, #0
 8006240:	bfb8      	it	lt
 8006242:	f04f 33ff 	movlt.w	r3, #4294967295
 8006246:	9305      	str	r3, [sp, #20]
 8006248:	4d2e      	ldr	r5, [pc, #184]	; (8006304 <_svfiprintf_r+0x1e0>)
 800624a:	2203      	movs	r2, #3
 800624c:	7839      	ldrb	r1, [r7, #0]
 800624e:	4628      	mov	r0, r5
 8006250:	f000 f9e8 	bl	8006624 <memchr>
 8006254:	b138      	cbz	r0, 8006266 <_svfiprintf_r+0x142>
 8006256:	2340      	movs	r3, #64	; 0x40
 8006258:	1b40      	subs	r0, r0, r5
 800625a:	fa03 f000 	lsl.w	r0, r3, r0
 800625e:	9b04      	ldr	r3, [sp, #16]
 8006260:	3701      	adds	r7, #1
 8006262:	4303      	orrs	r3, r0
 8006264:	9304      	str	r3, [sp, #16]
 8006266:	7839      	ldrb	r1, [r7, #0]
 8006268:	2206      	movs	r2, #6
 800626a:	4827      	ldr	r0, [pc, #156]	; (8006308 <_svfiprintf_r+0x1e4>)
 800626c:	1c7e      	adds	r6, r7, #1
 800626e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006272:	f000 f9d7 	bl	8006624 <memchr>
 8006276:	2800      	cmp	r0, #0
 8006278:	d038      	beq.n	80062ec <_svfiprintf_r+0x1c8>
 800627a:	4b24      	ldr	r3, [pc, #144]	; (800630c <_svfiprintf_r+0x1e8>)
 800627c:	bb13      	cbnz	r3, 80062c4 <_svfiprintf_r+0x1a0>
 800627e:	9b03      	ldr	r3, [sp, #12]
 8006280:	3307      	adds	r3, #7
 8006282:	f023 0307 	bic.w	r3, r3, #7
 8006286:	3308      	adds	r3, #8
 8006288:	9303      	str	r3, [sp, #12]
 800628a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800628c:	444b      	add	r3, r9
 800628e:	9309      	str	r3, [sp, #36]	; 0x24
 8006290:	e76d      	b.n	800616e <_svfiprintf_r+0x4a>
 8006292:	fb05 3202 	mla	r2, r5, r2, r3
 8006296:	2001      	movs	r0, #1
 8006298:	460f      	mov	r7, r1
 800629a:	e7a6      	b.n	80061ea <_svfiprintf_r+0xc6>
 800629c:	2300      	movs	r3, #0
 800629e:	250a      	movs	r5, #10
 80062a0:	4619      	mov	r1, r3
 80062a2:	3701      	adds	r7, #1
 80062a4:	9305      	str	r3, [sp, #20]
 80062a6:	4638      	mov	r0, r7
 80062a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062ac:	3a30      	subs	r2, #48	; 0x30
 80062ae:	2a09      	cmp	r2, #9
 80062b0:	d903      	bls.n	80062ba <_svfiprintf_r+0x196>
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0c8      	beq.n	8006248 <_svfiprintf_r+0x124>
 80062b6:	9105      	str	r1, [sp, #20]
 80062b8:	e7c6      	b.n	8006248 <_svfiprintf_r+0x124>
 80062ba:	fb05 2101 	mla	r1, r5, r1, r2
 80062be:	2301      	movs	r3, #1
 80062c0:	4607      	mov	r7, r0
 80062c2:	e7f0      	b.n	80062a6 <_svfiprintf_r+0x182>
 80062c4:	ab03      	add	r3, sp, #12
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	4622      	mov	r2, r4
 80062ca:	4b11      	ldr	r3, [pc, #68]	; (8006310 <_svfiprintf_r+0x1ec>)
 80062cc:	a904      	add	r1, sp, #16
 80062ce:	4640      	mov	r0, r8
 80062d0:	f3af 8000 	nop.w
 80062d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80062d8:	4681      	mov	r9, r0
 80062da:	d1d6      	bne.n	800628a <_svfiprintf_r+0x166>
 80062dc:	89a3      	ldrh	r3, [r4, #12]
 80062de:	065b      	lsls	r3, r3, #25
 80062e0:	f53f af35 	bmi.w	800614e <_svfiprintf_r+0x2a>
 80062e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062e6:	b01d      	add	sp, #116	; 0x74
 80062e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ec:	ab03      	add	r3, sp, #12
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	4622      	mov	r2, r4
 80062f2:	4b07      	ldr	r3, [pc, #28]	; (8006310 <_svfiprintf_r+0x1ec>)
 80062f4:	a904      	add	r1, sp, #16
 80062f6:	4640      	mov	r0, r8
 80062f8:	f000 f882 	bl	8006400 <_printf_i>
 80062fc:	e7ea      	b.n	80062d4 <_svfiprintf_r+0x1b0>
 80062fe:	bf00      	nop
 8006300:	08009164 	.word	0x08009164
 8006304:	0800916a 	.word	0x0800916a
 8006308:	0800916e 	.word	0x0800916e
 800630c:	00000000 	.word	0x00000000
 8006310:	08006071 	.word	0x08006071

08006314 <_printf_common>:
 8006314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006318:	4691      	mov	r9, r2
 800631a:	461f      	mov	r7, r3
 800631c:	688a      	ldr	r2, [r1, #8]
 800631e:	690b      	ldr	r3, [r1, #16]
 8006320:	4606      	mov	r6, r0
 8006322:	4293      	cmp	r3, r2
 8006324:	bfb8      	it	lt
 8006326:	4613      	movlt	r3, r2
 8006328:	f8c9 3000 	str.w	r3, [r9]
 800632c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006330:	460c      	mov	r4, r1
 8006332:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006336:	b112      	cbz	r2, 800633e <_printf_common+0x2a>
 8006338:	3301      	adds	r3, #1
 800633a:	f8c9 3000 	str.w	r3, [r9]
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	0699      	lsls	r1, r3, #26
 8006342:	bf42      	ittt	mi
 8006344:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006348:	3302      	addmi	r3, #2
 800634a:	f8c9 3000 	strmi.w	r3, [r9]
 800634e:	6825      	ldr	r5, [r4, #0]
 8006350:	f015 0506 	ands.w	r5, r5, #6
 8006354:	d107      	bne.n	8006366 <_printf_common+0x52>
 8006356:	f104 0a19 	add.w	sl, r4, #25
 800635a:	68e3      	ldr	r3, [r4, #12]
 800635c:	f8d9 2000 	ldr.w	r2, [r9]
 8006360:	1a9b      	subs	r3, r3, r2
 8006362:	42ab      	cmp	r3, r5
 8006364:	dc29      	bgt.n	80063ba <_printf_common+0xa6>
 8006366:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800636a:	6822      	ldr	r2, [r4, #0]
 800636c:	3300      	adds	r3, #0
 800636e:	bf18      	it	ne
 8006370:	2301      	movne	r3, #1
 8006372:	0692      	lsls	r2, r2, #26
 8006374:	d42e      	bmi.n	80063d4 <_printf_common+0xc0>
 8006376:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800637a:	4639      	mov	r1, r7
 800637c:	4630      	mov	r0, r6
 800637e:	47c0      	blx	r8
 8006380:	3001      	adds	r0, #1
 8006382:	d021      	beq.n	80063c8 <_printf_common+0xb4>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	68e5      	ldr	r5, [r4, #12]
 8006388:	f003 0306 	and.w	r3, r3, #6
 800638c:	2b04      	cmp	r3, #4
 800638e:	bf18      	it	ne
 8006390:	2500      	movne	r5, #0
 8006392:	f8d9 2000 	ldr.w	r2, [r9]
 8006396:	f04f 0900 	mov.w	r9, #0
 800639a:	bf08      	it	eq
 800639c:	1aad      	subeq	r5, r5, r2
 800639e:	68a3      	ldr	r3, [r4, #8]
 80063a0:	6922      	ldr	r2, [r4, #16]
 80063a2:	bf08      	it	eq
 80063a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063a8:	4293      	cmp	r3, r2
 80063aa:	bfc4      	itt	gt
 80063ac:	1a9b      	subgt	r3, r3, r2
 80063ae:	18ed      	addgt	r5, r5, r3
 80063b0:	341a      	adds	r4, #26
 80063b2:	454d      	cmp	r5, r9
 80063b4:	d11a      	bne.n	80063ec <_printf_common+0xd8>
 80063b6:	2000      	movs	r0, #0
 80063b8:	e008      	b.n	80063cc <_printf_common+0xb8>
 80063ba:	2301      	movs	r3, #1
 80063bc:	4652      	mov	r2, sl
 80063be:	4639      	mov	r1, r7
 80063c0:	4630      	mov	r0, r6
 80063c2:	47c0      	blx	r8
 80063c4:	3001      	adds	r0, #1
 80063c6:	d103      	bne.n	80063d0 <_printf_common+0xbc>
 80063c8:	f04f 30ff 	mov.w	r0, #4294967295
 80063cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063d0:	3501      	adds	r5, #1
 80063d2:	e7c2      	b.n	800635a <_printf_common+0x46>
 80063d4:	2030      	movs	r0, #48	; 0x30
 80063d6:	18e1      	adds	r1, r4, r3
 80063d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063dc:	1c5a      	adds	r2, r3, #1
 80063de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063e2:	4422      	add	r2, r4
 80063e4:	3302      	adds	r3, #2
 80063e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063ea:	e7c4      	b.n	8006376 <_printf_common+0x62>
 80063ec:	2301      	movs	r3, #1
 80063ee:	4622      	mov	r2, r4
 80063f0:	4639      	mov	r1, r7
 80063f2:	4630      	mov	r0, r6
 80063f4:	47c0      	blx	r8
 80063f6:	3001      	adds	r0, #1
 80063f8:	d0e6      	beq.n	80063c8 <_printf_common+0xb4>
 80063fa:	f109 0901 	add.w	r9, r9, #1
 80063fe:	e7d8      	b.n	80063b2 <_printf_common+0x9e>

08006400 <_printf_i>:
 8006400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006404:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006408:	460c      	mov	r4, r1
 800640a:	7e09      	ldrb	r1, [r1, #24]
 800640c:	b085      	sub	sp, #20
 800640e:	296e      	cmp	r1, #110	; 0x6e
 8006410:	4617      	mov	r7, r2
 8006412:	4606      	mov	r6, r0
 8006414:	4698      	mov	r8, r3
 8006416:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006418:	f000 80b3 	beq.w	8006582 <_printf_i+0x182>
 800641c:	d822      	bhi.n	8006464 <_printf_i+0x64>
 800641e:	2963      	cmp	r1, #99	; 0x63
 8006420:	d036      	beq.n	8006490 <_printf_i+0x90>
 8006422:	d80a      	bhi.n	800643a <_printf_i+0x3a>
 8006424:	2900      	cmp	r1, #0
 8006426:	f000 80b9 	beq.w	800659c <_printf_i+0x19c>
 800642a:	2958      	cmp	r1, #88	; 0x58
 800642c:	f000 8083 	beq.w	8006536 <_printf_i+0x136>
 8006430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006434:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006438:	e032      	b.n	80064a0 <_printf_i+0xa0>
 800643a:	2964      	cmp	r1, #100	; 0x64
 800643c:	d001      	beq.n	8006442 <_printf_i+0x42>
 800643e:	2969      	cmp	r1, #105	; 0x69
 8006440:	d1f6      	bne.n	8006430 <_printf_i+0x30>
 8006442:	6820      	ldr	r0, [r4, #0]
 8006444:	6813      	ldr	r3, [r2, #0]
 8006446:	0605      	lsls	r5, r0, #24
 8006448:	f103 0104 	add.w	r1, r3, #4
 800644c:	d52a      	bpl.n	80064a4 <_printf_i+0xa4>
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6011      	str	r1, [r2, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	da03      	bge.n	800645e <_printf_i+0x5e>
 8006456:	222d      	movs	r2, #45	; 0x2d
 8006458:	425b      	negs	r3, r3
 800645a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800645e:	486f      	ldr	r0, [pc, #444]	; (800661c <_printf_i+0x21c>)
 8006460:	220a      	movs	r2, #10
 8006462:	e039      	b.n	80064d8 <_printf_i+0xd8>
 8006464:	2973      	cmp	r1, #115	; 0x73
 8006466:	f000 809d 	beq.w	80065a4 <_printf_i+0x1a4>
 800646a:	d808      	bhi.n	800647e <_printf_i+0x7e>
 800646c:	296f      	cmp	r1, #111	; 0x6f
 800646e:	d020      	beq.n	80064b2 <_printf_i+0xb2>
 8006470:	2970      	cmp	r1, #112	; 0x70
 8006472:	d1dd      	bne.n	8006430 <_printf_i+0x30>
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	f043 0320 	orr.w	r3, r3, #32
 800647a:	6023      	str	r3, [r4, #0]
 800647c:	e003      	b.n	8006486 <_printf_i+0x86>
 800647e:	2975      	cmp	r1, #117	; 0x75
 8006480:	d017      	beq.n	80064b2 <_printf_i+0xb2>
 8006482:	2978      	cmp	r1, #120	; 0x78
 8006484:	d1d4      	bne.n	8006430 <_printf_i+0x30>
 8006486:	2378      	movs	r3, #120	; 0x78
 8006488:	4865      	ldr	r0, [pc, #404]	; (8006620 <_printf_i+0x220>)
 800648a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800648e:	e055      	b.n	800653c <_printf_i+0x13c>
 8006490:	6813      	ldr	r3, [r2, #0]
 8006492:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006496:	1d19      	adds	r1, r3, #4
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6011      	str	r1, [r2, #0]
 800649c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064a0:	2301      	movs	r3, #1
 80064a2:	e08c      	b.n	80065be <_printf_i+0x1be>
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064aa:	6011      	str	r1, [r2, #0]
 80064ac:	bf18      	it	ne
 80064ae:	b21b      	sxthne	r3, r3
 80064b0:	e7cf      	b.n	8006452 <_printf_i+0x52>
 80064b2:	6813      	ldr	r3, [r2, #0]
 80064b4:	6825      	ldr	r5, [r4, #0]
 80064b6:	1d18      	adds	r0, r3, #4
 80064b8:	6010      	str	r0, [r2, #0]
 80064ba:	0628      	lsls	r0, r5, #24
 80064bc:	d501      	bpl.n	80064c2 <_printf_i+0xc2>
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	e002      	b.n	80064c8 <_printf_i+0xc8>
 80064c2:	0668      	lsls	r0, r5, #25
 80064c4:	d5fb      	bpl.n	80064be <_printf_i+0xbe>
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	296f      	cmp	r1, #111	; 0x6f
 80064ca:	bf14      	ite	ne
 80064cc:	220a      	movne	r2, #10
 80064ce:	2208      	moveq	r2, #8
 80064d0:	4852      	ldr	r0, [pc, #328]	; (800661c <_printf_i+0x21c>)
 80064d2:	2100      	movs	r1, #0
 80064d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064d8:	6865      	ldr	r5, [r4, #4]
 80064da:	2d00      	cmp	r5, #0
 80064dc:	60a5      	str	r5, [r4, #8]
 80064de:	f2c0 8095 	blt.w	800660c <_printf_i+0x20c>
 80064e2:	6821      	ldr	r1, [r4, #0]
 80064e4:	f021 0104 	bic.w	r1, r1, #4
 80064e8:	6021      	str	r1, [r4, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d13d      	bne.n	800656a <_printf_i+0x16a>
 80064ee:	2d00      	cmp	r5, #0
 80064f0:	f040 808e 	bne.w	8006610 <_printf_i+0x210>
 80064f4:	4665      	mov	r5, ip
 80064f6:	2a08      	cmp	r2, #8
 80064f8:	d10b      	bne.n	8006512 <_printf_i+0x112>
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	07db      	lsls	r3, r3, #31
 80064fe:	d508      	bpl.n	8006512 <_printf_i+0x112>
 8006500:	6923      	ldr	r3, [r4, #16]
 8006502:	6862      	ldr	r2, [r4, #4]
 8006504:	429a      	cmp	r2, r3
 8006506:	bfde      	ittt	le
 8006508:	2330      	movle	r3, #48	; 0x30
 800650a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800650e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006512:	ebac 0305 	sub.w	r3, ip, r5
 8006516:	6123      	str	r3, [r4, #16]
 8006518:	f8cd 8000 	str.w	r8, [sp]
 800651c:	463b      	mov	r3, r7
 800651e:	aa03      	add	r2, sp, #12
 8006520:	4621      	mov	r1, r4
 8006522:	4630      	mov	r0, r6
 8006524:	f7ff fef6 	bl	8006314 <_printf_common>
 8006528:	3001      	adds	r0, #1
 800652a:	d14d      	bne.n	80065c8 <_printf_i+0x1c8>
 800652c:	f04f 30ff 	mov.w	r0, #4294967295
 8006530:	b005      	add	sp, #20
 8006532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006536:	4839      	ldr	r0, [pc, #228]	; (800661c <_printf_i+0x21c>)
 8006538:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800653c:	6813      	ldr	r3, [r2, #0]
 800653e:	6821      	ldr	r1, [r4, #0]
 8006540:	1d1d      	adds	r5, r3, #4
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6015      	str	r5, [r2, #0]
 8006546:	060a      	lsls	r2, r1, #24
 8006548:	d50b      	bpl.n	8006562 <_printf_i+0x162>
 800654a:	07ca      	lsls	r2, r1, #31
 800654c:	bf44      	itt	mi
 800654e:	f041 0120 	orrmi.w	r1, r1, #32
 8006552:	6021      	strmi	r1, [r4, #0]
 8006554:	b91b      	cbnz	r3, 800655e <_printf_i+0x15e>
 8006556:	6822      	ldr	r2, [r4, #0]
 8006558:	f022 0220 	bic.w	r2, r2, #32
 800655c:	6022      	str	r2, [r4, #0]
 800655e:	2210      	movs	r2, #16
 8006560:	e7b7      	b.n	80064d2 <_printf_i+0xd2>
 8006562:	064d      	lsls	r5, r1, #25
 8006564:	bf48      	it	mi
 8006566:	b29b      	uxthmi	r3, r3
 8006568:	e7ef      	b.n	800654a <_printf_i+0x14a>
 800656a:	4665      	mov	r5, ip
 800656c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006570:	fb02 3311 	mls	r3, r2, r1, r3
 8006574:	5cc3      	ldrb	r3, [r0, r3]
 8006576:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800657a:	460b      	mov	r3, r1
 800657c:	2900      	cmp	r1, #0
 800657e:	d1f5      	bne.n	800656c <_printf_i+0x16c>
 8006580:	e7b9      	b.n	80064f6 <_printf_i+0xf6>
 8006582:	6813      	ldr	r3, [r2, #0]
 8006584:	6825      	ldr	r5, [r4, #0]
 8006586:	1d18      	adds	r0, r3, #4
 8006588:	6961      	ldr	r1, [r4, #20]
 800658a:	6010      	str	r0, [r2, #0]
 800658c:	0628      	lsls	r0, r5, #24
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	d501      	bpl.n	8006596 <_printf_i+0x196>
 8006592:	6019      	str	r1, [r3, #0]
 8006594:	e002      	b.n	800659c <_printf_i+0x19c>
 8006596:	066a      	lsls	r2, r5, #25
 8006598:	d5fb      	bpl.n	8006592 <_printf_i+0x192>
 800659a:	8019      	strh	r1, [r3, #0]
 800659c:	2300      	movs	r3, #0
 800659e:	4665      	mov	r5, ip
 80065a0:	6123      	str	r3, [r4, #16]
 80065a2:	e7b9      	b.n	8006518 <_printf_i+0x118>
 80065a4:	6813      	ldr	r3, [r2, #0]
 80065a6:	1d19      	adds	r1, r3, #4
 80065a8:	6011      	str	r1, [r2, #0]
 80065aa:	681d      	ldr	r5, [r3, #0]
 80065ac:	6862      	ldr	r2, [r4, #4]
 80065ae:	2100      	movs	r1, #0
 80065b0:	4628      	mov	r0, r5
 80065b2:	f000 f837 	bl	8006624 <memchr>
 80065b6:	b108      	cbz	r0, 80065bc <_printf_i+0x1bc>
 80065b8:	1b40      	subs	r0, r0, r5
 80065ba:	6060      	str	r0, [r4, #4]
 80065bc:	6863      	ldr	r3, [r4, #4]
 80065be:	6123      	str	r3, [r4, #16]
 80065c0:	2300      	movs	r3, #0
 80065c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065c6:	e7a7      	b.n	8006518 <_printf_i+0x118>
 80065c8:	6923      	ldr	r3, [r4, #16]
 80065ca:	462a      	mov	r2, r5
 80065cc:	4639      	mov	r1, r7
 80065ce:	4630      	mov	r0, r6
 80065d0:	47c0      	blx	r8
 80065d2:	3001      	adds	r0, #1
 80065d4:	d0aa      	beq.n	800652c <_printf_i+0x12c>
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	079b      	lsls	r3, r3, #30
 80065da:	d413      	bmi.n	8006604 <_printf_i+0x204>
 80065dc:	68e0      	ldr	r0, [r4, #12]
 80065de:	9b03      	ldr	r3, [sp, #12]
 80065e0:	4298      	cmp	r0, r3
 80065e2:	bfb8      	it	lt
 80065e4:	4618      	movlt	r0, r3
 80065e6:	e7a3      	b.n	8006530 <_printf_i+0x130>
 80065e8:	2301      	movs	r3, #1
 80065ea:	464a      	mov	r2, r9
 80065ec:	4639      	mov	r1, r7
 80065ee:	4630      	mov	r0, r6
 80065f0:	47c0      	blx	r8
 80065f2:	3001      	adds	r0, #1
 80065f4:	d09a      	beq.n	800652c <_printf_i+0x12c>
 80065f6:	3501      	adds	r5, #1
 80065f8:	68e3      	ldr	r3, [r4, #12]
 80065fa:	9a03      	ldr	r2, [sp, #12]
 80065fc:	1a9b      	subs	r3, r3, r2
 80065fe:	42ab      	cmp	r3, r5
 8006600:	dcf2      	bgt.n	80065e8 <_printf_i+0x1e8>
 8006602:	e7eb      	b.n	80065dc <_printf_i+0x1dc>
 8006604:	2500      	movs	r5, #0
 8006606:	f104 0919 	add.w	r9, r4, #25
 800660a:	e7f5      	b.n	80065f8 <_printf_i+0x1f8>
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1ac      	bne.n	800656a <_printf_i+0x16a>
 8006610:	7803      	ldrb	r3, [r0, #0]
 8006612:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006616:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800661a:	e76c      	b.n	80064f6 <_printf_i+0xf6>
 800661c:	08009175 	.word	0x08009175
 8006620:	08009186 	.word	0x08009186

08006624 <memchr>:
 8006624:	b510      	push	{r4, lr}
 8006626:	b2c9      	uxtb	r1, r1
 8006628:	4402      	add	r2, r0
 800662a:	4290      	cmp	r0, r2
 800662c:	4603      	mov	r3, r0
 800662e:	d101      	bne.n	8006634 <memchr+0x10>
 8006630:	2300      	movs	r3, #0
 8006632:	e003      	b.n	800663c <memchr+0x18>
 8006634:	781c      	ldrb	r4, [r3, #0]
 8006636:	3001      	adds	r0, #1
 8006638:	428c      	cmp	r4, r1
 800663a:	d1f6      	bne.n	800662a <memchr+0x6>
 800663c:	4618      	mov	r0, r3
 800663e:	bd10      	pop	{r4, pc}

08006640 <memmove>:
 8006640:	4288      	cmp	r0, r1
 8006642:	b510      	push	{r4, lr}
 8006644:	eb01 0302 	add.w	r3, r1, r2
 8006648:	d807      	bhi.n	800665a <memmove+0x1a>
 800664a:	1e42      	subs	r2, r0, #1
 800664c:	4299      	cmp	r1, r3
 800664e:	d00a      	beq.n	8006666 <memmove+0x26>
 8006650:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006654:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006658:	e7f8      	b.n	800664c <memmove+0xc>
 800665a:	4283      	cmp	r3, r0
 800665c:	d9f5      	bls.n	800664a <memmove+0xa>
 800665e:	1881      	adds	r1, r0, r2
 8006660:	1ad2      	subs	r2, r2, r3
 8006662:	42d3      	cmn	r3, r2
 8006664:	d100      	bne.n	8006668 <memmove+0x28>
 8006666:	bd10      	pop	{r4, pc}
 8006668:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800666c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006670:	e7f7      	b.n	8006662 <memmove+0x22>
	...

08006674 <_free_r>:
 8006674:	b538      	push	{r3, r4, r5, lr}
 8006676:	4605      	mov	r5, r0
 8006678:	2900      	cmp	r1, #0
 800667a:	d043      	beq.n	8006704 <_free_r+0x90>
 800667c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006680:	1f0c      	subs	r4, r1, #4
 8006682:	2b00      	cmp	r3, #0
 8006684:	bfb8      	it	lt
 8006686:	18e4      	addlt	r4, r4, r3
 8006688:	f000 f8d0 	bl	800682c <__malloc_lock>
 800668c:	4a1e      	ldr	r2, [pc, #120]	; (8006708 <_free_r+0x94>)
 800668e:	6813      	ldr	r3, [r2, #0]
 8006690:	4610      	mov	r0, r2
 8006692:	b933      	cbnz	r3, 80066a2 <_free_r+0x2e>
 8006694:	6063      	str	r3, [r4, #4]
 8006696:	6014      	str	r4, [r2, #0]
 8006698:	4628      	mov	r0, r5
 800669a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800669e:	f000 b8c6 	b.w	800682e <__malloc_unlock>
 80066a2:	42a3      	cmp	r3, r4
 80066a4:	d90b      	bls.n	80066be <_free_r+0x4a>
 80066a6:	6821      	ldr	r1, [r4, #0]
 80066a8:	1862      	adds	r2, r4, r1
 80066aa:	4293      	cmp	r3, r2
 80066ac:	bf01      	itttt	eq
 80066ae:	681a      	ldreq	r2, [r3, #0]
 80066b0:	685b      	ldreq	r3, [r3, #4]
 80066b2:	1852      	addeq	r2, r2, r1
 80066b4:	6022      	streq	r2, [r4, #0]
 80066b6:	6063      	str	r3, [r4, #4]
 80066b8:	6004      	str	r4, [r0, #0]
 80066ba:	e7ed      	b.n	8006698 <_free_r+0x24>
 80066bc:	4613      	mov	r3, r2
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	b10a      	cbz	r2, 80066c6 <_free_r+0x52>
 80066c2:	42a2      	cmp	r2, r4
 80066c4:	d9fa      	bls.n	80066bc <_free_r+0x48>
 80066c6:	6819      	ldr	r1, [r3, #0]
 80066c8:	1858      	adds	r0, r3, r1
 80066ca:	42a0      	cmp	r0, r4
 80066cc:	d10b      	bne.n	80066e6 <_free_r+0x72>
 80066ce:	6820      	ldr	r0, [r4, #0]
 80066d0:	4401      	add	r1, r0
 80066d2:	1858      	adds	r0, r3, r1
 80066d4:	4282      	cmp	r2, r0
 80066d6:	6019      	str	r1, [r3, #0]
 80066d8:	d1de      	bne.n	8006698 <_free_r+0x24>
 80066da:	6810      	ldr	r0, [r2, #0]
 80066dc:	6852      	ldr	r2, [r2, #4]
 80066de:	4401      	add	r1, r0
 80066e0:	6019      	str	r1, [r3, #0]
 80066e2:	605a      	str	r2, [r3, #4]
 80066e4:	e7d8      	b.n	8006698 <_free_r+0x24>
 80066e6:	d902      	bls.n	80066ee <_free_r+0x7a>
 80066e8:	230c      	movs	r3, #12
 80066ea:	602b      	str	r3, [r5, #0]
 80066ec:	e7d4      	b.n	8006698 <_free_r+0x24>
 80066ee:	6820      	ldr	r0, [r4, #0]
 80066f0:	1821      	adds	r1, r4, r0
 80066f2:	428a      	cmp	r2, r1
 80066f4:	bf01      	itttt	eq
 80066f6:	6811      	ldreq	r1, [r2, #0]
 80066f8:	6852      	ldreq	r2, [r2, #4]
 80066fa:	1809      	addeq	r1, r1, r0
 80066fc:	6021      	streq	r1, [r4, #0]
 80066fe:	6062      	str	r2, [r4, #4]
 8006700:	605c      	str	r4, [r3, #4]
 8006702:	e7c9      	b.n	8006698 <_free_r+0x24>
 8006704:	bd38      	pop	{r3, r4, r5, pc}
 8006706:	bf00      	nop
 8006708:	20001464 	.word	0x20001464

0800670c <_malloc_r>:
 800670c:	b570      	push	{r4, r5, r6, lr}
 800670e:	1ccd      	adds	r5, r1, #3
 8006710:	f025 0503 	bic.w	r5, r5, #3
 8006714:	3508      	adds	r5, #8
 8006716:	2d0c      	cmp	r5, #12
 8006718:	bf38      	it	cc
 800671a:	250c      	movcc	r5, #12
 800671c:	2d00      	cmp	r5, #0
 800671e:	4606      	mov	r6, r0
 8006720:	db01      	blt.n	8006726 <_malloc_r+0x1a>
 8006722:	42a9      	cmp	r1, r5
 8006724:	d903      	bls.n	800672e <_malloc_r+0x22>
 8006726:	230c      	movs	r3, #12
 8006728:	6033      	str	r3, [r6, #0]
 800672a:	2000      	movs	r0, #0
 800672c:	bd70      	pop	{r4, r5, r6, pc}
 800672e:	f000 f87d 	bl	800682c <__malloc_lock>
 8006732:	4a21      	ldr	r2, [pc, #132]	; (80067b8 <_malloc_r+0xac>)
 8006734:	6814      	ldr	r4, [r2, #0]
 8006736:	4621      	mov	r1, r4
 8006738:	b991      	cbnz	r1, 8006760 <_malloc_r+0x54>
 800673a:	4c20      	ldr	r4, [pc, #128]	; (80067bc <_malloc_r+0xb0>)
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	b91b      	cbnz	r3, 8006748 <_malloc_r+0x3c>
 8006740:	4630      	mov	r0, r6
 8006742:	f000 f863 	bl	800680c <_sbrk_r>
 8006746:	6020      	str	r0, [r4, #0]
 8006748:	4629      	mov	r1, r5
 800674a:	4630      	mov	r0, r6
 800674c:	f000 f85e 	bl	800680c <_sbrk_r>
 8006750:	1c43      	adds	r3, r0, #1
 8006752:	d124      	bne.n	800679e <_malloc_r+0x92>
 8006754:	230c      	movs	r3, #12
 8006756:	4630      	mov	r0, r6
 8006758:	6033      	str	r3, [r6, #0]
 800675a:	f000 f868 	bl	800682e <__malloc_unlock>
 800675e:	e7e4      	b.n	800672a <_malloc_r+0x1e>
 8006760:	680b      	ldr	r3, [r1, #0]
 8006762:	1b5b      	subs	r3, r3, r5
 8006764:	d418      	bmi.n	8006798 <_malloc_r+0x8c>
 8006766:	2b0b      	cmp	r3, #11
 8006768:	d90f      	bls.n	800678a <_malloc_r+0x7e>
 800676a:	600b      	str	r3, [r1, #0]
 800676c:	18cc      	adds	r4, r1, r3
 800676e:	50cd      	str	r5, [r1, r3]
 8006770:	4630      	mov	r0, r6
 8006772:	f000 f85c 	bl	800682e <__malloc_unlock>
 8006776:	f104 000b 	add.w	r0, r4, #11
 800677a:	1d23      	adds	r3, r4, #4
 800677c:	f020 0007 	bic.w	r0, r0, #7
 8006780:	1ac3      	subs	r3, r0, r3
 8006782:	d0d3      	beq.n	800672c <_malloc_r+0x20>
 8006784:	425a      	negs	r2, r3
 8006786:	50e2      	str	r2, [r4, r3]
 8006788:	e7d0      	b.n	800672c <_malloc_r+0x20>
 800678a:	684b      	ldr	r3, [r1, #4]
 800678c:	428c      	cmp	r4, r1
 800678e:	bf16      	itet	ne
 8006790:	6063      	strne	r3, [r4, #4]
 8006792:	6013      	streq	r3, [r2, #0]
 8006794:	460c      	movne	r4, r1
 8006796:	e7eb      	b.n	8006770 <_malloc_r+0x64>
 8006798:	460c      	mov	r4, r1
 800679a:	6849      	ldr	r1, [r1, #4]
 800679c:	e7cc      	b.n	8006738 <_malloc_r+0x2c>
 800679e:	1cc4      	adds	r4, r0, #3
 80067a0:	f024 0403 	bic.w	r4, r4, #3
 80067a4:	42a0      	cmp	r0, r4
 80067a6:	d005      	beq.n	80067b4 <_malloc_r+0xa8>
 80067a8:	1a21      	subs	r1, r4, r0
 80067aa:	4630      	mov	r0, r6
 80067ac:	f000 f82e 	bl	800680c <_sbrk_r>
 80067b0:	3001      	adds	r0, #1
 80067b2:	d0cf      	beq.n	8006754 <_malloc_r+0x48>
 80067b4:	6025      	str	r5, [r4, #0]
 80067b6:	e7db      	b.n	8006770 <_malloc_r+0x64>
 80067b8:	20001464 	.word	0x20001464
 80067bc:	20001468 	.word	0x20001468

080067c0 <_realloc_r>:
 80067c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c2:	4607      	mov	r7, r0
 80067c4:	4614      	mov	r4, r2
 80067c6:	460e      	mov	r6, r1
 80067c8:	b921      	cbnz	r1, 80067d4 <_realloc_r+0x14>
 80067ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80067ce:	4611      	mov	r1, r2
 80067d0:	f7ff bf9c 	b.w	800670c <_malloc_r>
 80067d4:	b922      	cbnz	r2, 80067e0 <_realloc_r+0x20>
 80067d6:	f7ff ff4d 	bl	8006674 <_free_r>
 80067da:	4625      	mov	r5, r4
 80067dc:	4628      	mov	r0, r5
 80067de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067e0:	f000 f826 	bl	8006830 <_malloc_usable_size_r>
 80067e4:	42a0      	cmp	r0, r4
 80067e6:	d20f      	bcs.n	8006808 <_realloc_r+0x48>
 80067e8:	4621      	mov	r1, r4
 80067ea:	4638      	mov	r0, r7
 80067ec:	f7ff ff8e 	bl	800670c <_malloc_r>
 80067f0:	4605      	mov	r5, r0
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d0f2      	beq.n	80067dc <_realloc_r+0x1c>
 80067f6:	4631      	mov	r1, r6
 80067f8:	4622      	mov	r2, r4
 80067fa:	f7ff fc05 	bl	8006008 <memcpy>
 80067fe:	4631      	mov	r1, r6
 8006800:	4638      	mov	r0, r7
 8006802:	f7ff ff37 	bl	8006674 <_free_r>
 8006806:	e7e9      	b.n	80067dc <_realloc_r+0x1c>
 8006808:	4635      	mov	r5, r6
 800680a:	e7e7      	b.n	80067dc <_realloc_r+0x1c>

0800680c <_sbrk_r>:
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	2300      	movs	r3, #0
 8006810:	4c05      	ldr	r4, [pc, #20]	; (8006828 <_sbrk_r+0x1c>)
 8006812:	4605      	mov	r5, r0
 8006814:	4608      	mov	r0, r1
 8006816:	6023      	str	r3, [r4, #0]
 8006818:	f7fe ff78 	bl	800570c <_sbrk>
 800681c:	1c43      	adds	r3, r0, #1
 800681e:	d102      	bne.n	8006826 <_sbrk_r+0x1a>
 8006820:	6823      	ldr	r3, [r4, #0]
 8006822:	b103      	cbz	r3, 8006826 <_sbrk_r+0x1a>
 8006824:	602b      	str	r3, [r5, #0]
 8006826:	bd38      	pop	{r3, r4, r5, pc}
 8006828:	20001ac4 	.word	0x20001ac4

0800682c <__malloc_lock>:
 800682c:	4770      	bx	lr

0800682e <__malloc_unlock>:
 800682e:	4770      	bx	lr

08006830 <_malloc_usable_size_r>:
 8006830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006834:	1f18      	subs	r0, r3, #4
 8006836:	2b00      	cmp	r3, #0
 8006838:	bfbc      	itt	lt
 800683a:	580b      	ldrlt	r3, [r1, r0]
 800683c:	18c0      	addlt	r0, r0, r3
 800683e:	4770      	bx	lr

08006840 <_init>:
 8006840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006842:	bf00      	nop
 8006844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006846:	bc08      	pop	{r3}
 8006848:	469e      	mov	lr, r3
 800684a:	4770      	bx	lr

0800684c <_fini>:
 800684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684e:	bf00      	nop
 8006850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006852:	bc08      	pop	{r3}
 8006854:	469e      	mov	lr, r3
 8006856:	4770      	bx	lr
