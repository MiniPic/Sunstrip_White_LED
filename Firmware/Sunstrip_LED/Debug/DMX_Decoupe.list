
DMX_Decoupe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006834  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002928  08006944  08006944  00016944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800926c  0800926c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  0800926c  0800926c  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800926c  0800926c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800926c  0800926c  0001926c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009270  08009270  00019270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001754  20000090  08009300  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200017e4  08009300  000217e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f61  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039fb  00000000  00000000  00038016  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015e8  00000000  00000000  0003ba18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001450  00000000  00000000  0003d000  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001741e  00000000  00000000  0003e450  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011414  00000000  00000000  0005586e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d58b  00000000  00000000  00066c82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e420d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dd4  00000000  00000000  000e4288  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	0800692c 	.word	0x0800692c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	0800692c 	.word	0x0800692c

08000150 <SSD1306_Init>:





uint8_t SSD1306_Init(I2C_HandleTypeDef* hi2c) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]

	ssd1306_i2c = hi2c;
 8000158:	4a5f      	ldr	r2, [pc, #380]	; (80002d8 <SSD1306_Init+0x188>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	6013      	str	r3, [r2, #0]

	/* Init I2C */
	ssd1306_I2C_Init();
 800015e:	f000 fa25 	bl	80005ac <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(ssd1306_i2c, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000162:	4b5d      	ldr	r3, [pc, #372]	; (80002d8 <SSD1306_Init+0x188>)
 8000164:	6818      	ldr	r0, [r3, #0]
 8000166:	f644 6320 	movw	r3, #20000	; 0x4e20
 800016a:	2201      	movs	r2, #1
 800016c:	2178      	movs	r1, #120	; 0x78
 800016e:	f001 fa8b 	bl	8001688 <HAL_I2C_IsDeviceReady>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d001      	beq.n	800017c <SSD1306_Init+0x2c>
		/* Return false */
		return 0;
 8000178:	2300      	movs	r3, #0
 800017a:	e0a9      	b.n	80002d0 <SSD1306_Init+0x180>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800017c:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000180:	60fb      	str	r3, [r7, #12]
	while(p>0)
 8000182:	e002      	b.n	800018a <SSD1306_Init+0x3a>
		p--;
 8000184:	68fb      	ldr	r3, [r7, #12]
 8000186:	3b01      	subs	r3, #1
 8000188:	60fb      	str	r3, [r7, #12]
	while(p>0)
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	2b00      	cmp	r3, #0
 800018e:	d1f9      	bne.n	8000184 <SSD1306_Init+0x34>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000190:	22ae      	movs	r2, #174	; 0xae
 8000192:	2100      	movs	r1, #0
 8000194:	2078      	movs	r0, #120	; 0x78
 8000196:	f000 fa67 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800019a:	2220      	movs	r2, #32
 800019c:	2100      	movs	r1, #0
 800019e:	2078      	movs	r0, #120	; 0x78
 80001a0:	f000 fa62 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80001a4:	2210      	movs	r2, #16
 80001a6:	2100      	movs	r1, #0
 80001a8:	2078      	movs	r0, #120	; 0x78
 80001aa:	f000 fa5d 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80001ae:	22b0      	movs	r2, #176	; 0xb0
 80001b0:	2100      	movs	r1, #0
 80001b2:	2078      	movs	r0, #120	; 0x78
 80001b4:	f000 fa58 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80001b8:	22c8      	movs	r2, #200	; 0xc8
 80001ba:	2100      	movs	r1, #0
 80001bc:	2078      	movs	r0, #120	; 0x78
 80001be:	f000 fa53 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80001c2:	2200      	movs	r2, #0
 80001c4:	2100      	movs	r1, #0
 80001c6:	2078      	movs	r0, #120	; 0x78
 80001c8:	f000 fa4e 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80001cc:	2210      	movs	r2, #16
 80001ce:	2100      	movs	r1, #0
 80001d0:	2078      	movs	r0, #120	; 0x78
 80001d2:	f000 fa49 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80001d6:	2240      	movs	r2, #64	; 0x40
 80001d8:	2100      	movs	r1, #0
 80001da:	2078      	movs	r0, #120	; 0x78
 80001dc:	f000 fa44 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80001e0:	2281      	movs	r2, #129	; 0x81
 80001e2:	2100      	movs	r1, #0
 80001e4:	2078      	movs	r0, #120	; 0x78
 80001e6:	f000 fa3f 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80001ea:	22ff      	movs	r2, #255	; 0xff
 80001ec:	2100      	movs	r1, #0
 80001ee:	2078      	movs	r0, #120	; 0x78
 80001f0:	f000 fa3a 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80001f4:	22a1      	movs	r2, #161	; 0xa1
 80001f6:	2100      	movs	r1, #0
 80001f8:	2078      	movs	r0, #120	; 0x78
 80001fa:	f000 fa35 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80001fe:	22a6      	movs	r2, #166	; 0xa6
 8000200:	2100      	movs	r1, #0
 8000202:	2078      	movs	r0, #120	; 0x78
 8000204:	f000 fa30 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000208:	22a8      	movs	r2, #168	; 0xa8
 800020a:	2100      	movs	r1, #0
 800020c:	2078      	movs	r0, #120	; 0x78
 800020e:	f000 fa2b 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000212:	223f      	movs	r2, #63	; 0x3f
 8000214:	2100      	movs	r1, #0
 8000216:	2078      	movs	r0, #120	; 0x78
 8000218:	f000 fa26 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800021c:	22a4      	movs	r2, #164	; 0xa4
 800021e:	2100      	movs	r1, #0
 8000220:	2078      	movs	r0, #120	; 0x78
 8000222:	f000 fa21 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //--set display offset
 8000226:	22d3      	movs	r2, #211	; 0xd3
 8000228:	2100      	movs	r1, #0
 800022a:	2078      	movs	r0, #120	; 0x78
 800022c:	f000 fa1c 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //--not offset
 8000230:	2200      	movs	r2, #0
 8000232:	2100      	movs	r1, #0
 8000234:	2078      	movs	r0, #120	; 0x78
 8000236:	f000 fa17 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800023a:	22d5      	movs	r2, #213	; 0xd5
 800023c:	2100      	movs	r1, #0
 800023e:	2078      	movs	r0, #120	; 0x78
 8000240:	f000 fa12 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000244:	22f0      	movs	r2, #240	; 0xf0
 8000246:	2100      	movs	r1, #0
 8000248:	2078      	movs	r0, #120	; 0x78
 800024a:	f000 fa0d 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800024e:	22d9      	movs	r2, #217	; 0xd9
 8000250:	2100      	movs	r1, #0
 8000252:	2078      	movs	r0, #120	; 0x78
 8000254:	f000 fa08 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000258:	2222      	movs	r2, #34	; 0x22
 800025a:	2100      	movs	r1, #0
 800025c:	2078      	movs	r0, #120	; 0x78
 800025e:	f000 fa03 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000262:	22da      	movs	r2, #218	; 0xda
 8000264:	2100      	movs	r1, #0
 8000266:	2078      	movs	r0, #120	; 0x78
 8000268:	f000 f9fe 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800026c:	2212      	movs	r2, #18
 800026e:	2100      	movs	r1, #0
 8000270:	2078      	movs	r0, #120	; 0x78
 8000272:	f000 f9f9 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000276:	22db      	movs	r2, #219	; 0xdb
 8000278:	2100      	movs	r1, #0
 800027a:	2078      	movs	r0, #120	; 0x78
 800027c:	f000 f9f4 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000280:	2220      	movs	r2, #32
 8000282:	2100      	movs	r1, #0
 8000284:	2078      	movs	r0, #120	; 0x78
 8000286:	f000 f9ef 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800028a:	228d      	movs	r2, #141	; 0x8d
 800028c:	2100      	movs	r1, #0
 800028e:	2078      	movs	r0, #120	; 0x78
 8000290:	f000 f9ea 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000294:	2214      	movs	r2, #20
 8000296:	2100      	movs	r1, #0
 8000298:	2078      	movs	r0, #120	; 0x78
 800029a:	f000 f9e5 	bl	8000668 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800029e:	22af      	movs	r2, #175	; 0xaf
 80002a0:	2100      	movs	r1, #0
 80002a2:	2078      	movs	r0, #120	; 0x78
 80002a4:	f000 f9e0 	bl	8000668 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80002a8:	222e      	movs	r2, #46	; 0x2e
 80002aa:	2100      	movs	r1, #0
 80002ac:	2078      	movs	r0, #120	; 0x78
 80002ae:	f000 f9db 	bl	8000668 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80002b2:	2000      	movs	r0, #0
 80002b4:	f000 f842 	bl	800033c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80002b8:	f000 f812 	bl	80002e0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <SSD1306_Init+0x18c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <SSD1306_Init+0x18c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80002c8:	4b04      	ldr	r3, [pc, #16]	; (80002dc <SSD1306_Init+0x18c>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80002ce:	2301      	movs	r3, #1
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	3710      	adds	r7, #16
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20001218 	.word	0x20001218
 80002dc:	200004ac 	.word	0x200004ac

080002e0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80002e6:	2300      	movs	r3, #0
 80002e8:	71fb      	strb	r3, [r7, #7]
 80002ea:	e01d      	b.n	8000328 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	3b50      	subs	r3, #80	; 0x50
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	461a      	mov	r2, r3
 80002f4:	2100      	movs	r1, #0
 80002f6:	2078      	movs	r0, #120	; 0x78
 80002f8:	f000 f9b6 	bl	8000668 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2100      	movs	r1, #0
 8000300:	2078      	movs	r0, #120	; 0x78
 8000302:	f000 f9b1 	bl	8000668 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000306:	2210      	movs	r2, #16
 8000308:	2100      	movs	r1, #0
 800030a:	2078      	movs	r0, #120	; 0x78
 800030c:	f000 f9ac 	bl	8000668 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	01db      	lsls	r3, r3, #7
 8000314:	4a08      	ldr	r2, [pc, #32]	; (8000338 <SSD1306_UpdateScreen+0x58>)
 8000316:	441a      	add	r2, r3
 8000318:	2380      	movs	r3, #128	; 0x80
 800031a:	2140      	movs	r1, #64	; 0x40
 800031c:	2078      	movs	r0, #120	; 0x78
 800031e:	f000 f959 	bl	80005d4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	3301      	adds	r3, #1
 8000326:	71fb      	strb	r3, [r7, #7]
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	2b07      	cmp	r3, #7
 800032c:	d9de      	bls.n	80002ec <SSD1306_UpdateScreen+0xc>
	}
}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	200000ac 	.word	0x200000ac

0800033c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d101      	bne.n	8000350 <SSD1306_Fill+0x14>
 800034c:	2300      	movs	r3, #0
 800034e:	e000      	b.n	8000352 <SSD1306_Fill+0x16>
 8000350:	23ff      	movs	r3, #255	; 0xff
 8000352:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000356:	4619      	mov	r1, r3
 8000358:	4803      	ldr	r0, [pc, #12]	; (8000368 <SSD1306_Fill+0x2c>)
 800035a:	f005 fed6 	bl	800610a <memset>
}
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	200000ac 	.word	0x200000ac

0800036c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	80fb      	strh	r3, [r7, #6]
 8000376:	460b      	mov	r3, r1
 8000378:	80bb      	strh	r3, [r7, #4]
 800037a:	4613      	mov	r3, r2
 800037c:	70fb      	strb	r3, [r7, #3]
	if (
 800037e:	88fb      	ldrh	r3, [r7, #6]
 8000380:	2b7f      	cmp	r3, #127	; 0x7f
 8000382:	d848      	bhi.n	8000416 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000384:	88bb      	ldrh	r3, [r7, #4]
 8000386:	2b3f      	cmp	r3, #63	; 0x3f
 8000388:	d845      	bhi.n	8000416 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800038a:	4b25      	ldr	r3, [pc, #148]	; (8000420 <SSD1306_DrawPixel+0xb4>)
 800038c:	791b      	ldrb	r3, [r3, #4]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d006      	beq.n	80003a0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000392:	78fb      	ldrb	r3, [r7, #3]
 8000394:	2b00      	cmp	r3, #0
 8000396:	bf0c      	ite	eq
 8000398:	2301      	moveq	r3, #1
 800039a:	2300      	movne	r3, #0
 800039c:	b2db      	uxtb	r3, r3
 800039e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80003a0:	78fb      	ldrb	r3, [r7, #3]
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d11a      	bne.n	80003dc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80003a6:	88fa      	ldrh	r2, [r7, #6]
 80003a8:	88bb      	ldrh	r3, [r7, #4]
 80003aa:	08db      	lsrs	r3, r3, #3
 80003ac:	b298      	uxth	r0, r3
 80003ae:	4603      	mov	r3, r0
 80003b0:	01db      	lsls	r3, r3, #7
 80003b2:	4413      	add	r3, r2
 80003b4:	4a1b      	ldr	r2, [pc, #108]	; (8000424 <SSD1306_DrawPixel+0xb8>)
 80003b6:	5cd3      	ldrb	r3, [r2, r3]
 80003b8:	b25a      	sxtb	r2, r3
 80003ba:	88bb      	ldrh	r3, [r7, #4]
 80003bc:	f003 0307 	and.w	r3, r3, #7
 80003c0:	2101      	movs	r1, #1
 80003c2:	fa01 f303 	lsl.w	r3, r1, r3
 80003c6:	b25b      	sxtb	r3, r3
 80003c8:	4313      	orrs	r3, r2
 80003ca:	b259      	sxtb	r1, r3
 80003cc:	88fa      	ldrh	r2, [r7, #6]
 80003ce:	4603      	mov	r3, r0
 80003d0:	01db      	lsls	r3, r3, #7
 80003d2:	4413      	add	r3, r2
 80003d4:	b2c9      	uxtb	r1, r1
 80003d6:	4a13      	ldr	r2, [pc, #76]	; (8000424 <SSD1306_DrawPixel+0xb8>)
 80003d8:	54d1      	strb	r1, [r2, r3]
 80003da:	e01d      	b.n	8000418 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80003dc:	88fa      	ldrh	r2, [r7, #6]
 80003de:	88bb      	ldrh	r3, [r7, #4]
 80003e0:	08db      	lsrs	r3, r3, #3
 80003e2:	b298      	uxth	r0, r3
 80003e4:	4603      	mov	r3, r0
 80003e6:	01db      	lsls	r3, r3, #7
 80003e8:	4413      	add	r3, r2
 80003ea:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <SSD1306_DrawPixel+0xb8>)
 80003ec:	5cd3      	ldrb	r3, [r2, r3]
 80003ee:	b25a      	sxtb	r2, r3
 80003f0:	88bb      	ldrh	r3, [r7, #4]
 80003f2:	f003 0307 	and.w	r3, r3, #7
 80003f6:	2101      	movs	r1, #1
 80003f8:	fa01 f303 	lsl.w	r3, r1, r3
 80003fc:	b25b      	sxtb	r3, r3
 80003fe:	43db      	mvns	r3, r3
 8000400:	b25b      	sxtb	r3, r3
 8000402:	4013      	ands	r3, r2
 8000404:	b259      	sxtb	r1, r3
 8000406:	88fa      	ldrh	r2, [r7, #6]
 8000408:	4603      	mov	r3, r0
 800040a:	01db      	lsls	r3, r3, #7
 800040c:	4413      	add	r3, r2
 800040e:	b2c9      	uxtb	r1, r1
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <SSD1306_DrawPixel+0xb8>)
 8000412:	54d1      	strb	r1, [r2, r3]
 8000414:	e000      	b.n	8000418 <SSD1306_DrawPixel+0xac>
		return;
 8000416:	bf00      	nop
	}
}
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr
 8000420:	200004ac 	.word	0x200004ac
 8000424:	200000ac 	.word	0x200000ac

08000428 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	460a      	mov	r2, r1
 8000432:	80fb      	strh	r3, [r7, #6]
 8000434:	4613      	mov	r3, r2
 8000436:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000438:	4a05      	ldr	r2, [pc, #20]	; (8000450 <SSD1306_GotoXY+0x28>)
 800043a:	88fb      	ldrh	r3, [r7, #6]
 800043c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800043e:	4a04      	ldr	r2, [pc, #16]	; (8000450 <SSD1306_GotoXY+0x28>)
 8000440:	88bb      	ldrh	r3, [r7, #4]
 8000442:	8053      	strh	r3, [r2, #2]
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	200004ac 	.word	0x200004ac

08000454 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	6039      	str	r1, [r7, #0]
 800045e:	71fb      	strb	r3, [r7, #7]
 8000460:	4613      	mov	r3, r2
 8000462:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000464:	4b3a      	ldr	r3, [pc, #232]	; (8000550 <SSD1306_Putc+0xfc>)
 8000466:	881b      	ldrh	r3, [r3, #0]
 8000468:	461a      	mov	r2, r3
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	4413      	add	r3, r2
	if (
 8000470:	2b7f      	cmp	r3, #127	; 0x7f
 8000472:	dc07      	bgt.n	8000484 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000474:	4b36      	ldr	r3, [pc, #216]	; (8000550 <SSD1306_Putc+0xfc>)
 8000476:	885b      	ldrh	r3, [r3, #2]
 8000478:	461a      	mov	r2, r3
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	785b      	ldrb	r3, [r3, #1]
 800047e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000480:	2b3f      	cmp	r3, #63	; 0x3f
 8000482:	dd01      	ble.n	8000488 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000484:	2300      	movs	r3, #0
 8000486:	e05e      	b.n	8000546 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]
 800048c:	e04b      	b.n	8000526 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	685a      	ldr	r2, [r3, #4]
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	3b20      	subs	r3, #32
 8000496:	6839      	ldr	r1, [r7, #0]
 8000498:	7849      	ldrb	r1, [r1, #1]
 800049a:	fb01 f303 	mul.w	r3, r1, r3
 800049e:	4619      	mov	r1, r3
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	440b      	add	r3, r1
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	4413      	add	r3, r2
 80004a8:	881b      	ldrh	r3, [r3, #0]
 80004aa:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80004ac:	2300      	movs	r3, #0
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	e030      	b.n	8000514 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80004b2:	68fa      	ldr	r2, [r7, #12]
 80004b4:	693b      	ldr	r3, [r7, #16]
 80004b6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d010      	beq.n	80004e4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80004c2:	4b23      	ldr	r3, [pc, #140]	; (8000550 <SSD1306_Putc+0xfc>)
 80004c4:	881a      	ldrh	r2, [r3, #0]
 80004c6:	693b      	ldr	r3, [r7, #16]
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	4413      	add	r3, r2
 80004cc:	b298      	uxth	r0, r3
 80004ce:	4b20      	ldr	r3, [pc, #128]	; (8000550 <SSD1306_Putc+0xfc>)
 80004d0:	885a      	ldrh	r2, [r3, #2]
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	4413      	add	r3, r2
 80004d8:	b29b      	uxth	r3, r3
 80004da:	79ba      	ldrb	r2, [r7, #6]
 80004dc:	4619      	mov	r1, r3
 80004de:	f7ff ff45 	bl	800036c <SSD1306_DrawPixel>
 80004e2:	e014      	b.n	800050e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80004e4:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <SSD1306_Putc+0xfc>)
 80004e6:	881a      	ldrh	r2, [r3, #0]
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	b29b      	uxth	r3, r3
 80004ec:	4413      	add	r3, r2
 80004ee:	b298      	uxth	r0, r3
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <SSD1306_Putc+0xfc>)
 80004f2:	885a      	ldrh	r2, [r3, #2]
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	4413      	add	r3, r2
 80004fa:	b299      	uxth	r1, r3
 80004fc:	79bb      	ldrb	r3, [r7, #6]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	bf0c      	ite	eq
 8000502:	2301      	moveq	r3, #1
 8000504:	2300      	movne	r3, #0
 8000506:	b2db      	uxtb	r3, r3
 8000508:	461a      	mov	r2, r3
 800050a:	f7ff ff2f 	bl	800036c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800050e:	693b      	ldr	r3, [r7, #16]
 8000510:	3301      	adds	r3, #1
 8000512:	613b      	str	r3, [r7, #16]
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	461a      	mov	r2, r3
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	4293      	cmp	r3, r2
 800051e:	d3c8      	bcc.n	80004b2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	3301      	adds	r3, #1
 8000524:	617b      	str	r3, [r7, #20]
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	785b      	ldrb	r3, [r3, #1]
 800052a:	461a      	mov	r2, r3
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	4293      	cmp	r3, r2
 8000530:	d3ad      	bcc.n	800048e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <SSD1306_Putc+0xfc>)
 8000534:	881a      	ldrh	r2, [r3, #0]
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	b29b      	uxth	r3, r3
 800053c:	4413      	add	r3, r2
 800053e:	b29a      	uxth	r2, r3
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <SSD1306_Putc+0xfc>)
 8000542:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000544:	79fb      	ldrb	r3, [r7, #7]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3718      	adds	r7, #24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200004ac 	.word	0x200004ac

08000554 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	4613      	mov	r3, r2
 8000560:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000562:	e012      	b.n	800058a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	79fa      	ldrb	r2, [r7, #7]
 800056a:	68b9      	ldr	r1, [r7, #8]
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ff71 	bl	8000454 <SSD1306_Putc>
 8000572:	4603      	mov	r3, r0
 8000574:	461a      	mov	r2, r3
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	429a      	cmp	r2, r3
 800057c:	d002      	beq.n	8000584 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	e008      	b.n	8000596 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	3301      	adds	r3, #1
 8000588:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d1e8      	bne.n	8000564 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	781b      	ldrb	r3, [r3, #0]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f7ff feca 	bl	800033c <SSD1306_Fill>
    //SSD1306_UpdateScreen();
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80005b2:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <ssd1306_I2C_Init+0x24>)
 80005b4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005b6:	e002      	b.n	80005be <ssd1306_I2C_Init+0x12>
		p--;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3b01      	subs	r3, #1
 80005bc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d1f9      	bne.n	80005b8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	0003d090 	.word	0x0003d090

080005d4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b0c7      	sub	sp, #284	; 0x11c
 80005d8:	af02      	add	r7, sp, #8
 80005da:	4604      	mov	r4, r0
 80005dc:	4608      	mov	r0, r1
 80005de:	4639      	mov	r1, r7
 80005e0:	600a      	str	r2, [r1, #0]
 80005e2:	4619      	mov	r1, r3
 80005e4:	1dfb      	adds	r3, r7, #7
 80005e6:	4622      	mov	r2, r4
 80005e8:	701a      	strb	r2, [r3, #0]
 80005ea:	1dbb      	adds	r3, r7, #6
 80005ec:	4602      	mov	r2, r0
 80005ee:	701a      	strb	r2, [r3, #0]
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	460a      	mov	r2, r1
 80005f4:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	1dba      	adds	r2, r7, #6
 80005fc:	7812      	ldrb	r2, [r2, #0]
 80005fe:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8000600:	2300      	movs	r3, #0
 8000602:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000606:	e010      	b.n	800062a <ssd1306_I2C_WriteMulti+0x56>
		dt[i+1] = data[i];
 8000608:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800060c:	463a      	mov	r2, r7
 800060e:	6812      	ldr	r2, [r2, #0]
 8000610:	441a      	add	r2, r3
 8000612:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000616:	3301      	adds	r3, #1
 8000618:	7811      	ldrb	r1, [r2, #0]
 800061a:	f107 020c 	add.w	r2, r7, #12
 800061e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8000620:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000624:	3301      	adds	r3, #1
 8000626:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800062a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800062e:	b29b      	uxth	r3, r3
 8000630:	1d3a      	adds	r2, r7, #4
 8000632:	8812      	ldrh	r2, [r2, #0]
 8000634:	429a      	cmp	r2, r3
 8000636:	d8e7      	bhi.n	8000608 <ssd1306_I2C_WriteMulti+0x34>
	HAL_I2C_Master_Transmit(ssd1306_i2c, address, dt, count+1, 10);
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <ssd1306_I2C_WriteMulti+0x90>)
 800063a:	6818      	ldr	r0, [r3, #0]
 800063c:	1dfb      	adds	r3, r7, #7
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b299      	uxth	r1, r3
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	b29c      	uxth	r4, r3
 800064a:	f107 020c 	add.w	r2, r7, #12
 800064e:	230a      	movs	r3, #10
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	4623      	mov	r3, r4
 8000654:	f000 ff1a 	bl	800148c <HAL_I2C_Master_Transmit>
}
 8000658:	bf00      	nop
 800065a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800065e:	46bd      	mov	sp, r7
 8000660:	bd90      	pop	{r4, r7, pc}
 8000662:	bf00      	nop
 8000664:	20001218 	.word	0x20001218

08000668 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af02      	add	r7, sp, #8
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
 8000672:	460b      	mov	r3, r1
 8000674:	71bb      	strb	r3, [r7, #6]
 8000676:	4613      	mov	r3, r2
 8000678:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800067a:	79bb      	ldrb	r3, [r7, #6]
 800067c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800067e:	797b      	ldrb	r3, [r7, #5]
 8000680:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(ssd1306_i2c, address, dt, 2, 10);
 8000682:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <ssd1306_I2C_Write+0x38>)
 8000684:	6818      	ldr	r0, [r3, #0]
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	b299      	uxth	r1, r3
 800068a:	f107 020c 	add.w	r2, r7, #12
 800068e:	230a      	movs	r3, #10
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2302      	movs	r3, #2
 8000694:	f000 fefa 	bl	800148c <HAL_I2C_Master_Transmit>
}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20001218 	.word	0x20001218

080006a4 <PWM_SetPWM>:
/* Private function -----------------------------------------------*/


/* Public function -----------------------------------------------*/
void PWM_SetPWM(TIM_HandleTypeDef* timer, uint32_t channel, uint16_t period,uint16_t pulse)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08c      	sub	sp, #48	; 0x30
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	4611      	mov	r1, r2
 80006b0:	461a      	mov	r2, r3
 80006b2:	460b      	mov	r3, r1
 80006b4:	80fb      	strh	r3, [r7, #6]
 80006b6:	4613      	mov	r3, r2
 80006b8:	80bb      	strh	r3, [r7, #4]
	 HAL_TIM_PWM_Stop(timer, channel); // stop generation of pwm
 80006ba:	68b9      	ldr	r1, [r7, #8]
 80006bc:	68f8      	ldr	r0, [r7, #12]
 80006be:	f001 ffaf 	bl	8002620 <HAL_TIM_PWM_Stop>
	 TIM_OC_InitTypeDef sConfigOC;
	 timer->Init.Period = period; // set the period duration
 80006c2:	88fa      	ldrh	r2, [r7, #6]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	60da      	str	r2, [r3, #12]
	 HAL_TIM_PWM_Init(timer); // reinititialise with new period value
 80006c8:	68f8      	ldr	r0, [r7, #12]
 80006ca:	f001 ff42 	bl	8002552 <HAL_TIM_PWM_Init>
	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ce:	2360      	movs	r3, #96	; 0x60
 80006d0:	617b      	str	r3, [r7, #20]
	 sConfigOC.Pulse = pulse; // set the pulse duration
 80006d2:	88bb      	ldrh	r3, [r7, #4]
 80006d4:	61bb      	str	r3, [r7, #24]
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
	 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_TIM_PWM_ConfigChannel(timer, &sConfigOC, channel);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	4619      	mov	r1, r3
 80006e6:	68f8      	ldr	r0, [r7, #12]
 80006e8:	f002 f8ee 	bl	80028c8 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_Start(timer, channel); // start pwm generation
 80006ec:	68b9      	ldr	r1, [r7, #8]
 80006ee:	68f8      	ldr	r0, [r7, #12]
 80006f0:	f001 ff64 	bl	80025bc <HAL_TIM_PWM_Start>
}
 80006f4:	bf00      	nop
 80006f6:	3730      	adds	r7, #48	; 0x30
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <PWM_SetDuty>:

void PWM_SetDuty(TIM_HandleTypeDef* timer, uint32_t channel, uint16_t pulse)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b08d      	sub	sp, #52	; 0x34
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	4613      	mov	r3, r2
 8000708:	80fb      	strh	r3, [r7, #6]
	 TIM_OC_InitTypeDef sConfigOC;
	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800070a:	2360      	movs	r3, #96	; 0x60
 800070c:	617b      	str	r3, [r7, #20]
	 sConfigOC.Pulse = pulse; // set the pulse duration
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	61bb      	str	r3, [r7, #24]
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
	 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
	 __HAL_TIM_SET_COMPARE(timer, channel, pulse);
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d104      	bne.n	800072a <PWM_SetDuty+0x2e>
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	88fa      	ldrh	r2, [r7, #6]
 8000726:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000728:	e013      	b.n	8000752 <PWM_SetDuty+0x56>
	 __HAL_TIM_SET_COMPARE(timer, channel, pulse);
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	2b04      	cmp	r3, #4
 800072e:	d104      	bne.n	800073a <PWM_SetDuty+0x3e>
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	88fa      	ldrh	r2, [r7, #6]
 8000736:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000738:	e00b      	b.n	8000752 <PWM_SetDuty+0x56>
	 __HAL_TIM_SET_COMPARE(timer, channel, pulse);
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	2b08      	cmp	r3, #8
 800073e:	d104      	bne.n	800074a <PWM_SetDuty+0x4e>
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	88fa      	ldrh	r2, [r7, #6]
 8000746:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000748:	e003      	b.n	8000752 <PWM_SetDuty+0x56>
	 __HAL_TIM_SET_COMPARE(timer, channel, pulse);
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	88fa      	ldrh	r2, [r7, #6]
 8000750:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000752:	bf00      	nop
 8000754:	3734      	adds	r7, #52	; 0x34
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <HAL_Init+0x28>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a07      	ldr	r2, [pc, #28]	; (8000784 <HAL_Init+0x28>)
 8000766:	f043 0310 	orr.w	r3, r3, #16
 800076a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800076c:	2003      	movs	r0, #3
 800076e:	f000 f923 	bl	80009b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000772:	200f      	movs	r0, #15
 8000774:	f000 f808 	bl	8000788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000778:	f005 fa38 	bl	8005bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40022000 	.word	0x40022000

08000788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <HAL_InitTick+0x54>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_InitTick+0x58>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4619      	mov	r1, r3
 800079a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079e:	fbb3 f3f1 	udiv	r3, r3, r1
 80007a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f93b 	bl	8000a22 <HAL_SYSTICK_Config>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e00e      	b.n	80007d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b0f      	cmp	r3, #15
 80007ba:	d80a      	bhi.n	80007d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007bc:	2200      	movs	r2, #0
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	f04f 30ff 	mov.w	r0, #4294967295
 80007c4:	f000 f903 	bl	80009ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c8:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <HAL_InitTick+0x5c>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ce:	2300      	movs	r3, #0
 80007d0:	e000      	b.n	80007d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000024 	.word	0x20000024
 80007e0:	2000001c 	.word	0x2000001c
 80007e4:	20000018 	.word	0x20000018

080007e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <HAL_IncTick+0x1c>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <HAL_IncTick+0x20>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4413      	add	r3, r2
 80007f8:	4a03      	ldr	r2, [pc, #12]	; (8000808 <HAL_IncTick+0x20>)
 80007fa:	6013      	str	r3, [r2, #0]
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	2000001c 	.word	0x2000001c
 8000808:	2000121c 	.word	0x2000121c

0800080c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return uwTick;
 8000810:	4b02      	ldr	r3, [pc, #8]	; (800081c <HAL_GetTick+0x10>)
 8000812:	681b      	ldr	r3, [r3, #0]
}
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	2000121c 	.word	0x2000121c

08000820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <__NVIC_SetPriorityGrouping+0x44>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800083c:	4013      	ands	r3, r2
 800083e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800084c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000852:	4a04      	ldr	r2, [pc, #16]	; (8000864 <__NVIC_SetPriorityGrouping+0x44>)
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	60d3      	str	r3, [r2, #12]
}
 8000858:	bf00      	nop
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <__NVIC_GetPriorityGrouping+0x18>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	0a1b      	lsrs	r3, r3, #8
 8000872:	f003 0307 	and.w	r3, r3, #7
}
 8000876:	4618      	mov	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	2b00      	cmp	r3, #0
 8000894:	db0b      	blt.n	80008ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	f003 021f 	and.w	r2, r3, #31
 800089c:	4906      	ldr	r1, [pc, #24]	; (80008b8 <__NVIC_EnableIRQ+0x34>)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	095b      	lsrs	r3, r3, #5
 80008a4:	2001      	movs	r0, #1
 80008a6:	fa00 f202 	lsl.w	r2, r0, r2
 80008aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	e000e100 	.word	0xe000e100

080008bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	db0a      	blt.n	80008e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	490c      	ldr	r1, [pc, #48]	; (8000908 <__NVIC_SetPriority+0x4c>)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	0112      	lsls	r2, r2, #4
 80008dc:	b2d2      	uxtb	r2, r2
 80008de:	440b      	add	r3, r1
 80008e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e4:	e00a      	b.n	80008fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4908      	ldr	r1, [pc, #32]	; (800090c <__NVIC_SetPriority+0x50>)
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	f003 030f 	and.w	r3, r3, #15
 80008f2:	3b04      	subs	r3, #4
 80008f4:	0112      	lsls	r2, r2, #4
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	440b      	add	r3, r1
 80008fa:	761a      	strb	r2, [r3, #24]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000e100 	.word	0xe000e100
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000910:	b480      	push	{r7}
 8000912:	b089      	sub	sp, #36	; 0x24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	f1c3 0307 	rsb	r3, r3, #7
 800092a:	2b04      	cmp	r3, #4
 800092c:	bf28      	it	cs
 800092e:	2304      	movcs	r3, #4
 8000930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	3304      	adds	r3, #4
 8000936:	2b06      	cmp	r3, #6
 8000938:	d902      	bls.n	8000940 <NVIC_EncodePriority+0x30>
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3b03      	subs	r3, #3
 800093e:	e000      	b.n	8000942 <NVIC_EncodePriority+0x32>
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	f04f 32ff 	mov.w	r2, #4294967295
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43da      	mvns	r2, r3
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	401a      	ands	r2, r3
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000958:	f04f 31ff 	mov.w	r1, #4294967295
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	fa01 f303 	lsl.w	r3, r1, r3
 8000962:	43d9      	mvns	r1, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	4313      	orrs	r3, r2
         );
}
 800096a:	4618      	mov	r0, r3
 800096c:	3724      	adds	r7, #36	; 0x24
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3b01      	subs	r3, #1
 8000980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000984:	d301      	bcc.n	800098a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000986:	2301      	movs	r3, #1
 8000988:	e00f      	b.n	80009aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <SysTick_Config+0x40>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3b01      	subs	r3, #1
 8000990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000992:	210f      	movs	r1, #15
 8000994:	f04f 30ff 	mov.w	r0, #4294967295
 8000998:	f7ff ff90 	bl	80008bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <SysTick_Config+0x40>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a2:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <SysTick_Config+0x40>)
 80009a4:	2207      	movs	r2, #7
 80009a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	e000e010 	.word	0xe000e010

080009b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f7ff ff2d 	bl	8000820 <__NVIC_SetPriorityGrouping>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b086      	sub	sp, #24
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	4603      	mov	r3, r0
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
 80009da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e0:	f7ff ff42 	bl	8000868 <__NVIC_GetPriorityGrouping>
 80009e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	68b9      	ldr	r1, [r7, #8]
 80009ea:	6978      	ldr	r0, [r7, #20]
 80009ec:	f7ff ff90 	bl	8000910 <NVIC_EncodePriority>
 80009f0:	4602      	mov	r2, r0
 80009f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff5f 	bl	80008bc <__NVIC_SetPriority>
}
 80009fe:	bf00      	nop
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff35 	bl	8000884 <__NVIC_EnableIRQ>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff ffa2 	bl	8000974 <SysTick_Config>
 8000a30:	4603      	mov	r3, r0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a44:	2300      	movs	r3, #0
 8000a46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d005      	beq.n	8000a5e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2204      	movs	r2, #4
 8000a56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
 8000a5c:	e051      	b.n	8000b02 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f022 020e 	bic.w	r2, r2, #14
 8000a6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f022 0201 	bic.w	r2, r2, #1
 8000a7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a22      	ldr	r2, [pc, #136]	; (8000b0c <HAL_DMA_Abort_IT+0xd0>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d029      	beq.n	8000adc <HAL_DMA_Abort_IT+0xa0>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a20      	ldr	r2, [pc, #128]	; (8000b10 <HAL_DMA_Abort_IT+0xd4>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d022      	beq.n	8000ad8 <HAL_DMA_Abort_IT+0x9c>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a1f      	ldr	r2, [pc, #124]	; (8000b14 <HAL_DMA_Abort_IT+0xd8>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d01a      	beq.n	8000ad2 <HAL_DMA_Abort_IT+0x96>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a1d      	ldr	r2, [pc, #116]	; (8000b18 <HAL_DMA_Abort_IT+0xdc>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d012      	beq.n	8000acc <HAL_DMA_Abort_IT+0x90>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a1c      	ldr	r2, [pc, #112]	; (8000b1c <HAL_DMA_Abort_IT+0xe0>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d00a      	beq.n	8000ac6 <HAL_DMA_Abort_IT+0x8a>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a1a      	ldr	r2, [pc, #104]	; (8000b20 <HAL_DMA_Abort_IT+0xe4>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d102      	bne.n	8000ac0 <HAL_DMA_Abort_IT+0x84>
 8000aba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000abe:	e00e      	b.n	8000ade <HAL_DMA_Abort_IT+0xa2>
 8000ac0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ac4:	e00b      	b.n	8000ade <HAL_DMA_Abort_IT+0xa2>
 8000ac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aca:	e008      	b.n	8000ade <HAL_DMA_Abort_IT+0xa2>
 8000acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad0:	e005      	b.n	8000ade <HAL_DMA_Abort_IT+0xa2>
 8000ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad6:	e002      	b.n	8000ade <HAL_DMA_Abort_IT+0xa2>
 8000ad8:	2310      	movs	r3, #16
 8000ada:	e000      	b.n	8000ade <HAL_DMA_Abort_IT+0xa2>
 8000adc:	2301      	movs	r3, #1
 8000ade:	4a11      	ldr	r2, [pc, #68]	; (8000b24 <HAL_DMA_Abort_IT+0xe8>)
 8000ae0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d003      	beq.n	8000b02 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	4798      	blx	r3
    } 
  }
  return status;
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40020008 	.word	0x40020008
 8000b10:	4002001c 	.word	0x4002001c
 8000b14:	40020030 	.word	0x40020030
 8000b18:	40020044 	.word	0x40020044
 8000b1c:	40020058 	.word	0x40020058
 8000b20:	4002006c 	.word	0x4002006c
 8000b24:	40020000 	.word	0x40020000

08000b28 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b2a:	b087      	sub	sp, #28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000b42:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <HAL_FLASH_Program+0xd8>)
 8000b44:	7e1b      	ldrb	r3, [r3, #24]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d101      	bne.n	8000b4e <HAL_FLASH_Program+0x26>
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	e054      	b.n	8000bf8 <HAL_FLASH_Program+0xd0>
 8000b4e:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <HAL_FLASH_Program+0xd8>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b58:	f000 f8a8 	bl	8000cac <FLASH_WaitForLastOperation>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000b60:	7dfb      	ldrb	r3, [r7, #23]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d144      	bne.n	8000bf0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d102      	bne.n	8000b72 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	757b      	strb	r3, [r7, #21]
 8000b70:	e007      	b.n	8000b82 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d102      	bne.n	8000b7e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	757b      	strb	r3, [r7, #21]
 8000b7c:	e001      	b.n	8000b82 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000b7e:	2304      	movs	r3, #4
 8000b80:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000b82:	2300      	movs	r3, #0
 8000b84:	75bb      	strb	r3, [r7, #22]
 8000b86:	e02d      	b.n	8000be4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000b88:	7dbb      	ldrb	r3, [r7, #22]
 8000b8a:	005a      	lsls	r2, r3, #1
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	eb02 0c03 	add.w	ip, r2, r3
 8000b92:	7dbb      	ldrb	r3, [r7, #22]
 8000b94:	0119      	lsls	r1, r3, #4
 8000b96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b9a:	f1c1 0620 	rsb	r6, r1, #32
 8000b9e:	f1a1 0020 	sub.w	r0, r1, #32
 8000ba2:	fa22 f401 	lsr.w	r4, r2, r1
 8000ba6:	fa03 f606 	lsl.w	r6, r3, r6
 8000baa:	4334      	orrs	r4, r6
 8000bac:	fa23 f000 	lsr.w	r0, r3, r0
 8000bb0:	4304      	orrs	r4, r0
 8000bb2:	fa23 f501 	lsr.w	r5, r3, r1
 8000bb6:	b2a3      	uxth	r3, r4
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4660      	mov	r0, ip
 8000bbc:	f000 f85a 	bl	8000c74 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000bc0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bc4:	f000 f872 	bl	8000cac <FLASH_WaitForLastOperation>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <HAL_FLASH_Program+0xdc>)
 8000bce:	691b      	ldr	r3, [r3, #16]
 8000bd0:	4a0c      	ldr	r2, [pc, #48]	; (8000c04 <HAL_FLASH_Program+0xdc>)
 8000bd2:	f023 0301 	bic.w	r3, r3, #1
 8000bd6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000bd8:	7dfb      	ldrb	r3, [r7, #23]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d107      	bne.n	8000bee <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000bde:	7dbb      	ldrb	r3, [r7, #22]
 8000be0:	3301      	adds	r3, #1
 8000be2:	75bb      	strb	r3, [r7, #22]
 8000be4:	7dba      	ldrb	r2, [r7, #22]
 8000be6:	7d7b      	ldrb	r3, [r7, #21]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d3cd      	bcc.n	8000b88 <HAL_FLASH_Program+0x60>
 8000bec:	e000      	b.n	8000bf0 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000bee:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <HAL_FLASH_Program+0xd8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	761a      	strb	r2, [r3, #24]

  return status;
 8000bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	371c      	adds	r7, #28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c00:	20001220 	.word	0x20001220
 8000c04:	40022000 	.word	0x40022000

08000c08 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <HAL_FLASH_Unlock+0x40>)
 8000c14:	691b      	ldr	r3, [r3, #16]
 8000c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d00d      	beq.n	8000c3a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_FLASH_Unlock+0x40>)
 8000c20:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <HAL_FLASH_Unlock+0x44>)
 8000c22:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_FLASH_Unlock+0x40>)
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_FLASH_Unlock+0x48>)
 8000c28:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <HAL_FLASH_Unlock+0x40>)
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40022000 	.word	0x40022000
 8000c4c:	45670123 	.word	0x45670123
 8000c50:	cdef89ab 	.word	0xcdef89ab

08000c54 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <HAL_FLASH_Lock+0x1c>)
 8000c5a:	691b      	ldr	r3, [r3, #16]
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <HAL_FLASH_Lock+0x1c>)
 8000c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c62:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40022000 	.word	0x40022000

08000c74 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <FLASH_Program_HalfWord+0x30>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000c86:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <FLASH_Program_HalfWord+0x34>)
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <FLASH_Program_HalfWord+0x34>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	887a      	ldrh	r2, [r7, #2]
 8000c96:	801a      	strh	r2, [r3, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20001220 	.word	0x20001220
 8000ca8:	40022000 	.word	0x40022000

08000cac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000cb4:	f7ff fdaa 	bl	800080c <HAL_GetTick>
 8000cb8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000cba:	e010      	b.n	8000cde <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc2:	d00c      	beq.n	8000cde <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d007      	beq.n	8000cda <FLASH_WaitForLastOperation+0x2e>
 8000cca:	f7ff fd9f 	bl	800080c <HAL_GetTick>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d201      	bcs.n	8000cde <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e025      	b.n	8000d2a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <FLASH_WaitForLastOperation+0x88>)
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1e8      	bne.n	8000cbc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <FLASH_WaitForLastOperation+0x88>)
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	f003 0320 	and.w	r3, r3, #32
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <FLASH_WaitForLastOperation+0x88>)
 8000cf8:	2220      	movs	r2, #32
 8000cfa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <FLASH_WaitForLastOperation+0x88>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	f003 0310 	and.w	r3, r3, #16
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d10b      	bne.n	8000d20 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <FLASH_WaitForLastOperation+0x88>)
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d105      	bne.n	8000d20 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <FLASH_WaitForLastOperation+0x88>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d003      	beq.n	8000d28 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000d20:	f000 f80a 	bl	8000d38 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	e000      	b.n	8000d2a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40022000 	.word	0x40022000

08000d38 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000d42:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <FLASH_SetErrorCode+0x98>)
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	f003 0310 	and.w	r3, r3, #16
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d009      	beq.n	8000d62 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <FLASH_SetErrorCode+0x9c>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f043 0302 	orr.w	r3, r3, #2
 8000d56:	4a1f      	ldr	r2, [pc, #124]	; (8000dd4 <FLASH_SetErrorCode+0x9c>)
 8000d58:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f043 0310 	orr.w	r3, r3, #16
 8000d60:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <FLASH_SetErrorCode+0x98>)
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d009      	beq.n	8000d82 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <FLASH_SetErrorCode+0x9c>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <FLASH_SetErrorCode+0x9c>)
 8000d78:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <FLASH_SetErrorCode+0x98>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d00b      	beq.n	8000da6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <FLASH_SetErrorCode+0x9c>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	4a0f      	ldr	r2, [pc, #60]	; (8000dd4 <FLASH_SetErrorCode+0x9c>)
 8000d98:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <FLASH_SetErrorCode+0x98>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <FLASH_SetErrorCode+0x98>)
 8000da0:	f023 0301 	bic.w	r3, r3, #1
 8000da4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f240 1201 	movw	r2, #257	; 0x101
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d106      	bne.n	8000dbe <FLASH_SetErrorCode+0x86>
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <FLASH_SetErrorCode+0x98>)
 8000db2:	69db      	ldr	r3, [r3, #28]
 8000db4:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <FLASH_SetErrorCode+0x98>)
 8000db6:	f023 0301 	bic.w	r3, r3, #1
 8000dba:	61d3      	str	r3, [r2, #28]
}  
 8000dbc:	e002      	b.n	8000dc4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000dbe:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <FLASH_SetErrorCode+0x98>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	60d3      	str	r3, [r2, #12]
}  
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40022000 	.word	0x40022000
 8000dd4:	20001220 	.word	0x20001220

08000dd8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000dea:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <HAL_FLASHEx_Erase+0xd0>)
 8000dec:	7e1b      	ldrb	r3, [r3, #24]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d101      	bne.n	8000df6 <HAL_FLASHEx_Erase+0x1e>
 8000df2:	2302      	movs	r3, #2
 8000df4:	e053      	b.n	8000e9e <HAL_FLASHEx_Erase+0xc6>
 8000df6:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <HAL_FLASHEx_Erase+0xd0>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d116      	bne.n	8000e32 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000e04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e08:	f7ff ff50 	bl	8000cac <FLASH_WaitForLastOperation>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d141      	bne.n	8000e96 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8000e12:	2001      	movs	r0, #1
 8000e14:	f000 f84c 	bl	8000eb0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e1c:	f7ff ff46 	bl	8000cac <FLASH_WaitForLastOperation>
 8000e20:	4603      	mov	r3, r0
 8000e22:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000e24:	4b21      	ldr	r3, [pc, #132]	; (8000eac <HAL_FLASHEx_Erase+0xd4>)
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	4a20      	ldr	r2, [pc, #128]	; (8000eac <HAL_FLASHEx_Erase+0xd4>)
 8000e2a:	f023 0304 	bic.w	r3, r3, #4
 8000e2e:	6113      	str	r3, [r2, #16]
 8000e30:	e031      	b.n	8000e96 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000e32:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e36:	f7ff ff39 	bl	8000cac <FLASH_WaitForLastOperation>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d12a      	bne.n	8000e96 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	f04f 32ff 	mov.w	r2, #4294967295
 8000e46:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	e019      	b.n	8000e84 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000e50:	68b8      	ldr	r0, [r7, #8]
 8000e52:	f000 f849 	bl	8000ee8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e56:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e5a:	f7ff ff27 	bl	8000cac <FLASH_WaitForLastOperation>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000e62:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_FLASHEx_Erase+0xd4>)
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	4a11      	ldr	r2, [pc, #68]	; (8000eac <HAL_FLASHEx_Erase+0xd4>)
 8000e68:	f023 0302 	bic.w	r3, r3, #2
 8000e6c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d003      	beq.n	8000e7c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	601a      	str	r2, [r3, #0]
            break;
 8000e7a:	e00c      	b.n	8000e96 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e82:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	029a      	lsls	r2, r3, #10
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8000e90:	68ba      	ldr	r2, [r7, #8]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d3dc      	bcc.n	8000e50 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <HAL_FLASHEx_Erase+0xd0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	761a      	strb	r2, [r3, #24]

  return status;
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20001220 	.word	0x20001220
 8000eac:	40022000 	.word	0x40022000

08000eb0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <FLASH_MassErase+0x30>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <FLASH_MassErase+0x34>)
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <FLASH_MassErase+0x34>)
 8000ec4:	f043 0304 	orr.w	r3, r3, #4
 8000ec8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <FLASH_MassErase+0x34>)
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <FLASH_MassErase+0x34>)
 8000ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	20001220 	.word	0x20001220
 8000ee4:	40022000 	.word	0x40022000

08000ee8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <FLASH_PageErase+0x38>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <FLASH_PageErase+0x3c>)
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <FLASH_PageErase+0x3c>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000f02:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <FLASH_PageErase+0x3c>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <FLASH_PageErase+0x3c>)
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <FLASH_PageErase+0x3c>)
 8000f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f12:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20001220 	.word	0x20001220
 8000f24:	40022000 	.word	0x40022000

08000f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b08b      	sub	sp, #44	; 0x2c
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3a:	e127      	b.n	800118c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	f040 8116 	bne.w	8001186 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b12      	cmp	r3, #18
 8000f60:	d034      	beq.n	8000fcc <HAL_GPIO_Init+0xa4>
 8000f62:	2b12      	cmp	r3, #18
 8000f64:	d80d      	bhi.n	8000f82 <HAL_GPIO_Init+0x5a>
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d02b      	beq.n	8000fc2 <HAL_GPIO_Init+0x9a>
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d804      	bhi.n	8000f78 <HAL_GPIO_Init+0x50>
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d031      	beq.n	8000fd6 <HAL_GPIO_Init+0xae>
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d01c      	beq.n	8000fb0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f76:	e048      	b.n	800100a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d043      	beq.n	8001004 <HAL_GPIO_Init+0xdc>
 8000f7c:	2b11      	cmp	r3, #17
 8000f7e:	d01b      	beq.n	8000fb8 <HAL_GPIO_Init+0x90>
          break;
 8000f80:	e043      	b.n	800100a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f82:	4a89      	ldr	r2, [pc, #548]	; (80011a8 <HAL_GPIO_Init+0x280>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d026      	beq.n	8000fd6 <HAL_GPIO_Init+0xae>
 8000f88:	4a87      	ldr	r2, [pc, #540]	; (80011a8 <HAL_GPIO_Init+0x280>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d806      	bhi.n	8000f9c <HAL_GPIO_Init+0x74>
 8000f8e:	4a87      	ldr	r2, [pc, #540]	; (80011ac <HAL_GPIO_Init+0x284>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d020      	beq.n	8000fd6 <HAL_GPIO_Init+0xae>
 8000f94:	4a86      	ldr	r2, [pc, #536]	; (80011b0 <HAL_GPIO_Init+0x288>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d01d      	beq.n	8000fd6 <HAL_GPIO_Init+0xae>
          break;
 8000f9a:	e036      	b.n	800100a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f9c:	4a85      	ldr	r2, [pc, #532]	; (80011b4 <HAL_GPIO_Init+0x28c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d019      	beq.n	8000fd6 <HAL_GPIO_Init+0xae>
 8000fa2:	4a85      	ldr	r2, [pc, #532]	; (80011b8 <HAL_GPIO_Init+0x290>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d016      	beq.n	8000fd6 <HAL_GPIO_Init+0xae>
 8000fa8:	4a84      	ldr	r2, [pc, #528]	; (80011bc <HAL_GPIO_Init+0x294>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d013      	beq.n	8000fd6 <HAL_GPIO_Init+0xae>
          break;
 8000fae:	e02c      	b.n	800100a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	623b      	str	r3, [r7, #32]
          break;
 8000fb6:	e028      	b.n	800100a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	623b      	str	r3, [r7, #32]
          break;
 8000fc0:	e023      	b.n	800100a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	3308      	adds	r3, #8
 8000fc8:	623b      	str	r3, [r7, #32]
          break;
 8000fca:	e01e      	b.n	800100a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	330c      	adds	r3, #12
 8000fd2:	623b      	str	r3, [r7, #32]
          break;
 8000fd4:	e019      	b.n	800100a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d102      	bne.n	8000fe4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	623b      	str	r3, [r7, #32]
          break;
 8000fe2:	e012      	b.n	800100a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d105      	bne.n	8000ff8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fec:	2308      	movs	r3, #8
 8000fee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	611a      	str	r2, [r3, #16]
          break;
 8000ff6:	e008      	b.n	800100a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ff8:	2308      	movs	r3, #8
 8000ffa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69fa      	ldr	r2, [r7, #28]
 8001000:	615a      	str	r2, [r3, #20]
          break;
 8001002:	e002      	b.n	800100a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
          break;
 8001008:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	2bff      	cmp	r3, #255	; 0xff
 800100e:	d801      	bhi.n	8001014 <HAL_GPIO_Init+0xec>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	e001      	b.n	8001018 <HAL_GPIO_Init+0xf0>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3304      	adds	r3, #4
 8001018:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	2bff      	cmp	r3, #255	; 0xff
 800101e:	d802      	bhi.n	8001026 <HAL_GPIO_Init+0xfe>
 8001020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	e002      	b.n	800102c <HAL_GPIO_Init+0x104>
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	3b08      	subs	r3, #8
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	210f      	movs	r1, #15
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	401a      	ands	r2, r3
 800103e:	6a39      	ldr	r1, [r7, #32]
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	431a      	orrs	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 8096 	beq.w	8001186 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800105a:	4b59      	ldr	r3, [pc, #356]	; (80011c0 <HAL_GPIO_Init+0x298>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	4a58      	ldr	r2, [pc, #352]	; (80011c0 <HAL_GPIO_Init+0x298>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6193      	str	r3, [r2, #24]
 8001066:	4b56      	ldr	r3, [pc, #344]	; (80011c0 <HAL_GPIO_Init+0x298>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001072:	4a54      	ldr	r2, [pc, #336]	; (80011c4 <HAL_GPIO_Init+0x29c>)
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	089b      	lsrs	r3, r3, #2
 8001078:	3302      	adds	r3, #2
 800107a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	220f      	movs	r2, #15
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	4013      	ands	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4b      	ldr	r2, [pc, #300]	; (80011c8 <HAL_GPIO_Init+0x2a0>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d013      	beq.n	80010c6 <HAL_GPIO_Init+0x19e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a4a      	ldr	r2, [pc, #296]	; (80011cc <HAL_GPIO_Init+0x2a4>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d00d      	beq.n	80010c2 <HAL_GPIO_Init+0x19a>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a49      	ldr	r2, [pc, #292]	; (80011d0 <HAL_GPIO_Init+0x2a8>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d007      	beq.n	80010be <HAL_GPIO_Init+0x196>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a48      	ldr	r2, [pc, #288]	; (80011d4 <HAL_GPIO_Init+0x2ac>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d101      	bne.n	80010ba <HAL_GPIO_Init+0x192>
 80010b6:	2303      	movs	r3, #3
 80010b8:	e006      	b.n	80010c8 <HAL_GPIO_Init+0x1a0>
 80010ba:	2304      	movs	r3, #4
 80010bc:	e004      	b.n	80010c8 <HAL_GPIO_Init+0x1a0>
 80010be:	2302      	movs	r3, #2
 80010c0:	e002      	b.n	80010c8 <HAL_GPIO_Init+0x1a0>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <HAL_GPIO_Init+0x1a0>
 80010c6:	2300      	movs	r3, #0
 80010c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ca:	f002 0203 	and.w	r2, r2, #3
 80010ce:	0092      	lsls	r2, r2, #2
 80010d0:	4093      	lsls	r3, r2
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010d8:	493a      	ldr	r1, [pc, #232]	; (80011c4 <HAL_GPIO_Init+0x29c>)
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	3302      	adds	r3, #2
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d006      	beq.n	8001100 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010f2:	4b39      	ldr	r3, [pc, #228]	; (80011d8 <HAL_GPIO_Init+0x2b0>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4938      	ldr	r1, [pc, #224]	; (80011d8 <HAL_GPIO_Init+0x2b0>)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]
 80010fe:	e006      	b.n	800110e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001100:	4b35      	ldr	r3, [pc, #212]	; (80011d8 <HAL_GPIO_Init+0x2b0>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	43db      	mvns	r3, r3
 8001108:	4933      	ldr	r1, [pc, #204]	; (80011d8 <HAL_GPIO_Init+0x2b0>)
 800110a:	4013      	ands	r3, r2
 800110c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d006      	beq.n	8001128 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800111a:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <HAL_GPIO_Init+0x2b0>)
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	492e      	ldr	r1, [pc, #184]	; (80011d8 <HAL_GPIO_Init+0x2b0>)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	604b      	str	r3, [r1, #4]
 8001126:	e006      	b.n	8001136 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001128:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <HAL_GPIO_Init+0x2b0>)
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	43db      	mvns	r3, r3
 8001130:	4929      	ldr	r1, [pc, #164]	; (80011d8 <HAL_GPIO_Init+0x2b0>)
 8001132:	4013      	ands	r3, r2
 8001134:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d006      	beq.n	8001150 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001142:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <HAL_GPIO_Init+0x2b0>)
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	4924      	ldr	r1, [pc, #144]	; (80011d8 <HAL_GPIO_Init+0x2b0>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	608b      	str	r3, [r1, #8]
 800114e:	e006      	b.n	800115e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001150:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <HAL_GPIO_Init+0x2b0>)
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	43db      	mvns	r3, r3
 8001158:	491f      	ldr	r1, [pc, #124]	; (80011d8 <HAL_GPIO_Init+0x2b0>)
 800115a:	4013      	ands	r3, r2
 800115c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d006      	beq.n	8001178 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800116a:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <HAL_GPIO_Init+0x2b0>)
 800116c:	68da      	ldr	r2, [r3, #12]
 800116e:	491a      	ldr	r1, [pc, #104]	; (80011d8 <HAL_GPIO_Init+0x2b0>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	60cb      	str	r3, [r1, #12]
 8001176:	e006      	b.n	8001186 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_GPIO_Init+0x2b0>)
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	43db      	mvns	r3, r3
 8001180:	4915      	ldr	r1, [pc, #84]	; (80011d8 <HAL_GPIO_Init+0x2b0>)
 8001182:	4013      	ands	r3, r2
 8001184:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	3301      	adds	r3, #1
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	fa22 f303 	lsr.w	r3, r2, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	f47f aed0 	bne.w	8000f3c <HAL_GPIO_Init+0x14>
  }
}
 800119c:	bf00      	nop
 800119e:	372c      	adds	r7, #44	; 0x2c
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	10210000 	.word	0x10210000
 80011ac:	10110000 	.word	0x10110000
 80011b0:	10120000 	.word	0x10120000
 80011b4:	10310000 	.word	0x10310000
 80011b8:	10320000 	.word	0x10320000
 80011bc:	10220000 	.word	0x10220000
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010000 	.word	0x40010000
 80011c8:	40010800 	.word	0x40010800
 80011cc:	40010c00 	.word	0x40010c00
 80011d0:	40011000 	.word	0x40011000
 80011d4:	40011400 	.word	0x40011400
 80011d8:	40010400 	.word	0x40010400

080011dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	887b      	ldrh	r3, [r7, #2]
 80011ee:	4013      	ands	r3, r2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d002      	beq.n	80011fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011f4:	2301      	movs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	e001      	b.n	80011fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr

0800120a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	460b      	mov	r3, r1
 8001214:	807b      	strh	r3, [r7, #2]
 8001216:	4613      	mov	r3, r2
 8001218:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800121a:	787b      	ldrb	r3, [r7, #1]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001220:	887a      	ldrh	r2, [r7, #2]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001226:	e003      	b.n	8001230 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	041a      	lsls	r2, r3, #16
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	611a      	str	r2, [r3, #16]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
	...

0800123c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e10f      	b.n	800146e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d106      	bne.n	8001268 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f004 fcfa 	bl	8005c5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2224      	movs	r2, #36	; 0x24
 800126c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0201 	bic.w	r2, r2, #1
 800127e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001280:	f001 f8f6 	bl	8002470 <HAL_RCC_GetPCLK1Freq>
 8001284:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	4a7b      	ldr	r2, [pc, #492]	; (8001478 <HAL_I2C_Init+0x23c>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d807      	bhi.n	80012a0 <HAL_I2C_Init+0x64>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4a7a      	ldr	r2, [pc, #488]	; (800147c <HAL_I2C_Init+0x240>)
 8001294:	4293      	cmp	r3, r2
 8001296:	bf94      	ite	ls
 8001298:	2301      	movls	r3, #1
 800129a:	2300      	movhi	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	e006      	b.n	80012ae <HAL_I2C_Init+0x72>
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4a77      	ldr	r2, [pc, #476]	; (8001480 <HAL_I2C_Init+0x244>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	bf94      	ite	ls
 80012a8:	2301      	movls	r3, #1
 80012aa:	2300      	movhi	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e0db      	b.n	800146e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	4a72      	ldr	r2, [pc, #456]	; (8001484 <HAL_I2C_Init+0x248>)
 80012ba:	fba2 2303 	umull	r2, r3, r2, r3
 80012be:	0c9b      	lsrs	r3, r3, #18
 80012c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68ba      	ldr	r2, [r7, #8]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	4a64      	ldr	r2, [pc, #400]	; (8001478 <HAL_I2C_Init+0x23c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d802      	bhi.n	80012f0 <HAL_I2C_Init+0xb4>
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	3301      	adds	r3, #1
 80012ee:	e009      	b.n	8001304 <HAL_I2C_Init+0xc8>
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012f6:	fb02 f303 	mul.w	r3, r2, r3
 80012fa:	4a63      	ldr	r2, [pc, #396]	; (8001488 <HAL_I2C_Init+0x24c>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	3301      	adds	r3, #1
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	430b      	orrs	r3, r1
 800130a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001316:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	4956      	ldr	r1, [pc, #344]	; (8001478 <HAL_I2C_Init+0x23c>)
 8001320:	428b      	cmp	r3, r1
 8001322:	d80d      	bhi.n	8001340 <HAL_I2C_Init+0x104>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	1e59      	subs	r1, r3, #1
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001332:	3301      	adds	r3, #1
 8001334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001338:	2b04      	cmp	r3, #4
 800133a:	bf38      	it	cc
 800133c:	2304      	movcc	r3, #4
 800133e:	e04f      	b.n	80013e0 <HAL_I2C_Init+0x1a4>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d111      	bne.n	800136c <HAL_I2C_Init+0x130>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	1e58      	subs	r0, r3, #1
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6859      	ldr	r1, [r3, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	440b      	add	r3, r1
 8001356:	fbb0 f3f3 	udiv	r3, r0, r3
 800135a:	3301      	adds	r3, #1
 800135c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001360:	2b00      	cmp	r3, #0
 8001362:	bf0c      	ite	eq
 8001364:	2301      	moveq	r3, #1
 8001366:	2300      	movne	r3, #0
 8001368:	b2db      	uxtb	r3, r3
 800136a:	e012      	b.n	8001392 <HAL_I2C_Init+0x156>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	1e58      	subs	r0, r3, #1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6859      	ldr	r1, [r3, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	0099      	lsls	r1, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001382:	3301      	adds	r3, #1
 8001384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001388:	2b00      	cmp	r3, #0
 800138a:	bf0c      	ite	eq
 800138c:	2301      	moveq	r3, #1
 800138e:	2300      	movne	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_I2C_Init+0x15e>
 8001396:	2301      	movs	r3, #1
 8001398:	e022      	b.n	80013e0 <HAL_I2C_Init+0x1a4>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10e      	bne.n	80013c0 <HAL_I2C_Init+0x184>
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	1e58      	subs	r0, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6859      	ldr	r1, [r3, #4]
 80013aa:	460b      	mov	r3, r1
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	440b      	add	r3, r1
 80013b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80013b4:	3301      	adds	r3, #1
 80013b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013be:	e00f      	b.n	80013e0 <HAL_I2C_Init+0x1a4>
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	1e58      	subs	r0, r3, #1
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6859      	ldr	r1, [r3, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	0099      	lsls	r1, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013d6:	3301      	adds	r3, #1
 80013d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	6809      	ldr	r1, [r1, #0]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69da      	ldr	r2, [r3, #28]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800140e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6911      	ldr	r1, [r2, #16]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68d2      	ldr	r2, [r2, #12]
 800141a:	4311      	orrs	r1, r2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	430b      	orrs	r3, r1
 8001422:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0201 	orr.w	r2, r2, #1
 800144e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2220      	movs	r2, #32
 800145a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	000186a0 	.word	0x000186a0
 800147c:	001e847f 	.word	0x001e847f
 8001480:	003d08ff 	.word	0x003d08ff
 8001484:	431bde83 	.word	0x431bde83
 8001488:	10624dd3 	.word	0x10624dd3

0800148c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af02      	add	r7, sp, #8
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	461a      	mov	r2, r3
 8001498:	460b      	mov	r3, r1
 800149a:	817b      	strh	r3, [r7, #10]
 800149c:	4613      	mov	r3, r2
 800149e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014a0:	f7ff f9b4 	bl	800080c <HAL_GetTick>
 80014a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b20      	cmp	r3, #32
 80014b0:	f040 80e0 	bne.w	8001674 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2319      	movs	r3, #25
 80014ba:	2201      	movs	r2, #1
 80014bc:	4970      	ldr	r1, [pc, #448]	; (8001680 <HAL_I2C_Master_Transmit+0x1f4>)
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f000 fa7a 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80014ca:	2302      	movs	r3, #2
 80014cc:	e0d3      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_I2C_Master_Transmit+0x50>
 80014d8:	2302      	movs	r3, #2
 80014da:	e0cc      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d007      	beq.n	8001502 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f042 0201 	orr.w	r2, r2, #1
 8001500:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001510:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2221      	movs	r2, #33	; 0x21
 8001516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2210      	movs	r2, #16
 800151e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	893a      	ldrh	r2, [r7, #8]
 8001532:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001538:	b29a      	uxth	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4a50      	ldr	r2, [pc, #320]	; (8001684 <HAL_I2C_Master_Transmit+0x1f8>)
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001544:	8979      	ldrh	r1, [r7, #10]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	6a3a      	ldr	r2, [r7, #32]
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 f9be 	bl	80018cc <I2C_MasterRequestWrite>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e08d      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001570:	e066      	b.n	8001640 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	6a39      	ldr	r1, [r7, #32]
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 faf4 	bl	8001b64 <I2C_WaitOnTXEFlagUntilTimeout>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00d      	beq.n	800159e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	2b04      	cmp	r3, #4
 8001588:	d107      	bne.n	800159a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001598:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e06b      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	781a      	ldrb	r2, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	3b01      	subs	r3, #1
 80015bc:	b29a      	uxth	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c6:	3b01      	subs	r3, #1
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d11b      	bne.n	8001614 <HAL_I2C_Master_Transmit+0x188>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d017      	beq.n	8001614 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	781a      	ldrb	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015fe:	b29b      	uxth	r3, r3
 8001600:	3b01      	subs	r3, #1
 8001602:	b29a      	uxth	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800160c:	3b01      	subs	r3, #1
 800160e:	b29a      	uxth	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	6a39      	ldr	r1, [r7, #32]
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f000 fae4 	bl	8001be6 <I2C_WaitOnBTFFlagUntilTimeout>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00d      	beq.n	8001640 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	2b04      	cmp	r3, #4
 800162a:	d107      	bne.n	800163c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800163a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e01a      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001644:	2b00      	cmp	r3, #0
 8001646:	d194      	bne.n	8001572 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2220      	movs	r2, #32
 800165c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	e000      	b.n	8001676 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001674:	2302      	movs	r3, #2
  }
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	00100002 	.word	0x00100002
 8001684:	ffff0000 	.word	0xffff0000

08001688 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af02      	add	r7, sp, #8
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	460b      	mov	r3, r1
 8001696:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001698:	f7ff f8b8 	bl	800080c <HAL_GetTick>
 800169c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800169e:	2301      	movs	r3, #1
 80016a0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b20      	cmp	r3, #32
 80016ac:	f040 8105 	bne.w	80018ba <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2319      	movs	r3, #25
 80016b6:	2201      	movs	r2, #1
 80016b8:	4982      	ldr	r1, [pc, #520]	; (80018c4 <HAL_I2C_IsDeviceReady+0x23c>)
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 f97c 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80016c6:	2302      	movs	r3, #2
 80016c8:	e0f8      	b.n	80018bc <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <HAL_I2C_IsDeviceReady+0x50>
 80016d4:	2302      	movs	r3, #2
 80016d6:	e0f1      	b.n	80018bc <HAL_I2C_IsDeviceReady+0x234>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d007      	beq.n	80016fe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 0201 	orr.w	r2, r2, #1
 80016fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800170c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2224      	movs	r2, #36	; 0x24
 8001712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4a6a      	ldr	r2, [pc, #424]	; (80018c8 <HAL_I2C_IsDeviceReady+0x240>)
 8001720:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001730:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	2200      	movs	r2, #0
 800173a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f000 f93a 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e0b6      	b.n	80018bc <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800174e:	897b      	ldrh	r3, [r7, #10]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	461a      	mov	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800175c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800175e:	f7ff f855 	bl	800080c <HAL_GetTick>
 8001762:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b02      	cmp	r3, #2
 8001770:	bf0c      	ite	eq
 8001772:	2301      	moveq	r3, #1
 8001774:	2300      	movne	r3, #0
 8001776:	b2db      	uxtb	r3, r3
 8001778:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001788:	bf0c      	ite	eq
 800178a:	2301      	moveq	r3, #1
 800178c:	2300      	movne	r3, #0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001792:	e025      	b.n	80017e0 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001794:	f7ff f83a 	bl	800080c <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d302      	bcc.n	80017aa <HAL_I2C_IsDeviceReady+0x122>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d103      	bne.n	80017b2 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	22a0      	movs	r2, #160	; 0xa0
 80017ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b02      	cmp	r3, #2
 80017be:	bf0c      	ite	eq
 80017c0:	2301      	moveq	r3, #1
 80017c2:	2300      	movne	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2ba0      	cmp	r3, #160	; 0xa0
 80017ea:	d005      	beq.n	80017f8 <HAL_I2C_IsDeviceReady+0x170>
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d102      	bne.n	80017f8 <HAL_I2C_IsDeviceReady+0x170>
 80017f2:	7dbb      	ldrb	r3, [r7, #22]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0cd      	beq.n	8001794 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2220      	movs	r2, #32
 80017fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b02      	cmp	r3, #2
 800180c:	d129      	bne.n	8001862 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800181c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2319      	movs	r3, #25
 800183a:	2201      	movs	r2, #1
 800183c:	4921      	ldr	r1, [pc, #132]	; (80018c4 <HAL_I2C_IsDeviceReady+0x23c>)
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f000 f8ba 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e036      	b.n	80018bc <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2220      	movs	r2, #32
 8001852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e02c      	b.n	80018bc <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001870:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800187a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	2319      	movs	r3, #25
 8001882:	2201      	movs	r2, #1
 8001884:	490f      	ldr	r1, [pc, #60]	; (80018c4 <HAL_I2C_IsDeviceReady+0x23c>)
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 f896 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e012      	b.n	80018bc <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	3301      	adds	r3, #1
 800189a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	f4ff af3e 	bcc.w	8001722 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2220      	movs	r2, #32
 80018aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 80018ba:	2302      	movs	r3, #2
  }
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3720      	adds	r7, #32
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	00100002 	.word	0x00100002
 80018c8:	ffff0000 	.word	0xffff0000

080018cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	460b      	mov	r3, r1
 80018da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d006      	beq.n	80018f6 <I2C_MasterRequestWrite+0x2a>
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d003      	beq.n	80018f6 <I2C_MasterRequestWrite+0x2a>
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018f4:	d108      	bne.n	8001908 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	e00b      	b.n	8001920 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	2b12      	cmp	r3, #18
 800190e:	d107      	bne.n	8001920 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800191e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f000 f843 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e035      	b.n	80019a8 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001944:	d108      	bne.n	8001958 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001946:	897b      	ldrh	r3, [r7, #10]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	461a      	mov	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001954:	611a      	str	r2, [r3, #16]
 8001956:	e01b      	b.n	8001990 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001958:	897b      	ldrh	r3, [r7, #10]
 800195a:	11db      	asrs	r3, r3, #7
 800195c:	b2db      	uxtb	r3, r3
 800195e:	f003 0306 	and.w	r3, r3, #6
 8001962:	b2db      	uxtb	r3, r3
 8001964:	f063 030f 	orn	r3, r3, #15
 8001968:	b2da      	uxtb	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	490e      	ldr	r1, [pc, #56]	; (80019b0 <I2C_MasterRequestWrite+0xe4>)
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 f875 	bl	8001a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e010      	b.n	80019a8 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001986:	897b      	ldrh	r3, [r7, #10]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4907      	ldr	r1, [pc, #28]	; (80019b4 <I2C_MasterRequestWrite+0xe8>)
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 f865 	bl	8001a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	00010008 	.word	0x00010008
 80019b4:	00010002 	.word	0x00010002

080019b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	4613      	mov	r3, r2
 80019c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019c8:	e025      	b.n	8001a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d0:	d021      	beq.n	8001a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019d2:	f7fe ff1b 	bl	800080c <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d302      	bcc.n	80019e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d116      	bne.n	8001a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2220      	movs	r2, #32
 80019f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f043 0220 	orr.w	r2, r3, #32
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e023      	b.n	8001a5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	0c1b      	lsrs	r3, r3, #16
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d10d      	bne.n	8001a3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	bf0c      	ite	eq
 8001a32:	2301      	moveq	r3, #1
 8001a34:	2300      	movne	r3, #0
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	e00c      	b.n	8001a56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	43da      	mvns	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	4013      	ands	r3, r2
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bf0c      	ite	eq
 8001a4e:	2301      	moveq	r3, #1
 8001a50:	2300      	movne	r3, #0
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d0b6      	beq.n	80019ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a74:	e051      	b.n	8001b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a84:	d123      	bne.n	8001ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f043 0204 	orr.w	r2, r3, #4
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e046      	b.n	8001b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d021      	beq.n	8001b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ad6:	f7fe fe99 	bl	800080c <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d302      	bcc.n	8001aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d116      	bne.n	8001b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2220      	movs	r2, #32
 8001af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f043 0220 	orr.w	r2, r3, #32
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e020      	b.n	8001b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	0c1b      	lsrs	r3, r3, #16
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d10c      	bne.n	8001b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	bf14      	ite	ne
 8001b36:	2301      	movne	r3, #1
 8001b38:	2300      	moveq	r3, #0
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	e00b      	b.n	8001b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	43da      	mvns	r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	bf14      	ite	ne
 8001b50:	2301      	movne	r3, #1
 8001b52:	2300      	moveq	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d18d      	bne.n	8001a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b70:	e02d      	b.n	8001bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 f878 	bl	8001c68 <I2C_IsAcknowledgeFailed>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e02d      	b.n	8001bde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b88:	d021      	beq.n	8001bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b8a:	f7fe fe3f 	bl	800080c <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d302      	bcc.n	8001ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d116      	bne.n	8001bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2220      	movs	r2, #32
 8001baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f043 0220 	orr.w	r2, r3, #32
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e007      	b.n	8001bde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd8:	2b80      	cmp	r3, #128	; 0x80
 8001bda:	d1ca      	bne.n	8001b72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b084      	sub	sp, #16
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bf2:	e02d      	b.n	8001c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 f837 	bl	8001c68 <I2C_IsAcknowledgeFailed>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e02d      	b.n	8001c60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0a:	d021      	beq.n	8001c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c0c:	f7fe fdfe 	bl	800080c <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d302      	bcc.n	8001c22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d116      	bne.n	8001c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f043 0220 	orr.w	r2, r3, #32
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e007      	b.n	8001c60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d1ca      	bne.n	8001bf4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c7e:	d11b      	bne.n	8001cb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	f043 0204 	orr.w	r2, r3, #4
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e26c      	b.n	80021b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 8087 	beq.w	8001df2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ce4:	4b92      	ldr	r3, [pc, #584]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 030c 	and.w	r3, r3, #12
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d00c      	beq.n	8001d0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cf0:	4b8f      	ldr	r3, [pc, #572]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d112      	bne.n	8001d22 <HAL_RCC_OscConfig+0x5e>
 8001cfc:	4b8c      	ldr	r3, [pc, #560]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d08:	d10b      	bne.n	8001d22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0a:	4b89      	ldr	r3, [pc, #548]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d06c      	beq.n	8001df0 <HAL_RCC_OscConfig+0x12c>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d168      	bne.n	8001df0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e246      	b.n	80021b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d2a:	d106      	bne.n	8001d3a <HAL_RCC_OscConfig+0x76>
 8001d2c:	4b80      	ldr	r3, [pc, #512]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a7f      	ldr	r2, [pc, #508]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	e02e      	b.n	8001d98 <HAL_RCC_OscConfig+0xd4>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x98>
 8001d42:	4b7b      	ldr	r3, [pc, #492]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a7a      	ldr	r2, [pc, #488]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	4b78      	ldr	r3, [pc, #480]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a77      	ldr	r2, [pc, #476]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e01d      	b.n	8001d98 <HAL_RCC_OscConfig+0xd4>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d64:	d10c      	bne.n	8001d80 <HAL_RCC_OscConfig+0xbc>
 8001d66:	4b72      	ldr	r3, [pc, #456]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a71      	ldr	r2, [pc, #452]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	4b6f      	ldr	r3, [pc, #444]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a6e      	ldr	r2, [pc, #440]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	e00b      	b.n	8001d98 <HAL_RCC_OscConfig+0xd4>
 8001d80:	4b6b      	ldr	r3, [pc, #428]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a6a      	ldr	r2, [pc, #424]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b68      	ldr	r3, [pc, #416]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a67      	ldr	r2, [pc, #412]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d013      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7fe fd34 	bl	800080c <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7fe fd30 	bl	800080c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	; 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e1fa      	b.n	80021b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dba:	4b5d      	ldr	r3, [pc, #372]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0xe4>
 8001dc6:	e014      	b.n	8001df2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7fe fd20 	bl	800080c <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7fe fd1c 	bl	800080c <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	; 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e1e6      	b.n	80021b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de2:	4b53      	ldr	r3, [pc, #332]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x10c>
 8001dee:	e000      	b.n	8001df2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d063      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dfe:	4b4c      	ldr	r3, [pc, #304]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00b      	beq.n	8001e22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e0a:	4b49      	ldr	r3, [pc, #292]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d11c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x18c>
 8001e16:	4b46      	ldr	r3, [pc, #280]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d116      	bne.n	8001e50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e22:	4b43      	ldr	r3, [pc, #268]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d005      	beq.n	8001e3a <HAL_RCC_OscConfig+0x176>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d001      	beq.n	8001e3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e1ba      	b.n	80021b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4939      	ldr	r1, [pc, #228]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4e:	e03a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d020      	beq.n	8001e9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e58:	4b36      	ldr	r3, [pc, #216]	; (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5e:	f7fe fcd5 	bl	800080c <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e66:	f7fe fcd1 	bl	800080c <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e19b      	b.n	80021b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e78:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e84:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4927      	ldr	r1, [pc, #156]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
 8001e98:	e015      	b.n	8001ec6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9a:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7fe fcb4 	bl	800080c <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea8:	f7fe fcb0 	bl	800080c <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e17a      	b.n	80021b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d03a      	beq.n	8001f48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d019      	beq.n	8001f0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee0:	f7fe fc94 	bl	800080c <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee8:	f7fe fc90 	bl	800080c <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e15a      	b.n	80021b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f06:	2001      	movs	r0, #1
 8001f08:	f000 fada 	bl	80024c0 <RCC_Delay>
 8001f0c:	e01c      	b.n	8001f48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f14:	f7fe fc7a 	bl	800080c <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1a:	e00f      	b.n	8001f3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f1c:	f7fe fc76 	bl	800080c <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d908      	bls.n	8001f3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e140      	b.n	80021b0 <HAL_RCC_OscConfig+0x4ec>
 8001f2e:	bf00      	nop
 8001f30:	40021000 	.word	0x40021000
 8001f34:	42420000 	.word	0x42420000
 8001f38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3c:	4b9e      	ldr	r3, [pc, #632]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1e9      	bne.n	8001f1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80a6 	beq.w	80020a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5a:	4b97      	ldr	r3, [pc, #604]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10d      	bne.n	8001f82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	4b94      	ldr	r3, [pc, #592]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	4a93      	ldr	r2, [pc, #588]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f70:	61d3      	str	r3, [r2, #28]
 8001f72:	4b91      	ldr	r3, [pc, #580]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f82:	4b8e      	ldr	r3, [pc, #568]	; (80021bc <HAL_RCC_OscConfig+0x4f8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d118      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8e:	4b8b      	ldr	r3, [pc, #556]	; (80021bc <HAL_RCC_OscConfig+0x4f8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a8a      	ldr	r2, [pc, #552]	; (80021bc <HAL_RCC_OscConfig+0x4f8>)
 8001f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9a:	f7fe fc37 	bl	800080c <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa2:	f7fe fc33 	bl	800080c <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b64      	cmp	r3, #100	; 0x64
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e0fd      	b.n	80021b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb4:	4b81      	ldr	r3, [pc, #516]	; (80021bc <HAL_RCC_OscConfig+0x4f8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d106      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x312>
 8001fc8:	4b7b      	ldr	r3, [pc, #492]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4a7a      	ldr	r2, [pc, #488]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6213      	str	r3, [r2, #32]
 8001fd4:	e02d      	b.n	8002032 <HAL_RCC_OscConfig+0x36e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x334>
 8001fde:	4b76      	ldr	r3, [pc, #472]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	4a75      	ldr	r2, [pc, #468]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	6213      	str	r3, [r2, #32]
 8001fea:	4b73      	ldr	r3, [pc, #460]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4a72      	ldr	r2, [pc, #456]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	f023 0304 	bic.w	r3, r3, #4
 8001ff4:	6213      	str	r3, [r2, #32]
 8001ff6:	e01c      	b.n	8002032 <HAL_RCC_OscConfig+0x36e>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	2b05      	cmp	r3, #5
 8001ffe:	d10c      	bne.n	800201a <HAL_RCC_OscConfig+0x356>
 8002000:	4b6d      	ldr	r3, [pc, #436]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4a6c      	ldr	r2, [pc, #432]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	6213      	str	r3, [r2, #32]
 800200c:	4b6a      	ldr	r3, [pc, #424]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	4a69      	ldr	r2, [pc, #420]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6213      	str	r3, [r2, #32]
 8002018:	e00b      	b.n	8002032 <HAL_RCC_OscConfig+0x36e>
 800201a:	4b67      	ldr	r3, [pc, #412]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4a66      	ldr	r2, [pc, #408]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 8002020:	f023 0301 	bic.w	r3, r3, #1
 8002024:	6213      	str	r3, [r2, #32]
 8002026:	4b64      	ldr	r3, [pc, #400]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	4a63      	ldr	r2, [pc, #396]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 800202c:	f023 0304 	bic.w	r3, r3, #4
 8002030:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d015      	beq.n	8002066 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203a:	f7fe fbe7 	bl	800080c <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002040:	e00a      	b.n	8002058 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f7fe fbe3 	bl	800080c <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e0ab      	b.n	80021b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002058:	4b57      	ldr	r3, [pc, #348]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ee      	beq.n	8002042 <HAL_RCC_OscConfig+0x37e>
 8002064:	e014      	b.n	8002090 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002066:	f7fe fbd1 	bl	800080c <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7fe fbcd 	bl	800080c <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f241 3288 	movw	r2, #5000	; 0x1388
 800207c:	4293      	cmp	r3, r2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e095      	b.n	80021b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002084:	4b4c      	ldr	r3, [pc, #304]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1ee      	bne.n	800206e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002090:	7dfb      	ldrb	r3, [r7, #23]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d105      	bne.n	80020a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002096:	4b48      	ldr	r3, [pc, #288]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	4a47      	ldr	r2, [pc, #284]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 800209c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 8081 	beq.w	80021ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ac:	4b42      	ldr	r3, [pc, #264]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 030c 	and.w	r3, r3, #12
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d061      	beq.n	800217c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d146      	bne.n	800214e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c0:	4b3f      	ldr	r3, [pc, #252]	; (80021c0 <HAL_RCC_OscConfig+0x4fc>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7fe fba1 	bl	800080c <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ce:	f7fe fb9d 	bl	800080c <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e067      	b.n	80021b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e0:	4b35      	ldr	r3, [pc, #212]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f0      	bne.n	80020ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f4:	d108      	bne.n	8002108 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020f6:	4b30      	ldr	r3, [pc, #192]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	492d      	ldr	r1, [pc, #180]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002108:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a19      	ldr	r1, [r3, #32]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	430b      	orrs	r3, r1
 800211a:	4927      	ldr	r1, [pc, #156]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002120:	4b27      	ldr	r3, [pc, #156]	; (80021c0 <HAL_RCC_OscConfig+0x4fc>)
 8002122:	2201      	movs	r2, #1
 8002124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002126:	f7fe fb71 	bl	800080c <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212e:	f7fe fb6d 	bl	800080c <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e037      	b.n	80021b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002140:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x46a>
 800214c:	e02f      	b.n	80021ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214e:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <HAL_RCC_OscConfig+0x4fc>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7fe fb5a 	bl	800080c <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215c:	f7fe fb56 	bl	800080c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e020      	b.n	80021b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x498>
 800217a:	e018      	b.n	80021ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e013      	b.n	80021b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_OscConfig+0x4f4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	429a      	cmp	r2, r3
 800219a:	d106      	bne.n	80021aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d001      	beq.n	80021ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40007000 	.word	0x40007000
 80021c0:	42420060 	.word	0x42420060

080021c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e0d0      	b.n	800237a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021d8:	4b6a      	ldr	r3, [pc, #424]	; (8002384 <HAL_RCC_ClockConfig+0x1c0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d910      	bls.n	8002208 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e6:	4b67      	ldr	r3, [pc, #412]	; (8002384 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 0207 	bic.w	r2, r3, #7
 80021ee:	4965      	ldr	r1, [pc, #404]	; (8002384 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b63      	ldr	r3, [pc, #396]	; (8002384 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0b8      	b.n	800237a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d020      	beq.n	8002256 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002220:	4b59      	ldr	r3, [pc, #356]	; (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4a58      	ldr	r2, [pc, #352]	; (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800222a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002238:	4b53      	ldr	r3, [pc, #332]	; (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	4a52      	ldr	r2, [pc, #328]	; (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002242:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002244:	4b50      	ldr	r3, [pc, #320]	; (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	494d      	ldr	r1, [pc, #308]	; (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d040      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d107      	bne.n	800227a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226a:	4b47      	ldr	r3, [pc, #284]	; (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d115      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e07f      	b.n	800237a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d107      	bne.n	8002292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002282:	4b41      	ldr	r3, [pc, #260]	; (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d109      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e073      	b.n	800237a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002292:	4b3d      	ldr	r3, [pc, #244]	; (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e06b      	b.n	800237a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a2:	4b39      	ldr	r3, [pc, #228]	; (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f023 0203 	bic.w	r2, r3, #3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4936      	ldr	r1, [pc, #216]	; (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b4:	f7fe faaa 	bl	800080c <HAL_GetTick>
 80022b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ba:	e00a      	b.n	80022d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022bc:	f7fe faa6 	bl	800080c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e053      	b.n	800237a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d2:	4b2d      	ldr	r3, [pc, #180]	; (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 020c 	and.w	r2, r3, #12
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d1eb      	bne.n	80022bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022e4:	4b27      	ldr	r3, [pc, #156]	; (8002384 <HAL_RCC_ClockConfig+0x1c0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d210      	bcs.n	8002314 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b24      	ldr	r3, [pc, #144]	; (8002384 <HAL_RCC_ClockConfig+0x1c0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 0207 	bic.w	r2, r3, #7
 80022fa:	4922      	ldr	r1, [pc, #136]	; (8002384 <HAL_RCC_ClockConfig+0x1c0>)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b20      	ldr	r3, [pc, #128]	; (8002384 <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e032      	b.n	800237a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d008      	beq.n	8002332 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002320:	4b19      	ldr	r3, [pc, #100]	; (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4916      	ldr	r1, [pc, #88]	; (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	4313      	orrs	r3, r2
 8002330:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d009      	beq.n	8002352 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800233e:	4b12      	ldr	r3, [pc, #72]	; (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	490e      	ldr	r1, [pc, #56]	; (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	4313      	orrs	r3, r2
 8002350:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002352:	f000 f821 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8002356:	4601      	mov	r1, r0
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	4a0a      	ldr	r2, [pc, #40]	; (800238c <HAL_RCC_ClockConfig+0x1c8>)
 8002364:	5cd3      	ldrb	r3, [r2, r3]
 8002366:	fa21 f303 	lsr.w	r3, r1, r3
 800236a:	4a09      	ldr	r2, [pc, #36]	; (8002390 <HAL_RCC_ClockConfig+0x1cc>)
 800236c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <HAL_RCC_ClockConfig+0x1d0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe fa08 	bl	8000788 <HAL_InitTick>

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40022000 	.word	0x40022000
 8002388:	40021000 	.word	0x40021000
 800238c:	08009220 	.word	0x08009220
 8002390:	20000024 	.word	0x20000024
 8002394:	20000018 	.word	0x20000018

08002398 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002398:	b490      	push	{r4, r7}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800239e:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023a0:	1d3c      	adds	r4, r7, #4
 80023a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023a8:	4b28      	ldr	r3, [pc, #160]	; (800244c <HAL_RCC_GetSysClockFreq+0xb4>)
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
 80023b2:	2300      	movs	r3, #0
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	2300      	movs	r3, #0
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023c2:	4b23      	ldr	r3, [pc, #140]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d002      	beq.n	80023d8 <HAL_RCC_GetSysClockFreq+0x40>
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d003      	beq.n	80023de <HAL_RCC_GetSysClockFreq+0x46>
 80023d6:	e02d      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023d8:	4b1e      	ldr	r3, [pc, #120]	; (8002454 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023da:	623b      	str	r3, [r7, #32]
      break;
 80023dc:	e02d      	b.n	800243a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	0c9b      	lsrs	r3, r3, #18
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023ea:	4413      	add	r3, r2
 80023ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d013      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023fc:	4b14      	ldr	r3, [pc, #80]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	0c5b      	lsrs	r3, r3, #17
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800240a:	4413      	add	r3, r2
 800240c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002410:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	4a0f      	ldr	r2, [pc, #60]	; (8002454 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002416:	fb02 f203 	mul.w	r2, r2, r3
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
 8002422:	e004      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	4a0c      	ldr	r2, [pc, #48]	; (8002458 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002428:	fb02 f303 	mul.w	r3, r2, r3
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	623b      	str	r3, [r7, #32]
      break;
 8002432:	e002      	b.n	800243a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002434:	4b07      	ldr	r3, [pc, #28]	; (8002454 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002436:	623b      	str	r3, [r7, #32]
      break;
 8002438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800243a:	6a3b      	ldr	r3, [r7, #32]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3728      	adds	r7, #40	; 0x28
 8002440:	46bd      	mov	sp, r7
 8002442:	bc90      	pop	{r4, r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	08006944 	.word	0x08006944
 800244c:	08006954 	.word	0x08006954
 8002450:	40021000 	.word	0x40021000
 8002454:	007a1200 	.word	0x007a1200
 8002458:	003d0900 	.word	0x003d0900

0800245c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002460:	4b02      	ldr	r3, [pc, #8]	; (800246c <HAL_RCC_GetHCLKFreq+0x10>)
 8002462:	681b      	ldr	r3, [r3, #0]
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	20000024 	.word	0x20000024

08002470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002474:	f7ff fff2 	bl	800245c <HAL_RCC_GetHCLKFreq>
 8002478:	4601      	mov	r1, r0
 800247a:	4b05      	ldr	r3, [pc, #20]	; (8002490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	0a1b      	lsrs	r3, r3, #8
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	4a03      	ldr	r2, [pc, #12]	; (8002494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002486:	5cd3      	ldrb	r3, [r2, r3]
 8002488:	fa21 f303 	lsr.w	r3, r1, r3
}
 800248c:	4618      	mov	r0, r3
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40021000 	.word	0x40021000
 8002494:	08009230 	.word	0x08009230

08002498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800249c:	f7ff ffde 	bl	800245c <HAL_RCC_GetHCLKFreq>
 80024a0:	4601      	mov	r1, r0
 80024a2:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	0adb      	lsrs	r3, r3, #11
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	4a03      	ldr	r2, [pc, #12]	; (80024bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ae:	5cd3      	ldrb	r3, [r2, r3]
 80024b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000
 80024bc:	08009230 	.word	0x08009230

080024c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024c8:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <RCC_Delay+0x34>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <RCC_Delay+0x38>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	0a5b      	lsrs	r3, r3, #9
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	fb02 f303 	mul.w	r3, r2, r3
 80024da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024dc:	bf00      	nop
  }
  while (Delay --);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1e5a      	subs	r2, r3, #1
 80024e2:	60fa      	str	r2, [r7, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f9      	bne.n	80024dc <RCC_Delay+0x1c>
}
 80024e8:	bf00      	nop
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000024 	.word	0x20000024
 80024f8:	10624dd3 	.word	0x10624dd3

080024fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e01d      	b.n	800254a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f003 fbd8 	bl	8005cd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3304      	adds	r3, #4
 8002538:	4619      	mov	r1, r3
 800253a:	4610      	mov	r0, r2
 800253c:	f000 fb6e 	bl	8002c1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e01d      	b.n	80025a0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d106      	bne.n	800257e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f815 	bl	80025a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2202      	movs	r2, #2
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3304      	adds	r3, #4
 800258e:	4619      	mov	r1, r3
 8002590:	4610      	mov	r0, r2
 8002592:	f000 fb43 	bl	8002c1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2201      	movs	r2, #1
 80025cc:	6839      	ldr	r1, [r7, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fda4 	bl	800311c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a10      	ldr	r2, [pc, #64]	; (800261c <HAL_TIM_PWM_Start+0x60>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d107      	bne.n	80025ee <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2b06      	cmp	r3, #6
 80025fe:	d007      	beq.n	8002610 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40012c00 	.word	0x40012c00

08002620 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2200      	movs	r2, #0
 8002630:	6839      	ldr	r1, [r7, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f000 fd72 	bl	800311c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a1d      	ldr	r2, [pc, #116]	; (80026b4 <HAL_TIM_PWM_Stop+0x94>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d117      	bne.n	8002672 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6a1a      	ldr	r2, [r3, #32]
 8002648:	f241 1311 	movw	r3, #4369	; 0x1111
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10f      	bne.n	8002672 <HAL_TIM_PWM_Stop+0x52>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6a1a      	ldr	r2, [r3, #32]
 8002658:	f240 4344 	movw	r3, #1092	; 0x444
 800265c:	4013      	ands	r3, r2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d107      	bne.n	8002672 <HAL_TIM_PWM_Stop+0x52>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002670:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6a1a      	ldr	r2, [r3, #32]
 8002678:	f241 1311 	movw	r3, #4369	; 0x1111
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10f      	bne.n	80026a2 <HAL_TIM_PWM_Stop+0x82>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6a1a      	ldr	r2, [r3, #32]
 8002688:	f240 4344 	movw	r3, #1092	; 0x444
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d107      	bne.n	80026a2 <HAL_TIM_PWM_Stop+0x82>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40012c00 	.word	0x40012c00

080026b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d122      	bne.n	8002714 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d11b      	bne.n	8002714 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0202 	mvn.w	r2, #2
 80026e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fa73 	bl	8002be6 <HAL_TIM_IC_CaptureCallback>
 8002700:	e005      	b.n	800270e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fa66 	bl	8002bd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 fa75 	bl	8002bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	2b04      	cmp	r3, #4
 8002720:	d122      	bne.n	8002768 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b04      	cmp	r3, #4
 800272e:	d11b      	bne.n	8002768 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0204 	mvn.w	r2, #4
 8002738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2202      	movs	r2, #2
 800273e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 fa49 	bl	8002be6 <HAL_TIM_IC_CaptureCallback>
 8002754:	e005      	b.n	8002762 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 fa3c 	bl	8002bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fa4b 	bl	8002bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b08      	cmp	r3, #8
 8002774:	d122      	bne.n	80027bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b08      	cmp	r3, #8
 8002782:	d11b      	bne.n	80027bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0208 	mvn.w	r2, #8
 800278c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2204      	movs	r2, #4
 8002792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fa1f 	bl	8002be6 <HAL_TIM_IC_CaptureCallback>
 80027a8:	e005      	b.n	80027b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fa12 	bl	8002bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 fa21 	bl	8002bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0310 	and.w	r3, r3, #16
 80027c6:	2b10      	cmp	r3, #16
 80027c8:	d122      	bne.n	8002810 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	2b10      	cmp	r3, #16
 80027d6:	d11b      	bne.n	8002810 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0210 	mvn.w	r2, #16
 80027e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2208      	movs	r2, #8
 80027e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f9f5 	bl	8002be6 <HAL_TIM_IC_CaptureCallback>
 80027fc:	e005      	b.n	800280a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f9e8 	bl	8002bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f9f7 	bl	8002bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d10e      	bne.n	800283c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b01      	cmp	r3, #1
 800282a:	d107      	bne.n	800283c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0201 	mvn.w	r2, #1
 8002834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f9c3 	bl	8002bc2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002846:	2b80      	cmp	r3, #128	; 0x80
 8002848:	d10e      	bne.n	8002868 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002854:	2b80      	cmp	r3, #128	; 0x80
 8002856:	d107      	bne.n	8002868 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fccb 	bl	80031fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	2b40      	cmp	r3, #64	; 0x40
 8002874:	d10e      	bne.n	8002894 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002880:	2b40      	cmp	r3, #64	; 0x40
 8002882:	d107      	bne.n	8002894 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800288c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f9bb 	bl	8002c0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	2b20      	cmp	r3, #32
 80028a0:	d10e      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0320 	and.w	r3, r3, #32
 80028ac:	2b20      	cmp	r3, #32
 80028ae:	d107      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0220 	mvn.w	r2, #32
 80028b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fc96 	bl	80031ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80028de:	2302      	movs	r3, #2
 80028e0:	e0b4      	b.n	8002a4c <HAL_TIM_PWM_ConfigChannel+0x184>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2202      	movs	r2, #2
 80028ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b0c      	cmp	r3, #12
 80028f6:	f200 809f 	bhi.w	8002a38 <HAL_TIM_PWM_ConfigChannel+0x170>
 80028fa:	a201      	add	r2, pc, #4	; (adr r2, 8002900 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80028fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002900:	08002935 	.word	0x08002935
 8002904:	08002a39 	.word	0x08002a39
 8002908:	08002a39 	.word	0x08002a39
 800290c:	08002a39 	.word	0x08002a39
 8002910:	08002975 	.word	0x08002975
 8002914:	08002a39 	.word	0x08002a39
 8002918:	08002a39 	.word	0x08002a39
 800291c:	08002a39 	.word	0x08002a39
 8002920:	080029b7 	.word	0x080029b7
 8002924:	08002a39 	.word	0x08002a39
 8002928:	08002a39 	.word	0x08002a39
 800292c:	08002a39 	.word	0x08002a39
 8002930:	080029f7 	.word	0x080029f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	4618      	mov	r0, r3
 800293c:	f000 f9d0 	bl	8002ce0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0208 	orr.w	r2, r2, #8
 800294e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0204 	bic.w	r2, r2, #4
 800295e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6999      	ldr	r1, [r3, #24]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	691a      	ldr	r2, [r3, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	619a      	str	r2, [r3, #24]
      break;
 8002972:	e062      	b.n	8002a3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	4618      	mov	r0, r3
 800297c:	f000 fa16 	bl	8002dac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699a      	ldr	r2, [r3, #24]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800298e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800299e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6999      	ldr	r1, [r3, #24]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	021a      	lsls	r2, r3, #8
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	619a      	str	r2, [r3, #24]
      break;
 80029b4:	e041      	b.n	8002a3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 fa5f 	bl	8002e80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	69da      	ldr	r2, [r3, #28]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0208 	orr.w	r2, r2, #8
 80029d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	69da      	ldr	r2, [r3, #28]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0204 	bic.w	r2, r2, #4
 80029e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69d9      	ldr	r1, [r3, #28]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	61da      	str	r2, [r3, #28]
      break;
 80029f4:	e021      	b.n	8002a3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 faa9 	bl	8002f54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	69da      	ldr	r2, [r3, #28]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	69da      	ldr	r2, [r3, #28]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69d9      	ldr	r1, [r3, #28]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	021a      	lsls	r2, r3, #8
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	61da      	str	r2, [r3, #28]
      break;
 8002a36:	e000      	b.n	8002a3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002a38:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_TIM_ConfigClockSource+0x18>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e0a6      	b.n	8002bba <HAL_TIM_ConfigClockSource+0x166>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d067      	beq.n	8002b74 <HAL_TIM_ConfigClockSource+0x120>
 8002aa4:	2b40      	cmp	r3, #64	; 0x40
 8002aa6:	d80b      	bhi.n	8002ac0 <HAL_TIM_ConfigClockSource+0x6c>
 8002aa8:	2b10      	cmp	r3, #16
 8002aaa:	d073      	beq.n	8002b94 <HAL_TIM_ConfigClockSource+0x140>
 8002aac:	2b10      	cmp	r3, #16
 8002aae:	d802      	bhi.n	8002ab6 <HAL_TIM_ConfigClockSource+0x62>
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d06f      	beq.n	8002b94 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002ab4:	e078      	b.n	8002ba8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ab6:	2b20      	cmp	r3, #32
 8002ab8:	d06c      	beq.n	8002b94 <HAL_TIM_ConfigClockSource+0x140>
 8002aba:	2b30      	cmp	r3, #48	; 0x30
 8002abc:	d06a      	beq.n	8002b94 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002abe:	e073      	b.n	8002ba8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ac0:	2b70      	cmp	r3, #112	; 0x70
 8002ac2:	d00d      	beq.n	8002ae0 <HAL_TIM_ConfigClockSource+0x8c>
 8002ac4:	2b70      	cmp	r3, #112	; 0x70
 8002ac6:	d804      	bhi.n	8002ad2 <HAL_TIM_ConfigClockSource+0x7e>
 8002ac8:	2b50      	cmp	r3, #80	; 0x50
 8002aca:	d033      	beq.n	8002b34 <HAL_TIM_ConfigClockSource+0xe0>
 8002acc:	2b60      	cmp	r3, #96	; 0x60
 8002ace:	d041      	beq.n	8002b54 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002ad0:	e06a      	b.n	8002ba8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad6:	d066      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x152>
 8002ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002adc:	d017      	beq.n	8002b0e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002ade:	e063      	b.n	8002ba8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	6899      	ldr	r1, [r3, #8]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f000 faf5 	bl	80030de <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b02:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	609a      	str	r2, [r3, #8]
      break;
 8002b0c:	e04c      	b.n	8002ba8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6899      	ldr	r1, [r3, #8]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f000 fade 	bl	80030de <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b30:	609a      	str	r2, [r3, #8]
      break;
 8002b32:	e039      	b.n	8002ba8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	6859      	ldr	r1, [r3, #4]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	461a      	mov	r2, r3
 8002b42:	f000 fa55 	bl	8002ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2150      	movs	r1, #80	; 0x50
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 faac 	bl	80030aa <TIM_ITRx_SetConfig>
      break;
 8002b52:	e029      	b.n	8002ba8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6859      	ldr	r1, [r3, #4]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	461a      	mov	r2, r3
 8002b62:	f000 fa73 	bl	800304c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2160      	movs	r1, #96	; 0x60
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fa9c 	bl	80030aa <TIM_ITRx_SetConfig>
      break;
 8002b72:	e019      	b.n	8002ba8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	6859      	ldr	r1, [r3, #4]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	461a      	mov	r2, r3
 8002b82:	f000 fa35 	bl	8002ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2140      	movs	r1, #64	; 0x40
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 fa8c 	bl	80030aa <TIM_ITRx_SetConfig>
      break;
 8002b92:	e009      	b.n	8002ba8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	f000 fa83 	bl	80030aa <TIM_ITRx_SetConfig>
      break;
 8002ba4:	e000      	b.n	8002ba8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002ba6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr

08002be6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a29      	ldr	r2, [pc, #164]	; (8002cd4 <TIM_Base_SetConfig+0xb8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d00b      	beq.n	8002c4c <TIM_Base_SetConfig+0x30>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3a:	d007      	beq.n	8002c4c <TIM_Base_SetConfig+0x30>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a26      	ldr	r2, [pc, #152]	; (8002cd8 <TIM_Base_SetConfig+0xbc>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d003      	beq.n	8002c4c <TIM_Base_SetConfig+0x30>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a25      	ldr	r2, [pc, #148]	; (8002cdc <TIM_Base_SetConfig+0xc0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d108      	bne.n	8002c5e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a1c      	ldr	r2, [pc, #112]	; (8002cd4 <TIM_Base_SetConfig+0xb8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00b      	beq.n	8002c7e <TIM_Base_SetConfig+0x62>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6c:	d007      	beq.n	8002c7e <TIM_Base_SetConfig+0x62>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a19      	ldr	r2, [pc, #100]	; (8002cd8 <TIM_Base_SetConfig+0xbc>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d003      	beq.n	8002c7e <TIM_Base_SetConfig+0x62>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a18      	ldr	r2, [pc, #96]	; (8002cdc <TIM_Base_SetConfig+0xc0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d108      	bne.n	8002c90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a07      	ldr	r2, [pc, #28]	; (8002cd4 <TIM_Base_SetConfig+0xb8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d103      	bne.n	8002cc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	615a      	str	r2, [r3, #20]
}
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	40012c00 	.word	0x40012c00
 8002cd8:	40000400 	.word	0x40000400
 8002cdc:	40000800 	.word	0x40000800

08002ce0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	f023 0201 	bic.w	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0303 	bic.w	r3, r3, #3
 8002d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f023 0302 	bic.w	r3, r3, #2
 8002d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a1c      	ldr	r2, [pc, #112]	; (8002da8 <TIM_OC1_SetConfig+0xc8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d10c      	bne.n	8002d56 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f023 0308 	bic.w	r3, r3, #8
 8002d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f023 0304 	bic.w	r3, r3, #4
 8002d54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a13      	ldr	r2, [pc, #76]	; (8002da8 <TIM_OC1_SetConfig+0xc8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d111      	bne.n	8002d82 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	621a      	str	r2, [r3, #32]
}
 8002d9c:	bf00      	nop
 8002d9e:	371c      	adds	r7, #28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40012c00 	.word	0x40012c00

08002dac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	f023 0210 	bic.w	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f023 0320 	bic.w	r3, r3, #32
 8002df6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a1d      	ldr	r2, [pc, #116]	; (8002e7c <TIM_OC2_SetConfig+0xd0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d10d      	bne.n	8002e28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a14      	ldr	r2, [pc, #80]	; (8002e7c <TIM_OC2_SetConfig+0xd0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d113      	bne.n	8002e58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	621a      	str	r2, [r3, #32]
}
 8002e72:	bf00      	nop
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr
 8002e7c:	40012c00 	.word	0x40012c00

08002e80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f023 0303 	bic.w	r3, r3, #3
 8002eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a1d      	ldr	r2, [pc, #116]	; (8002f50 <TIM_OC3_SetConfig+0xd0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d10d      	bne.n	8002efa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a14      	ldr	r2, [pc, #80]	; (8002f50 <TIM_OC3_SetConfig+0xd0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d113      	bne.n	8002f2a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	621a      	str	r2, [r3, #32]
}
 8002f44:	bf00      	nop
 8002f46:	371c      	adds	r7, #28
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40012c00 	.word	0x40012c00

08002f54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	021b      	lsls	r3, r3, #8
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	031b      	lsls	r3, r3, #12
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a0f      	ldr	r2, [pc, #60]	; (8002fec <TIM_OC4_SetConfig+0x98>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d109      	bne.n	8002fc8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	019b      	lsls	r3, r3, #6
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	621a      	str	r2, [r3, #32]
}
 8002fe2:	bf00      	nop
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	40012c00 	.word	0x40012c00

08002ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	f023 0201 	bic.w	r2, r3, #1
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800301a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f023 030a 	bic.w	r3, r3, #10
 800302c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4313      	orrs	r3, r2
 8003034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	621a      	str	r2, [r3, #32]
}
 8003042:	bf00      	nop
 8003044:	371c      	adds	r7, #28
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	f023 0210 	bic.w	r2, r3, #16
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003076:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	031b      	lsls	r3, r3, #12
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	4313      	orrs	r3, r2
 8003080:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003088:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	621a      	str	r2, [r3, #32]
}
 80030a0:	bf00      	nop
 80030a2:	371c      	adds	r7, #28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b085      	sub	sp, #20
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f043 0307 	orr.w	r3, r3, #7
 80030cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	609a      	str	r2, [r3, #8]
}
 80030d4:	bf00      	nop
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr

080030de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030de:	b480      	push	{r7}
 80030e0:	b087      	sub	sp, #28
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	021a      	lsls	r2, r3, #8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	431a      	orrs	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	4313      	orrs	r3, r2
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4313      	orrs	r3, r2
 800310a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	609a      	str	r2, [r3, #8]
}
 8003112:	bf00      	nop
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr

0800311c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 031f 	and.w	r3, r3, #31
 800312e:	2201      	movs	r2, #1
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a1a      	ldr	r2, [r3, #32]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	43db      	mvns	r3, r3
 800313e:	401a      	ands	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a1a      	ldr	r2, [r3, #32]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f003 031f 	and.w	r3, r3, #31
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	fa01 f303 	lsl.w	r3, r1, r3
 8003154:	431a      	orrs	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	621a      	str	r2, [r3, #32]
}
 800315a:	bf00      	nop
 800315c:	371c      	adds	r7, #28
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr

08003164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003178:	2302      	movs	r3, #2
 800317a:	e032      	b.n	80031e2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031b4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e03f      	b.n	80032a2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f002 fde6 	bl	8005e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2224      	movs	r2, #36	; 0x24
 8003240:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003252:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 faab 	bl	80037b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003268:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695a      	ldr	r2, [r3, #20]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003278:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003288:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b085      	sub	sp, #20
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	4613      	mov	r3, r2
 80032b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b20      	cmp	r3, #32
 80032c2:	d140      	bne.n	8003346 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_UART_Receive_IT+0x26>
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e039      	b.n	8003348 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_UART_Receive_IT+0x38>
 80032de:	2302      	movs	r3, #2
 80032e0:	e032      	b.n	8003348 <HAL_UART_Receive_IT+0x9e>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	88fa      	ldrh	r2, [r7, #6]
 80032f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	88fa      	ldrh	r2, [r7, #6]
 80032fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2222      	movs	r2, #34	; 0x22
 8003306:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003320:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695a      	ldr	r2, [r3, #20]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0201 	orr.w	r2, r2, #1
 8003330:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0220 	orr.w	r2, r2, #32
 8003340:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	e000      	b.n	8003348 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003346:	2302      	movs	r3, #2
  }
}
 8003348:	4618      	mov	r0, r3
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr
	...

08003354 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003374:	2300      	movs	r3, #0
 8003376:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10d      	bne.n	80033a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b00      	cmp	r3, #0
 8003392:	d008      	beq.n	80033a6 <HAL_UART_IRQHandler+0x52>
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f984 	bl	80036ac <UART_Receive_IT>
      return;
 80033a4:	e0cc      	b.n	8003540 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 80ab 	beq.w	8003504 <HAL_UART_IRQHandler+0x1b0>
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d105      	bne.n	80033c4 <HAL_UART_IRQHandler+0x70>
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 80a0 	beq.w	8003504 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_UART_IRQHandler+0x90>
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033dc:	f043 0201 	orr.w	r2, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <HAL_UART_IRQHandler+0xb0>
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fc:	f043 0202 	orr.w	r2, r3, #2
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <HAL_UART_IRQHandler+0xd0>
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341c:	f043 0204 	orr.w	r2, r3, #4
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <HAL_UART_IRQHandler+0xf0>
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343c:	f043 0208 	orr.w	r2, r3, #8
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003448:	2b00      	cmp	r3, #0
 800344a:	d078      	beq.n	800353e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d007      	beq.n	8003466 <HAL_UART_IRQHandler+0x112>
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f923 	bl	80036ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf14      	ite	ne
 8003474:	2301      	movne	r3, #1
 8003476:	2300      	moveq	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d102      	bne.n	800348e <HAL_UART_IRQHandler+0x13a>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d031      	beq.n	80034f2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f86e 	bl	8003570 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d023      	beq.n	80034ea <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695a      	ldr	r2, [r3, #20]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034b0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d013      	beq.n	80034e2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034be:	4a22      	ldr	r2, [pc, #136]	; (8003548 <HAL_UART_IRQHandler+0x1f4>)
 80034c0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fd fab8 	bl	8000a3c <HAL_DMA_Abort_IT>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d016      	beq.n	8003500 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034dc:	4610      	mov	r0, r2
 80034de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e0:	e00e      	b.n	8003500 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f83b 	bl	800355e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e8:	e00a      	b.n	8003500 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f837 	bl	800355e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f0:	e006      	b.n	8003500 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f833 	bl	800355e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80034fe:	e01e      	b.n	800353e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003500:	bf00      	nop
    return;
 8003502:	e01c      	b.n	800353e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <HAL_UART_IRQHandler+0x1cc>
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f85a 	bl	80035d2 <UART_Transmit_IT>
    return;
 800351e:	e00f      	b.n	8003540 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_UART_IRQHandler+0x1ec>
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f8a1 	bl	800367c <UART_EndTransmit_IT>
    return;
 800353a:	bf00      	nop
 800353c:	e000      	b.n	8003540 <HAL_UART_IRQHandler+0x1ec>
    return;
 800353e:	bf00      	nop
  }
}
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	080035ab 	.word	0x080035ab

0800354c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr

0800355e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003586:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr

080035aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f7ff ffca 	bl	800355e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b085      	sub	sp, #20
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b21      	cmp	r3, #33	; 0x21
 80035e4:	d144      	bne.n	8003670 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ee:	d11a      	bne.n	8003626 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003604:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d105      	bne.n	800361a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	1c9a      	adds	r2, r3, #2
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	621a      	str	r2, [r3, #32]
 8003618:	e00e      	b.n	8003638 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	621a      	str	r2, [r3, #32]
 8003624:	e008      	b.n	8003638 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	1c59      	adds	r1, r3, #1
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6211      	str	r1, [r2, #32]
 8003630:	781a      	ldrb	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29b      	uxth	r3, r3
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	4619      	mov	r1, r3
 8003646:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10f      	bne.n	800366c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800365a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800366a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	e000      	b.n	8003672 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003670:	2302      	movs	r3, #2
  }
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr

0800367c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003692:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ff55 	bl	800354c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b22      	cmp	r3, #34	; 0x22
 80036be:	d171      	bne.n	80037a4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c8:	d123      	bne.n	8003712 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10e      	bne.n	80036f6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	b29b      	uxth	r3, r3
 80036e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ee:	1c9a      	adds	r2, r3, #2
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	629a      	str	r2, [r3, #40]	; 0x28
 80036f4:	e029      	b.n	800374a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	629a      	str	r2, [r3, #40]	; 0x28
 8003710:	e01b      	b.n	800374a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10a      	bne.n	8003730 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6858      	ldr	r0, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	1c59      	adds	r1, r3, #1
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6291      	str	r1, [r2, #40]	; 0x28
 800372a:	b2c2      	uxtb	r2, r0
 800372c:	701a      	strb	r2, [r3, #0]
 800372e:	e00c      	b.n	800374a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	b2da      	uxtb	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	1c58      	adds	r0, r3, #1
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	6288      	str	r0, [r1, #40]	; 0x28
 8003742:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29b      	uxth	r3, r3
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	4619      	mov	r1, r3
 8003758:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800375a:	2b00      	cmp	r3, #0
 800375c:	d120      	bne.n	80037a0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0220 	bic.w	r2, r2, #32
 800376c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800377c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0201 	bic.w	r2, r2, #1
 800378c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f002 fa0e 	bl	8005bb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	e002      	b.n	80037a6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	e000      	b.n	80037a6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80037a4:	2302      	movs	r3, #2
  }
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80037ea:	f023 030c 	bic.w	r3, r3, #12
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6812      	ldr	r2, [r2, #0]
 80037f2:	68f9      	ldr	r1, [r7, #12]
 80037f4:	430b      	orrs	r3, r1
 80037f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a52      	ldr	r2, [pc, #328]	; (800395c <UART_SetConfig+0x1ac>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d14e      	bne.n	80038b6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003818:	f7fe fe3e 	bl	8002498 <HAL_RCC_GetPCLK2Freq>
 800381c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	4613      	mov	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	009a      	lsls	r2, r3, #2
 8003828:	441a      	add	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	fbb2 f3f3 	udiv	r3, r2, r3
 8003834:	4a4a      	ldr	r2, [pc, #296]	; (8003960 <UART_SetConfig+0x1b0>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	0119      	lsls	r1, r3, #4
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	009a      	lsls	r2, r3, #2
 8003848:	441a      	add	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	fbb2 f2f3 	udiv	r2, r2, r3
 8003854:	4b42      	ldr	r3, [pc, #264]	; (8003960 <UART_SetConfig+0x1b0>)
 8003856:	fba3 0302 	umull	r0, r3, r3, r2
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	2064      	movs	r0, #100	; 0x64
 800385e:	fb00 f303 	mul.w	r3, r0, r3
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	3332      	adds	r3, #50	; 0x32
 8003868:	4a3d      	ldr	r2, [pc, #244]	; (8003960 <UART_SetConfig+0x1b0>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003874:	4419      	add	r1, r3
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	009a      	lsls	r2, r3, #2
 8003880:	441a      	add	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	fbb2 f2f3 	udiv	r2, r2, r3
 800388c:	4b34      	ldr	r3, [pc, #208]	; (8003960 <UART_SetConfig+0x1b0>)
 800388e:	fba3 0302 	umull	r0, r3, r3, r2
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	2064      	movs	r0, #100	; 0x64
 8003896:	fb00 f303 	mul.w	r3, r0, r3
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	3332      	adds	r3, #50	; 0x32
 80038a0:	4a2f      	ldr	r2, [pc, #188]	; (8003960 <UART_SetConfig+0x1b0>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	f003 020f 	and.w	r2, r3, #15
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	440a      	add	r2, r1
 80038b2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80038b4:	e04d      	b.n	8003952 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80038b6:	f7fe fddb 	bl	8002470 <HAL_RCC_GetPCLK1Freq>
 80038ba:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	4613      	mov	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	009a      	lsls	r2, r3, #2
 80038c6:	441a      	add	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d2:	4a23      	ldr	r2, [pc, #140]	; (8003960 <UART_SetConfig+0x1b0>)
 80038d4:	fba2 2303 	umull	r2, r3, r2, r3
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	0119      	lsls	r1, r3, #4
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	4613      	mov	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	009a      	lsls	r2, r3, #2
 80038e6:	441a      	add	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80038f2:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <UART_SetConfig+0x1b0>)
 80038f4:	fba3 0302 	umull	r0, r3, r3, r2
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	2064      	movs	r0, #100	; 0x64
 80038fc:	fb00 f303 	mul.w	r3, r0, r3
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	3332      	adds	r3, #50	; 0x32
 8003906:	4a16      	ldr	r2, [pc, #88]	; (8003960 <UART_SetConfig+0x1b0>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003912:	4419      	add	r1, r3
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	009a      	lsls	r2, r3, #2
 800391e:	441a      	add	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	fbb2 f2f3 	udiv	r2, r2, r3
 800392a:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <UART_SetConfig+0x1b0>)
 800392c:	fba3 0302 	umull	r0, r3, r3, r2
 8003930:	095b      	lsrs	r3, r3, #5
 8003932:	2064      	movs	r0, #100	; 0x64
 8003934:	fb00 f303 	mul.w	r3, r0, r3
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	3332      	adds	r3, #50	; 0x32
 800393e:	4a08      	ldr	r2, [pc, #32]	; (8003960 <UART_SetConfig+0x1b0>)
 8003940:	fba2 2303 	umull	r2, r3, r2, r3
 8003944:	095b      	lsrs	r3, r3, #5
 8003946:	f003 020f 	and.w	r2, r3, #15
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	440a      	add	r2, r1
 8003950:	609a      	str	r2, [r3, #8]
}
 8003952:	bf00      	nop
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40013800 	.word	0x40013800
 8003960:	51eb851f 	.word	0x51eb851f

08003964 <FlashManager_PageAddress>:
/* Private variables ---------------------------------------------------------*/
uint32_t flash_temp_data[FLASH_PAGE_SIZE/4];

/* Private function -----------------------------------------------*/
uint32_t FlashManager_PageAddress(uint32_t address)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
	uint32_t begin_page_address;
	uint32_t offset_page_address;

	if(address>=SYSTEM_FLASH_ADDRESS_BEGIN && address<SYSTEM_FLASH_ADDRESS_END)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003972:	d30d      	bcc.n	8003990 <FlashManager_PageAddress+0x2c>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a09      	ldr	r2, [pc, #36]	; (800399c <FlashManager_PageAddress+0x38>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d809      	bhi.n	8003990 <FlashManager_PageAddress+0x2c>
	{
		offset_page_address=address%FLASH_PAGE_SIZE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003982:	60fb      	str	r3, [r7, #12]
		begin_page_address=address-offset_page_address;
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	60bb      	str	r3, [r7, #8]
		return begin_page_address;
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	e000      	b.n	8003992 <FlashManager_PageAddress+0x2e>
	}
	else
		return FLASH_ERROR_ADDRESS;
 8003990:	2302      	movs	r3, #2
}
 8003992:	4618      	mov	r0, r3
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr
 800399c:	0800ffff 	.word	0x0800ffff

080039a0 <FlashManager_ErasePage>:

/* Public function -----------------------------------------------*/
FlashManager_Error_Code FlashManager_ErasePage(uint32_t address)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	uint32_t errorcode;
	uint32_t SectorError = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitTypeDef EraseInitStruct;

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.Banks = FLASH_BANK_1;
 80039b0:	2301      	movs	r3, #1
 80039b2:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.PageAddress = FlashManager_PageAddress(address);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff ffd5 	bl	8003964 <FlashManager_PageAddress>
 80039ba:	4603      	mov	r3, r0
 80039bc:	613b      	str	r3, [r7, #16]
	EraseInitStruct.NbPages = 1;
 80039be:	2301      	movs	r3, #1
 80039c0:	617b      	str	r3, [r7, #20]

	errorcode=HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80039c2:	f107 0218 	add.w	r2, r7, #24
 80039c6:	f107 0308 	add.w	r3, r7, #8
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fd fa03 	bl	8000dd8 <HAL_FLASHEx_Erase>
 80039d2:	4603      	mov	r3, r0
 80039d4:	61fb      	str	r3, [r7, #28]
	if(errorcode!=HAL_OK)
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <FlashManager_ErasePage+0x40>
		return FLASH_ERASE_ERROR;
 80039dc:	2303      	movs	r3, #3
 80039de:	e000      	b.n	80039e2 <FlashManager_ErasePage+0x42>
	else
		return FLASH_NO_ERROR;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3720      	adds	r7, #32
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <FlashManager_WriteMulti>:
	else
		return FLASH_ERROR_ADDRESS;
}

FlashManager_Error_Code FlashManager_WriteMulti(uint32_t address, uint32_t NbWord, uint32_t* data)
{
 80039ec:	b590      	push	{r4, r7, lr}
 80039ee:	b08b      	sub	sp, #44	; 0x2c
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
	uint32_t begin_page_address;
	uint32_t offset_page_address;
	uint32_t pWriteFlash;
	__IO uint32_t* pReadFlash;

	if(address>=SYSTEM_FLASH_ADDRESS_BEGIN && address<SYSTEM_FLASH_ADDRESS_END && address%4==0)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039fe:	d362      	bcc.n	8003ac6 <FlashManager_WriteMulti+0xda>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a33      	ldr	r2, [pc, #204]	; (8003ad0 <FlashManager_WriteMulti+0xe4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d85e      	bhi.n	8003ac6 <FlashManager_WriteMulti+0xda>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d159      	bne.n	8003ac6 <FlashManager_WriteMulti+0xda>
	{
		offset_page_address=address%FLASH_PAGE_SIZE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a18:	623b      	str	r3, [r7, #32]
		begin_page_address=address-offset_page_address;
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	61fb      	str	r3, [r7, #28]

		//Read page
		for(cpt_address=0; cpt_address<(FLASH_PAGE_SIZE/4) ;cpt_address++)
 8003a22:	2300      	movs	r3, #0
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
 8003a26:	e00d      	b.n	8003a44 <FlashManager_WriteMulti+0x58>
		{
			pReadFlash = begin_page_address+(cpt_address*4);
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	009a      	lsls	r2, r3, #2
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	4413      	add	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]
			flash_temp_data[cpt_address]=*pReadFlash;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	4927      	ldr	r1, [pc, #156]	; (8003ad4 <FlashManager_WriteMulti+0xe8>)
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(cpt_address=0; cpt_address<(FLASH_PAGE_SIZE/4) ;cpt_address++)
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	3301      	adds	r3, #1
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	2bff      	cmp	r3, #255	; 0xff
 8003a48:	d9ee      	bls.n	8003a28 <FlashManager_WriteMulti+0x3c>
		}

		//Erase page
		HAL_FLASH_Unlock();
 8003a4a:	f7fd f8dd 	bl	8000c08 <HAL_FLASH_Unlock>
		FlashManager_ErasePage(address);
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f7ff ffa6 	bl	80039a0 <FlashManager_ErasePage>

		//Change Data
		for(cpt_address=0; cpt_address<NbWord ;cpt_address++)
 8003a54:	2300      	movs	r3, #0
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
 8003a58:	e00e      	b.n	8003a78 <FlashManager_WriteMulti+0x8c>
		{
			flash_temp_data[(offset_page_address/4)+cpt_address]=data[cpt_address];
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	441a      	add	r2, r3
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	0899      	lsrs	r1, r3, #2
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	440b      	add	r3, r1
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	4919      	ldr	r1, [pc, #100]	; (8003ad4 <FlashManager_WriteMulti+0xe8>)
 8003a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(cpt_address=0; cpt_address<NbWord ;cpt_address++)
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	3301      	adds	r3, #1
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
 8003a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d3ec      	bcc.n	8003a5a <FlashManager_WriteMulti+0x6e>
		}

		//Write page
		for(cpt_address=0; cpt_address<(FLASH_PAGE_SIZE/4) ;cpt_address++)
 8003a80:	2300      	movs	r3, #0
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
 8003a84:	e018      	b.n	8003ab8 <FlashManager_WriteMulti+0xcc>
		{
			pWriteFlash = begin_page_address+(cpt_address*4);
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	69fa      	ldr	r2, [r7, #28]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pWriteFlash, flash_temp_data[cpt_address]) != HAL_OK)
 8003a90:	4a10      	ldr	r2, [pc, #64]	; (8003ad4 <FlashManager_WriteMulti+0xe8>)
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a98:	f04f 0400 	mov.w	r4, #0
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4623      	mov	r3, r4
 8003aa0:	69b9      	ldr	r1, [r7, #24]
 8003aa2:	2002      	movs	r0, #2
 8003aa4:	f7fd f840 	bl	8000b28 <HAL_FLASH_Program>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <FlashManager_WriteMulti+0xc6>
				return FLASH_WRITE_ERROR;
 8003aae:	2304      	movs	r3, #4
 8003ab0:	e00a      	b.n	8003ac8 <FlashManager_WriteMulti+0xdc>
		for(cpt_address=0; cpt_address<(FLASH_PAGE_SIZE/4) ;cpt_address++)
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	2bff      	cmp	r3, #255	; 0xff
 8003abc:	d9e3      	bls.n	8003a86 <FlashManager_WriteMulti+0x9a>
		}

		HAL_FLASH_Lock();
 8003abe:	f7fd f8c9 	bl	8000c54 <HAL_FLASH_Lock>

		return FLASH_NO_ERROR;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e000      	b.n	8003ac8 <FlashManager_WriteMulti+0xdc>
	}
	else
		return FLASH_ERROR_ADDRESS;
 8003ac6:	2302      	movs	r3, #2
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	372c      	adds	r7, #44	; 0x2c
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd90      	pop	{r4, r7, pc}
 8003ad0:	0800ffff 	.word	0x0800ffff
 8003ad4:	20001240 	.word	0x20001240

08003ad8 <FlashManager_ReadInt32>:

uint32_t FlashManager_ReadInt32(uint32_t address)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
	__IO uint32_t* pReadFlash;

	pReadFlash = address;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	60fb      	str	r3, [r7, #12]
	return *pReadFlash;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr
	...

08003af4 <Protocol_DMX_init>:
/* Private function -----------------------------------------------*/

/* Public function -----------------------------------------------*/

void Protocol_DMX_init(uint16_t address,UART_HandleTypeDef *ref_uart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	6039      	str	r1, [r7, #0]
 8003afe:	80fb      	strh	r3, [r7, #6]
	uint8_t i;

	//init variables
	dmx_Last_Error=DMX_NO_ERROR;
 8003b00:	4b1f      	ldr	r3, [pc, #124]	; (8003b80 <Protocol_DMX_init+0x8c>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	701a      	strb	r2, [r3, #0]
	dmx_rx_buff[0]=0;
 8003b06:	4b1f      	ldr	r3, [pc, #124]	; (8003b84 <Protocol_DMX_init+0x90>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	701a      	strb	r2, [r3, #0]
	dmx_cptAddress=0;
 8003b0c:	4b1e      	ldr	r3, [pc, #120]	; (8003b88 <Protocol_DMX_init+0x94>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	801a      	strh	r2, [r3, #0]
	dmx_cptByte=0;
 8003b12:	4b1e      	ldr	r3, [pc, #120]	; (8003b8c <Protocol_DMX_init+0x98>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	801a      	strh	r2, [r3, #0]
	dmx_ref_buffer=1;
 8003b18:	4b1d      	ldr	r3, [pc, #116]	; (8003b90 <Protocol_DMX_init+0x9c>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	701a      	strb	r2, [r3, #0]
	dmx_address_begin = address;
 8003b1e:	88fb      	ldrh	r3, [r7, #6]
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	4b1c      	ldr	r3, [pc, #112]	; (8003b94 <Protocol_DMX_init+0xa0>)
 8003b24:	701a      	strb	r2, [r3, #0]
	dmx_address_end = address + DMX_SIZE_CHANNEL - 1;
 8003b26:	88fb      	ldrh	r3, [r7, #6]
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	4b1b      	ldr	r3, [pc, #108]	; (8003b98 <Protocol_DMX_init+0xa4>)
 8003b2c:	701a      	strb	r2, [r3, #0]
	for (i=0; i<DMX_SIZE_CHANNEL; i++)
 8003b2e:	2300      	movs	r3, #0
 8003b30:	73fb      	strb	r3, [r7, #15]
 8003b32:	e00e      	b.n	8003b52 <Protocol_DMX_init+0x5e>
	{
		dmx_buff1[i]=0;
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	4a19      	ldr	r2, [pc, #100]	; (8003b9c <Protocol_DMX_init+0xa8>)
 8003b38:	2100      	movs	r1, #0
 8003b3a:	54d1      	strb	r1, [r2, r3]
		dmx_buff2[i]=0;
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	4a18      	ldr	r2, [pc, #96]	; (8003ba0 <Protocol_DMX_init+0xac>)
 8003b40:	2100      	movs	r1, #0
 8003b42:	54d1      	strb	r1, [r2, r3]
		dmx_buff_valid[i]=0;
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	4a17      	ldr	r2, [pc, #92]	; (8003ba4 <Protocol_DMX_init+0xb0>)
 8003b48:	2100      	movs	r1, #0
 8003b4a:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<DMX_SIZE_CHANNEL; i++)
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	73fb      	strb	r3, [r7, #15]
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0ed      	beq.n	8003b34 <Protocol_DMX_init+0x40>
	}

	dmx_LastTick = HAL_GetTick();
 8003b58:	f7fc fe58 	bl	800080c <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <Protocol_DMX_init+0xb4>)
 8003b60:	601a      	str	r2, [r3, #0]

	/* Receive one byte in interrupt mode */
	dmx_ref_uart = ref_uart;
 8003b62:	4a12      	ldr	r2, [pc, #72]	; (8003bac <Protocol_DMX_init+0xb8>)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(dmx_ref_uart, dmx_rx_buff, 1);
 8003b68:	4b10      	ldr	r3, [pc, #64]	; (8003bac <Protocol_DMX_init+0xb8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	4905      	ldr	r1, [pc, #20]	; (8003b84 <Protocol_DMX_init+0x90>)
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff fb9a 	bl	80032aa <HAL_UART_Receive_IT>

}
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20001650 	.word	0x20001650
 8003b84:	20001654 	.word	0x20001654
 8003b88:	20001656 	.word	0x20001656
 8003b8c:	2000165e 	.word	0x2000165e
 8003b90:	20001655 	.word	0x20001655
 8003b94:	20001651 	.word	0x20001651
 8003b98:	20001644 	.word	0x20001644
 8003b9c:	20001658 	.word	0x20001658
 8003ba0:	2000165c 	.word	0x2000165c
 8003ba4:	20001648 	.word	0x20001648
 8003ba8:	20001640 	.word	0x20001640
 8003bac:	2000164c 	.word	0x2000164c

08003bb0 <Protocol_DMX_UartCallback>:


void Protocol_DMX_UartCallback(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
	uint32_t err_code;
	err_code = huart->ErrorCode;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbc:	60fb      	str	r3, [r7, #12]
	if (huart->Instance == dmx_ref_uart->Instance)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	4b29      	ldr	r3, [pc, #164]	; (8003c68 <Protocol_DMX_UartCallback+0xb8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d148      	bne.n	8003c5e <Protocol_DMX_UartCallback+0xae>
	{
		/* Receive one byte in interrupt mode */
		HAL_UART_Receive_IT(dmx_ref_uart, dmx_rx_buff, 1);
 8003bcc:	4b26      	ldr	r3, [pc, #152]	; (8003c68 <Protocol_DMX_UartCallback+0xb8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	4926      	ldr	r1, [pc, #152]	; (8003c6c <Protocol_DMX_UartCallback+0xbc>)
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff fb68 	bl	80032aa <HAL_UART_Receive_IT>

		//Load buffer
		if(dmx_cptAddress>=dmx_address_begin && dmx_cptAddress<=dmx_address_end)
 8003bda:	4b25      	ldr	r3, [pc, #148]	; (8003c70 <Protocol_DMX_UartCallback+0xc0>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <Protocol_DMX_UartCallback+0xc4>)
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d813      	bhi.n	8003c10 <Protocol_DMX_UartCallback+0x60>
 8003be8:	4b23      	ldr	r3, [pc, #140]	; (8003c78 <Protocol_DMX_UartCallback+0xc8>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	4b21      	ldr	r3, [pc, #132]	; (8003c74 <Protocol_DMX_UartCallback+0xc4>)
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d30c      	bcc.n	8003c10 <Protocol_DMX_UartCallback+0x60>
				dmx_Last_Error=DMX_ERROR_BUFF;

			if(dmx_buff1[dmx_cptByte] == dmx_buff2[dmx_cptByte])
				dmx_buff_valid[dmx_cptByte] = dmx_buff1[dmx_cptByte];
#else
			dmx_buff_valid[dmx_cptByte]=dmx_rx_buff[0];
 8003bf6:	4b21      	ldr	r3, [pc, #132]	; (8003c7c <Protocol_DMX_UartCallback+0xcc>)
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <Protocol_DMX_UartCallback+0xbc>)
 8003bfe:	7819      	ldrb	r1, [r3, #0]
 8003c00:	4b1f      	ldr	r3, [pc, #124]	; (8003c80 <Protocol_DMX_UartCallback+0xd0>)
 8003c02:	5499      	strb	r1, [r3, r2]
#endif

			dmx_cptByte++;
 8003c04:	4b1d      	ldr	r3, [pc, #116]	; (8003c7c <Protocol_DMX_UartCallback+0xcc>)
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	4b1b      	ldr	r3, [pc, #108]	; (8003c7c <Protocol_DMX_UartCallback+0xcc>)
 8003c0e:	801a      	strh	r2, [r3, #0]
		}
		dmx_cptAddress++;
 8003c10:	4b18      	ldr	r3, [pc, #96]	; (8003c74 <Protocol_DMX_UartCallback+0xc4>)
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	3301      	adds	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	4b16      	ldr	r3, [pc, #88]	; (8003c74 <Protocol_DMX_UartCallback+0xc4>)
 8003c1a:	801a      	strh	r2, [r3, #0]

		//New frame detection
		if(err_code==HAL_UART_ERROR_FE)// && rx_buff[0]==0)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d11d      	bne.n	8003c5e <Protocol_DMX_UartCallback+0xae>
		{
			dmx_LastTick = HAL_GetTick();
 8003c22:	f7fc fdf3 	bl	800080c <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	4b16      	ldr	r3, [pc, #88]	; (8003c84 <Protocol_DMX_UartCallback+0xd4>)
 8003c2a:	601a      	str	r2, [r3, #0]

			dmx_cptAddress=0;
 8003c2c:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <Protocol_DMX_UartCallback+0xc4>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	801a      	strh	r2, [r3, #0]
			dmx_cptByte=0;
 8003c32:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <Protocol_DMX_UartCallback+0xcc>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	801a      	strh	r2, [r3, #0]

			if (dmx_ref_buffer==1)
 8003c38:	4b13      	ldr	r3, [pc, #76]	; (8003c88 <Protocol_DMX_UartCallback+0xd8>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d103      	bne.n	8003c48 <Protocol_DMX_UartCallback+0x98>
				dmx_ref_buffer=2;
 8003c40:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <Protocol_DMX_UartCallback+0xd8>)
 8003c42:	2202      	movs	r2, #2
 8003c44:	701a      	strb	r2, [r3, #0]
				dmx_ref_buffer=1;
			else
				dmx_Last_Error=DMX_ERROR_BUFF;
		}
	}
}
 8003c46:	e00a      	b.n	8003c5e <Protocol_DMX_UartCallback+0xae>
			else if (dmx_ref_buffer==2)
 8003c48:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <Protocol_DMX_UartCallback+0xd8>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d103      	bne.n	8003c58 <Protocol_DMX_UartCallback+0xa8>
				dmx_ref_buffer=1;
 8003c50:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <Protocol_DMX_UartCallback+0xd8>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
}
 8003c56:	e002      	b.n	8003c5e <Protocol_DMX_UartCallback+0xae>
				dmx_Last_Error=DMX_ERROR_BUFF;
 8003c58:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <Protocol_DMX_UartCallback+0xdc>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	701a      	strb	r2, [r3, #0]
}
 8003c5e:	bf00      	nop
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	2000164c 	.word	0x2000164c
 8003c6c:	20001654 	.word	0x20001654
 8003c70:	20001651 	.word	0x20001651
 8003c74:	20001656 	.word	0x20001656
 8003c78:	20001644 	.word	0x20001644
 8003c7c:	2000165e 	.word	0x2000165e
 8003c80:	20001648 	.word	0x20001648
 8003c84:	20001640 	.word	0x20001640
 8003c88:	20001655 	.word	0x20001655
 8003c8c:	20001650 	.word	0x20001650

08003c90 <Protocol_DMX_GetValue>:


uint8_t Protocol_DMX_GetValue (uint8_t channel)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	71fb      	strb	r3, [r7, #7]
	if(channel==0 || channel>DMX_SIZE_CHANNEL)
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <Protocol_DMX_GetValue+0x16>
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d901      	bls.n	8003caa <Protocol_DMX_GetValue+0x1a>
		return 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	e003      	b.n	8003cb2 <Protocol_DMX_GetValue+0x22>
	else
		return dmx_buff_valid[channel-1];
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	3b01      	subs	r3, #1
 8003cae:	4a03      	ldr	r2, [pc, #12]	; (8003cbc <Protocol_DMX_GetValue+0x2c>)
 8003cb0:	5cd3      	ldrb	r3, [r2, r3]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr
 8003cbc:	20001648 	.word	0x20001648

08003cc0 <Protocol_DMX_GetLastTickFrame>:


uint32_t Protocol_DMX_GetLastTickFrame (void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
	return dmx_LastTick;
 8003cc4:	4b02      	ldr	r3, [pc, #8]	; (8003cd0 <Protocol_DMX_GetLastTickFrame+0x10>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr
 8003cd0:	20001640 	.word	0x20001640

08003cd4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ce6:	2b84      	cmp	r3, #132	; 0x84
 8003ce8:	d005      	beq.n	8003cf6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003cea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3303      	adds	r3, #3
 8003cf4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr

08003d02 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003d06:	f000 fa4b 	bl	80041a0 <vTaskStartScheduler>
  
  return osOK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685c      	ldr	r4, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d26:	b29e      	uxth	r6, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff ffd0 	bl	8003cd4 <makeFreeRtosPriority>
 8003d34:	4602      	mov	r2, r0
 8003d36:	f107 030c 	add.w	r3, r7, #12
 8003d3a:	9301      	str	r3, [sp, #4]
 8003d3c:	9200      	str	r2, [sp, #0]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	4632      	mov	r2, r6
 8003d42:	4629      	mov	r1, r5
 8003d44:	4620      	mov	r0, r4
 8003d46:	f000 f8cd 	bl	8003ee4 <xTaskCreate>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d001      	beq.n	8003d54 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003d50:	2300      	movs	r3, #0
 8003d52:	e000      	b.n	8003d56 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003d54:	68fb      	ldr	r3, [r7, #12]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d5e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <osDelay+0x16>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	e000      	b.n	8003d76 <osDelay+0x18>
 8003d74:	2301      	movs	r3, #1
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 f9de 	bl	8004138 <vTaskDelay>
  
  return osOK;
 8003d7c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f103 0208 	add.w	r2, r3, #8
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d9e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f103 0208 	add.w	r2, r3, #8
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f103 0208 	add.w	r2, r3, #8
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr

08003dc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr

08003ddc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	601a      	str	r2, [r3, #0]
}
 8003e18:	bf00      	nop
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr

08003e22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e22:	b480      	push	{r7}
 8003e24:	b085      	sub	sp, #20
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
 8003e2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e38:	d103      	bne.n	8003e42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	e00c      	b.n	8003e5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3308      	adds	r3, #8
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	e002      	b.n	8003e50 <vListInsert+0x2e>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d2f6      	bcs.n	8003e4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	601a      	str	r2, [r3, #0]
}
 8003e88:	bf00      	nop
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr

08003e92 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e92:	b480      	push	{r7}
 8003e94:	b085      	sub	sp, #20
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6892      	ldr	r2, [r2, #8]
 8003ea8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6852      	ldr	r2, [r2, #4]
 8003eb2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d103      	bne.n	8003ec6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	1e5a      	subs	r2, r3, #1
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr

08003ee4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08c      	sub	sp, #48	; 0x30
 8003ee8:	af04      	add	r7, sp, #16
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fe37 	bl	8004b6c <pvPortMalloc>
 8003efe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00e      	beq.n	8003f24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003f06:	2054      	movs	r0, #84	; 0x54
 8003f08:	f000 fe30 	bl	8004b6c <pvPortMalloc>
 8003f0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
 8003f1a:	e005      	b.n	8003f28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f1c:	6978      	ldr	r0, [r7, #20]
 8003f1e:	f000 fee7 	bl	8004cf0 <vPortFree>
 8003f22:	e001      	b.n	8003f28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d013      	beq.n	8003f56 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f2e:	88fa      	ldrh	r2, [r7, #6]
 8003f30:	2300      	movs	r3, #0
 8003f32:	9303      	str	r3, [sp, #12]
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	9302      	str	r3, [sp, #8]
 8003f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3a:	9301      	str	r3, [sp, #4]
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	68b9      	ldr	r1, [r7, #8]
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 f80e 	bl	8003f66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f4a:	69f8      	ldr	r0, [r7, #28]
 8003f4c:	f000 f88a 	bl	8004064 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f50:	2301      	movs	r3, #1
 8003f52:	61bb      	str	r3, [r7, #24]
 8003f54:	e002      	b.n	8003f5c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f56:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f5c:	69bb      	ldr	r3, [r7, #24]
	}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3720      	adds	r7, #32
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b088      	sub	sp, #32
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	607a      	str	r2, [r7, #4]
 8003f72:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	f023 0307 	bic.w	r3, r3, #7
 8003f8c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d009      	beq.n	8003fac <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	e7fe      	b.n	8003faa <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fac:	2300      	movs	r3, #0
 8003fae:	61fb      	str	r3, [r7, #28]
 8003fb0:	e012      	b.n	8003fd8 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	7819      	ldrb	r1, [r3, #0]
 8003fba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3334      	adds	r3, #52	; 0x34
 8003fc2:	460a      	mov	r2, r1
 8003fc4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	4413      	add	r3, r2
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d006      	beq.n	8003fe0 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	61fb      	str	r3, [r7, #28]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	2b0f      	cmp	r3, #15
 8003fdc:	d9e9      	bls.n	8003fb2 <prvInitialiseNewTask+0x4c>
 8003fde:	e000      	b.n	8003fe2 <prvInitialiseNewTask+0x7c>
		{
			break;
 8003fe0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fec:	2b06      	cmp	r3, #6
 8003fee:	d901      	bls.n	8003ff4 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ff0:	2306      	movs	r3, #6
 8003ff2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ff8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ffe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004002:	2200      	movs	r2, #0
 8004004:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	3304      	adds	r3, #4
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff feda 	bl	8003dc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004012:	3318      	adds	r3, #24
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff fed5 	bl	8003dc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800401a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800401e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004022:	f1c3 0207 	rsb	r2, r3, #7
 8004026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004028:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800402e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004032:	2200      	movs	r2, #0
 8004034:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	68f9      	ldr	r1, [r7, #12]
 8004042:	69b8      	ldr	r0, [r7, #24]
 8004044:	f000 fbee 	bl	8004824 <pxPortInitialiseStack>
 8004048:	4602      	mov	r2, r0
 800404a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800404e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004058:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800405a:	bf00      	nop
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800406c:	f000 fcc4 	bl	80049f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004070:	4b2a      	ldr	r3, [pc, #168]	; (800411c <prvAddNewTaskToReadyList+0xb8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3301      	adds	r3, #1
 8004076:	4a29      	ldr	r2, [pc, #164]	; (800411c <prvAddNewTaskToReadyList+0xb8>)
 8004078:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800407a:	4b29      	ldr	r3, [pc, #164]	; (8004120 <prvAddNewTaskToReadyList+0xbc>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d109      	bne.n	8004096 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004082:	4a27      	ldr	r2, [pc, #156]	; (8004120 <prvAddNewTaskToReadyList+0xbc>)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004088:	4b24      	ldr	r3, [pc, #144]	; (800411c <prvAddNewTaskToReadyList+0xb8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d110      	bne.n	80040b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004090:	f000 faa4 	bl	80045dc <prvInitialiseTaskLists>
 8004094:	e00d      	b.n	80040b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004096:	4b23      	ldr	r3, [pc, #140]	; (8004124 <prvAddNewTaskToReadyList+0xc0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d109      	bne.n	80040b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800409e:	4b20      	ldr	r3, [pc, #128]	; (8004120 <prvAddNewTaskToReadyList+0xbc>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d802      	bhi.n	80040b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040ac:	4a1c      	ldr	r2, [pc, #112]	; (8004120 <prvAddNewTaskToReadyList+0xbc>)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040b2:	4b1d      	ldr	r3, [pc, #116]	; (8004128 <prvAddNewTaskToReadyList+0xc4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3301      	adds	r3, #1
 80040b8:	4a1b      	ldr	r2, [pc, #108]	; (8004128 <prvAddNewTaskToReadyList+0xc4>)
 80040ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	2201      	movs	r2, #1
 80040c2:	409a      	lsls	r2, r3
 80040c4:	4b19      	ldr	r3, [pc, #100]	; (800412c <prvAddNewTaskToReadyList+0xc8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	4a18      	ldr	r2, [pc, #96]	; (800412c <prvAddNewTaskToReadyList+0xc8>)
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d2:	4613      	mov	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4a15      	ldr	r2, [pc, #84]	; (8004130 <prvAddNewTaskToReadyList+0xcc>)
 80040dc:	441a      	add	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3304      	adds	r3, #4
 80040e2:	4619      	mov	r1, r3
 80040e4:	4610      	mov	r0, r2
 80040e6:	f7ff fe79 	bl	8003ddc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040ea:	f000 fcb3 	bl	8004a54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040ee:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <prvAddNewTaskToReadyList+0xc0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00e      	beq.n	8004114 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040f6:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <prvAddNewTaskToReadyList+0xbc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	429a      	cmp	r2, r3
 8004102:	d207      	bcs.n	8004114 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <prvAddNewTaskToReadyList+0xd0>)
 8004106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004114:	bf00      	nop
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	200005b4 	.word	0x200005b4
 8004120:	200004b4 	.word	0x200004b4
 8004124:	200005c0 	.word	0x200005c0
 8004128:	200005d0 	.word	0x200005d0
 800412c:	200005bc 	.word	0x200005bc
 8004130:	200004b8 	.word	0x200004b8
 8004134:	e000ed04 	.word	0xe000ed04

08004138 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004140:	2300      	movs	r3, #0
 8004142:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d016      	beq.n	8004178 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800414a:	4b13      	ldr	r3, [pc, #76]	; (8004198 <vTaskDelay+0x60>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d009      	beq.n	8004166 <vTaskDelay+0x2e>
 8004152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	60bb      	str	r3, [r7, #8]
 8004164:	e7fe      	b.n	8004164 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004166:	f000 f861 	bl	800422c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800416a:	2100      	movs	r1, #0
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 faf3 	bl	8004758 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004172:	f000 f869 	bl	8004248 <xTaskResumeAll>
 8004176:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d107      	bne.n	800418e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800417e:	4b07      	ldr	r3, [pc, #28]	; (800419c <vTaskDelay+0x64>)
 8004180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800418e:	bf00      	nop
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	200005dc 	.word	0x200005dc
 800419c:	e000ed04 	.word	0xe000ed04

080041a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80041a6:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <vTaskStartScheduler+0x74>)
 80041a8:	9301      	str	r3, [sp, #4]
 80041aa:	2300      	movs	r3, #0
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	2300      	movs	r3, #0
 80041b0:	2280      	movs	r2, #128	; 0x80
 80041b2:	4919      	ldr	r1, [pc, #100]	; (8004218 <vTaskStartScheduler+0x78>)
 80041b4:	4819      	ldr	r0, [pc, #100]	; (800421c <vTaskStartScheduler+0x7c>)
 80041b6:	f7ff fe95 	bl	8003ee4 <xTaskCreate>
 80041ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d115      	bne.n	80041ee <vTaskStartScheduler+0x4e>
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041d4:	4b12      	ldr	r3, [pc, #72]	; (8004220 <vTaskStartScheduler+0x80>)
 80041d6:	f04f 32ff 	mov.w	r2, #4294967295
 80041da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041dc:	4b11      	ldr	r3, [pc, #68]	; (8004224 <vTaskStartScheduler+0x84>)
 80041de:	2201      	movs	r2, #1
 80041e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80041e2:	4b11      	ldr	r3, [pc, #68]	; (8004228 <vTaskStartScheduler+0x88>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041e8:	f000 fb96 	bl	8004918 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041ec:	e00d      	b.n	800420a <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f4:	d109      	bne.n	800420a <vTaskStartScheduler+0x6a>
 80041f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	607b      	str	r3, [r7, #4]
 8004208:	e7fe      	b.n	8004208 <vTaskStartScheduler+0x68>
}
 800420a:	bf00      	nop
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	200005d8 	.word	0x200005d8
 8004218:	08006958 	.word	0x08006958
 800421c:	080045ad 	.word	0x080045ad
 8004220:	200005d4 	.word	0x200005d4
 8004224:	200005c0 	.word	0x200005c0
 8004228:	200005b8 	.word	0x200005b8

0800422c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004230:	4b04      	ldr	r3, [pc, #16]	; (8004244 <vTaskSuspendAll+0x18>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3301      	adds	r3, #1
 8004236:	4a03      	ldr	r2, [pc, #12]	; (8004244 <vTaskSuspendAll+0x18>)
 8004238:	6013      	str	r3, [r2, #0]
}
 800423a:	bf00      	nop
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	200005dc 	.word	0x200005dc

08004248 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004252:	2300      	movs	r3, #0
 8004254:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004256:	4b41      	ldr	r3, [pc, #260]	; (800435c <xTaskResumeAll+0x114>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <xTaskResumeAll+0x2a>
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	e7fe      	b.n	8004270 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004272:	f000 fbc1 	bl	80049f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004276:	4b39      	ldr	r3, [pc, #228]	; (800435c <xTaskResumeAll+0x114>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3b01      	subs	r3, #1
 800427c:	4a37      	ldr	r2, [pc, #220]	; (800435c <xTaskResumeAll+0x114>)
 800427e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004280:	4b36      	ldr	r3, [pc, #216]	; (800435c <xTaskResumeAll+0x114>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d161      	bne.n	800434c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004288:	4b35      	ldr	r3, [pc, #212]	; (8004360 <xTaskResumeAll+0x118>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d05d      	beq.n	800434c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004290:	e02e      	b.n	80042f0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004292:	4b34      	ldr	r3, [pc, #208]	; (8004364 <xTaskResumeAll+0x11c>)
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3318      	adds	r3, #24
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff fdf7 	bl	8003e92 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	3304      	adds	r3, #4
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fdf2 	bl	8003e92 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b2:	2201      	movs	r2, #1
 80042b4:	409a      	lsls	r2, r3
 80042b6:	4b2c      	ldr	r3, [pc, #176]	; (8004368 <xTaskResumeAll+0x120>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	4a2a      	ldr	r2, [pc, #168]	; (8004368 <xTaskResumeAll+0x120>)
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4a27      	ldr	r2, [pc, #156]	; (800436c <xTaskResumeAll+0x124>)
 80042ce:	441a      	add	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3304      	adds	r3, #4
 80042d4:	4619      	mov	r1, r3
 80042d6:	4610      	mov	r0, r2
 80042d8:	f7ff fd80 	bl	8003ddc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e0:	4b23      	ldr	r3, [pc, #140]	; (8004370 <xTaskResumeAll+0x128>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d302      	bcc.n	80042f0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80042ea:	4b22      	ldr	r3, [pc, #136]	; (8004374 <xTaskResumeAll+0x12c>)
 80042ec:	2201      	movs	r2, #1
 80042ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042f0:	4b1c      	ldr	r3, [pc, #112]	; (8004364 <xTaskResumeAll+0x11c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1cc      	bne.n	8004292 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80042fe:	f000 f9e9 	bl	80046d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004302:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <xTaskResumeAll+0x130>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d010      	beq.n	8004330 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800430e:	f000 f837 	bl	8004380 <xTaskIncrementTick>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004318:	4b16      	ldr	r3, [pc, #88]	; (8004374 <xTaskResumeAll+0x12c>)
 800431a:	2201      	movs	r2, #1
 800431c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3b01      	subs	r3, #1
 8004322:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f1      	bne.n	800430e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800432a:	4b13      	ldr	r3, [pc, #76]	; (8004378 <xTaskResumeAll+0x130>)
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004330:	4b10      	ldr	r3, [pc, #64]	; (8004374 <xTaskResumeAll+0x12c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d009      	beq.n	800434c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004338:	2301      	movs	r3, #1
 800433a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800433c:	4b0f      	ldr	r3, [pc, #60]	; (800437c <xTaskResumeAll+0x134>)
 800433e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800434c:	f000 fb82 	bl	8004a54 <vPortExitCritical>

	return xAlreadyYielded;
 8004350:	68bb      	ldr	r3, [r7, #8]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	200005dc 	.word	0x200005dc
 8004360:	200005b4 	.word	0x200005b4
 8004364:	20000574 	.word	0x20000574
 8004368:	200005bc 	.word	0x200005bc
 800436c:	200004b8 	.word	0x200004b8
 8004370:	200004b4 	.word	0x200004b4
 8004374:	200005c8 	.word	0x200005c8
 8004378:	200005c4 	.word	0x200005c4
 800437c:	e000ed04 	.word	0xe000ed04

08004380 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800438a:	4b50      	ldr	r3, [pc, #320]	; (80044cc <xTaskIncrementTick+0x14c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	f040 808c 	bne.w	80044ac <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004394:	4b4e      	ldr	r3, [pc, #312]	; (80044d0 <xTaskIncrementTick+0x150>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800439c:	4a4c      	ldr	r2, [pc, #304]	; (80044d0 <xTaskIncrementTick+0x150>)
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d11f      	bne.n	80043e8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80043a8:	4b4a      	ldr	r3, [pc, #296]	; (80044d4 <xTaskIncrementTick+0x154>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d009      	beq.n	80043c6 <xTaskIncrementTick+0x46>
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	e7fe      	b.n	80043c4 <xTaskIncrementTick+0x44>
 80043c6:	4b43      	ldr	r3, [pc, #268]	; (80044d4 <xTaskIncrementTick+0x154>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	4b42      	ldr	r3, [pc, #264]	; (80044d8 <xTaskIncrementTick+0x158>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a40      	ldr	r2, [pc, #256]	; (80044d4 <xTaskIncrementTick+0x154>)
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	4a40      	ldr	r2, [pc, #256]	; (80044d8 <xTaskIncrementTick+0x158>)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	4b40      	ldr	r3, [pc, #256]	; (80044dc <xTaskIncrementTick+0x15c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3301      	adds	r3, #1
 80043e0:	4a3e      	ldr	r2, [pc, #248]	; (80044dc <xTaskIncrementTick+0x15c>)
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	f000 f976 	bl	80046d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043e8:	4b3d      	ldr	r3, [pc, #244]	; (80044e0 <xTaskIncrementTick+0x160>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d34d      	bcc.n	800448e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043f2:	4b38      	ldr	r3, [pc, #224]	; (80044d4 <xTaskIncrementTick+0x154>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <xTaskIncrementTick+0x80>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <xTaskIncrementTick+0x82>
 8004400:	2300      	movs	r3, #0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d004      	beq.n	8004410 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004406:	4b36      	ldr	r3, [pc, #216]	; (80044e0 <xTaskIncrementTick+0x160>)
 8004408:	f04f 32ff 	mov.w	r2, #4294967295
 800440c:	601a      	str	r2, [r3, #0]
					break;
 800440e:	e03e      	b.n	800448e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004410:	4b30      	ldr	r3, [pc, #192]	; (80044d4 <xTaskIncrementTick+0x154>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	429a      	cmp	r2, r3
 8004426:	d203      	bcs.n	8004430 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004428:	4a2d      	ldr	r2, [pc, #180]	; (80044e0 <xTaskIncrementTick+0x160>)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6013      	str	r3, [r2, #0]
						break;
 800442e:	e02e      	b.n	800448e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	3304      	adds	r3, #4
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff fd2c 	bl	8003e92 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443e:	2b00      	cmp	r3, #0
 8004440:	d004      	beq.n	800444c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	3318      	adds	r3, #24
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff fd23 	bl	8003e92 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	2201      	movs	r2, #1
 8004452:	409a      	lsls	r2, r3
 8004454:	4b23      	ldr	r3, [pc, #140]	; (80044e4 <xTaskIncrementTick+0x164>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4313      	orrs	r3, r2
 800445a:	4a22      	ldr	r2, [pc, #136]	; (80044e4 <xTaskIncrementTick+0x164>)
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004462:	4613      	mov	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4a1f      	ldr	r2, [pc, #124]	; (80044e8 <xTaskIncrementTick+0x168>)
 800446c:	441a      	add	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	3304      	adds	r3, #4
 8004472:	4619      	mov	r1, r3
 8004474:	4610      	mov	r0, r2
 8004476:	f7ff fcb1 	bl	8003ddc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447e:	4b1b      	ldr	r3, [pc, #108]	; (80044ec <xTaskIncrementTick+0x16c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	429a      	cmp	r2, r3
 8004486:	d3b4      	bcc.n	80043f2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004488:	2301      	movs	r3, #1
 800448a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800448c:	e7b1      	b.n	80043f2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800448e:	4b17      	ldr	r3, [pc, #92]	; (80044ec <xTaskIncrementTick+0x16c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004494:	4914      	ldr	r1, [pc, #80]	; (80044e8 <xTaskIncrementTick+0x168>)
 8004496:	4613      	mov	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	440b      	add	r3, r1
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d907      	bls.n	80044b6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80044a6:	2301      	movs	r3, #1
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	e004      	b.n	80044b6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80044ac:	4b10      	ldr	r3, [pc, #64]	; (80044f0 <xTaskIncrementTick+0x170>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3301      	adds	r3, #1
 80044b2:	4a0f      	ldr	r2, [pc, #60]	; (80044f0 <xTaskIncrementTick+0x170>)
 80044b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80044b6:	4b0f      	ldr	r3, [pc, #60]	; (80044f4 <xTaskIncrementTick+0x174>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80044be:	2301      	movs	r3, #1
 80044c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80044c2:	697b      	ldr	r3, [r7, #20]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	200005dc 	.word	0x200005dc
 80044d0:	200005b8 	.word	0x200005b8
 80044d4:	2000056c 	.word	0x2000056c
 80044d8:	20000570 	.word	0x20000570
 80044dc:	200005cc 	.word	0x200005cc
 80044e0:	200005d4 	.word	0x200005d4
 80044e4:	200005bc 	.word	0x200005bc
 80044e8:	200004b8 	.word	0x200004b8
 80044ec:	200004b4 	.word	0x200004b4
 80044f0:	200005c4 	.word	0x200005c4
 80044f4:	200005c8 	.word	0x200005c8

080044f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044fe:	4b26      	ldr	r3, [pc, #152]	; (8004598 <vTaskSwitchContext+0xa0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004506:	4b25      	ldr	r3, [pc, #148]	; (800459c <vTaskSwitchContext+0xa4>)
 8004508:	2201      	movs	r2, #1
 800450a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800450c:	e03e      	b.n	800458c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800450e:	4b23      	ldr	r3, [pc, #140]	; (800459c <vTaskSwitchContext+0xa4>)
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004514:	4b22      	ldr	r3, [pc, #136]	; (80045a0 <vTaskSwitchContext+0xa8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	fab3 f383 	clz	r3, r3
 8004520:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004522:	7afb      	ldrb	r3, [r7, #11]
 8004524:	f1c3 031f 	rsb	r3, r3, #31
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	491e      	ldr	r1, [pc, #120]	; (80045a4 <vTaskSwitchContext+0xac>)
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4613      	mov	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <vTaskSwitchContext+0x5a>
	__asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	607b      	str	r3, [r7, #4]
 8004550:	e7fe      	b.n	8004550 <vTaskSwitchContext+0x58>
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	4613      	mov	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4a11      	ldr	r2, [pc, #68]	; (80045a4 <vTaskSwitchContext+0xac>)
 800455e:	4413      	add	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	605a      	str	r2, [r3, #4]
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	3308      	adds	r3, #8
 8004574:	429a      	cmp	r2, r3
 8004576:	d104      	bne.n	8004582 <vTaskSwitchContext+0x8a>
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	605a      	str	r2, [r3, #4]
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	4a07      	ldr	r2, [pc, #28]	; (80045a8 <vTaskSwitchContext+0xb0>)
 800458a:	6013      	str	r3, [r2, #0]
}
 800458c:	bf00      	nop
 800458e:	371c      	adds	r7, #28
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	200005dc 	.word	0x200005dc
 800459c:	200005c8 	.word	0x200005c8
 80045a0:	200005bc 	.word	0x200005bc
 80045a4:	200004b8 	.word	0x200004b8
 80045a8:	200004b4 	.word	0x200004b4

080045ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80045b4:	f000 f852 	bl	800465c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045b8:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <prvIdleTask+0x28>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d9f9      	bls.n	80045b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80045c0:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <prvIdleTask+0x2c>)
 80045c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045d0:	e7f0      	b.n	80045b4 <prvIdleTask+0x8>
 80045d2:	bf00      	nop
 80045d4:	200004b8 	.word	0x200004b8
 80045d8:	e000ed04 	.word	0xe000ed04

080045dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045e2:	2300      	movs	r3, #0
 80045e4:	607b      	str	r3, [r7, #4]
 80045e6:	e00c      	b.n	8004602 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4a12      	ldr	r2, [pc, #72]	; (800463c <prvInitialiseTaskLists+0x60>)
 80045f4:	4413      	add	r3, r2
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff fbc5 	bl	8003d86 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3301      	adds	r3, #1
 8004600:	607b      	str	r3, [r7, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b06      	cmp	r3, #6
 8004606:	d9ef      	bls.n	80045e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004608:	480d      	ldr	r0, [pc, #52]	; (8004640 <prvInitialiseTaskLists+0x64>)
 800460a:	f7ff fbbc 	bl	8003d86 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800460e:	480d      	ldr	r0, [pc, #52]	; (8004644 <prvInitialiseTaskLists+0x68>)
 8004610:	f7ff fbb9 	bl	8003d86 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004614:	480c      	ldr	r0, [pc, #48]	; (8004648 <prvInitialiseTaskLists+0x6c>)
 8004616:	f7ff fbb6 	bl	8003d86 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800461a:	480c      	ldr	r0, [pc, #48]	; (800464c <prvInitialiseTaskLists+0x70>)
 800461c:	f7ff fbb3 	bl	8003d86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004620:	480b      	ldr	r0, [pc, #44]	; (8004650 <prvInitialiseTaskLists+0x74>)
 8004622:	f7ff fbb0 	bl	8003d86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004626:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <prvInitialiseTaskLists+0x78>)
 8004628:	4a05      	ldr	r2, [pc, #20]	; (8004640 <prvInitialiseTaskLists+0x64>)
 800462a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800462c:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <prvInitialiseTaskLists+0x7c>)
 800462e:	4a05      	ldr	r2, [pc, #20]	; (8004644 <prvInitialiseTaskLists+0x68>)
 8004630:	601a      	str	r2, [r3, #0]
}
 8004632:	bf00      	nop
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	200004b8 	.word	0x200004b8
 8004640:	20000544 	.word	0x20000544
 8004644:	20000558 	.word	0x20000558
 8004648:	20000574 	.word	0x20000574
 800464c:	20000588 	.word	0x20000588
 8004650:	200005a0 	.word	0x200005a0
 8004654:	2000056c 	.word	0x2000056c
 8004658:	20000570 	.word	0x20000570

0800465c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004662:	e019      	b.n	8004698 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004664:	f000 f9c8 	bl	80049f8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004668:	4b0f      	ldr	r3, [pc, #60]	; (80046a8 <prvCheckTasksWaitingTermination+0x4c>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3304      	adds	r3, #4
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff fc0c 	bl	8003e92 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800467a:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <prvCheckTasksWaitingTermination+0x50>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3b01      	subs	r3, #1
 8004680:	4a0a      	ldr	r2, [pc, #40]	; (80046ac <prvCheckTasksWaitingTermination+0x50>)
 8004682:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004684:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <prvCheckTasksWaitingTermination+0x54>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3b01      	subs	r3, #1
 800468a:	4a09      	ldr	r2, [pc, #36]	; (80046b0 <prvCheckTasksWaitingTermination+0x54>)
 800468c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800468e:	f000 f9e1 	bl	8004a54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f80e 	bl	80046b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004698:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <prvCheckTasksWaitingTermination+0x54>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e1      	bne.n	8004664 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	20000588 	.word	0x20000588
 80046ac:	200005b4 	.word	0x200005b4
 80046b0:	2000059c 	.word	0x2000059c

080046b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 fb15 	bl	8004cf0 <vPortFree>
			vPortFree( pxTCB );
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fb12 	bl	8004cf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80046cc:	bf00      	nop
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046da:	4b0e      	ldr	r3, [pc, #56]	; (8004714 <prvResetNextTaskUnblockTime+0x40>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <prvResetNextTaskUnblockTime+0x14>
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <prvResetNextTaskUnblockTime+0x16>
 80046e8:	2300      	movs	r3, #0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d004      	beq.n	80046f8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046ee:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <prvResetNextTaskUnblockTime+0x44>)
 80046f0:	f04f 32ff 	mov.w	r2, #4294967295
 80046f4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046f6:	e008      	b.n	800470a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046f8:	4b06      	ldr	r3, [pc, #24]	; (8004714 <prvResetNextTaskUnblockTime+0x40>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	4a04      	ldr	r2, [pc, #16]	; (8004718 <prvResetNextTaskUnblockTime+0x44>)
 8004708:	6013      	str	r3, [r2, #0]
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	bc80      	pop	{r7}
 8004712:	4770      	bx	lr
 8004714:	2000056c 	.word	0x2000056c
 8004718:	200005d4 	.word	0x200005d4

0800471c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004722:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <xTaskGetSchedulerState+0x34>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d102      	bne.n	8004730 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800472a:	2301      	movs	r3, #1
 800472c:	607b      	str	r3, [r7, #4]
 800472e:	e008      	b.n	8004742 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004730:	4b08      	ldr	r3, [pc, #32]	; (8004754 <xTaskGetSchedulerState+0x38>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d102      	bne.n	800473e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004738:	2302      	movs	r3, #2
 800473a:	607b      	str	r3, [r7, #4]
 800473c:	e001      	b.n	8004742 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800473e:	2300      	movs	r3, #0
 8004740:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004742:	687b      	ldr	r3, [r7, #4]
	}
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	200005c0 	.word	0x200005c0
 8004754:	200005dc 	.word	0x200005dc

08004758 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004762:	4b29      	ldr	r3, [pc, #164]	; (8004808 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004768:	4b28      	ldr	r3, [pc, #160]	; (800480c <prvAddCurrentTaskToDelayedList+0xb4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3304      	adds	r3, #4
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff fb8f 	bl	8003e92 <uxListRemove>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10b      	bne.n	8004792 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800477a:	4b24      	ldr	r3, [pc, #144]	; (800480c <prvAddCurrentTaskToDelayedList+0xb4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	2201      	movs	r2, #1
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	43da      	mvns	r2, r3
 8004788:	4b21      	ldr	r3, [pc, #132]	; (8004810 <prvAddCurrentTaskToDelayedList+0xb8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4013      	ands	r3, r2
 800478e:	4a20      	ldr	r2, [pc, #128]	; (8004810 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004790:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004798:	d10a      	bne.n	80047b0 <prvAddCurrentTaskToDelayedList+0x58>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d007      	beq.n	80047b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047a0:	4b1a      	ldr	r3, [pc, #104]	; (800480c <prvAddCurrentTaskToDelayedList+0xb4>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3304      	adds	r3, #4
 80047a6:	4619      	mov	r1, r3
 80047a8:	481a      	ldr	r0, [pc, #104]	; (8004814 <prvAddCurrentTaskToDelayedList+0xbc>)
 80047aa:	f7ff fb17 	bl	8003ddc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047ae:	e026      	b.n	80047fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4413      	add	r3, r2
 80047b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047b8:	4b14      	ldr	r3, [pc, #80]	; (800480c <prvAddCurrentTaskToDelayedList+0xb4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d209      	bcs.n	80047dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047c8:	4b13      	ldr	r3, [pc, #76]	; (8004818 <prvAddCurrentTaskToDelayedList+0xc0>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	4b0f      	ldr	r3, [pc, #60]	; (800480c <prvAddCurrentTaskToDelayedList+0xb4>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3304      	adds	r3, #4
 80047d2:	4619      	mov	r1, r3
 80047d4:	4610      	mov	r0, r2
 80047d6:	f7ff fb24 	bl	8003e22 <vListInsert>
}
 80047da:	e010      	b.n	80047fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047dc:	4b0f      	ldr	r3, [pc, #60]	; (800481c <prvAddCurrentTaskToDelayedList+0xc4>)
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	4b0a      	ldr	r3, [pc, #40]	; (800480c <prvAddCurrentTaskToDelayedList+0xb4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3304      	adds	r3, #4
 80047e6:	4619      	mov	r1, r3
 80047e8:	4610      	mov	r0, r2
 80047ea:	f7ff fb1a 	bl	8003e22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047ee:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d202      	bcs.n	80047fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80047f8:	4a09      	ldr	r2, [pc, #36]	; (8004820 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	6013      	str	r3, [r2, #0]
}
 80047fe:	bf00      	nop
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	200005b8 	.word	0x200005b8
 800480c:	200004b4 	.word	0x200004b4
 8004810:	200005bc 	.word	0x200005bc
 8004814:	200005a0 	.word	0x200005a0
 8004818:	20000570 	.word	0x20000570
 800481c:	2000056c 	.word	0x2000056c
 8004820:	200005d4 	.word	0x200005d4

08004824 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	3b04      	subs	r3, #4
 8004834:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800483c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	3b04      	subs	r3, #4
 8004842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f023 0201 	bic.w	r2, r3, #1
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3b04      	subs	r3, #4
 8004852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004854:	4a08      	ldr	r2, [pc, #32]	; (8004878 <pxPortInitialiseStack+0x54>)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3b14      	subs	r3, #20
 800485e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3b20      	subs	r3, #32
 800486a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800486c:	68fb      	ldr	r3, [r7, #12]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr
 8004878:	0800487d 	.word	0x0800487d

0800487c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004882:	2300      	movs	r3, #0
 8004884:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004886:	4b10      	ldr	r3, [pc, #64]	; (80048c8 <prvTaskExitError+0x4c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488e:	d009      	beq.n	80048a4 <prvTaskExitError+0x28>
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	e7fe      	b.n	80048a2 <prvTaskExitError+0x26>
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048b6:	bf00      	nop
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0fc      	beq.n	80048b8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048be:	bf00      	nop
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr
 80048c8:	20000020 	.word	0x20000020
 80048cc:	00000000 	.word	0x00000000

080048d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80048d0:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <pxCurrentTCBConst2>)
 80048d2:	6819      	ldr	r1, [r3, #0]
 80048d4:	6808      	ldr	r0, [r1, #0]
 80048d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048da:	f380 8809 	msr	PSP, r0
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f04f 0000 	mov.w	r0, #0
 80048e6:	f380 8811 	msr	BASEPRI, r0
 80048ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80048ee:	4770      	bx	lr

080048f0 <pxCurrentTCBConst2>:
 80048f0:	200004b4 	.word	0x200004b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop

080048f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80048f8:	4806      	ldr	r0, [pc, #24]	; (8004914 <prvPortStartFirstTask+0x1c>)
 80048fa:	6800      	ldr	r0, [r0, #0]
 80048fc:	6800      	ldr	r0, [r0, #0]
 80048fe:	f380 8808 	msr	MSP, r0
 8004902:	b662      	cpsie	i
 8004904:	b661      	cpsie	f
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	df00      	svc	0
 8004910:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004912:	bf00      	nop
 8004914:	e000ed08 	.word	0xe000ed08

08004918 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800491e:	4b31      	ldr	r3, [pc, #196]	; (80049e4 <xPortStartScheduler+0xcc>)
 8004920:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	22ff      	movs	r2, #255	; 0xff
 800492e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004940:	b2da      	uxtb	r2, r3
 8004942:	4b29      	ldr	r3, [pc, #164]	; (80049e8 <xPortStartScheduler+0xd0>)
 8004944:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004946:	4b29      	ldr	r3, [pc, #164]	; (80049ec <xPortStartScheduler+0xd4>)
 8004948:	2207      	movs	r2, #7
 800494a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800494c:	e009      	b.n	8004962 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800494e:	4b27      	ldr	r3, [pc, #156]	; (80049ec <xPortStartScheduler+0xd4>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3b01      	subs	r3, #1
 8004954:	4a25      	ldr	r2, [pc, #148]	; (80049ec <xPortStartScheduler+0xd4>)
 8004956:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	b2db      	uxtb	r3, r3
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	b2db      	uxtb	r3, r3
 8004960:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496a:	2b80      	cmp	r3, #128	; 0x80
 800496c:	d0ef      	beq.n	800494e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800496e:	4b1f      	ldr	r3, [pc, #124]	; (80049ec <xPortStartScheduler+0xd4>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f1c3 0307 	rsb	r3, r3, #7
 8004976:	2b04      	cmp	r3, #4
 8004978:	d009      	beq.n	800498e <xPortStartScheduler+0x76>
 800497a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	60bb      	str	r3, [r7, #8]
 800498c:	e7fe      	b.n	800498c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800498e:	4b17      	ldr	r3, [pc, #92]	; (80049ec <xPortStartScheduler+0xd4>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	4a15      	ldr	r2, [pc, #84]	; (80049ec <xPortStartScheduler+0xd4>)
 8004996:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004998:	4b14      	ldr	r3, [pc, #80]	; (80049ec <xPortStartScheduler+0xd4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049a0:	4a12      	ldr	r2, [pc, #72]	; (80049ec <xPortStartScheduler+0xd4>)
 80049a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049ac:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <xPortStartScheduler+0xd8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a0f      	ldr	r2, [pc, #60]	; (80049f0 <xPortStartScheduler+0xd8>)
 80049b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049b8:	4b0d      	ldr	r3, [pc, #52]	; (80049f0 <xPortStartScheduler+0xd8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a0c      	ldr	r2, [pc, #48]	; (80049f0 <xPortStartScheduler+0xd8>)
 80049be:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80049c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80049c4:	f000 f8b0 	bl	8004b28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049c8:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <xPortStartScheduler+0xdc>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049ce:	f7ff ff93 	bl	80048f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80049d2:	f7ff fd91 	bl	80044f8 <vTaskSwitchContext>
	prvTaskExitError();
 80049d6:	f7ff ff51 	bl	800487c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	e000e400 	.word	0xe000e400
 80049e8:	200005e0 	.word	0x200005e0
 80049ec:	200005e4 	.word	0x200005e4
 80049f0:	e000ed20 	.word	0xe000ed20
 80049f4:	20000020 	.word	0x20000020

080049f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a10:	4b0e      	ldr	r3, [pc, #56]	; (8004a4c <vPortEnterCritical+0x54>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3301      	adds	r3, #1
 8004a16:	4a0d      	ldr	r2, [pc, #52]	; (8004a4c <vPortEnterCritical+0x54>)
 8004a18:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a1a:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <vPortEnterCritical+0x54>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d10e      	bne.n	8004a40 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a22:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <vPortEnterCritical+0x58>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d009      	beq.n	8004a40 <vPortEnterCritical+0x48>
 8004a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	603b      	str	r3, [r7, #0]
 8004a3e:	e7fe      	b.n	8004a3e <vPortEnterCritical+0x46>
	}
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	20000020 	.word	0x20000020
 8004a50:	e000ed04 	.word	0xe000ed04

08004a54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a5a:	4b10      	ldr	r3, [pc, #64]	; (8004a9c <vPortExitCritical+0x48>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <vPortExitCritical+0x22>
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	607b      	str	r3, [r7, #4]
 8004a74:	e7fe      	b.n	8004a74 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004a76:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <vPortExitCritical+0x48>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	4a07      	ldr	r2, [pc, #28]	; (8004a9c <vPortExitCritical+0x48>)
 8004a7e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a80:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <vPortExitCritical+0x48>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d104      	bne.n	8004a92 <vPortExitCritical+0x3e>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr
 8004a9c:	20000020 	.word	0x20000020

08004aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004aa0:	f3ef 8009 	mrs	r0, PSP
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	4b0d      	ldr	r3, [pc, #52]	; (8004ae0 <pxCurrentTCBConst>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ab0:	6010      	str	r0, [r2, #0]
 8004ab2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004ab6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004aba:	f380 8811 	msr	BASEPRI, r0
 8004abe:	f7ff fd1b 	bl	80044f8 <vTaskSwitchContext>
 8004ac2:	f04f 0000 	mov.w	r0, #0
 8004ac6:	f380 8811 	msr	BASEPRI, r0
 8004aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004ace:	6819      	ldr	r1, [r3, #0]
 8004ad0:	6808      	ldr	r0, [r1, #0]
 8004ad2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ad6:	f380 8809 	msr	PSP, r0
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	4770      	bx	lr

08004ae0 <pxCurrentTCBConst>:
 8004ae0:	200004b4 	.word	0x200004b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop

08004ae8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
	__asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b00:	f7ff fc3e 	bl	8004380 <xTaskIncrementTick>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b0a:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <xPortSysTickHandler+0x3c>)
 8004b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	2300      	movs	r3, #0
 8004b14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b1c:	bf00      	nop
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	e000ed04 	.word	0xe000ed04

08004b28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <vPortSetupTimerInterrupt+0x30>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b32:	4b0a      	ldr	r3, [pc, #40]	; (8004b5c <vPortSetupTimerInterrupt+0x34>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b38:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <vPortSetupTimerInterrupt+0x38>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a09      	ldr	r2, [pc, #36]	; (8004b64 <vPortSetupTimerInterrupt+0x3c>)
 8004b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b42:	099b      	lsrs	r3, r3, #6
 8004b44:	4a08      	ldr	r2, [pc, #32]	; (8004b68 <vPortSetupTimerInterrupt+0x40>)
 8004b46:	3b01      	subs	r3, #1
 8004b48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b4a:	4b03      	ldr	r3, [pc, #12]	; (8004b58 <vPortSetupTimerInterrupt+0x30>)
 8004b4c:	2207      	movs	r2, #7
 8004b4e:	601a      	str	r2, [r3, #0]
}
 8004b50:	bf00      	nop
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr
 8004b58:	e000e010 	.word	0xe000e010
 8004b5c:	e000e018 	.word	0xe000e018
 8004b60:	20000024 	.word	0x20000024
 8004b64:	10624dd3 	.word	0x10624dd3
 8004b68:	e000e014 	.word	0xe000e014

08004b6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08a      	sub	sp, #40	; 0x28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b74:	2300      	movs	r3, #0
 8004b76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b78:	f7ff fb58 	bl	800422c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b7c:	4b57      	ldr	r3, [pc, #348]	; (8004cdc <pvPortMalloc+0x170>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b84:	f000 f90c 	bl	8004da0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b88:	4b55      	ldr	r3, [pc, #340]	; (8004ce0 <pvPortMalloc+0x174>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f040 808c 	bne.w	8004cae <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01c      	beq.n	8004bd6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004b9c:	2208      	movs	r2, #8
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d013      	beq.n	8004bd6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f023 0307 	bic.w	r3, r3, #7
 8004bb4:	3308      	adds	r3, #8
 8004bb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d009      	beq.n	8004bd6 <pvPortMalloc+0x6a>
	__asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	e7fe      	b.n	8004bd4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d068      	beq.n	8004cae <pvPortMalloc+0x142>
 8004bdc:	4b41      	ldr	r3, [pc, #260]	; (8004ce4 <pvPortMalloc+0x178>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d863      	bhi.n	8004cae <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004be6:	4b40      	ldr	r3, [pc, #256]	; (8004ce8 <pvPortMalloc+0x17c>)
 8004be8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004bea:	4b3f      	ldr	r3, [pc, #252]	; (8004ce8 <pvPortMalloc+0x17c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bf0:	e004      	b.n	8004bfc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d903      	bls.n	8004c0e <pvPortMalloc+0xa2>
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f1      	bne.n	8004bf2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c0e:	4b33      	ldr	r3, [pc, #204]	; (8004cdc <pvPortMalloc+0x170>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d04a      	beq.n	8004cae <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2208      	movs	r2, #8
 8004c1e:	4413      	add	r3, r2
 8004c20:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	1ad2      	subs	r2, r2, r3
 8004c32:	2308      	movs	r3, #8
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d91e      	bls.n	8004c78 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4413      	add	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d009      	beq.n	8004c60 <pvPortMalloc+0xf4>
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	e7fe      	b.n	8004c5e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	1ad2      	subs	r2, r2, r3
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c72:	69b8      	ldr	r0, [r7, #24]
 8004c74:	f000 f8f6 	bl	8004e64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c78:	4b1a      	ldr	r3, [pc, #104]	; (8004ce4 <pvPortMalloc+0x178>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	4a18      	ldr	r2, [pc, #96]	; (8004ce4 <pvPortMalloc+0x178>)
 8004c84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c86:	4b17      	ldr	r3, [pc, #92]	; (8004ce4 <pvPortMalloc+0x178>)
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	4b18      	ldr	r3, [pc, #96]	; (8004cec <pvPortMalloc+0x180>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d203      	bcs.n	8004c9a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c92:	4b14      	ldr	r3, [pc, #80]	; (8004ce4 <pvPortMalloc+0x178>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a15      	ldr	r2, [pc, #84]	; (8004cec <pvPortMalloc+0x180>)
 8004c98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <pvPortMalloc+0x174>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004cae:	f7ff facb 	bl	8004248 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d009      	beq.n	8004cd0 <pvPortMalloc+0x164>
 8004cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	e7fe      	b.n	8004cce <pvPortMalloc+0x162>
	return pvReturn;
 8004cd0:	69fb      	ldr	r3, [r7, #28]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3728      	adds	r7, #40	; 0x28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	200011f0 	.word	0x200011f0
 8004ce0:	200011fc 	.word	0x200011fc
 8004ce4:	200011f4 	.word	0x200011f4
 8004ce8:	200011e8 	.word	0x200011e8
 8004cec:	200011f8 	.word	0x200011f8

08004cf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d046      	beq.n	8004d90 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d02:	2308      	movs	r3, #8
 8004d04:	425b      	negs	r3, r3
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4413      	add	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	4b20      	ldr	r3, [pc, #128]	; (8004d98 <vPortFree+0xa8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d109      	bne.n	8004d32 <vPortFree+0x42>
 8004d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	e7fe      	b.n	8004d30 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d009      	beq.n	8004d4e <vPortFree+0x5e>
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	60bb      	str	r3, [r7, #8]
 8004d4c:	e7fe      	b.n	8004d4c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <vPortFree+0xa8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4013      	ands	r3, r2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d019      	beq.n	8004d90 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d115      	bne.n	8004d90 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <vPortFree+0xa8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	401a      	ands	r2, r3
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d74:	f7ff fa5a 	bl	800422c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	4b07      	ldr	r3, [pc, #28]	; (8004d9c <vPortFree+0xac>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4413      	add	r3, r2
 8004d82:	4a06      	ldr	r2, [pc, #24]	; (8004d9c <vPortFree+0xac>)
 8004d84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d86:	6938      	ldr	r0, [r7, #16]
 8004d88:	f000 f86c 	bl	8004e64 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004d8c:	f7ff fa5c 	bl	8004248 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d90:	bf00      	nop
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	200011fc 	.word	0x200011fc
 8004d9c:	200011f4 	.word	0x200011f4

08004da0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004da6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004daa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004dac:	4b27      	ldr	r3, [pc, #156]	; (8004e4c <prvHeapInit+0xac>)
 8004dae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00c      	beq.n	8004dd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	3307      	adds	r3, #7
 8004dbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0307 	bic.w	r3, r3, #7
 8004dc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	4a1f      	ldr	r2, [pc, #124]	; (8004e4c <prvHeapInit+0xac>)
 8004dd0:	4413      	add	r3, r2
 8004dd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004dd8:	4a1d      	ldr	r2, [pc, #116]	; (8004e50 <prvHeapInit+0xb0>)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004dde:	4b1c      	ldr	r3, [pc, #112]	; (8004e50 <prvHeapInit+0xb0>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	4413      	add	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004dec:	2208      	movs	r2, #8
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	1a9b      	subs	r3, r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0307 	bic.w	r3, r3, #7
 8004dfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4a15      	ldr	r2, [pc, #84]	; (8004e54 <prvHeapInit+0xb4>)
 8004e00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e02:	4b14      	ldr	r3, [pc, #80]	; (8004e54 <prvHeapInit+0xb4>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2200      	movs	r2, #0
 8004e08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e0a:	4b12      	ldr	r3, [pc, #72]	; (8004e54 <prvHeapInit+0xb4>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	1ad2      	subs	r2, r2, r3
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e20:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <prvHeapInit+0xb4>)
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	4a0a      	ldr	r2, [pc, #40]	; (8004e58 <prvHeapInit+0xb8>)
 8004e2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	4a09      	ldr	r2, [pc, #36]	; (8004e5c <prvHeapInit+0xbc>)
 8004e36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e38:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <prvHeapInit+0xc0>)
 8004e3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004e3e:	601a      	str	r2, [r3, #0]
}
 8004e40:	bf00      	nop
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc80      	pop	{r7}
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	200005e8 	.word	0x200005e8
 8004e50:	200011e8 	.word	0x200011e8
 8004e54:	200011f0 	.word	0x200011f0
 8004e58:	200011f8 	.word	0x200011f8
 8004e5c:	200011f4 	.word	0x200011f4
 8004e60:	200011fc 	.word	0x200011fc

08004e64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e6c:	4b27      	ldr	r3, [pc, #156]	; (8004f0c <prvInsertBlockIntoFreeList+0xa8>)
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	e002      	b.n	8004e78 <prvInsertBlockIntoFreeList+0x14>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d8f7      	bhi.n	8004e72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d108      	bne.n	8004ea6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	441a      	add	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	441a      	add	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d118      	bne.n	8004eec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4b14      	ldr	r3, [pc, #80]	; (8004f10 <prvInsertBlockIntoFreeList+0xac>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d00d      	beq.n	8004ee2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	441a      	add	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	e008      	b.n	8004ef4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ee2:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <prvInsertBlockIntoFreeList+0xac>)
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	e003      	b.n	8004ef4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d002      	beq.n	8004f02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f02:	bf00      	nop
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bc80      	pop	{r7}
 8004f0a:	4770      	bx	lr
 8004f0c:	200011e8 	.word	0x200011e8
 8004f10:	200011f0 	.word	0x200011f0

08004f14 <Load_Param>:
BP_Status 			Bp_Down;
BP_Status 			Bp_Ok;

/* Private function -----------------------------------------------*/
uint8_t Load_Param()
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
	uint32_t val_param;

	if(ParamExist())
 8004f1a:	4814      	ldr	r0, [pc, #80]	; (8004f6c <Load_Param+0x58>)
 8004f1c:	f7fe fddc 	bl	8003ad8 <FlashManager_ReadInt32>
 8004f20:	4602      	mov	r2, r0
 8004f22:	4b13      	ldr	r3, [pc, #76]	; (8004f70 <Load_Param+0x5c>)
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d113      	bne.n	8004f50 <Load_Param+0x3c>
	{
		val_param = 	FlashManager_ReadInt32(PARAM_DMX_PARAM);
 8004f28:	4812      	ldr	r0, [pc, #72]	; (8004f74 <Load_Param+0x60>)
 8004f2a:	f7fe fdd5 	bl	8003ad8 <FlashManager_ReadInt32>
 8004f2e:	6078      	str	r0, [r7, #4]
		Current_Mode = 	(val_param&0xFF000000)>>24;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	0e1b      	lsrs	r3, r3, #24
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	4b10      	ldr	r3, [pc, #64]	; (8004f78 <Load_Param+0x64>)
 8004f38:	701a      	strb	r2, [r3, #0]
		Manu_value = 	(val_param&0x00FF0000)>>16;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	0c1b      	lsrs	r3, r3, #16
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	4b0e      	ldr	r3, [pc, #56]	; (8004f7c <Load_Param+0x68>)
 8004f42:	701a      	strb	r2, [r3, #0]
		DMX_Adress = 	(val_param&0x0000FFFF);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <Load_Param+0x6c>)
 8004f4a:	801a      	strh	r2, [r3, #0]
		return __TRUE;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e009      	b.n	8004f64 <Load_Param+0x50>
	}
	else
	{
		Current_Mode = MODE_OFF;
 8004f50:	4b09      	ldr	r3, [pc, #36]	; (8004f78 <Load_Param+0x64>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	701a      	strb	r2, [r3, #0]
		Manu_value = 100;
 8004f56:	4b09      	ldr	r3, [pc, #36]	; (8004f7c <Load_Param+0x68>)
 8004f58:	2264      	movs	r2, #100	; 0x64
 8004f5a:	701a      	strb	r2, [r3, #0]
		DMX_Adress = 1;
 8004f5c:	4b08      	ldr	r3, [pc, #32]	; (8004f80 <Load_Param+0x6c>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	801a      	strh	r2, [r3, #0]
		return __FALSE;
 8004f62:	2300      	movs	r3, #0
	}
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	0800f800 	.word	0x0800f800
 8004f70:	55aa00ff 	.word	0x55aa00ff
 8004f74:	0800f804 	.word	0x0800f804
 8004f78:	2000166c 	.word	0x2000166c
 8004f7c:	20001664 	.word	0x20001664
 8004f80:	20001682 	.word	0x20001682

08004f84 <Write_Param>:

uint8_t Write_Param()
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
	uint32_t data[2];
	data[0] = PARAM_EXIST_CODE;
 8004f8a:	4b10      	ldr	r3, [pc, #64]	; (8004fcc <Write_Param+0x48>)
 8004f8c:	603b      	str	r3, [r7, #0]
	data[1] = 0x00;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	607b      	str	r3, [r7, #4]
	data[1] |= (Current_Mode<<24);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a0e      	ldr	r2, [pc, #56]	; (8004fd0 <Write_Param+0x4c>)
 8004f96:	7812      	ldrb	r2, [r2, #0]
 8004f98:	0612      	lsls	r2, r2, #24
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	607b      	str	r3, [r7, #4]
	data[1] |= (Manu_value<<16);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a0c      	ldr	r2, [pc, #48]	; (8004fd4 <Write_Param+0x50>)
 8004fa2:	7812      	ldrb	r2, [r2, #0]
 8004fa4:	0412      	lsls	r2, r2, #16
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	607b      	str	r3, [r7, #4]
	data[1] |= (DMX_Adress);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a0a      	ldr	r2, [pc, #40]	; (8004fd8 <Write_Param+0x54>)
 8004fae:	8812      	ldrh	r2, [r2, #0]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	607b      	str	r3, [r7, #4]

	FlashManager_WriteMulti(PARAM_EXIST_ADDRESS,2,data);
 8004fb4:	463b      	mov	r3, r7
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	2102      	movs	r1, #2
 8004fba:	4808      	ldr	r0, [pc, #32]	; (8004fdc <Write_Param+0x58>)
 8004fbc:	f7fe fd16 	bl	80039ec <FlashManager_WriteMulti>
}
 8004fc0:	bf00      	nop
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	55aa00ff 	.word	0x55aa00ff
 8004fd0:	2000166c 	.word	0x2000166c
 8004fd4:	20001664 	.word	0x20001664
 8004fd8:	20001682 	.word	0x20001682
 8004fdc:	0800f800 	.word	0x0800f800

08004fe0 <Update_Display>:

void Update_Display()
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
	char Str_percent[]="000";
 8004fe6:	4b61      	ldr	r3, [pc, #388]	; (800516c <Update_Display+0x18c>)
 8004fe8:	60bb      	str	r3, [r7, #8]
    char Str_dmx[]="000";
 8004fea:	4b60      	ldr	r3, [pc, #384]	; (800516c <Update_Display+0x18c>)
 8004fec:	607b      	str	r3, [r7, #4]
    char Str_add[]="000";
 8004fee:	4b5f      	ldr	r3, [pc, #380]	; (800516c <Update_Display+0x18c>)
 8004ff0:	603b      	str	r3, [r7, #0]
    uint8_t percent_value;

    SSD1306_Clear();
 8004ff2:	f7fb fad4 	bl	800059e <SSD1306_Clear>

    if(Current_Mode == MODE_OFF)			//OFF
 8004ff6:	4b5e      	ldr	r3, [pc, #376]	; (8005170 <Update_Display+0x190>)
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <Update_Display+0x32>
    {
    	SSD1306_GotoXY (40,0);
 8004ffe:	2100      	movs	r1, #0
 8005000:	2028      	movs	r0, #40	; 0x28
 8005002:	f7fb fa11 	bl	8000428 <SSD1306_GotoXY>
    	SSD1306_Puts ("OFF", &Font_16x26, 1);
 8005006:	2201      	movs	r2, #1
 8005008:	495a      	ldr	r1, [pc, #360]	; (8005174 <Update_Display+0x194>)
 800500a:	485b      	ldr	r0, [pc, #364]	; (8005178 <Update_Display+0x198>)
 800500c:	f7fb faa2 	bl	8000554 <SSD1306_Puts>
 8005010:	e0a5      	b.n	800515e <Update_Display+0x17e>
    }
    else if(Current_Mode == MODE_MANU)		//MANU
 8005012:	4b57      	ldr	r3, [pc, #348]	; (8005170 <Update_Display+0x190>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d127      	bne.n	800506a <Update_Display+0x8a>
    {
    	percent_value = Manu_value;
 800501a:	4b58      	ldr	r3, [pc, #352]	; (800517c <Update_Display+0x19c>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	73fb      	strb	r3, [r7, #15]
    	sprintf(Str_percent,"%03d",percent_value);
 8005020:	7bfa      	ldrb	r2, [r7, #15]
 8005022:	f107 0308 	add.w	r3, r7, #8
 8005026:	4956      	ldr	r1, [pc, #344]	; (8005180 <Update_Display+0x1a0>)
 8005028:	4618      	mov	r0, r3
 800502a:	f001 f877 	bl	800611c <siprintf>
    	SSD1306_GotoXY (25,0);
 800502e:	2100      	movs	r1, #0
 8005030:	2019      	movs	r0, #25
 8005032:	f7fb f9f9 	bl	8000428 <SSD1306_GotoXY>
    	SSD1306_Puts (Str_percent, &Font_16x26, 1);
 8005036:	f107 0308 	add.w	r3, r7, #8
 800503a:	2201      	movs	r2, #1
 800503c:	494d      	ldr	r1, [pc, #308]	; (8005174 <Update_Display+0x194>)
 800503e:	4618      	mov	r0, r3
 8005040:	f7fb fa88 	bl	8000554 <SSD1306_Puts>
    	SSD1306_GotoXY (74,0);
 8005044:	2100      	movs	r1, #0
 8005046:	204a      	movs	r0, #74	; 0x4a
 8005048:	f7fb f9ee 	bl	8000428 <SSD1306_GotoXY>
    	SSD1306_Puts ("%", &Font_16x26, 1);
 800504c:	2201      	movs	r2, #1
 800504e:	4949      	ldr	r1, [pc, #292]	; (8005174 <Update_Display+0x194>)
 8005050:	484c      	ldr	r0, [pc, #304]	; (8005184 <Update_Display+0x1a4>)
 8005052:	f7fb fa7f 	bl	8000554 <SSD1306_Puts>
    	SSD1306_GotoXY (0, 45);
 8005056:	212d      	movs	r1, #45	; 0x2d
 8005058:	2000      	movs	r0, #0
 800505a:	f7fb f9e5 	bl	8000428 <SSD1306_GotoXY>
    	SSD1306_Puts ("MODE:MANUAL", &Font_11x18, 1);
 800505e:	2201      	movs	r2, #1
 8005060:	4949      	ldr	r1, [pc, #292]	; (8005188 <Update_Display+0x1a8>)
 8005062:	484a      	ldr	r0, [pc, #296]	; (800518c <Update_Display+0x1ac>)
 8005064:	f7fb fa76 	bl	8000554 <SSD1306_Puts>
 8005068:	e079      	b.n	800515e <Update_Display+0x17e>
    }
    else								//DMX
    {
    	percent_value = (uint32_t)(DMX_value*100/255);
 800506a:	4b49      	ldr	r3, [pc, #292]	; (8005190 <Update_Display+0x1b0>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	461a      	mov	r2, r3
 8005070:	2364      	movs	r3, #100	; 0x64
 8005072:	fb03 f302 	mul.w	r3, r3, r2
 8005076:	4a47      	ldr	r2, [pc, #284]	; (8005194 <Update_Display+0x1b4>)
 8005078:	fb82 1203 	smull	r1, r2, r2, r3
 800507c:	441a      	add	r2, r3
 800507e:	11d2      	asrs	r2, r2, #7
 8005080:	17db      	asrs	r3, r3, #31
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	73fb      	strb	r3, [r7, #15]
    	sprintf(Str_add,"%03d",DMX_Adress);
 8005086:	4b44      	ldr	r3, [pc, #272]	; (8005198 <Update_Display+0x1b8>)
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	463b      	mov	r3, r7
 800508e:	493c      	ldr	r1, [pc, #240]	; (8005180 <Update_Display+0x1a0>)
 8005090:	4618      	mov	r0, r3
 8005092:	f001 f843 	bl	800611c <siprintf>
    	if(DMX_signal_OK)
 8005096:	4b41      	ldr	r3, [pc, #260]	; (800519c <Update_Display+0x1bc>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d018      	beq.n	80050d0 <Update_Display+0xf0>
		{
			SSD1306_GotoXY (0, 45);
 800509e:	212d      	movs	r1, #45	; 0x2d
 80050a0:	2000      	movs	r0, #0
 80050a2:	f7fb f9c1 	bl	8000428 <SSD1306_GotoXY>
			SSD1306_Puts ("SIGNAL :OK", &Font_11x18, 1);
 80050a6:	2201      	movs	r2, #1
 80050a8:	4937      	ldr	r1, [pc, #220]	; (8005188 <Update_Display+0x1a8>)
 80050aa:	483d      	ldr	r0, [pc, #244]	; (80051a0 <Update_Display+0x1c0>)
 80050ac:	f7fb fa52 	bl	8000554 <SSD1306_Puts>
			sprintf(Str_percent,"%03d",percent_value);
 80050b0:	7bfa      	ldrb	r2, [r7, #15]
 80050b2:	f107 0308 	add.w	r3, r7, #8
 80050b6:	4932      	ldr	r1, [pc, #200]	; (8005180 <Update_Display+0x1a0>)
 80050b8:	4618      	mov	r0, r3
 80050ba:	f001 f82f 	bl	800611c <siprintf>
			sprintf(Str_dmx,"%03d",DMX_value);
 80050be:	4b34      	ldr	r3, [pc, #208]	; (8005190 <Update_Display+0x1b0>)
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	461a      	mov	r2, r3
 80050c4:	1d3b      	adds	r3, r7, #4
 80050c6:	492e      	ldr	r1, [pc, #184]	; (8005180 <Update_Display+0x1a0>)
 80050c8:	4618      	mov	r0, r3
 80050ca:	f001 f827 	bl	800611c <siprintf>
 80050ce:	e00c      	b.n	80050ea <Update_Display+0x10a>
		}
		else
		{
			SSD1306_GotoXY (0, 45);
 80050d0:	212d      	movs	r1, #45	; 0x2d
 80050d2:	2000      	movs	r0, #0
 80050d4:	f7fb f9a8 	bl	8000428 <SSD1306_GotoXY>
			SSD1306_Puts ("SIGNAL :ERR", &Font_11x18, 1);
 80050d8:	2201      	movs	r2, #1
 80050da:	492b      	ldr	r1, [pc, #172]	; (8005188 <Update_Display+0x1a8>)
 80050dc:	4831      	ldr	r0, [pc, #196]	; (80051a4 <Update_Display+0x1c4>)
 80050de:	f7fb fa39 	bl	8000554 <SSD1306_Puts>
			sprintf(Str_percent,"---");
 80050e2:	4b31      	ldr	r3, [pc, #196]	; (80051a8 <Update_Display+0x1c8>)
 80050e4:	60bb      	str	r3, [r7, #8]
			sprintf(Str_dmx,"---");
 80050e6:	4b30      	ldr	r3, [pc, #192]	; (80051a8 <Update_Display+0x1c8>)
 80050e8:	607b      	str	r3, [r7, #4]
		}
    	SSD1306_GotoXY (25,0);
 80050ea:	2100      	movs	r1, #0
 80050ec:	2019      	movs	r0, #25
 80050ee:	f7fb f99b 	bl	8000428 <SSD1306_GotoXY>
		SSD1306_Puts (Str_percent, &Font_16x26, 1);
 80050f2:	f107 0308 	add.w	r3, r7, #8
 80050f6:	2201      	movs	r2, #1
 80050f8:	491e      	ldr	r1, [pc, #120]	; (8005174 <Update_Display+0x194>)
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fb fa2a 	bl	8000554 <SSD1306_Puts>
		SSD1306_GotoXY (74,0);
 8005100:	2100      	movs	r1, #0
 8005102:	204a      	movs	r0, #74	; 0x4a
 8005104:	f7fb f990 	bl	8000428 <SSD1306_GotoXY>
		SSD1306_Puts ("%", &Font_16x26, 1);
 8005108:	2201      	movs	r2, #1
 800510a:	491a      	ldr	r1, [pc, #104]	; (8005174 <Update_Display+0x194>)
 800510c:	481d      	ldr	r0, [pc, #116]	; (8005184 <Update_Display+0x1a4>)
 800510e:	f7fb fa21 	bl	8000554 <SSD1306_Puts>
		SSD1306_GotoXY (0, 27);
 8005112:	211b      	movs	r1, #27
 8005114:	2000      	movs	r0, #0
 8005116:	f7fb f987 	bl	8000428 <SSD1306_GotoXY>
		SSD1306_Puts ("DMX ADD:", &Font_11x18, 1);
 800511a:	2201      	movs	r2, #1
 800511c:	491a      	ldr	r1, [pc, #104]	; (8005188 <Update_Display+0x1a8>)
 800511e:	4823      	ldr	r0, [pc, #140]	; (80051ac <Update_Display+0x1cc>)
 8005120:	f7fb fa18 	bl	8000554 <SSD1306_Puts>
		SSD1306_GotoXY (89, 27);
 8005124:	211b      	movs	r1, #27
 8005126:	2059      	movs	r0, #89	; 0x59
 8005128:	f7fb f97e 	bl	8000428 <SSD1306_GotoXY>
		SSD1306_Puts (Str_add, &Font_11x18, 1);
 800512c:	463b      	mov	r3, r7
 800512e:	2201      	movs	r2, #1
 8005130:	4915      	ldr	r1, [pc, #84]	; (8005188 <Update_Display+0x1a8>)
 8005132:	4618      	mov	r0, r3
 8005134:	f7fb fa0e 	bl	8000554 <SSD1306_Puts>
		SSD1306_GotoXY (105, 0);
 8005138:	2100      	movs	r1, #0
 800513a:	2069      	movs	r0, #105	; 0x69
 800513c:	f7fb f974 	bl	8000428 <SSD1306_GotoXY>
		SSD1306_Puts ("DMX", &Font_7x10, 1);
 8005140:	2201      	movs	r2, #1
 8005142:	491b      	ldr	r1, [pc, #108]	; (80051b0 <Update_Display+0x1d0>)
 8005144:	481b      	ldr	r0, [pc, #108]	; (80051b4 <Update_Display+0x1d4>)
 8005146:	f7fb fa05 	bl	8000554 <SSD1306_Puts>
		SSD1306_GotoXY (105, 10);
 800514a:	210a      	movs	r1, #10
 800514c:	2069      	movs	r0, #105	; 0x69
 800514e:	f7fb f96b 	bl	8000428 <SSD1306_GotoXY>
		SSD1306_Puts (Str_dmx, &Font_7x10, 1);
 8005152:	1d3b      	adds	r3, r7, #4
 8005154:	2201      	movs	r2, #1
 8005156:	4916      	ldr	r1, [pc, #88]	; (80051b0 <Update_Display+0x1d0>)
 8005158:	4618      	mov	r0, r3
 800515a:	f7fb f9fb 	bl	8000554 <SSD1306_Puts>
    }
	SSD1306_UpdateScreen(); //display
 800515e:	f7fb f8bf 	bl	80002e0 <SSD1306_UpdateScreen>
}
 8005162:	bf00      	nop
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	00303030 	.word	0x00303030
 8005170:	2000166c 	.word	0x2000166c
 8005174:	20000010 	.word	0x20000010
 8005178:	08006960 	.word	0x08006960
 800517c:	20001664 	.word	0x20001664
 8005180:	08006964 	.word	0x08006964
 8005184:	0800696c 	.word	0x0800696c
 8005188:	20000008 	.word	0x20000008
 800518c:	08006970 	.word	0x08006970
 8005190:	20001678 	.word	0x20001678
 8005194:	80808081 	.word	0x80808081
 8005198:	20001682 	.word	0x20001682
 800519c:	20001665 	.word	0x20001665
 80051a0:	0800697c 	.word	0x0800697c
 80051a4:	08006988 	.word	0x08006988
 80051a8:	002d2d2d 	.word	0x002d2d2d
 80051ac:	08006994 	.word	0x08006994
 80051b0:	20000000 	.word	0x20000000
 80051b4:	080069a0 	.word	0x080069a0

080051b8 <Manage_Button>:

void Manage_Button()
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
	static uint32_t time_BpUp=0;
	static uint32_t time_BpDown=0;
	static uint32_t time_BpOk=0;

	if(!HAL_GPIO_ReadPin(BP_UP_GPIO_Port, BP_UP_Pin))
 80051bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051c0:	484a      	ldr	r0, [pc, #296]	; (80052ec <Manage_Button+0x134>)
 80051c2:	f7fc f80b 	bl	80011dc <HAL_GPIO_ReadPin>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d126      	bne.n	800521a <Manage_Button+0x62>
	{
		if(Bp_Up==BP_OFF)
 80051cc:	4b48      	ldr	r3, [pc, #288]	; (80052f0 <Manage_Button+0x138>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d108      	bne.n	80051e6 <Manage_Button+0x2e>
		{
			Bp_Up=BP_CLICK;
 80051d4:	4b46      	ldr	r3, [pc, #280]	; (80052f0 <Manage_Button+0x138>)
 80051d6:	2201      	movs	r2, #1
 80051d8:	701a      	strb	r2, [r3, #0]
			time_BpUp = HAL_GetTick();
 80051da:	f7fb fb17 	bl	800080c <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	4b44      	ldr	r3, [pc, #272]	; (80052f4 <Manage_Button+0x13c>)
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	e01c      	b.n	8005220 <Manage_Button+0x68>
		}
		else if((HAL_GetTick() > time_BpUp+TIME_LONG_BP) && Bp_Up==BP_IDLE)
 80051e6:	f7fb fb11 	bl	800080c <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	4b41      	ldr	r3, [pc, #260]	; (80052f4 <Manage_Button+0x13c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d90c      	bls.n	8005212 <Manage_Button+0x5a>
 80051f8:	4b3d      	ldr	r3, [pc, #244]	; (80052f0 <Manage_Button+0x138>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d108      	bne.n	8005212 <Manage_Button+0x5a>
		{
			time_BpUp = HAL_GetTick();
 8005200:	f7fb fb04 	bl	800080c <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	4b3b      	ldr	r3, [pc, #236]	; (80052f4 <Manage_Button+0x13c>)
 8005208:	601a      	str	r2, [r3, #0]
			Bp_Up=BP_1s;
 800520a:	4b39      	ldr	r3, [pc, #228]	; (80052f0 <Manage_Button+0x138>)
 800520c:	2202      	movs	r2, #2
 800520e:	701a      	strb	r2, [r3, #0]
 8005210:	e006      	b.n	8005220 <Manage_Button+0x68>
		}
		else
			Bp_Up = BP_IDLE;
 8005212:	4b37      	ldr	r3, [pc, #220]	; (80052f0 <Manage_Button+0x138>)
 8005214:	2203      	movs	r2, #3
 8005216:	701a      	strb	r2, [r3, #0]
 8005218:	e002      	b.n	8005220 <Manage_Button+0x68>
	}
	else
		Bp_Up=BP_OFF;
 800521a:	4b35      	ldr	r3, [pc, #212]	; (80052f0 <Manage_Button+0x138>)
 800521c:	2200      	movs	r2, #0
 800521e:	701a      	strb	r2, [r3, #0]

	if(!HAL_GPIO_ReadPin(BP_DOWN_GPIO_Port, BP_DOWN_Pin))
 8005220:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005224:	4831      	ldr	r0, [pc, #196]	; (80052ec <Manage_Button+0x134>)
 8005226:	f7fb ffd9 	bl	80011dc <HAL_GPIO_ReadPin>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d126      	bne.n	800527e <Manage_Button+0xc6>
	{
		if(Bp_Down==BP_OFF)
 8005230:	4b31      	ldr	r3, [pc, #196]	; (80052f8 <Manage_Button+0x140>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d108      	bne.n	800524a <Manage_Button+0x92>
		{
			Bp_Down=BP_CLICK;
 8005238:	4b2f      	ldr	r3, [pc, #188]	; (80052f8 <Manage_Button+0x140>)
 800523a:	2201      	movs	r2, #1
 800523c:	701a      	strb	r2, [r3, #0]
			time_BpDown = HAL_GetTick();
 800523e:	f7fb fae5 	bl	800080c <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	4b2d      	ldr	r3, [pc, #180]	; (80052fc <Manage_Button+0x144>)
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	e01c      	b.n	8005284 <Manage_Button+0xcc>
		}
		else if((HAL_GetTick() > time_BpDown+TIME_LONG_BP) && Bp_Down==BP_IDLE)
 800524a:	f7fb fadf 	bl	800080c <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	4b2a      	ldr	r3, [pc, #168]	; (80052fc <Manage_Button+0x144>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005258:	429a      	cmp	r2, r3
 800525a:	d90c      	bls.n	8005276 <Manage_Button+0xbe>
 800525c:	4b26      	ldr	r3, [pc, #152]	; (80052f8 <Manage_Button+0x140>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	2b03      	cmp	r3, #3
 8005262:	d108      	bne.n	8005276 <Manage_Button+0xbe>
		{
			time_BpDown = HAL_GetTick();
 8005264:	f7fb fad2 	bl	800080c <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	4b24      	ldr	r3, [pc, #144]	; (80052fc <Manage_Button+0x144>)
 800526c:	601a      	str	r2, [r3, #0]
			Bp_Down=BP_1s;
 800526e:	4b22      	ldr	r3, [pc, #136]	; (80052f8 <Manage_Button+0x140>)
 8005270:	2202      	movs	r2, #2
 8005272:	701a      	strb	r2, [r3, #0]
 8005274:	e006      	b.n	8005284 <Manage_Button+0xcc>
		}
		else
			Bp_Down = BP_IDLE;
 8005276:	4b20      	ldr	r3, [pc, #128]	; (80052f8 <Manage_Button+0x140>)
 8005278:	2203      	movs	r2, #3
 800527a:	701a      	strb	r2, [r3, #0]
 800527c:	e002      	b.n	8005284 <Manage_Button+0xcc>
	}
	else
		Bp_Down=BP_OFF;
 800527e:	4b1e      	ldr	r3, [pc, #120]	; (80052f8 <Manage_Button+0x140>)
 8005280:	2200      	movs	r2, #0
 8005282:	701a      	strb	r2, [r3, #0]

	if(!HAL_GPIO_ReadPin(BP_OK_GPIO_Port, BP_OK_Pin))
 8005284:	2102      	movs	r1, #2
 8005286:	481e      	ldr	r0, [pc, #120]	; (8005300 <Manage_Button+0x148>)
 8005288:	f7fb ffa8 	bl	80011dc <HAL_GPIO_ReadPin>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d126      	bne.n	80052e0 <Manage_Button+0x128>
	{
		if(Bp_Ok==BP_OFF)
 8005292:	4b1c      	ldr	r3, [pc, #112]	; (8005304 <Manage_Button+0x14c>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d108      	bne.n	80052ac <Manage_Button+0xf4>
		{
			Bp_Ok=BP_CLICK;
 800529a:	4b1a      	ldr	r3, [pc, #104]	; (8005304 <Manage_Button+0x14c>)
 800529c:	2201      	movs	r2, #1
 800529e:	701a      	strb	r2, [r3, #0]
			time_BpOk = HAL_GetTick();
 80052a0:	f7fb fab4 	bl	800080c <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4b18      	ldr	r3, [pc, #96]	; (8005308 <Manage_Button+0x150>)
 80052a8:	601a      	str	r2, [r3, #0]
		else
			Bp_Ok = BP_IDLE;
	}
	else
		Bp_Ok=BP_OFF;
}
 80052aa:	e01c      	b.n	80052e6 <Manage_Button+0x12e>
		else if((HAL_GetTick()>time_BpOk+TIME_LONG_BP) && Bp_Ok==BP_IDLE)
 80052ac:	f7fb faae 	bl	800080c <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	4b15      	ldr	r3, [pc, #84]	; (8005308 <Manage_Button+0x150>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d90c      	bls.n	80052d8 <Manage_Button+0x120>
 80052be:	4b11      	ldr	r3, [pc, #68]	; (8005304 <Manage_Button+0x14c>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b03      	cmp	r3, #3
 80052c4:	d108      	bne.n	80052d8 <Manage_Button+0x120>
			time_BpOk = HAL_GetTick();
 80052c6:	f7fb faa1 	bl	800080c <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	4b0e      	ldr	r3, [pc, #56]	; (8005308 <Manage_Button+0x150>)
 80052ce:	601a      	str	r2, [r3, #0]
			Bp_Ok=BP_1s;
 80052d0:	4b0c      	ldr	r3, [pc, #48]	; (8005304 <Manage_Button+0x14c>)
 80052d2:	2202      	movs	r2, #2
 80052d4:	701a      	strb	r2, [r3, #0]
}
 80052d6:	e006      	b.n	80052e6 <Manage_Button+0x12e>
			Bp_Ok = BP_IDLE;
 80052d8:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <Manage_Button+0x14c>)
 80052da:	2203      	movs	r2, #3
 80052dc:	701a      	strb	r2, [r3, #0]
}
 80052de:	e002      	b.n	80052e6 <Manage_Button+0x12e>
		Bp_Ok=BP_OFF;
 80052e0:	4b08      	ldr	r3, [pc, #32]	; (8005304 <Manage_Button+0x14c>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	701a      	strb	r2, [r3, #0]
}
 80052e6:	bf00      	nop
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40011000 	.word	0x40011000
 80052f0:	20001681 	.word	0x20001681
 80052f4:	20001200 	.word	0x20001200
 80052f8:	20001666 	.word	0x20001666
 80052fc:	20001204 	.word	0x20001204
 8005300:	40010c00 	.word	0x40010c00
 8005304:	20001680 	.word	0x20001680
 8005308:	20001208 	.word	0x20001208

0800530c <AppLEDTask>:

void AppLEDTask(void const * argument)
{
 800530c:	b590      	push	{r4, r7, lr}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		osDelay(TASK_DELAY_LED);
 8005314:	2032      	movs	r0, #50	; 0x32
 8005316:	f7fe fd22 	bl	8003d5e <osDelay>

		if(Current_Mode == MODE_OFF)
 800531a:	4b24      	ldr	r3, [pc, #144]	; (80053ac <AppLEDTask+0xa0>)
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d108      	bne.n	8005334 <AppLEDTask+0x28>
			PWM_SetDuty(LED_PWMtimer,LED_PWMchannel,0);
 8005322:	4b23      	ldr	r3, [pc, #140]	; (80053b0 <AppLEDTask+0xa4>)
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	4b23      	ldr	r3, [pc, #140]	; (80053b4 <AppLEDTask+0xa8>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2200      	movs	r2, #0
 800532c:	4619      	mov	r1, r3
 800532e:	f7fb f9e5 	bl	80006fc <PWM_SetDuty>
 8005332:	e7ef      	b.n	8005314 <AppLEDTask+0x8>
		else if(Current_Mode == MODE_MANU)
 8005334:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <AppLEDTask+0xa0>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b02      	cmp	r3, #2
 800533a:	d111      	bne.n	8005360 <AppLEDTask+0x54>
			PWM_SetDuty(LED_PWMtimer,LED_PWMchannel,(uint32_t)Manu_value*255/100);
 800533c:	4b1c      	ldr	r3, [pc, #112]	; (80053b0 <AppLEDTask+0xa4>)
 800533e:	6818      	ldr	r0, [r3, #0]
 8005340:	4b1c      	ldr	r3, [pc, #112]	; (80053b4 <AppLEDTask+0xa8>)
 8005342:	6819      	ldr	r1, [r3, #0]
 8005344:	4b1c      	ldr	r3, [pc, #112]	; (80053b8 <AppLEDTask+0xac>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	461a      	mov	r2, r3
 800534a:	4613      	mov	r3, r2
 800534c:	021b      	lsls	r3, r3, #8
 800534e:	1a9b      	subs	r3, r3, r2
 8005350:	4a1a      	ldr	r2, [pc, #104]	; (80053bc <AppLEDTask+0xb0>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	461a      	mov	r2, r3
 800535a:	f7fb f9cf 	bl	80006fc <PWM_SetDuty>
 800535e:	e7d9      	b.n	8005314 <AppLEDTask+0x8>
		else
		{
			DMX_value = Protocol_DMX_GetValue(1);									//CHANNEL 1
 8005360:	2001      	movs	r0, #1
 8005362:	f7fe fc95 	bl	8003c90 <Protocol_DMX_GetValue>
 8005366:	4603      	mov	r3, r0
 8005368:	461a      	mov	r2, r3
 800536a:	4b15      	ldr	r3, [pc, #84]	; (80053c0 <AppLEDTask+0xb4>)
 800536c:	701a      	strb	r2, [r3, #0]
			if(HAL_GetTick()>Protocol_DMX_GetLastTickFrame()+TIMOUT_DMX_SIGNAL)
 800536e:	f7fb fa4d 	bl	800080c <HAL_GetTick>
 8005372:	4604      	mov	r4, r0
 8005374:	f7fe fca4 	bl	8003cc0 <Protocol_DMX_GetLastTickFrame>
 8005378:	4603      	mov	r3, r0
 800537a:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800537e:	429c      	cmp	r4, r3
 8005380:	d906      	bls.n	8005390 <AppLEDTask+0x84>
			{
				DMX_value=0;				//OFF LED if no signal
 8005382:	4b0f      	ldr	r3, [pc, #60]	; (80053c0 <AppLEDTask+0xb4>)
 8005384:	2200      	movs	r2, #0
 8005386:	701a      	strb	r2, [r3, #0]
				DMX_signal_OK = __FALSE;
 8005388:	4b0e      	ldr	r3, [pc, #56]	; (80053c4 <AppLEDTask+0xb8>)
 800538a:	2200      	movs	r2, #0
 800538c:	701a      	strb	r2, [r3, #0]
 800538e:	e002      	b.n	8005396 <AppLEDTask+0x8a>
			}
			else
			{
				DMX_signal_OK = __TRUE;
 8005390:	4b0c      	ldr	r3, [pc, #48]	; (80053c4 <AppLEDTask+0xb8>)
 8005392:	2201      	movs	r2, #1
 8005394:	701a      	strb	r2, [r3, #0]
			}
			PWM_SetDuty(LED_PWMtimer,LED_PWMchannel,(uint32_t)DMX_value);
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <AppLEDTask+0xa4>)
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <AppLEDTask+0xa8>)
 800539c:	6819      	ldr	r1, [r3, #0]
 800539e:	4b08      	ldr	r3, [pc, #32]	; (80053c0 <AppLEDTask+0xb4>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	461a      	mov	r2, r3
 80053a4:	f7fb f9aa 	bl	80006fc <PWM_SetDuty>
		osDelay(TASK_DELAY_LED);
 80053a8:	e7b4      	b.n	8005314 <AppLEDTask+0x8>
 80053aa:	bf00      	nop
 80053ac:	2000166c 	.word	0x2000166c
 80053b0:	20001660 	.word	0x20001660
 80053b4:	2000167c 	.word	0x2000167c
 80053b8:	20001664 	.word	0x20001664
 80053bc:	51eb851f 	.word	0x51eb851f
 80053c0:	20001678 	.word	0x20001678
 80053c4:	20001665 	.word	0x20001665

080053c8 <AppIHMTask>:
		}
	}
}

void AppIHMTask(void const * argument)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
	uint32_t cpt_refresh=0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]
	uint32_t tick_save_param;
	uint32_t param_changed = __FALSE;
 80053d4:	2300      	movs	r3, #0
 80053d6:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		osDelay(TASK_DELAY_IHM);
 80053d8:	2032      	movs	r0, #50	; 0x32
 80053da:	f7fe fcc0 	bl	8003d5e <osDelay>

		cpt_refresh++;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	3301      	adds	r3, #1
 80053e2:	617b      	str	r3, [r7, #20]
		if(cpt_refresh>=REFRESH_DISPLAY)
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d903      	bls.n	80053f2 <AppIHMTask+0x2a>
		{
			Update_Display();
 80053ea:	f7ff fdf9 	bl	8004fe0 <Update_Display>
			cpt_refresh=0;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
		}

		Manage_Button();
 80053f2:	f7ff fee1 	bl	80051b8 <Manage_Button>

		if(Bp_Ok == BP_CLICK)
 80053f6:	4b81      	ldr	r3, [pc, #516]	; (80055fc <AppIHMTask+0x234>)
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d117      	bne.n	800542e <AppIHMTask+0x66>
		{
			if(Current_Mode==MODE_OFF)
 80053fe:	4b80      	ldr	r3, [pc, #512]	; (8005600 <AppIHMTask+0x238>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d103      	bne.n	800540e <AppIHMTask+0x46>
				Current_Mode=MODE_MANU;
 8005406:	4b7e      	ldr	r3, [pc, #504]	; (8005600 <AppIHMTask+0x238>)
 8005408:	2202      	movs	r2, #2
 800540a:	701a      	strb	r2, [r3, #0]
 800540c:	e00a      	b.n	8005424 <AppIHMTask+0x5c>
			else if(Current_Mode==MODE_MANU)
 800540e:	4b7c      	ldr	r3, [pc, #496]	; (8005600 <AppIHMTask+0x238>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b02      	cmp	r3, #2
 8005414:	d103      	bne.n	800541e <AppIHMTask+0x56>
				Current_Mode=MODE_DMX;
 8005416:	4b7a      	ldr	r3, [pc, #488]	; (8005600 <AppIHMTask+0x238>)
 8005418:	2201      	movs	r2, #1
 800541a:	701a      	strb	r2, [r3, #0]
 800541c:	e002      	b.n	8005424 <AppIHMTask+0x5c>
			else
				Current_Mode=MODE_OFF;
 800541e:	4b78      	ldr	r3, [pc, #480]	; (8005600 <AppIHMTask+0x238>)
 8005420:	2200      	movs	r2, #0
 8005422:	701a      	strb	r2, [r3, #0]

			param_changed = __TRUE;
 8005424:	2301      	movs	r3, #1
 8005426:	60fb      	str	r3, [r7, #12]
			tick_save_param = HAL_GetTick();
 8005428:	f7fb f9f0 	bl	800080c <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]
		}

		if(Current_Mode==MODE_MANU)
 800542e:	4b74      	ldr	r3, [pc, #464]	; (8005600 <AppIHMTask+0x238>)
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d153      	bne.n	80054de <AppIHMTask+0x116>
		{
			if(Bp_Up == BP_CLICK)
 8005436:	4b73      	ldr	r3, [pc, #460]	; (8005604 <AppIHMTask+0x23c>)
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d10e      	bne.n	800545c <AppIHMTask+0x94>
			{
				if(Manu_value<100)
 800543e:	4b72      	ldr	r3, [pc, #456]	; (8005608 <AppIHMTask+0x240>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b63      	cmp	r3, #99	; 0x63
 8005444:	d805      	bhi.n	8005452 <AppIHMTask+0x8a>
					Manu_value++;
 8005446:	4b70      	ldr	r3, [pc, #448]	; (8005608 <AppIHMTask+0x240>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	3301      	adds	r3, #1
 800544c:	b2da      	uxtb	r2, r3
 800544e:	4b6e      	ldr	r3, [pc, #440]	; (8005608 <AppIHMTask+0x240>)
 8005450:	701a      	strb	r2, [r3, #0]
				param_changed = __TRUE;
 8005452:	2301      	movs	r3, #1
 8005454:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 8005456:	f7fb f9d9 	bl	800080c <HAL_GetTick>
 800545a:	6138      	str	r0, [r7, #16]
			}
			if(Bp_Up == BP_1s)
 800545c:	4b69      	ldr	r3, [pc, #420]	; (8005604 <AppIHMTask+0x23c>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b02      	cmp	r3, #2
 8005462:	d112      	bne.n	800548a <AppIHMTask+0xc2>
			{
				if(Manu_value<=90)
 8005464:	4b68      	ldr	r3, [pc, #416]	; (8005608 <AppIHMTask+0x240>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b5a      	cmp	r3, #90	; 0x5a
 800546a:	d806      	bhi.n	800547a <AppIHMTask+0xb2>
					Manu_value+=10;
 800546c:	4b66      	ldr	r3, [pc, #408]	; (8005608 <AppIHMTask+0x240>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	330a      	adds	r3, #10
 8005472:	b2da      	uxtb	r2, r3
 8005474:	4b64      	ldr	r3, [pc, #400]	; (8005608 <AppIHMTask+0x240>)
 8005476:	701a      	strb	r2, [r3, #0]
 8005478:	e002      	b.n	8005480 <AppIHMTask+0xb8>
				else
					Manu_value=100;
 800547a:	4b63      	ldr	r3, [pc, #396]	; (8005608 <AppIHMTask+0x240>)
 800547c:	2264      	movs	r2, #100	; 0x64
 800547e:	701a      	strb	r2, [r3, #0]
				param_changed = __TRUE;
 8005480:	2301      	movs	r3, #1
 8005482:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 8005484:	f7fb f9c2 	bl	800080c <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]
			}
			if(Bp_Down == BP_CLICK)
 800548a:	4b60      	ldr	r3, [pc, #384]	; (800560c <AppIHMTask+0x244>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d10e      	bne.n	80054b0 <AppIHMTask+0xe8>
			{
				if(Manu_value>0)
 8005492:	4b5d      	ldr	r3, [pc, #372]	; (8005608 <AppIHMTask+0x240>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d005      	beq.n	80054a6 <AppIHMTask+0xde>
					Manu_value--;
 800549a:	4b5b      	ldr	r3, [pc, #364]	; (8005608 <AppIHMTask+0x240>)
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	3b01      	subs	r3, #1
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	4b59      	ldr	r3, [pc, #356]	; (8005608 <AppIHMTask+0x240>)
 80054a4:	701a      	strb	r2, [r3, #0]
				param_changed = __TRUE;
 80054a6:	2301      	movs	r3, #1
 80054a8:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 80054aa:	f7fb f9af 	bl	800080c <HAL_GetTick>
 80054ae:	6138      	str	r0, [r7, #16]
			}
			if(Bp_Down == BP_1s)
 80054b0:	4b56      	ldr	r3, [pc, #344]	; (800560c <AppIHMTask+0x244>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d112      	bne.n	80054de <AppIHMTask+0x116>
			{
				if(Manu_value>=10)
 80054b8:	4b53      	ldr	r3, [pc, #332]	; (8005608 <AppIHMTask+0x240>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b09      	cmp	r3, #9
 80054be:	d906      	bls.n	80054ce <AppIHMTask+0x106>
					Manu_value-=10;
 80054c0:	4b51      	ldr	r3, [pc, #324]	; (8005608 <AppIHMTask+0x240>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	3b0a      	subs	r3, #10
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	4b4f      	ldr	r3, [pc, #316]	; (8005608 <AppIHMTask+0x240>)
 80054ca:	701a      	strb	r2, [r3, #0]
 80054cc:	e002      	b.n	80054d4 <AppIHMTask+0x10c>
				else
					Manu_value=0;
 80054ce:	4b4e      	ldr	r3, [pc, #312]	; (8005608 <AppIHMTask+0x240>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	701a      	strb	r2, [r3, #0]
				param_changed = __TRUE;
 80054d4:	2301      	movs	r3, #1
 80054d6:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 80054d8:	f7fb f998 	bl	800080c <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]
			}
		}

		if(Current_Mode==MODE_DMX)
 80054de:	4b48      	ldr	r3, [pc, #288]	; (8005600 <AppIHMTask+0x238>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d176      	bne.n	80055d4 <AppIHMTask+0x20c>
		{
			if(Bp_Up == BP_CLICK)
 80054e6:	4b47      	ldr	r3, [pc, #284]	; (8005604 <AppIHMTask+0x23c>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d117      	bne.n	800551e <AppIHMTask+0x156>
			{
				if(DMX_Adress<512)
 80054ee:	4b48      	ldr	r3, [pc, #288]	; (8005610 <AppIHMTask+0x248>)
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f6:	d205      	bcs.n	8005504 <AppIHMTask+0x13c>
					DMX_Adress++;
 80054f8:	4b45      	ldr	r3, [pc, #276]	; (8005610 <AppIHMTask+0x248>)
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	3301      	adds	r3, #1
 80054fe:	b29a      	uxth	r2, r3
 8005500:	4b43      	ldr	r3, [pc, #268]	; (8005610 <AppIHMTask+0x248>)
 8005502:	801a      	strh	r2, [r3, #0]
				param_changed = __TRUE;
 8005504:	2301      	movs	r3, #1
 8005506:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 8005508:	f7fb f980 	bl	800080c <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]
				Protocol_DMX_init(DMX_Adress,Ref_dmxuart);
 800550e:	4b40      	ldr	r3, [pc, #256]	; (8005610 <AppIHMTask+0x248>)
 8005510:	881a      	ldrh	r2, [r3, #0]
 8005512:	4b40      	ldr	r3, [pc, #256]	; (8005614 <AppIHMTask+0x24c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4619      	mov	r1, r3
 8005518:	4610      	mov	r0, r2
 800551a:	f7fe faeb 	bl	8003af4 <Protocol_DMX_init>
			}
			if(Bp_Up == BP_1s)
 800551e:	4b39      	ldr	r3, [pc, #228]	; (8005604 <AppIHMTask+0x23c>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	2b02      	cmp	r3, #2
 8005524:	d11c      	bne.n	8005560 <AppIHMTask+0x198>
			{
				if(DMX_Adress<=502)
 8005526:	4b3a      	ldr	r3, [pc, #232]	; (8005610 <AppIHMTask+0x248>)
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 800552e:	d806      	bhi.n	800553e <AppIHMTask+0x176>
					DMX_Adress+=10;
 8005530:	4b37      	ldr	r3, [pc, #220]	; (8005610 <AppIHMTask+0x248>)
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	330a      	adds	r3, #10
 8005536:	b29a      	uxth	r2, r3
 8005538:	4b35      	ldr	r3, [pc, #212]	; (8005610 <AppIHMTask+0x248>)
 800553a:	801a      	strh	r2, [r3, #0]
 800553c:	e003      	b.n	8005546 <AppIHMTask+0x17e>
				else
					DMX_Adress=512;
 800553e:	4b34      	ldr	r3, [pc, #208]	; (8005610 <AppIHMTask+0x248>)
 8005540:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005544:	801a      	strh	r2, [r3, #0]
				param_changed = __TRUE;
 8005546:	2301      	movs	r3, #1
 8005548:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 800554a:	f7fb f95f 	bl	800080c <HAL_GetTick>
 800554e:	6138      	str	r0, [r7, #16]
				Protocol_DMX_init(DMX_Adress,Ref_dmxuart);
 8005550:	4b2f      	ldr	r3, [pc, #188]	; (8005610 <AppIHMTask+0x248>)
 8005552:	881a      	ldrh	r2, [r3, #0]
 8005554:	4b2f      	ldr	r3, [pc, #188]	; (8005614 <AppIHMTask+0x24c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4619      	mov	r1, r3
 800555a:	4610      	mov	r0, r2
 800555c:	f7fe faca 	bl	8003af4 <Protocol_DMX_init>
			}
			if(Bp_Down == BP_CLICK)
 8005560:	4b2a      	ldr	r3, [pc, #168]	; (800560c <AppIHMTask+0x244>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d116      	bne.n	8005596 <AppIHMTask+0x1ce>
			{
				if(DMX_Adress>1)
 8005568:	4b29      	ldr	r3, [pc, #164]	; (8005610 <AppIHMTask+0x248>)
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d905      	bls.n	800557c <AppIHMTask+0x1b4>
					DMX_Adress--;
 8005570:	4b27      	ldr	r3, [pc, #156]	; (8005610 <AppIHMTask+0x248>)
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	4b25      	ldr	r3, [pc, #148]	; (8005610 <AppIHMTask+0x248>)
 800557a:	801a      	strh	r2, [r3, #0]
				param_changed = __TRUE;
 800557c:	2301      	movs	r3, #1
 800557e:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 8005580:	f7fb f944 	bl	800080c <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]
				Protocol_DMX_init(DMX_Adress,Ref_dmxuart);
 8005586:	4b22      	ldr	r3, [pc, #136]	; (8005610 <AppIHMTask+0x248>)
 8005588:	881a      	ldrh	r2, [r3, #0]
 800558a:	4b22      	ldr	r3, [pc, #136]	; (8005614 <AppIHMTask+0x24c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4619      	mov	r1, r3
 8005590:	4610      	mov	r0, r2
 8005592:	f7fe faaf 	bl	8003af4 <Protocol_DMX_init>
			}
			if(Bp_Down == BP_1s)
 8005596:	4b1d      	ldr	r3, [pc, #116]	; (800560c <AppIHMTask+0x244>)
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d11a      	bne.n	80055d4 <AppIHMTask+0x20c>
			{
				if(DMX_Adress>=11)
 800559e:	4b1c      	ldr	r3, [pc, #112]	; (8005610 <AppIHMTask+0x248>)
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	2b0a      	cmp	r3, #10
 80055a4:	d906      	bls.n	80055b4 <AppIHMTask+0x1ec>
					DMX_Adress-=10;
 80055a6:	4b1a      	ldr	r3, [pc, #104]	; (8005610 <AppIHMTask+0x248>)
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	3b0a      	subs	r3, #10
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	4b18      	ldr	r3, [pc, #96]	; (8005610 <AppIHMTask+0x248>)
 80055b0:	801a      	strh	r2, [r3, #0]
 80055b2:	e002      	b.n	80055ba <AppIHMTask+0x1f2>
				else
					DMX_Adress=1;
 80055b4:	4b16      	ldr	r3, [pc, #88]	; (8005610 <AppIHMTask+0x248>)
 80055b6:	2201      	movs	r2, #1
 80055b8:	801a      	strh	r2, [r3, #0]
				param_changed = __TRUE;
 80055ba:	2301      	movs	r3, #1
 80055bc:	60fb      	str	r3, [r7, #12]
				tick_save_param = HAL_GetTick();
 80055be:	f7fb f925 	bl	800080c <HAL_GetTick>
 80055c2:	6138      	str	r0, [r7, #16]
				Protocol_DMX_init(DMX_Adress,Ref_dmxuart);
 80055c4:	4b12      	ldr	r3, [pc, #72]	; (8005610 <AppIHMTask+0x248>)
 80055c6:	881a      	ldrh	r2, [r3, #0]
 80055c8:	4b12      	ldr	r3, [pc, #72]	; (8005614 <AppIHMTask+0x24c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4619      	mov	r1, r3
 80055ce:	4610      	mov	r0, r2
 80055d0:	f7fe fa90 	bl	8003af4 <Protocol_DMX_init>
			}
		}

		if(HAL_GetTick()>tick_save_param+DELAY_SAVE_PARAM && param_changed==__TRUE)
 80055d4:	f7fb f91a 	bl	800080c <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80055e0:	3308      	adds	r3, #8
 80055e2:	429a      	cmp	r2, r3
 80055e4:	f67f aef8 	bls.w	80053d8 <AppIHMTask+0x10>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	f47f aef4 	bne.w	80053d8 <AppIHMTask+0x10>
		{
			param_changed = __FALSE;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]
			Write_Param();
 80055f4:	f7ff fcc6 	bl	8004f84 <Write_Param>
		osDelay(TASK_DELAY_IHM);
 80055f8:	e6ee      	b.n	80053d8 <AppIHMTask+0x10>
 80055fa:	bf00      	nop
 80055fc:	20001680 	.word	0x20001680
 8005600:	2000166c 	.word	0x2000166c
 8005604:	20001681 	.word	0x20001681
 8005608:	20001664 	.word	0x20001664
 800560c:	20001666 	.word	0x20001666
 8005610:	20001682 	.word	0x20001682
 8005614:	20001670 	.word	0x20001670

08005618 <App_Init>:
	}
}

/* Public function -----------------------------------------------*/
void App_Init(UART_HandleTypeDef* ref_uart,TIM_HandleTypeDef* LED_pwmtimer, uint32_t LED_PWMchannel, I2C_HandleTypeDef* hi2c_display)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
	Ref_dmxuart = ref_uart;
 8005626:	4a17      	ldr	r2, [pc, #92]	; (8005684 <App_Init+0x6c>)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6013      	str	r3, [r2, #0]
	LED_PWMtimer = LED_pwmtimer;
 800562c:	4a16      	ldr	r2, [pc, #88]	; (8005688 <App_Init+0x70>)
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	6013      	str	r3, [r2, #0]
	LED_PWMchannel = LED_PWMchannel;
	I2C_display = hi2c_display;
 8005632:	4a16      	ldr	r2, [pc, #88]	; (800568c <App_Init+0x74>)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	6013      	str	r3, [r2, #0]

	Load_Param();
 8005638:	f7ff fc6c 	bl	8004f14 <Load_Param>

	DMX_signal_OK = __FALSE;
 800563c:	4b14      	ldr	r3, [pc, #80]	; (8005690 <App_Init+0x78>)
 800563e:	2200      	movs	r2, #0
 8005640:	701a      	strb	r2, [r3, #0]
	Protocol_DMX_init(DMX_Adress,Ref_dmxuart);
 8005642:	4b14      	ldr	r3, [pc, #80]	; (8005694 <App_Init+0x7c>)
 8005644:	881a      	ldrh	r2, [r3, #0]
 8005646:	4b0f      	ldr	r3, [pc, #60]	; (8005684 <App_Init+0x6c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4619      	mov	r1, r3
 800564c:	4610      	mov	r0, r2
 800564e:	f7fe fa51 	bl	8003af4 <Protocol_DMX_init>
	PWM_SetPWM(LED_PWMtimer,LED_PWMchannel,LED_PWM_PERIOD_VALUE,128);		//PWM Off
 8005652:	4b0d      	ldr	r3, [pc, #52]	; (8005688 <App_Init+0x70>)
 8005654:	6818      	ldr	r0, [r3, #0]
 8005656:	2380      	movs	r3, #128	; 0x80
 8005658:	22ff      	movs	r2, #255	; 0xff
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	f7fb f822 	bl	80006a4 <PWM_SetPWM>
	SSD1306_Init(I2C_display);  // initialise
 8005660:	4b0a      	ldr	r3, [pc, #40]	; (800568c <App_Init+0x74>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4618      	mov	r0, r3
 8005666:	f7fa fd73 	bl	8000150 <SSD1306_Init>

	Bp_Up = BP_OFF;
 800566a:	4b0b      	ldr	r3, [pc, #44]	; (8005698 <App_Init+0x80>)
 800566c:	2200      	movs	r2, #0
 800566e:	701a      	strb	r2, [r3, #0]
	Bp_Down = BP_OFF;
 8005670:	4b0a      	ldr	r3, [pc, #40]	; (800569c <App_Init+0x84>)
 8005672:	2200      	movs	r2, #0
 8005674:	701a      	strb	r2, [r3, #0]
	Bp_Ok = BP_OFF;
 8005676:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <App_Init+0x88>)
 8005678:	2200      	movs	r2, #0
 800567a:	701a      	strb	r2, [r3, #0]
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	20001670 	.word	0x20001670
 8005688:	20001660 	.word	0x20001660
 800568c:	20001674 	.word	0x20001674
 8005690:	20001665 	.word	0x20001665
 8005694:	20001682 	.word	0x20001682
 8005698:	20001681 	.word	0x20001681
 800569c:	20001666 	.word	0x20001666
 80056a0:	20001680 	.word	0x20001680

080056a4 <CreatAppTasks>:

void CreatAppTasks (void)
{
 80056a4:	b5b0      	push	{r4, r5, r7, lr}
 80056a6:	b08a      	sub	sp, #40	; 0x28
 80056a8:	af00      	add	r7, sp, #0
	osThreadDef(App_LED_Task, AppLEDTask, osPriorityHigh, 0, 128);
 80056aa:	4b12      	ldr	r3, [pc, #72]	; (80056f4 <CreatAppTasks+0x50>)
 80056ac:	f107 0414 	add.w	r4, r7, #20
 80056b0:	461d      	mov	r5, r3
 80056b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056b6:	682b      	ldr	r3, [r5, #0]
 80056b8:	6023      	str	r3, [r4, #0]
	AppLEDTaskHandle = osThreadCreate(osThread(App_LED_Task), NULL);
 80056ba:	f107 0314 	add.w	r3, r7, #20
 80056be:	2100      	movs	r1, #0
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7fe fb25 	bl	8003d10 <osThreadCreate>
 80056c6:	4602      	mov	r2, r0
 80056c8:	4b0b      	ldr	r3, [pc, #44]	; (80056f8 <CreatAppTasks+0x54>)
 80056ca:	601a      	str	r2, [r3, #0]

	osThreadDef(App_IHM_Task, AppIHMTask, osPriorityNormal, 0, 256);
 80056cc:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <CreatAppTasks+0x58>)
 80056ce:	463c      	mov	r4, r7
 80056d0:	461d      	mov	r5, r3
 80056d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056d6:	682b      	ldr	r3, [r5, #0]
 80056d8:	6023      	str	r3, [r4, #0]
	AppIHMTaskHandle = osThreadCreate(osThread(App_IHM_Task), NULL);
 80056da:	463b      	mov	r3, r7
 80056dc:	2100      	movs	r1, #0
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fe fb16 	bl	8003d10 <osThreadCreate>
 80056e4:	4602      	mov	r2, r0
 80056e6:	4b06      	ldr	r3, [pc, #24]	; (8005700 <CreatAppTasks+0x5c>)
 80056e8:	601a      	str	r2, [r3, #0]
}
 80056ea:	bf00      	nop
 80056ec:	3728      	adds	r7, #40	; 0x28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bdb0      	pop	{r4, r5, r7, pc}
 80056f2:	bf00      	nop
 80056f4:	080069b4 	.word	0x080069b4
 80056f8:	20001684 	.word	0x20001684
 80056fc:	080069d8 	.word	0x080069d8
 8005700:	20001668 	.word	0x20001668

08005704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005704:	b5b0      	push	{r4, r5, r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800570a:	f7fb f827 	bl	800075c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800570e:	f000 f831 	bl	8005774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005712:	f000 f9df 	bl	8005ad4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8005716:	f000 f873 	bl	8005800 <MX_I2C1_Init>
  MX_TIM2_Init();
 800571a:	f000 f89f 	bl	800585c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800571e:	f000 f983 	bl	8005a28 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8005722:	f000 f9ab 	bl	8005a7c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8005726:	f000 f931 	bl	800598c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  App_Init(&huart2,&htim2,TIM_CHANNEL_1,&hi2c1);
 800572a:	4b0d      	ldr	r3, [pc, #52]	; (8005760 <main+0x5c>)
 800572c:	2200      	movs	r2, #0
 800572e:	490d      	ldr	r1, [pc, #52]	; (8005764 <main+0x60>)
 8005730:	480d      	ldr	r0, [pc, #52]	; (8005768 <main+0x64>)
 8005732:	f7ff ff71 	bl	8005618 <App_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8005736:	4b0d      	ldr	r3, [pc, #52]	; (800576c <main+0x68>)
 8005738:	1d3c      	adds	r4, r7, #4
 800573a:	461d      	mov	r5, r3
 800573c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800573e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005740:	682b      	ldr	r3, [r5, #0]
 8005742:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8005744:	1d3b      	adds	r3, r7, #4
 8005746:	2100      	movs	r1, #0
 8005748:	4618      	mov	r0, r3
 800574a:	f7fe fae1 	bl	8003d10 <osThreadCreate>
 800574e:	4602      	mov	r2, r0
 8005750:	4b07      	ldr	r3, [pc, #28]	; (8005770 <main+0x6c>)
 8005752:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  CreatAppTasks();
 8005754:	f7ff ffa6 	bl	80056a4 <CreatAppTasks>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8005758:	f7fe fad3 	bl	8003d02 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800575c:	e7fe      	b.n	800575c <main+0x58>
 800575e:	bf00      	nop
 8005760:	2000168c 	.word	0x2000168c
 8005764:	20001760 	.word	0x20001760
 8005768:	200017a0 	.word	0x200017a0
 800576c:	080069f8 	.word	0x080069f8
 8005770:	20001688 	.word	0x20001688

08005774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b090      	sub	sp, #64	; 0x40
 8005778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800577a:	f107 0318 	add.w	r3, r7, #24
 800577e:	2228      	movs	r2, #40	; 0x28
 8005780:	2100      	movs	r1, #0
 8005782:	4618      	mov	r0, r3
 8005784:	f000 fcc1 	bl	800610a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005788:	1d3b      	adds	r3, r7, #4
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	605a      	str	r2, [r3, #4]
 8005790:	609a      	str	r2, [r3, #8]
 8005792:	60da      	str	r2, [r3, #12]
 8005794:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005796:	2301      	movs	r3, #1
 8005798:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800579a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800579e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80057a0:	2300      	movs	r3, #0
 80057a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80057a4:	2301      	movs	r3, #1
 80057a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80057a8:	2302      	movs	r3, #2
 80057aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80057ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80057b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80057b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057b8:	f107 0318 	add.w	r3, r7, #24
 80057bc:	4618      	mov	r0, r3
 80057be:	f7fc fa81 	bl	8001cc4 <HAL_RCC_OscConfig>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80057c8:	f000 fa0a 	bl	8005be0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80057cc:	230f      	movs	r3, #15
 80057ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80057d0:	2302      	movs	r3, #2
 80057d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80057d4:	2300      	movs	r3, #0
 80057d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80057d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80057de:	2300      	movs	r3, #0
 80057e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80057e2:	1d3b      	adds	r3, r7, #4
 80057e4:	2101      	movs	r1, #1
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fc fcec 	bl	80021c4 <HAL_RCC_ClockConfig>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80057f2:	f000 f9f5 	bl	8005be0 <Error_Handler>
  }
}
 80057f6:	bf00      	nop
 80057f8:	3740      	adds	r7, #64	; 0x40
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005804:	4b12      	ldr	r3, [pc, #72]	; (8005850 <MX_I2C1_Init+0x50>)
 8005806:	4a13      	ldr	r2, [pc, #76]	; (8005854 <MX_I2C1_Init+0x54>)
 8005808:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800580a:	4b11      	ldr	r3, [pc, #68]	; (8005850 <MX_I2C1_Init+0x50>)
 800580c:	4a12      	ldr	r2, [pc, #72]	; (8005858 <MX_I2C1_Init+0x58>)
 800580e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005810:	4b0f      	ldr	r3, [pc, #60]	; (8005850 <MX_I2C1_Init+0x50>)
 8005812:	2200      	movs	r2, #0
 8005814:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005816:	4b0e      	ldr	r3, [pc, #56]	; (8005850 <MX_I2C1_Init+0x50>)
 8005818:	2200      	movs	r2, #0
 800581a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800581c:	4b0c      	ldr	r3, [pc, #48]	; (8005850 <MX_I2C1_Init+0x50>)
 800581e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005822:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005824:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <MX_I2C1_Init+0x50>)
 8005826:	2200      	movs	r2, #0
 8005828:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800582a:	4b09      	ldr	r3, [pc, #36]	; (8005850 <MX_I2C1_Init+0x50>)
 800582c:	2200      	movs	r2, #0
 800582e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005830:	4b07      	ldr	r3, [pc, #28]	; (8005850 <MX_I2C1_Init+0x50>)
 8005832:	2200      	movs	r2, #0
 8005834:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005836:	4b06      	ldr	r3, [pc, #24]	; (8005850 <MX_I2C1_Init+0x50>)
 8005838:	2200      	movs	r2, #0
 800583a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800583c:	4804      	ldr	r0, [pc, #16]	; (8005850 <MX_I2C1_Init+0x50>)
 800583e:	f7fb fcfd 	bl	800123c <HAL_I2C_Init>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005848:	f000 f9ca 	bl	8005be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800584c:	bf00      	nop
 800584e:	bd80      	pop	{r7, pc}
 8005850:	2000168c 	.word	0x2000168c
 8005854:	40005400 	.word	0x40005400
 8005858:	00061a80 	.word	0x00061a80

0800585c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08e      	sub	sp, #56	; 0x38
 8005860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005866:	2200      	movs	r2, #0
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	605a      	str	r2, [r3, #4]
 800586c:	609a      	str	r2, [r3, #8]
 800586e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005870:	f107 0320 	add.w	r3, r7, #32
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800587a:	1d3b      	adds	r3, r7, #4
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	605a      	str	r2, [r3, #4]
 8005882:	609a      	str	r2, [r3, #8]
 8005884:	60da      	str	r2, [r3, #12]
 8005886:	611a      	str	r2, [r3, #16]
 8005888:	615a      	str	r2, [r3, #20]
 800588a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800588c:	4b3e      	ldr	r3, [pc, #248]	; (8005988 <MX_TIM2_Init+0x12c>)
 800588e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005892:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 384;
 8005894:	4b3c      	ldr	r3, [pc, #240]	; (8005988 <MX_TIM2_Init+0x12c>)
 8005896:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800589a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800589c:	4b3a      	ldr	r3, [pc, #232]	; (8005988 <MX_TIM2_Init+0x12c>)
 800589e:	2200      	movs	r2, #0
 80058a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80058a2:	4b39      	ldr	r3, [pc, #228]	; (8005988 <MX_TIM2_Init+0x12c>)
 80058a4:	22ff      	movs	r2, #255	; 0xff
 80058a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058a8:	4b37      	ldr	r3, [pc, #220]	; (8005988 <MX_TIM2_Init+0x12c>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80058ae:	4b36      	ldr	r3, [pc, #216]	; (8005988 <MX_TIM2_Init+0x12c>)
 80058b0:	2280      	movs	r2, #128	; 0x80
 80058b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80058b4:	4834      	ldr	r0, [pc, #208]	; (8005988 <MX_TIM2_Init+0x12c>)
 80058b6:	f7fc fe21 	bl	80024fc <HAL_TIM_Base_Init>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80058c0:	f000 f98e 	bl	8005be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80058c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80058ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058ce:	4619      	mov	r1, r3
 80058d0:	482d      	ldr	r0, [pc, #180]	; (8005988 <MX_TIM2_Init+0x12c>)
 80058d2:	f7fd f8bf 	bl	8002a54 <HAL_TIM_ConfigClockSource>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80058dc:	f000 f980 	bl	8005be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80058e0:	4829      	ldr	r0, [pc, #164]	; (8005988 <MX_TIM2_Init+0x12c>)
 80058e2:	f7fc fe36 	bl	8002552 <HAL_TIM_PWM_Init>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80058ec:	f000 f978 	bl	8005be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058f0:	2300      	movs	r3, #0
 80058f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058f4:	2300      	movs	r3, #0
 80058f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80058f8:	f107 0320 	add.w	r3, r7, #32
 80058fc:	4619      	mov	r1, r3
 80058fe:	4822      	ldr	r0, [pc, #136]	; (8005988 <MX_TIM2_Init+0x12c>)
 8005900:	f7fd fc30 	bl	8003164 <HAL_TIMEx_MasterConfigSynchronization>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800590a:	f000 f969 	bl	8005be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800590e:	2360      	movs	r3, #96	; 0x60
 8005910:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 128;
 8005912:	2380      	movs	r3, #128	; 0x80
 8005914:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005916:	2300      	movs	r3, #0
 8005918:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800591a:	2300      	movs	r3, #0
 800591c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800591e:	1d3b      	adds	r3, r7, #4
 8005920:	2200      	movs	r2, #0
 8005922:	4619      	mov	r1, r3
 8005924:	4818      	ldr	r0, [pc, #96]	; (8005988 <MX_TIM2_Init+0x12c>)
 8005926:	f7fc ffcf 	bl	80028c8 <HAL_TIM_PWM_ConfigChannel>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8005930:	f000 f956 	bl	8005be0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005938:	1d3b      	adds	r3, r7, #4
 800593a:	2204      	movs	r2, #4
 800593c:	4619      	mov	r1, r3
 800593e:	4812      	ldr	r0, [pc, #72]	; (8005988 <MX_TIM2_Init+0x12c>)
 8005940:	f7fc ffc2 	bl	80028c8 <HAL_TIM_PWM_ConfigChannel>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800594a:	f000 f949 	bl	8005be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800594e:	1d3b      	adds	r3, r7, #4
 8005950:	2208      	movs	r2, #8
 8005952:	4619      	mov	r1, r3
 8005954:	480c      	ldr	r0, [pc, #48]	; (8005988 <MX_TIM2_Init+0x12c>)
 8005956:	f7fc ffb7 	bl	80028c8 <HAL_TIM_PWM_ConfigChannel>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8005960:	f000 f93e 	bl	8005be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005964:	1d3b      	adds	r3, r7, #4
 8005966:	220c      	movs	r2, #12
 8005968:	4619      	mov	r1, r3
 800596a:	4807      	ldr	r0, [pc, #28]	; (8005988 <MX_TIM2_Init+0x12c>)
 800596c:	f7fc ffac 	bl	80028c8 <HAL_TIM_PWM_ConfigChannel>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 8005976:	f000 f933 	bl	8005be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800597a:	4803      	ldr	r0, [pc, #12]	; (8005988 <MX_TIM2_Init+0x12c>)
 800597c:	f000 f9e4 	bl	8005d48 <HAL_TIM_MspPostInit>

}
 8005980:	bf00      	nop
 8005982:	3738      	adds	r7, #56	; 0x38
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	20001760 	.word	0x20001760

0800598c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005992:	f107 0308 	add.w	r3, r7, #8
 8005996:	2200      	movs	r2, #0
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	605a      	str	r2, [r3, #4]
 800599c:	609a      	str	r2, [r3, #8]
 800599e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059a0:	463b      	mov	r3, r7
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80059a8:	4b1d      	ldr	r3, [pc, #116]	; (8005a20 <MX_TIM3_Init+0x94>)
 80059aa:	4a1e      	ldr	r2, [pc, #120]	; (8005a24 <MX_TIM3_Init+0x98>)
 80059ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000;
 80059ae:	4b1c      	ldr	r3, [pc, #112]	; (8005a20 <MX_TIM3_Init+0x94>)
 80059b0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80059b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059b6:	4b1a      	ldr	r3, [pc, #104]	; (8005a20 <MX_TIM3_Init+0x94>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 80059bc:	4b18      	ldr	r3, [pc, #96]	; (8005a20 <MX_TIM3_Init+0x94>)
 80059be:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059c4:	4b16      	ldr	r3, [pc, #88]	; (8005a20 <MX_TIM3_Init+0x94>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059ca:	4b15      	ldr	r3, [pc, #84]	; (8005a20 <MX_TIM3_Init+0x94>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80059d0:	4813      	ldr	r0, [pc, #76]	; (8005a20 <MX_TIM3_Init+0x94>)
 80059d2:	f7fc fd93 	bl	80024fc <HAL_TIM_Base_Init>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80059dc:	f000 f900 	bl	8005be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80059e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80059e6:	f107 0308 	add.w	r3, r7, #8
 80059ea:	4619      	mov	r1, r3
 80059ec:	480c      	ldr	r0, [pc, #48]	; (8005a20 <MX_TIM3_Init+0x94>)
 80059ee:	f7fd f831 	bl	8002a54 <HAL_TIM_ConfigClockSource>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80059f8:	f000 f8f2 	bl	8005be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059fc:	2300      	movs	r3, #0
 80059fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a00:	2300      	movs	r3, #0
 8005a02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005a04:	463b      	mov	r3, r7
 8005a06:	4619      	mov	r1, r3
 8005a08:	4805      	ldr	r0, [pc, #20]	; (8005a20 <MX_TIM3_Init+0x94>)
 8005a0a:	f7fd fbab 	bl	8003164 <HAL_TIMEx_MasterConfigSynchronization>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8005a14:	f000 f8e4 	bl	8005be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005a18:	bf00      	nop
 8005a1a:	3718      	adds	r7, #24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	200016e0 	.word	0x200016e0
 8005a24:	40000400 	.word	0x40000400

08005a28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005a2c:	4b11      	ldr	r3, [pc, #68]	; (8005a74 <MX_USART1_UART_Init+0x4c>)
 8005a2e:	4a12      	ldr	r2, [pc, #72]	; (8005a78 <MX_USART1_UART_Init+0x50>)
 8005a30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005a32:	4b10      	ldr	r3, [pc, #64]	; (8005a74 <MX_USART1_UART_Init+0x4c>)
 8005a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005a38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005a3a:	4b0e      	ldr	r3, [pc, #56]	; (8005a74 <MX_USART1_UART_Init+0x4c>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005a40:	4b0c      	ldr	r3, [pc, #48]	; (8005a74 <MX_USART1_UART_Init+0x4c>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005a46:	4b0b      	ldr	r3, [pc, #44]	; (8005a74 <MX_USART1_UART_Init+0x4c>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005a4c:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <MX_USART1_UART_Init+0x4c>)
 8005a4e:	220c      	movs	r2, #12
 8005a50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a52:	4b08      	ldr	r3, [pc, #32]	; (8005a74 <MX_USART1_UART_Init+0x4c>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a58:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <MX_USART1_UART_Init+0x4c>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005a5e:	4805      	ldr	r0, [pc, #20]	; (8005a74 <MX_USART1_UART_Init+0x4c>)
 8005a60:	f7fd fbd6 	bl	8003210 <HAL_UART_Init>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005a6a:	f000 f8b9 	bl	8005be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005a6e:	bf00      	nop
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20001720 	.word	0x20001720
 8005a78:	40013800 	.word	0x40013800

08005a7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005a80:	4b11      	ldr	r3, [pc, #68]	; (8005ac8 <MX_USART2_UART_Init+0x4c>)
 8005a82:	4a12      	ldr	r2, [pc, #72]	; (8005acc <MX_USART2_UART_Init+0x50>)
 8005a84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 8005a86:	4b10      	ldr	r3, [pc, #64]	; (8005ac8 <MX_USART2_UART_Init+0x4c>)
 8005a88:	4a11      	ldr	r2, [pc, #68]	; (8005ad0 <MX_USART2_UART_Init+0x54>)
 8005a8a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005a8c:	4b0e      	ldr	r3, [pc, #56]	; (8005ac8 <MX_USART2_UART_Init+0x4c>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8005a92:	4b0d      	ldr	r3, [pc, #52]	; (8005ac8 <MX_USART2_UART_Init+0x4c>)
 8005a94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005a9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <MX_USART2_UART_Init+0x4c>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8005aa0:	4b09      	ldr	r3, [pc, #36]	; (8005ac8 <MX_USART2_UART_Init+0x4c>)
 8005aa2:	2204      	movs	r2, #4
 8005aa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005aa6:	4b08      	ldr	r3, [pc, #32]	; (8005ac8 <MX_USART2_UART_Init+0x4c>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005aac:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <MX_USART2_UART_Init+0x4c>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005ab2:	4805      	ldr	r0, [pc, #20]	; (8005ac8 <MX_USART2_UART_Init+0x4c>)
 8005ab4:	f7fd fbac 	bl	8003210 <HAL_UART_Init>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005abe:	f000 f88f 	bl	8005be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005ac2:	bf00      	nop
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	200017a0 	.word	0x200017a0
 8005acc:	40004400 	.word	0x40004400
 8005ad0:	0003d090 	.word	0x0003d090

08005ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ada:	f107 0310 	add.w	r3, r7, #16
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	605a      	str	r2, [r3, #4]
 8005ae4:	609a      	str	r2, [r3, #8]
 8005ae6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ae8:	4b30      	ldr	r3, [pc, #192]	; (8005bac <MX_GPIO_Init+0xd8>)
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	4a2f      	ldr	r2, [pc, #188]	; (8005bac <MX_GPIO_Init+0xd8>)
 8005aee:	f043 0310 	orr.w	r3, r3, #16
 8005af2:	6193      	str	r3, [r2, #24]
 8005af4:	4b2d      	ldr	r3, [pc, #180]	; (8005bac <MX_GPIO_Init+0xd8>)
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	f003 0310 	and.w	r3, r3, #16
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005b00:	4b2a      	ldr	r3, [pc, #168]	; (8005bac <MX_GPIO_Init+0xd8>)
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	4a29      	ldr	r2, [pc, #164]	; (8005bac <MX_GPIO_Init+0xd8>)
 8005b06:	f043 0320 	orr.w	r3, r3, #32
 8005b0a:	6193      	str	r3, [r2, #24]
 8005b0c:	4b27      	ldr	r3, [pc, #156]	; (8005bac <MX_GPIO_Init+0xd8>)
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	f003 0320 	and.w	r3, r3, #32
 8005b14:	60bb      	str	r3, [r7, #8]
 8005b16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b18:	4b24      	ldr	r3, [pc, #144]	; (8005bac <MX_GPIO_Init+0xd8>)
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	4a23      	ldr	r2, [pc, #140]	; (8005bac <MX_GPIO_Init+0xd8>)
 8005b1e:	f043 0304 	orr.w	r3, r3, #4
 8005b22:	6193      	str	r3, [r2, #24]
 8005b24:	4b21      	ldr	r3, [pc, #132]	; (8005bac <MX_GPIO_Init+0xd8>)
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	607b      	str	r3, [r7, #4]
 8005b2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b30:	4b1e      	ldr	r3, [pc, #120]	; (8005bac <MX_GPIO_Init+0xd8>)
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	4a1d      	ldr	r2, [pc, #116]	; (8005bac <MX_GPIO_Init+0xd8>)
 8005b36:	f043 0308 	orr.w	r3, r3, #8
 8005b3a:	6193      	str	r3, [r2, #24]
 8005b3c:	4b1b      	ldr	r3, [pc, #108]	; (8005bac <MX_GPIO_Init+0xd8>)
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	603b      	str	r3, [r7, #0]
 8005b46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b4e:	4818      	ldr	r0, [pc, #96]	; (8005bb0 <MX_GPIO_Init+0xdc>)
 8005b50:	f7fb fb5b 	bl	800120a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8005b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b62:	2302      	movs	r3, #2
 8005b64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8005b66:	f107 0310 	add.w	r3, r7, #16
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	4810      	ldr	r0, [pc, #64]	; (8005bb0 <MX_GPIO_Init+0xdc>)
 8005b6e:	f7fb f9db 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_UP_Pin BP_DOWN_Pin */
  GPIO_InitStruct.Pin = BP_UP_Pin|BP_DOWN_Pin;
 8005b72:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b80:	f107 0310 	add.w	r3, r7, #16
 8005b84:	4619      	mov	r1, r3
 8005b86:	480a      	ldr	r0, [pc, #40]	; (8005bb0 <MX_GPIO_Init+0xdc>)
 8005b88:	f7fb f9ce 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : BP_OK_Pin */
  GPIO_InitStruct.Pin = BP_OK_Pin;
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b90:	2300      	movs	r3, #0
 8005b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b94:	2300      	movs	r3, #0
 8005b96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BP_OK_GPIO_Port, &GPIO_InitStruct);
 8005b98:	f107 0310 	add.w	r3, r7, #16
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	4805      	ldr	r0, [pc, #20]	; (8005bb4 <MX_GPIO_Init+0xe0>)
 8005ba0:	f7fb f9c2 	bl	8000f28 <HAL_GPIO_Init>

}
 8005ba4:	bf00      	nop
 8005ba6:	3720      	adds	r7, #32
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	40011000 	.word	0x40011000
 8005bb4:	40010c00 	.word	0x40010c00

08005bb8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
	Protocol_DMX_UartCallback(huart);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7fd fff5 	bl	8003bb0 <Protocol_DMX_UartCallback>
}
 8005bc6:	bf00      	nop
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 8005bd6:	f242 7010 	movw	r0, #10000	; 0x2710
 8005bda:	f7fe f8c0 	bl	8003d5e <osDelay>
 8005bde:	e7fa      	b.n	8005bd6 <StartDefaultTask+0x8>

08005be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005be4:	bf00      	nop
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bc80      	pop	{r7}
 8005bea:	4770      	bx	lr

08005bec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005bf2:	4b18      	ldr	r3, [pc, #96]	; (8005c54 <HAL_MspInit+0x68>)
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	4a17      	ldr	r2, [pc, #92]	; (8005c54 <HAL_MspInit+0x68>)
 8005bf8:	f043 0301 	orr.w	r3, r3, #1
 8005bfc:	6193      	str	r3, [r2, #24]
 8005bfe:	4b15      	ldr	r3, [pc, #84]	; (8005c54 <HAL_MspInit+0x68>)
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	60bb      	str	r3, [r7, #8]
 8005c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c0a:	4b12      	ldr	r3, [pc, #72]	; (8005c54 <HAL_MspInit+0x68>)
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	4a11      	ldr	r2, [pc, #68]	; (8005c54 <HAL_MspInit+0x68>)
 8005c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c14:	61d3      	str	r3, [r2, #28]
 8005c16:	4b0f      	ldr	r3, [pc, #60]	; (8005c54 <HAL_MspInit+0x68>)
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1e:	607b      	str	r3, [r7, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005c22:	2200      	movs	r2, #0
 8005c24:	210f      	movs	r1, #15
 8005c26:	f06f 0001 	mvn.w	r0, #1
 8005c2a:	f7fa fed0 	bl	80009ce <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005c2e:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <HAL_MspInit+0x6c>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	4a04      	ldr	r2, [pc, #16]	; (8005c58 <HAL_MspInit+0x6c>)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c4a:	bf00      	nop
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	40021000 	.word	0x40021000
 8005c58:	40010000 	.word	0x40010000

08005c5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c64:	f107 0310 	add.w	r3, r7, #16
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	605a      	str	r2, [r3, #4]
 8005c6e:	609a      	str	r2, [r3, #8]
 8005c70:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a15      	ldr	r2, [pc, #84]	; (8005ccc <HAL_I2C_MspInit+0x70>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d123      	bne.n	8005cc4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c7c:	4b14      	ldr	r3, [pc, #80]	; (8005cd0 <HAL_I2C_MspInit+0x74>)
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	4a13      	ldr	r2, [pc, #76]	; (8005cd0 <HAL_I2C_MspInit+0x74>)
 8005c82:	f043 0308 	orr.w	r3, r3, #8
 8005c86:	6193      	str	r3, [r2, #24]
 8005c88:	4b11      	ldr	r3, [pc, #68]	; (8005cd0 <HAL_I2C_MspInit+0x74>)
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	f003 0308 	and.w	r3, r3, #8
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005c94:	23c0      	movs	r3, #192	; 0xc0
 8005c96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c98:	2312      	movs	r3, #18
 8005c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ca0:	f107 0310 	add.w	r3, r7, #16
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	480b      	ldr	r0, [pc, #44]	; (8005cd4 <HAL_I2C_MspInit+0x78>)
 8005ca8:	f7fb f93e 	bl	8000f28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005cac:	4b08      	ldr	r3, [pc, #32]	; (8005cd0 <HAL_I2C_MspInit+0x74>)
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	4a07      	ldr	r2, [pc, #28]	; (8005cd0 <HAL_I2C_MspInit+0x74>)
 8005cb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005cb6:	61d3      	str	r3, [r2, #28]
 8005cb8:	4b05      	ldr	r3, [pc, #20]	; (8005cd0 <HAL_I2C_MspInit+0x74>)
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cc0:	60bb      	str	r3, [r7, #8]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005cc4:	bf00      	nop
 8005cc6:	3720      	adds	r7, #32
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	40005400 	.word	0x40005400
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	40010c00 	.word	0x40010c00

08005cd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce8:	d10c      	bne.n	8005d04 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005cea:	4b15      	ldr	r3, [pc, #84]	; (8005d40 <HAL_TIM_Base_MspInit+0x68>)
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	4a14      	ldr	r2, [pc, #80]	; (8005d40 <HAL_TIM_Base_MspInit+0x68>)
 8005cf0:	f043 0301 	orr.w	r3, r3, #1
 8005cf4:	61d3      	str	r3, [r2, #28]
 8005cf6:	4b12      	ldr	r3, [pc, #72]	; (8005d40 <HAL_TIM_Base_MspInit+0x68>)
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005d02:	e018      	b.n	8005d36 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a0e      	ldr	r2, [pc, #56]	; (8005d44 <HAL_TIM_Base_MspInit+0x6c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d113      	bne.n	8005d36 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d0e:	4b0c      	ldr	r3, [pc, #48]	; (8005d40 <HAL_TIM_Base_MspInit+0x68>)
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	4a0b      	ldr	r2, [pc, #44]	; (8005d40 <HAL_TIM_Base_MspInit+0x68>)
 8005d14:	f043 0302 	orr.w	r3, r3, #2
 8005d18:	61d3      	str	r3, [r2, #28]
 8005d1a:	4b09      	ldr	r3, [pc, #36]	; (8005d40 <HAL_TIM_Base_MspInit+0x68>)
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	60bb      	str	r3, [r7, #8]
 8005d24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005d26:	2200      	movs	r2, #0
 8005d28:	2105      	movs	r1, #5
 8005d2a:	201d      	movs	r0, #29
 8005d2c:	f7fa fe4f 	bl	80009ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005d30:	201d      	movs	r0, #29
 8005d32:	f7fa fe68 	bl	8000a06 <HAL_NVIC_EnableIRQ>
}
 8005d36:	bf00      	nop
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	40021000 	.word	0x40021000
 8005d44:	40000400 	.word	0x40000400

08005d48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08a      	sub	sp, #40	; 0x28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d50:	f107 0314 	add.w	r3, r7, #20
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	605a      	str	r2, [r3, #4]
 8005d5a:	609a      	str	r2, [r3, #8]
 8005d5c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d66:	d142      	bne.n	8005dee <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d68:	4b23      	ldr	r3, [pc, #140]	; (8005df8 <HAL_TIM_MspPostInit+0xb0>)
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	4a22      	ldr	r2, [pc, #136]	; (8005df8 <HAL_TIM_MspPostInit+0xb0>)
 8005d6e:	f043 0304 	orr.w	r3, r3, #4
 8005d72:	6193      	str	r3, [r2, #24]
 8005d74:	4b20      	ldr	r3, [pc, #128]	; (8005df8 <HAL_TIM_MspPostInit+0xb0>)
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	613b      	str	r3, [r7, #16]
 8005d7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d80:	4b1d      	ldr	r3, [pc, #116]	; (8005df8 <HAL_TIM_MspPostInit+0xb0>)
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	4a1c      	ldr	r2, [pc, #112]	; (8005df8 <HAL_TIM_MspPostInit+0xb0>)
 8005d86:	f043 0308 	orr.w	r3, r3, #8
 8005d8a:	6193      	str	r3, [r2, #24]
 8005d8c:	4b1a      	ldr	r3, [pc, #104]	; (8005df8 <HAL_TIM_MspPostInit+0xb0>)
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = PWM_LED_Pin|GPIO_PIN_1;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005da0:	2302      	movs	r3, #2
 8005da2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005da4:	f107 0314 	add.w	r3, r7, #20
 8005da8:	4619      	mov	r1, r3
 8005daa:	4814      	ldr	r0, [pc, #80]	; (8005dfc <HAL_TIM_MspPostInit+0xb4>)
 8005dac:	f7fb f8bc 	bl	8000f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005db0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005db6:	2302      	movs	r3, #2
 8005db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dba:	2302      	movs	r3, #2
 8005dbc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dbe:	f107 0314 	add.w	r3, r7, #20
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	480e      	ldr	r0, [pc, #56]	; (8005e00 <HAL_TIM_MspPostInit+0xb8>)
 8005dc6:	f7fb f8af 	bl	8000f28 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8005dca:	4b0e      	ldr	r3, [pc, #56]	; (8005e04 <HAL_TIM_MspPostInit+0xbc>)
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005dde:	627b      	str	r3, [r7, #36]	; 0x24
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
 8005de8:	4a06      	ldr	r2, [pc, #24]	; (8005e04 <HAL_TIM_MspPostInit+0xbc>)
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005dee:	bf00      	nop
 8005df0:	3728      	adds	r7, #40	; 0x28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	40021000 	.word	0x40021000
 8005dfc:	40010800 	.word	0x40010800
 8005e00:	40010c00 	.word	0x40010c00
 8005e04:	40010000 	.word	0x40010000

08005e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08a      	sub	sp, #40	; 0x28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e10:	f107 0318 	add.w	r3, r7, #24
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	605a      	str	r2, [r3, #4]
 8005e1a:	609a      	str	r2, [r3, #8]
 8005e1c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a3b      	ldr	r2, [pc, #236]	; (8005f10 <HAL_UART_MspInit+0x108>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d132      	bne.n	8005e8e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005e28:	4b3a      	ldr	r3, [pc, #232]	; (8005f14 <HAL_UART_MspInit+0x10c>)
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	4a39      	ldr	r2, [pc, #228]	; (8005f14 <HAL_UART_MspInit+0x10c>)
 8005e2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e32:	6193      	str	r3, [r2, #24]
 8005e34:	4b37      	ldr	r3, [pc, #220]	; (8005f14 <HAL_UART_MspInit+0x10c>)
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e40:	4b34      	ldr	r3, [pc, #208]	; (8005f14 <HAL_UART_MspInit+0x10c>)
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	4a33      	ldr	r2, [pc, #204]	; (8005f14 <HAL_UART_MspInit+0x10c>)
 8005e46:	f043 0304 	orr.w	r3, r3, #4
 8005e4a:	6193      	str	r3, [r2, #24]
 8005e4c:	4b31      	ldr	r3, [pc, #196]	; (8005f14 <HAL_UART_MspInit+0x10c>)
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	613b      	str	r3, [r7, #16]
 8005e56:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_DUBUG_Pin;
 8005e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e5e:	2302      	movs	r3, #2
 8005e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e62:	2303      	movs	r3, #3
 8005e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USART_TX_DUBUG_GPIO_Port, &GPIO_InitStruct);
 8005e66:	f107 0318 	add.w	r3, r7, #24
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	482a      	ldr	r0, [pc, #168]	; (8005f18 <HAL_UART_MspInit+0x110>)
 8005e6e:	f7fb f85b 	bl	8000f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_DUBUG_Pin;
 8005e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(USART_RX_DUBUG_GPIO_Port, &GPIO_InitStruct);
 8005e80:	f107 0318 	add.w	r3, r7, #24
 8005e84:	4619      	mov	r1, r3
 8005e86:	4824      	ldr	r0, [pc, #144]	; (8005f18 <HAL_UART_MspInit+0x110>)
 8005e88:	f7fb f84e 	bl	8000f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005e8c:	e03c      	b.n	8005f08 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a22      	ldr	r2, [pc, #136]	; (8005f1c <HAL_UART_MspInit+0x114>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d137      	bne.n	8005f08 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005e98:	4b1e      	ldr	r3, [pc, #120]	; (8005f14 <HAL_UART_MspInit+0x10c>)
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	4a1d      	ldr	r2, [pc, #116]	; (8005f14 <HAL_UART_MspInit+0x10c>)
 8005e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ea2:	61d3      	str	r3, [r2, #28]
 8005ea4:	4b1b      	ldr	r3, [pc, #108]	; (8005f14 <HAL_UART_MspInit+0x10c>)
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005eb0:	4b18      	ldr	r3, [pc, #96]	; (8005f14 <HAL_UART_MspInit+0x10c>)
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	4a17      	ldr	r2, [pc, #92]	; (8005f14 <HAL_UART_MspInit+0x10c>)
 8005eb6:	f043 0304 	orr.w	r3, r3, #4
 8005eba:	6193      	str	r3, [r2, #24]
 8005ebc:	4b15      	ldr	r3, [pc, #84]	; (8005f14 <HAL_UART_MspInit+0x10c>)
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	60bb      	str	r3, [r7, #8]
 8005ec6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005ec8:	2304      	movs	r3, #4
 8005eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ecc:	2302      	movs	r3, #2
 8005ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ed4:	f107 0318 	add.w	r3, r7, #24
 8005ed8:	4619      	mov	r1, r3
 8005eda:	480f      	ldr	r0, [pc, #60]	; (8005f18 <HAL_UART_MspInit+0x110>)
 8005edc:	f7fb f824 	bl	8000f28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DMX_IN_Pin;
 8005ee0:	2308      	movs	r3, #8
 8005ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(DMX_IN_GPIO_Port, &GPIO_InitStruct);
 8005eec:	f107 0318 	add.w	r3, r7, #24
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4809      	ldr	r0, [pc, #36]	; (8005f18 <HAL_UART_MspInit+0x110>)
 8005ef4:	f7fb f818 	bl	8000f28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005ef8:	2200      	movs	r2, #0
 8005efa:	2105      	movs	r1, #5
 8005efc:	2026      	movs	r0, #38	; 0x26
 8005efe:	f7fa fd66 	bl	80009ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005f02:	2026      	movs	r0, #38	; 0x26
 8005f04:	f7fa fd7f 	bl	8000a06 <HAL_NVIC_EnableIRQ>
}
 8005f08:	bf00      	nop
 8005f0a:	3728      	adds	r7, #40	; 0x28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40013800 	.word	0x40013800
 8005f14:	40021000 	.word	0x40021000
 8005f18:	40010800 	.word	0x40010800
 8005f1c:	40004400 	.word	0x40004400

08005f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005f24:	bf00      	nop
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bc80      	pop	{r7}
 8005f2a:	4770      	bx	lr

08005f2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f30:	e7fe      	b.n	8005f30 <HardFault_Handler+0x4>

08005f32 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005f32:	b480      	push	{r7}
 8005f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005f36:	e7fe      	b.n	8005f36 <MemManage_Handler+0x4>

08005f38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005f3c:	e7fe      	b.n	8005f3c <BusFault_Handler+0x4>

08005f3e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f42:	e7fe      	b.n	8005f42 <UsageFault_Handler+0x4>

08005f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f48:	bf00      	nop
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr

08005f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f54:	f7fa fc48 	bl	80007e8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005f58:	f7fe fbe0 	bl	800471c <xTaskGetSchedulerState>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d001      	beq.n	8005f66 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8005f62:	f7fe fdc1 	bl	8004ae8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f66:	bf00      	nop
 8005f68:	bd80      	pop	{r7, pc}
	...

08005f6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005f70:	4802      	ldr	r0, [pc, #8]	; (8005f7c <TIM3_IRQHandler+0x10>)
 8005f72:	f7fc fba1 	bl	80026b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005f76:	bf00      	nop
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	200016e0 	.word	0x200016e0

08005f80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005f84:	4802      	ldr	r0, [pc, #8]	; (8005f90 <USART2_IRQHandler+0x10>)
 8005f86:	f7fd f9e5 	bl	8003354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005f8a:	bf00      	nop
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	200017a0 	.word	0x200017a0

08005f94 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005f9c:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <_sbrk+0x50>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d102      	bne.n	8005faa <_sbrk+0x16>
		heap_end = &end;
 8005fa4:	4b0f      	ldr	r3, [pc, #60]	; (8005fe4 <_sbrk+0x50>)
 8005fa6:	4a10      	ldr	r2, [pc, #64]	; (8005fe8 <_sbrk+0x54>)
 8005fa8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005faa:	4b0e      	ldr	r3, [pc, #56]	; (8005fe4 <_sbrk+0x50>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005fb0:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <_sbrk+0x50>)
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	466a      	mov	r2, sp
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d907      	bls.n	8005fce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005fbe:	f000 f86f 	bl	80060a0 <__errno>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	230c      	movs	r3, #12
 8005fc6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fcc:	e006      	b.n	8005fdc <_sbrk+0x48>
	}

	heap_end += incr;
 8005fce:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <_sbrk+0x50>)
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	4a03      	ldr	r2, [pc, #12]	; (8005fe4 <_sbrk+0x50>)
 8005fd8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005fda:	68fb      	ldr	r3, [r7, #12]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	2000120c 	.word	0x2000120c
 8005fe8:	200017e8 	.word	0x200017e8

08005fec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005ff0:	4b15      	ldr	r3, [pc, #84]	; (8006048 <SystemInit+0x5c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a14      	ldr	r2, [pc, #80]	; (8006048 <SystemInit+0x5c>)
 8005ff6:	f043 0301 	orr.w	r3, r3, #1
 8005ffa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005ffc:	4b12      	ldr	r3, [pc, #72]	; (8006048 <SystemInit+0x5c>)
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	4911      	ldr	r1, [pc, #68]	; (8006048 <SystemInit+0x5c>)
 8006002:	4b12      	ldr	r3, [pc, #72]	; (800604c <SystemInit+0x60>)
 8006004:	4013      	ands	r3, r2
 8006006:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006008:	4b0f      	ldr	r3, [pc, #60]	; (8006048 <SystemInit+0x5c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a0e      	ldr	r2, [pc, #56]	; (8006048 <SystemInit+0x5c>)
 800600e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006016:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006018:	4b0b      	ldr	r3, [pc, #44]	; (8006048 <SystemInit+0x5c>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a0a      	ldr	r2, [pc, #40]	; (8006048 <SystemInit+0x5c>)
 800601e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006022:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006024:	4b08      	ldr	r3, [pc, #32]	; (8006048 <SystemInit+0x5c>)
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	4a07      	ldr	r2, [pc, #28]	; (8006048 <SystemInit+0x5c>)
 800602a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800602e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006030:	4b05      	ldr	r3, [pc, #20]	; (8006048 <SystemInit+0x5c>)
 8006032:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006036:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006038:	4b05      	ldr	r3, [pc, #20]	; (8006050 <SystemInit+0x64>)
 800603a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800603e:	609a      	str	r2, [r3, #8]
#endif 
}
 8006040:	bf00      	nop
 8006042:	46bd      	mov	sp, r7
 8006044:	bc80      	pop	{r7}
 8006046:	4770      	bx	lr
 8006048:	40021000 	.word	0x40021000
 800604c:	f8ff0000 	.word	0xf8ff0000
 8006050:	e000ed00 	.word	0xe000ed00

08006054 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006054:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006056:	e003      	b.n	8006060 <LoopCopyDataInit>

08006058 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006058:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800605a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800605c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800605e:	3104      	adds	r1, #4

08006060 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006060:	480a      	ldr	r0, [pc, #40]	; (800608c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006062:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006064:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006066:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006068:	d3f6      	bcc.n	8006058 <CopyDataInit>
  ldr r2, =_sbss
 800606a:	4a0a      	ldr	r2, [pc, #40]	; (8006094 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800606c:	e002      	b.n	8006074 <LoopFillZerobss>

0800606e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800606e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006070:	f842 3b04 	str.w	r3, [r2], #4

08006074 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006074:	4b08      	ldr	r3, [pc, #32]	; (8006098 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006076:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006078:	d3f9      	bcc.n	800606e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800607a:	f7ff ffb7 	bl	8005fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800607e:	f000 f815 	bl	80060ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006082:	f7ff fb3f 	bl	8005704 <main>
  bx lr
 8006086:	4770      	bx	lr
  ldr r3, =_sidata
 8006088:	08009274 	.word	0x08009274
  ldr r0, =_sdata
 800608c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006090:	2000008c 	.word	0x2000008c
  ldr r2, =_sbss
 8006094:	20000090 	.word	0x20000090
  ldr r3, = _ebss
 8006098:	200017e4 	.word	0x200017e4

0800609c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800609c:	e7fe      	b.n	800609c <ADC1_2_IRQHandler>
	...

080060a0 <__errno>:
 80060a0:	4b01      	ldr	r3, [pc, #4]	; (80060a8 <__errno+0x8>)
 80060a2:	6818      	ldr	r0, [r3, #0]
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	20000028 	.word	0x20000028

080060ac <__libc_init_array>:
 80060ac:	b570      	push	{r4, r5, r6, lr}
 80060ae:	2500      	movs	r5, #0
 80060b0:	4e0c      	ldr	r6, [pc, #48]	; (80060e4 <__libc_init_array+0x38>)
 80060b2:	4c0d      	ldr	r4, [pc, #52]	; (80060e8 <__libc_init_array+0x3c>)
 80060b4:	1ba4      	subs	r4, r4, r6
 80060b6:	10a4      	asrs	r4, r4, #2
 80060b8:	42a5      	cmp	r5, r4
 80060ba:	d109      	bne.n	80060d0 <__libc_init_array+0x24>
 80060bc:	f000 fc36 	bl	800692c <_init>
 80060c0:	2500      	movs	r5, #0
 80060c2:	4e0a      	ldr	r6, [pc, #40]	; (80060ec <__libc_init_array+0x40>)
 80060c4:	4c0a      	ldr	r4, [pc, #40]	; (80060f0 <__libc_init_array+0x44>)
 80060c6:	1ba4      	subs	r4, r4, r6
 80060c8:	10a4      	asrs	r4, r4, #2
 80060ca:	42a5      	cmp	r5, r4
 80060cc:	d105      	bne.n	80060da <__libc_init_array+0x2e>
 80060ce:	bd70      	pop	{r4, r5, r6, pc}
 80060d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060d4:	4798      	blx	r3
 80060d6:	3501      	adds	r5, #1
 80060d8:	e7ee      	b.n	80060b8 <__libc_init_array+0xc>
 80060da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060de:	4798      	blx	r3
 80060e0:	3501      	adds	r5, #1
 80060e2:	e7f2      	b.n	80060ca <__libc_init_array+0x1e>
 80060e4:	0800926c 	.word	0x0800926c
 80060e8:	0800926c 	.word	0x0800926c
 80060ec:	0800926c 	.word	0x0800926c
 80060f0:	08009270 	.word	0x08009270

080060f4 <memcpy>:
 80060f4:	b510      	push	{r4, lr}
 80060f6:	1e43      	subs	r3, r0, #1
 80060f8:	440a      	add	r2, r1
 80060fa:	4291      	cmp	r1, r2
 80060fc:	d100      	bne.n	8006100 <memcpy+0xc>
 80060fe:	bd10      	pop	{r4, pc}
 8006100:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006104:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006108:	e7f7      	b.n	80060fa <memcpy+0x6>

0800610a <memset>:
 800610a:	4603      	mov	r3, r0
 800610c:	4402      	add	r2, r0
 800610e:	4293      	cmp	r3, r2
 8006110:	d100      	bne.n	8006114 <memset+0xa>
 8006112:	4770      	bx	lr
 8006114:	f803 1b01 	strb.w	r1, [r3], #1
 8006118:	e7f9      	b.n	800610e <memset+0x4>
	...

0800611c <siprintf>:
 800611c:	b40e      	push	{r1, r2, r3}
 800611e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006122:	b500      	push	{lr}
 8006124:	b09c      	sub	sp, #112	; 0x70
 8006126:	ab1d      	add	r3, sp, #116	; 0x74
 8006128:	9002      	str	r0, [sp, #8]
 800612a:	9006      	str	r0, [sp, #24]
 800612c:	9107      	str	r1, [sp, #28]
 800612e:	9104      	str	r1, [sp, #16]
 8006130:	4808      	ldr	r0, [pc, #32]	; (8006154 <siprintf+0x38>)
 8006132:	4909      	ldr	r1, [pc, #36]	; (8006158 <siprintf+0x3c>)
 8006134:	f853 2b04 	ldr.w	r2, [r3], #4
 8006138:	9105      	str	r1, [sp, #20]
 800613a:	6800      	ldr	r0, [r0, #0]
 800613c:	a902      	add	r1, sp, #8
 800613e:	9301      	str	r3, [sp, #4]
 8006140:	f000 f866 	bl	8006210 <_svfiprintf_r>
 8006144:	2200      	movs	r2, #0
 8006146:	9b02      	ldr	r3, [sp, #8]
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	b01c      	add	sp, #112	; 0x70
 800614c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006150:	b003      	add	sp, #12
 8006152:	4770      	bx	lr
 8006154:	20000028 	.word	0x20000028
 8006158:	ffff0208 	.word	0xffff0208

0800615c <__ssputs_r>:
 800615c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006160:	688e      	ldr	r6, [r1, #8]
 8006162:	4682      	mov	sl, r0
 8006164:	429e      	cmp	r6, r3
 8006166:	460c      	mov	r4, r1
 8006168:	4690      	mov	r8, r2
 800616a:	4699      	mov	r9, r3
 800616c:	d837      	bhi.n	80061de <__ssputs_r+0x82>
 800616e:	898a      	ldrh	r2, [r1, #12]
 8006170:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006174:	d031      	beq.n	80061da <__ssputs_r+0x7e>
 8006176:	2302      	movs	r3, #2
 8006178:	6825      	ldr	r5, [r4, #0]
 800617a:	6909      	ldr	r1, [r1, #16]
 800617c:	1a6f      	subs	r7, r5, r1
 800617e:	6965      	ldr	r5, [r4, #20]
 8006180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006184:	fb95 f5f3 	sdiv	r5, r5, r3
 8006188:	f109 0301 	add.w	r3, r9, #1
 800618c:	443b      	add	r3, r7
 800618e:	429d      	cmp	r5, r3
 8006190:	bf38      	it	cc
 8006192:	461d      	movcc	r5, r3
 8006194:	0553      	lsls	r3, r2, #21
 8006196:	d530      	bpl.n	80061fa <__ssputs_r+0x9e>
 8006198:	4629      	mov	r1, r5
 800619a:	f000 fb2d 	bl	80067f8 <_malloc_r>
 800619e:	4606      	mov	r6, r0
 80061a0:	b950      	cbnz	r0, 80061b8 <__ssputs_r+0x5c>
 80061a2:	230c      	movs	r3, #12
 80061a4:	f04f 30ff 	mov.w	r0, #4294967295
 80061a8:	f8ca 3000 	str.w	r3, [sl]
 80061ac:	89a3      	ldrh	r3, [r4, #12]
 80061ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061b2:	81a3      	strh	r3, [r4, #12]
 80061b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b8:	463a      	mov	r2, r7
 80061ba:	6921      	ldr	r1, [r4, #16]
 80061bc:	f7ff ff9a 	bl	80060f4 <memcpy>
 80061c0:	89a3      	ldrh	r3, [r4, #12]
 80061c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ca:	81a3      	strh	r3, [r4, #12]
 80061cc:	6126      	str	r6, [r4, #16]
 80061ce:	443e      	add	r6, r7
 80061d0:	6026      	str	r6, [r4, #0]
 80061d2:	464e      	mov	r6, r9
 80061d4:	6165      	str	r5, [r4, #20]
 80061d6:	1bed      	subs	r5, r5, r7
 80061d8:	60a5      	str	r5, [r4, #8]
 80061da:	454e      	cmp	r6, r9
 80061dc:	d900      	bls.n	80061e0 <__ssputs_r+0x84>
 80061de:	464e      	mov	r6, r9
 80061e0:	4632      	mov	r2, r6
 80061e2:	4641      	mov	r1, r8
 80061e4:	6820      	ldr	r0, [r4, #0]
 80061e6:	f000 faa1 	bl	800672c <memmove>
 80061ea:	68a3      	ldr	r3, [r4, #8]
 80061ec:	2000      	movs	r0, #0
 80061ee:	1b9b      	subs	r3, r3, r6
 80061f0:	60a3      	str	r3, [r4, #8]
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	441e      	add	r6, r3
 80061f6:	6026      	str	r6, [r4, #0]
 80061f8:	e7dc      	b.n	80061b4 <__ssputs_r+0x58>
 80061fa:	462a      	mov	r2, r5
 80061fc:	f000 fb56 	bl	80068ac <_realloc_r>
 8006200:	4606      	mov	r6, r0
 8006202:	2800      	cmp	r0, #0
 8006204:	d1e2      	bne.n	80061cc <__ssputs_r+0x70>
 8006206:	6921      	ldr	r1, [r4, #16]
 8006208:	4650      	mov	r0, sl
 800620a:	f000 faa9 	bl	8006760 <_free_r>
 800620e:	e7c8      	b.n	80061a2 <__ssputs_r+0x46>

08006210 <_svfiprintf_r>:
 8006210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006214:	461d      	mov	r5, r3
 8006216:	898b      	ldrh	r3, [r1, #12]
 8006218:	b09d      	sub	sp, #116	; 0x74
 800621a:	061f      	lsls	r7, r3, #24
 800621c:	4680      	mov	r8, r0
 800621e:	460c      	mov	r4, r1
 8006220:	4616      	mov	r6, r2
 8006222:	d50f      	bpl.n	8006244 <_svfiprintf_r+0x34>
 8006224:	690b      	ldr	r3, [r1, #16]
 8006226:	b96b      	cbnz	r3, 8006244 <_svfiprintf_r+0x34>
 8006228:	2140      	movs	r1, #64	; 0x40
 800622a:	f000 fae5 	bl	80067f8 <_malloc_r>
 800622e:	6020      	str	r0, [r4, #0]
 8006230:	6120      	str	r0, [r4, #16]
 8006232:	b928      	cbnz	r0, 8006240 <_svfiprintf_r+0x30>
 8006234:	230c      	movs	r3, #12
 8006236:	f8c8 3000 	str.w	r3, [r8]
 800623a:	f04f 30ff 	mov.w	r0, #4294967295
 800623e:	e0c8      	b.n	80063d2 <_svfiprintf_r+0x1c2>
 8006240:	2340      	movs	r3, #64	; 0x40
 8006242:	6163      	str	r3, [r4, #20]
 8006244:	2300      	movs	r3, #0
 8006246:	9309      	str	r3, [sp, #36]	; 0x24
 8006248:	2320      	movs	r3, #32
 800624a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800624e:	2330      	movs	r3, #48	; 0x30
 8006250:	f04f 0b01 	mov.w	fp, #1
 8006254:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006258:	9503      	str	r5, [sp, #12]
 800625a:	4637      	mov	r7, r6
 800625c:	463d      	mov	r5, r7
 800625e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006262:	b10b      	cbz	r3, 8006268 <_svfiprintf_r+0x58>
 8006264:	2b25      	cmp	r3, #37	; 0x25
 8006266:	d13e      	bne.n	80062e6 <_svfiprintf_r+0xd6>
 8006268:	ebb7 0a06 	subs.w	sl, r7, r6
 800626c:	d00b      	beq.n	8006286 <_svfiprintf_r+0x76>
 800626e:	4653      	mov	r3, sl
 8006270:	4632      	mov	r2, r6
 8006272:	4621      	mov	r1, r4
 8006274:	4640      	mov	r0, r8
 8006276:	f7ff ff71 	bl	800615c <__ssputs_r>
 800627a:	3001      	adds	r0, #1
 800627c:	f000 80a4 	beq.w	80063c8 <_svfiprintf_r+0x1b8>
 8006280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006282:	4453      	add	r3, sl
 8006284:	9309      	str	r3, [sp, #36]	; 0x24
 8006286:	783b      	ldrb	r3, [r7, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 809d 	beq.w	80063c8 <_svfiprintf_r+0x1b8>
 800628e:	2300      	movs	r3, #0
 8006290:	f04f 32ff 	mov.w	r2, #4294967295
 8006294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006298:	9304      	str	r3, [sp, #16]
 800629a:	9307      	str	r3, [sp, #28]
 800629c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062a0:	931a      	str	r3, [sp, #104]	; 0x68
 80062a2:	462f      	mov	r7, r5
 80062a4:	2205      	movs	r2, #5
 80062a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80062aa:	4850      	ldr	r0, [pc, #320]	; (80063ec <_svfiprintf_r+0x1dc>)
 80062ac:	f000 fa30 	bl	8006710 <memchr>
 80062b0:	9b04      	ldr	r3, [sp, #16]
 80062b2:	b9d0      	cbnz	r0, 80062ea <_svfiprintf_r+0xda>
 80062b4:	06d9      	lsls	r1, r3, #27
 80062b6:	bf44      	itt	mi
 80062b8:	2220      	movmi	r2, #32
 80062ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80062be:	071a      	lsls	r2, r3, #28
 80062c0:	bf44      	itt	mi
 80062c2:	222b      	movmi	r2, #43	; 0x2b
 80062c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80062c8:	782a      	ldrb	r2, [r5, #0]
 80062ca:	2a2a      	cmp	r2, #42	; 0x2a
 80062cc:	d015      	beq.n	80062fa <_svfiprintf_r+0xea>
 80062ce:	462f      	mov	r7, r5
 80062d0:	2000      	movs	r0, #0
 80062d2:	250a      	movs	r5, #10
 80062d4:	9a07      	ldr	r2, [sp, #28]
 80062d6:	4639      	mov	r1, r7
 80062d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062dc:	3b30      	subs	r3, #48	; 0x30
 80062de:	2b09      	cmp	r3, #9
 80062e0:	d94d      	bls.n	800637e <_svfiprintf_r+0x16e>
 80062e2:	b1b8      	cbz	r0, 8006314 <_svfiprintf_r+0x104>
 80062e4:	e00f      	b.n	8006306 <_svfiprintf_r+0xf6>
 80062e6:	462f      	mov	r7, r5
 80062e8:	e7b8      	b.n	800625c <_svfiprintf_r+0x4c>
 80062ea:	4a40      	ldr	r2, [pc, #256]	; (80063ec <_svfiprintf_r+0x1dc>)
 80062ec:	463d      	mov	r5, r7
 80062ee:	1a80      	subs	r0, r0, r2
 80062f0:	fa0b f000 	lsl.w	r0, fp, r0
 80062f4:	4318      	orrs	r0, r3
 80062f6:	9004      	str	r0, [sp, #16]
 80062f8:	e7d3      	b.n	80062a2 <_svfiprintf_r+0x92>
 80062fa:	9a03      	ldr	r2, [sp, #12]
 80062fc:	1d11      	adds	r1, r2, #4
 80062fe:	6812      	ldr	r2, [r2, #0]
 8006300:	9103      	str	r1, [sp, #12]
 8006302:	2a00      	cmp	r2, #0
 8006304:	db01      	blt.n	800630a <_svfiprintf_r+0xfa>
 8006306:	9207      	str	r2, [sp, #28]
 8006308:	e004      	b.n	8006314 <_svfiprintf_r+0x104>
 800630a:	4252      	negs	r2, r2
 800630c:	f043 0302 	orr.w	r3, r3, #2
 8006310:	9207      	str	r2, [sp, #28]
 8006312:	9304      	str	r3, [sp, #16]
 8006314:	783b      	ldrb	r3, [r7, #0]
 8006316:	2b2e      	cmp	r3, #46	; 0x2e
 8006318:	d10c      	bne.n	8006334 <_svfiprintf_r+0x124>
 800631a:	787b      	ldrb	r3, [r7, #1]
 800631c:	2b2a      	cmp	r3, #42	; 0x2a
 800631e:	d133      	bne.n	8006388 <_svfiprintf_r+0x178>
 8006320:	9b03      	ldr	r3, [sp, #12]
 8006322:	3702      	adds	r7, #2
 8006324:	1d1a      	adds	r2, r3, #4
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	9203      	str	r2, [sp, #12]
 800632a:	2b00      	cmp	r3, #0
 800632c:	bfb8      	it	lt
 800632e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006332:	9305      	str	r3, [sp, #20]
 8006334:	4d2e      	ldr	r5, [pc, #184]	; (80063f0 <_svfiprintf_r+0x1e0>)
 8006336:	2203      	movs	r2, #3
 8006338:	7839      	ldrb	r1, [r7, #0]
 800633a:	4628      	mov	r0, r5
 800633c:	f000 f9e8 	bl	8006710 <memchr>
 8006340:	b138      	cbz	r0, 8006352 <_svfiprintf_r+0x142>
 8006342:	2340      	movs	r3, #64	; 0x40
 8006344:	1b40      	subs	r0, r0, r5
 8006346:	fa03 f000 	lsl.w	r0, r3, r0
 800634a:	9b04      	ldr	r3, [sp, #16]
 800634c:	3701      	adds	r7, #1
 800634e:	4303      	orrs	r3, r0
 8006350:	9304      	str	r3, [sp, #16]
 8006352:	7839      	ldrb	r1, [r7, #0]
 8006354:	2206      	movs	r2, #6
 8006356:	4827      	ldr	r0, [pc, #156]	; (80063f4 <_svfiprintf_r+0x1e4>)
 8006358:	1c7e      	adds	r6, r7, #1
 800635a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800635e:	f000 f9d7 	bl	8006710 <memchr>
 8006362:	2800      	cmp	r0, #0
 8006364:	d038      	beq.n	80063d8 <_svfiprintf_r+0x1c8>
 8006366:	4b24      	ldr	r3, [pc, #144]	; (80063f8 <_svfiprintf_r+0x1e8>)
 8006368:	bb13      	cbnz	r3, 80063b0 <_svfiprintf_r+0x1a0>
 800636a:	9b03      	ldr	r3, [sp, #12]
 800636c:	3307      	adds	r3, #7
 800636e:	f023 0307 	bic.w	r3, r3, #7
 8006372:	3308      	adds	r3, #8
 8006374:	9303      	str	r3, [sp, #12]
 8006376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006378:	444b      	add	r3, r9
 800637a:	9309      	str	r3, [sp, #36]	; 0x24
 800637c:	e76d      	b.n	800625a <_svfiprintf_r+0x4a>
 800637e:	fb05 3202 	mla	r2, r5, r2, r3
 8006382:	2001      	movs	r0, #1
 8006384:	460f      	mov	r7, r1
 8006386:	e7a6      	b.n	80062d6 <_svfiprintf_r+0xc6>
 8006388:	2300      	movs	r3, #0
 800638a:	250a      	movs	r5, #10
 800638c:	4619      	mov	r1, r3
 800638e:	3701      	adds	r7, #1
 8006390:	9305      	str	r3, [sp, #20]
 8006392:	4638      	mov	r0, r7
 8006394:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006398:	3a30      	subs	r2, #48	; 0x30
 800639a:	2a09      	cmp	r2, #9
 800639c:	d903      	bls.n	80063a6 <_svfiprintf_r+0x196>
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0c8      	beq.n	8006334 <_svfiprintf_r+0x124>
 80063a2:	9105      	str	r1, [sp, #20]
 80063a4:	e7c6      	b.n	8006334 <_svfiprintf_r+0x124>
 80063a6:	fb05 2101 	mla	r1, r5, r1, r2
 80063aa:	2301      	movs	r3, #1
 80063ac:	4607      	mov	r7, r0
 80063ae:	e7f0      	b.n	8006392 <_svfiprintf_r+0x182>
 80063b0:	ab03      	add	r3, sp, #12
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	4622      	mov	r2, r4
 80063b6:	4b11      	ldr	r3, [pc, #68]	; (80063fc <_svfiprintf_r+0x1ec>)
 80063b8:	a904      	add	r1, sp, #16
 80063ba:	4640      	mov	r0, r8
 80063bc:	f3af 8000 	nop.w
 80063c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80063c4:	4681      	mov	r9, r0
 80063c6:	d1d6      	bne.n	8006376 <_svfiprintf_r+0x166>
 80063c8:	89a3      	ldrh	r3, [r4, #12]
 80063ca:	065b      	lsls	r3, r3, #25
 80063cc:	f53f af35 	bmi.w	800623a <_svfiprintf_r+0x2a>
 80063d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063d2:	b01d      	add	sp, #116	; 0x74
 80063d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d8:	ab03      	add	r3, sp, #12
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	4622      	mov	r2, r4
 80063de:	4b07      	ldr	r3, [pc, #28]	; (80063fc <_svfiprintf_r+0x1ec>)
 80063e0:	a904      	add	r1, sp, #16
 80063e2:	4640      	mov	r0, r8
 80063e4:	f000 f882 	bl	80064ec <_printf_i>
 80063e8:	e7ea      	b.n	80063c0 <_svfiprintf_r+0x1b0>
 80063ea:	bf00      	nop
 80063ec:	08009238 	.word	0x08009238
 80063f0:	0800923e 	.word	0x0800923e
 80063f4:	08009242 	.word	0x08009242
 80063f8:	00000000 	.word	0x00000000
 80063fc:	0800615d 	.word	0x0800615d

08006400 <_printf_common>:
 8006400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006404:	4691      	mov	r9, r2
 8006406:	461f      	mov	r7, r3
 8006408:	688a      	ldr	r2, [r1, #8]
 800640a:	690b      	ldr	r3, [r1, #16]
 800640c:	4606      	mov	r6, r0
 800640e:	4293      	cmp	r3, r2
 8006410:	bfb8      	it	lt
 8006412:	4613      	movlt	r3, r2
 8006414:	f8c9 3000 	str.w	r3, [r9]
 8006418:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800641c:	460c      	mov	r4, r1
 800641e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006422:	b112      	cbz	r2, 800642a <_printf_common+0x2a>
 8006424:	3301      	adds	r3, #1
 8006426:	f8c9 3000 	str.w	r3, [r9]
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	0699      	lsls	r1, r3, #26
 800642e:	bf42      	ittt	mi
 8006430:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006434:	3302      	addmi	r3, #2
 8006436:	f8c9 3000 	strmi.w	r3, [r9]
 800643a:	6825      	ldr	r5, [r4, #0]
 800643c:	f015 0506 	ands.w	r5, r5, #6
 8006440:	d107      	bne.n	8006452 <_printf_common+0x52>
 8006442:	f104 0a19 	add.w	sl, r4, #25
 8006446:	68e3      	ldr	r3, [r4, #12]
 8006448:	f8d9 2000 	ldr.w	r2, [r9]
 800644c:	1a9b      	subs	r3, r3, r2
 800644e:	42ab      	cmp	r3, r5
 8006450:	dc29      	bgt.n	80064a6 <_printf_common+0xa6>
 8006452:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006456:	6822      	ldr	r2, [r4, #0]
 8006458:	3300      	adds	r3, #0
 800645a:	bf18      	it	ne
 800645c:	2301      	movne	r3, #1
 800645e:	0692      	lsls	r2, r2, #26
 8006460:	d42e      	bmi.n	80064c0 <_printf_common+0xc0>
 8006462:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006466:	4639      	mov	r1, r7
 8006468:	4630      	mov	r0, r6
 800646a:	47c0      	blx	r8
 800646c:	3001      	adds	r0, #1
 800646e:	d021      	beq.n	80064b4 <_printf_common+0xb4>
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	68e5      	ldr	r5, [r4, #12]
 8006474:	f003 0306 	and.w	r3, r3, #6
 8006478:	2b04      	cmp	r3, #4
 800647a:	bf18      	it	ne
 800647c:	2500      	movne	r5, #0
 800647e:	f8d9 2000 	ldr.w	r2, [r9]
 8006482:	f04f 0900 	mov.w	r9, #0
 8006486:	bf08      	it	eq
 8006488:	1aad      	subeq	r5, r5, r2
 800648a:	68a3      	ldr	r3, [r4, #8]
 800648c:	6922      	ldr	r2, [r4, #16]
 800648e:	bf08      	it	eq
 8006490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006494:	4293      	cmp	r3, r2
 8006496:	bfc4      	itt	gt
 8006498:	1a9b      	subgt	r3, r3, r2
 800649a:	18ed      	addgt	r5, r5, r3
 800649c:	341a      	adds	r4, #26
 800649e:	454d      	cmp	r5, r9
 80064a0:	d11a      	bne.n	80064d8 <_printf_common+0xd8>
 80064a2:	2000      	movs	r0, #0
 80064a4:	e008      	b.n	80064b8 <_printf_common+0xb8>
 80064a6:	2301      	movs	r3, #1
 80064a8:	4652      	mov	r2, sl
 80064aa:	4639      	mov	r1, r7
 80064ac:	4630      	mov	r0, r6
 80064ae:	47c0      	blx	r8
 80064b0:	3001      	adds	r0, #1
 80064b2:	d103      	bne.n	80064bc <_printf_common+0xbc>
 80064b4:	f04f 30ff 	mov.w	r0, #4294967295
 80064b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064bc:	3501      	adds	r5, #1
 80064be:	e7c2      	b.n	8006446 <_printf_common+0x46>
 80064c0:	2030      	movs	r0, #48	; 0x30
 80064c2:	18e1      	adds	r1, r4, r3
 80064c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064ce:	4422      	add	r2, r4
 80064d0:	3302      	adds	r3, #2
 80064d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064d6:	e7c4      	b.n	8006462 <_printf_common+0x62>
 80064d8:	2301      	movs	r3, #1
 80064da:	4622      	mov	r2, r4
 80064dc:	4639      	mov	r1, r7
 80064de:	4630      	mov	r0, r6
 80064e0:	47c0      	blx	r8
 80064e2:	3001      	adds	r0, #1
 80064e4:	d0e6      	beq.n	80064b4 <_printf_common+0xb4>
 80064e6:	f109 0901 	add.w	r9, r9, #1
 80064ea:	e7d8      	b.n	800649e <_printf_common+0x9e>

080064ec <_printf_i>:
 80064ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80064f4:	460c      	mov	r4, r1
 80064f6:	7e09      	ldrb	r1, [r1, #24]
 80064f8:	b085      	sub	sp, #20
 80064fa:	296e      	cmp	r1, #110	; 0x6e
 80064fc:	4617      	mov	r7, r2
 80064fe:	4606      	mov	r6, r0
 8006500:	4698      	mov	r8, r3
 8006502:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006504:	f000 80b3 	beq.w	800666e <_printf_i+0x182>
 8006508:	d822      	bhi.n	8006550 <_printf_i+0x64>
 800650a:	2963      	cmp	r1, #99	; 0x63
 800650c:	d036      	beq.n	800657c <_printf_i+0x90>
 800650e:	d80a      	bhi.n	8006526 <_printf_i+0x3a>
 8006510:	2900      	cmp	r1, #0
 8006512:	f000 80b9 	beq.w	8006688 <_printf_i+0x19c>
 8006516:	2958      	cmp	r1, #88	; 0x58
 8006518:	f000 8083 	beq.w	8006622 <_printf_i+0x136>
 800651c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006520:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006524:	e032      	b.n	800658c <_printf_i+0xa0>
 8006526:	2964      	cmp	r1, #100	; 0x64
 8006528:	d001      	beq.n	800652e <_printf_i+0x42>
 800652a:	2969      	cmp	r1, #105	; 0x69
 800652c:	d1f6      	bne.n	800651c <_printf_i+0x30>
 800652e:	6820      	ldr	r0, [r4, #0]
 8006530:	6813      	ldr	r3, [r2, #0]
 8006532:	0605      	lsls	r5, r0, #24
 8006534:	f103 0104 	add.w	r1, r3, #4
 8006538:	d52a      	bpl.n	8006590 <_printf_i+0xa4>
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6011      	str	r1, [r2, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	da03      	bge.n	800654a <_printf_i+0x5e>
 8006542:	222d      	movs	r2, #45	; 0x2d
 8006544:	425b      	negs	r3, r3
 8006546:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800654a:	486f      	ldr	r0, [pc, #444]	; (8006708 <_printf_i+0x21c>)
 800654c:	220a      	movs	r2, #10
 800654e:	e039      	b.n	80065c4 <_printf_i+0xd8>
 8006550:	2973      	cmp	r1, #115	; 0x73
 8006552:	f000 809d 	beq.w	8006690 <_printf_i+0x1a4>
 8006556:	d808      	bhi.n	800656a <_printf_i+0x7e>
 8006558:	296f      	cmp	r1, #111	; 0x6f
 800655a:	d020      	beq.n	800659e <_printf_i+0xb2>
 800655c:	2970      	cmp	r1, #112	; 0x70
 800655e:	d1dd      	bne.n	800651c <_printf_i+0x30>
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	f043 0320 	orr.w	r3, r3, #32
 8006566:	6023      	str	r3, [r4, #0]
 8006568:	e003      	b.n	8006572 <_printf_i+0x86>
 800656a:	2975      	cmp	r1, #117	; 0x75
 800656c:	d017      	beq.n	800659e <_printf_i+0xb2>
 800656e:	2978      	cmp	r1, #120	; 0x78
 8006570:	d1d4      	bne.n	800651c <_printf_i+0x30>
 8006572:	2378      	movs	r3, #120	; 0x78
 8006574:	4865      	ldr	r0, [pc, #404]	; (800670c <_printf_i+0x220>)
 8006576:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800657a:	e055      	b.n	8006628 <_printf_i+0x13c>
 800657c:	6813      	ldr	r3, [r2, #0]
 800657e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006582:	1d19      	adds	r1, r3, #4
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6011      	str	r1, [r2, #0]
 8006588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800658c:	2301      	movs	r3, #1
 800658e:	e08c      	b.n	80066aa <_printf_i+0x1be>
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006596:	6011      	str	r1, [r2, #0]
 8006598:	bf18      	it	ne
 800659a:	b21b      	sxthne	r3, r3
 800659c:	e7cf      	b.n	800653e <_printf_i+0x52>
 800659e:	6813      	ldr	r3, [r2, #0]
 80065a0:	6825      	ldr	r5, [r4, #0]
 80065a2:	1d18      	adds	r0, r3, #4
 80065a4:	6010      	str	r0, [r2, #0]
 80065a6:	0628      	lsls	r0, r5, #24
 80065a8:	d501      	bpl.n	80065ae <_printf_i+0xc2>
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	e002      	b.n	80065b4 <_printf_i+0xc8>
 80065ae:	0668      	lsls	r0, r5, #25
 80065b0:	d5fb      	bpl.n	80065aa <_printf_i+0xbe>
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	296f      	cmp	r1, #111	; 0x6f
 80065b6:	bf14      	ite	ne
 80065b8:	220a      	movne	r2, #10
 80065ba:	2208      	moveq	r2, #8
 80065bc:	4852      	ldr	r0, [pc, #328]	; (8006708 <_printf_i+0x21c>)
 80065be:	2100      	movs	r1, #0
 80065c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065c4:	6865      	ldr	r5, [r4, #4]
 80065c6:	2d00      	cmp	r5, #0
 80065c8:	60a5      	str	r5, [r4, #8]
 80065ca:	f2c0 8095 	blt.w	80066f8 <_printf_i+0x20c>
 80065ce:	6821      	ldr	r1, [r4, #0]
 80065d0:	f021 0104 	bic.w	r1, r1, #4
 80065d4:	6021      	str	r1, [r4, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d13d      	bne.n	8006656 <_printf_i+0x16a>
 80065da:	2d00      	cmp	r5, #0
 80065dc:	f040 808e 	bne.w	80066fc <_printf_i+0x210>
 80065e0:	4665      	mov	r5, ip
 80065e2:	2a08      	cmp	r2, #8
 80065e4:	d10b      	bne.n	80065fe <_printf_i+0x112>
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	07db      	lsls	r3, r3, #31
 80065ea:	d508      	bpl.n	80065fe <_printf_i+0x112>
 80065ec:	6923      	ldr	r3, [r4, #16]
 80065ee:	6862      	ldr	r2, [r4, #4]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	bfde      	ittt	le
 80065f4:	2330      	movle	r3, #48	; 0x30
 80065f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065fe:	ebac 0305 	sub.w	r3, ip, r5
 8006602:	6123      	str	r3, [r4, #16]
 8006604:	f8cd 8000 	str.w	r8, [sp]
 8006608:	463b      	mov	r3, r7
 800660a:	aa03      	add	r2, sp, #12
 800660c:	4621      	mov	r1, r4
 800660e:	4630      	mov	r0, r6
 8006610:	f7ff fef6 	bl	8006400 <_printf_common>
 8006614:	3001      	adds	r0, #1
 8006616:	d14d      	bne.n	80066b4 <_printf_i+0x1c8>
 8006618:	f04f 30ff 	mov.w	r0, #4294967295
 800661c:	b005      	add	sp, #20
 800661e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006622:	4839      	ldr	r0, [pc, #228]	; (8006708 <_printf_i+0x21c>)
 8006624:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006628:	6813      	ldr	r3, [r2, #0]
 800662a:	6821      	ldr	r1, [r4, #0]
 800662c:	1d1d      	adds	r5, r3, #4
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6015      	str	r5, [r2, #0]
 8006632:	060a      	lsls	r2, r1, #24
 8006634:	d50b      	bpl.n	800664e <_printf_i+0x162>
 8006636:	07ca      	lsls	r2, r1, #31
 8006638:	bf44      	itt	mi
 800663a:	f041 0120 	orrmi.w	r1, r1, #32
 800663e:	6021      	strmi	r1, [r4, #0]
 8006640:	b91b      	cbnz	r3, 800664a <_printf_i+0x15e>
 8006642:	6822      	ldr	r2, [r4, #0]
 8006644:	f022 0220 	bic.w	r2, r2, #32
 8006648:	6022      	str	r2, [r4, #0]
 800664a:	2210      	movs	r2, #16
 800664c:	e7b7      	b.n	80065be <_printf_i+0xd2>
 800664e:	064d      	lsls	r5, r1, #25
 8006650:	bf48      	it	mi
 8006652:	b29b      	uxthmi	r3, r3
 8006654:	e7ef      	b.n	8006636 <_printf_i+0x14a>
 8006656:	4665      	mov	r5, ip
 8006658:	fbb3 f1f2 	udiv	r1, r3, r2
 800665c:	fb02 3311 	mls	r3, r2, r1, r3
 8006660:	5cc3      	ldrb	r3, [r0, r3]
 8006662:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006666:	460b      	mov	r3, r1
 8006668:	2900      	cmp	r1, #0
 800666a:	d1f5      	bne.n	8006658 <_printf_i+0x16c>
 800666c:	e7b9      	b.n	80065e2 <_printf_i+0xf6>
 800666e:	6813      	ldr	r3, [r2, #0]
 8006670:	6825      	ldr	r5, [r4, #0]
 8006672:	1d18      	adds	r0, r3, #4
 8006674:	6961      	ldr	r1, [r4, #20]
 8006676:	6010      	str	r0, [r2, #0]
 8006678:	0628      	lsls	r0, r5, #24
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	d501      	bpl.n	8006682 <_printf_i+0x196>
 800667e:	6019      	str	r1, [r3, #0]
 8006680:	e002      	b.n	8006688 <_printf_i+0x19c>
 8006682:	066a      	lsls	r2, r5, #25
 8006684:	d5fb      	bpl.n	800667e <_printf_i+0x192>
 8006686:	8019      	strh	r1, [r3, #0]
 8006688:	2300      	movs	r3, #0
 800668a:	4665      	mov	r5, ip
 800668c:	6123      	str	r3, [r4, #16]
 800668e:	e7b9      	b.n	8006604 <_printf_i+0x118>
 8006690:	6813      	ldr	r3, [r2, #0]
 8006692:	1d19      	adds	r1, r3, #4
 8006694:	6011      	str	r1, [r2, #0]
 8006696:	681d      	ldr	r5, [r3, #0]
 8006698:	6862      	ldr	r2, [r4, #4]
 800669a:	2100      	movs	r1, #0
 800669c:	4628      	mov	r0, r5
 800669e:	f000 f837 	bl	8006710 <memchr>
 80066a2:	b108      	cbz	r0, 80066a8 <_printf_i+0x1bc>
 80066a4:	1b40      	subs	r0, r0, r5
 80066a6:	6060      	str	r0, [r4, #4]
 80066a8:	6863      	ldr	r3, [r4, #4]
 80066aa:	6123      	str	r3, [r4, #16]
 80066ac:	2300      	movs	r3, #0
 80066ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066b2:	e7a7      	b.n	8006604 <_printf_i+0x118>
 80066b4:	6923      	ldr	r3, [r4, #16]
 80066b6:	462a      	mov	r2, r5
 80066b8:	4639      	mov	r1, r7
 80066ba:	4630      	mov	r0, r6
 80066bc:	47c0      	blx	r8
 80066be:	3001      	adds	r0, #1
 80066c0:	d0aa      	beq.n	8006618 <_printf_i+0x12c>
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	079b      	lsls	r3, r3, #30
 80066c6:	d413      	bmi.n	80066f0 <_printf_i+0x204>
 80066c8:	68e0      	ldr	r0, [r4, #12]
 80066ca:	9b03      	ldr	r3, [sp, #12]
 80066cc:	4298      	cmp	r0, r3
 80066ce:	bfb8      	it	lt
 80066d0:	4618      	movlt	r0, r3
 80066d2:	e7a3      	b.n	800661c <_printf_i+0x130>
 80066d4:	2301      	movs	r3, #1
 80066d6:	464a      	mov	r2, r9
 80066d8:	4639      	mov	r1, r7
 80066da:	4630      	mov	r0, r6
 80066dc:	47c0      	blx	r8
 80066de:	3001      	adds	r0, #1
 80066e0:	d09a      	beq.n	8006618 <_printf_i+0x12c>
 80066e2:	3501      	adds	r5, #1
 80066e4:	68e3      	ldr	r3, [r4, #12]
 80066e6:	9a03      	ldr	r2, [sp, #12]
 80066e8:	1a9b      	subs	r3, r3, r2
 80066ea:	42ab      	cmp	r3, r5
 80066ec:	dcf2      	bgt.n	80066d4 <_printf_i+0x1e8>
 80066ee:	e7eb      	b.n	80066c8 <_printf_i+0x1dc>
 80066f0:	2500      	movs	r5, #0
 80066f2:	f104 0919 	add.w	r9, r4, #25
 80066f6:	e7f5      	b.n	80066e4 <_printf_i+0x1f8>
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1ac      	bne.n	8006656 <_printf_i+0x16a>
 80066fc:	7803      	ldrb	r3, [r0, #0]
 80066fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006702:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006706:	e76c      	b.n	80065e2 <_printf_i+0xf6>
 8006708:	08009249 	.word	0x08009249
 800670c:	0800925a 	.word	0x0800925a

08006710 <memchr>:
 8006710:	b510      	push	{r4, lr}
 8006712:	b2c9      	uxtb	r1, r1
 8006714:	4402      	add	r2, r0
 8006716:	4290      	cmp	r0, r2
 8006718:	4603      	mov	r3, r0
 800671a:	d101      	bne.n	8006720 <memchr+0x10>
 800671c:	2300      	movs	r3, #0
 800671e:	e003      	b.n	8006728 <memchr+0x18>
 8006720:	781c      	ldrb	r4, [r3, #0]
 8006722:	3001      	adds	r0, #1
 8006724:	428c      	cmp	r4, r1
 8006726:	d1f6      	bne.n	8006716 <memchr+0x6>
 8006728:	4618      	mov	r0, r3
 800672a:	bd10      	pop	{r4, pc}

0800672c <memmove>:
 800672c:	4288      	cmp	r0, r1
 800672e:	b510      	push	{r4, lr}
 8006730:	eb01 0302 	add.w	r3, r1, r2
 8006734:	d807      	bhi.n	8006746 <memmove+0x1a>
 8006736:	1e42      	subs	r2, r0, #1
 8006738:	4299      	cmp	r1, r3
 800673a:	d00a      	beq.n	8006752 <memmove+0x26>
 800673c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006740:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006744:	e7f8      	b.n	8006738 <memmove+0xc>
 8006746:	4283      	cmp	r3, r0
 8006748:	d9f5      	bls.n	8006736 <memmove+0xa>
 800674a:	1881      	adds	r1, r0, r2
 800674c:	1ad2      	subs	r2, r2, r3
 800674e:	42d3      	cmn	r3, r2
 8006750:	d100      	bne.n	8006754 <memmove+0x28>
 8006752:	bd10      	pop	{r4, pc}
 8006754:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006758:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800675c:	e7f7      	b.n	800674e <memmove+0x22>
	...

08006760 <_free_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	4605      	mov	r5, r0
 8006764:	2900      	cmp	r1, #0
 8006766:	d043      	beq.n	80067f0 <_free_r+0x90>
 8006768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800676c:	1f0c      	subs	r4, r1, #4
 800676e:	2b00      	cmp	r3, #0
 8006770:	bfb8      	it	lt
 8006772:	18e4      	addlt	r4, r4, r3
 8006774:	f000 f8d0 	bl	8006918 <__malloc_lock>
 8006778:	4a1e      	ldr	r2, [pc, #120]	; (80067f4 <_free_r+0x94>)
 800677a:	6813      	ldr	r3, [r2, #0]
 800677c:	4610      	mov	r0, r2
 800677e:	b933      	cbnz	r3, 800678e <_free_r+0x2e>
 8006780:	6063      	str	r3, [r4, #4]
 8006782:	6014      	str	r4, [r2, #0]
 8006784:	4628      	mov	r0, r5
 8006786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800678a:	f000 b8c6 	b.w	800691a <__malloc_unlock>
 800678e:	42a3      	cmp	r3, r4
 8006790:	d90b      	bls.n	80067aa <_free_r+0x4a>
 8006792:	6821      	ldr	r1, [r4, #0]
 8006794:	1862      	adds	r2, r4, r1
 8006796:	4293      	cmp	r3, r2
 8006798:	bf01      	itttt	eq
 800679a:	681a      	ldreq	r2, [r3, #0]
 800679c:	685b      	ldreq	r3, [r3, #4]
 800679e:	1852      	addeq	r2, r2, r1
 80067a0:	6022      	streq	r2, [r4, #0]
 80067a2:	6063      	str	r3, [r4, #4]
 80067a4:	6004      	str	r4, [r0, #0]
 80067a6:	e7ed      	b.n	8006784 <_free_r+0x24>
 80067a8:	4613      	mov	r3, r2
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	b10a      	cbz	r2, 80067b2 <_free_r+0x52>
 80067ae:	42a2      	cmp	r2, r4
 80067b0:	d9fa      	bls.n	80067a8 <_free_r+0x48>
 80067b2:	6819      	ldr	r1, [r3, #0]
 80067b4:	1858      	adds	r0, r3, r1
 80067b6:	42a0      	cmp	r0, r4
 80067b8:	d10b      	bne.n	80067d2 <_free_r+0x72>
 80067ba:	6820      	ldr	r0, [r4, #0]
 80067bc:	4401      	add	r1, r0
 80067be:	1858      	adds	r0, r3, r1
 80067c0:	4282      	cmp	r2, r0
 80067c2:	6019      	str	r1, [r3, #0]
 80067c4:	d1de      	bne.n	8006784 <_free_r+0x24>
 80067c6:	6810      	ldr	r0, [r2, #0]
 80067c8:	6852      	ldr	r2, [r2, #4]
 80067ca:	4401      	add	r1, r0
 80067cc:	6019      	str	r1, [r3, #0]
 80067ce:	605a      	str	r2, [r3, #4]
 80067d0:	e7d8      	b.n	8006784 <_free_r+0x24>
 80067d2:	d902      	bls.n	80067da <_free_r+0x7a>
 80067d4:	230c      	movs	r3, #12
 80067d6:	602b      	str	r3, [r5, #0]
 80067d8:	e7d4      	b.n	8006784 <_free_r+0x24>
 80067da:	6820      	ldr	r0, [r4, #0]
 80067dc:	1821      	adds	r1, r4, r0
 80067de:	428a      	cmp	r2, r1
 80067e0:	bf01      	itttt	eq
 80067e2:	6811      	ldreq	r1, [r2, #0]
 80067e4:	6852      	ldreq	r2, [r2, #4]
 80067e6:	1809      	addeq	r1, r1, r0
 80067e8:	6021      	streq	r1, [r4, #0]
 80067ea:	6062      	str	r2, [r4, #4]
 80067ec:	605c      	str	r4, [r3, #4]
 80067ee:	e7c9      	b.n	8006784 <_free_r+0x24>
 80067f0:	bd38      	pop	{r3, r4, r5, pc}
 80067f2:	bf00      	nop
 80067f4:	20001210 	.word	0x20001210

080067f8 <_malloc_r>:
 80067f8:	b570      	push	{r4, r5, r6, lr}
 80067fa:	1ccd      	adds	r5, r1, #3
 80067fc:	f025 0503 	bic.w	r5, r5, #3
 8006800:	3508      	adds	r5, #8
 8006802:	2d0c      	cmp	r5, #12
 8006804:	bf38      	it	cc
 8006806:	250c      	movcc	r5, #12
 8006808:	2d00      	cmp	r5, #0
 800680a:	4606      	mov	r6, r0
 800680c:	db01      	blt.n	8006812 <_malloc_r+0x1a>
 800680e:	42a9      	cmp	r1, r5
 8006810:	d903      	bls.n	800681a <_malloc_r+0x22>
 8006812:	230c      	movs	r3, #12
 8006814:	6033      	str	r3, [r6, #0]
 8006816:	2000      	movs	r0, #0
 8006818:	bd70      	pop	{r4, r5, r6, pc}
 800681a:	f000 f87d 	bl	8006918 <__malloc_lock>
 800681e:	4a21      	ldr	r2, [pc, #132]	; (80068a4 <_malloc_r+0xac>)
 8006820:	6814      	ldr	r4, [r2, #0]
 8006822:	4621      	mov	r1, r4
 8006824:	b991      	cbnz	r1, 800684c <_malloc_r+0x54>
 8006826:	4c20      	ldr	r4, [pc, #128]	; (80068a8 <_malloc_r+0xb0>)
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	b91b      	cbnz	r3, 8006834 <_malloc_r+0x3c>
 800682c:	4630      	mov	r0, r6
 800682e:	f000 f863 	bl	80068f8 <_sbrk_r>
 8006832:	6020      	str	r0, [r4, #0]
 8006834:	4629      	mov	r1, r5
 8006836:	4630      	mov	r0, r6
 8006838:	f000 f85e 	bl	80068f8 <_sbrk_r>
 800683c:	1c43      	adds	r3, r0, #1
 800683e:	d124      	bne.n	800688a <_malloc_r+0x92>
 8006840:	230c      	movs	r3, #12
 8006842:	4630      	mov	r0, r6
 8006844:	6033      	str	r3, [r6, #0]
 8006846:	f000 f868 	bl	800691a <__malloc_unlock>
 800684a:	e7e4      	b.n	8006816 <_malloc_r+0x1e>
 800684c:	680b      	ldr	r3, [r1, #0]
 800684e:	1b5b      	subs	r3, r3, r5
 8006850:	d418      	bmi.n	8006884 <_malloc_r+0x8c>
 8006852:	2b0b      	cmp	r3, #11
 8006854:	d90f      	bls.n	8006876 <_malloc_r+0x7e>
 8006856:	600b      	str	r3, [r1, #0]
 8006858:	18cc      	adds	r4, r1, r3
 800685a:	50cd      	str	r5, [r1, r3]
 800685c:	4630      	mov	r0, r6
 800685e:	f000 f85c 	bl	800691a <__malloc_unlock>
 8006862:	f104 000b 	add.w	r0, r4, #11
 8006866:	1d23      	adds	r3, r4, #4
 8006868:	f020 0007 	bic.w	r0, r0, #7
 800686c:	1ac3      	subs	r3, r0, r3
 800686e:	d0d3      	beq.n	8006818 <_malloc_r+0x20>
 8006870:	425a      	negs	r2, r3
 8006872:	50e2      	str	r2, [r4, r3]
 8006874:	e7d0      	b.n	8006818 <_malloc_r+0x20>
 8006876:	684b      	ldr	r3, [r1, #4]
 8006878:	428c      	cmp	r4, r1
 800687a:	bf16      	itet	ne
 800687c:	6063      	strne	r3, [r4, #4]
 800687e:	6013      	streq	r3, [r2, #0]
 8006880:	460c      	movne	r4, r1
 8006882:	e7eb      	b.n	800685c <_malloc_r+0x64>
 8006884:	460c      	mov	r4, r1
 8006886:	6849      	ldr	r1, [r1, #4]
 8006888:	e7cc      	b.n	8006824 <_malloc_r+0x2c>
 800688a:	1cc4      	adds	r4, r0, #3
 800688c:	f024 0403 	bic.w	r4, r4, #3
 8006890:	42a0      	cmp	r0, r4
 8006892:	d005      	beq.n	80068a0 <_malloc_r+0xa8>
 8006894:	1a21      	subs	r1, r4, r0
 8006896:	4630      	mov	r0, r6
 8006898:	f000 f82e 	bl	80068f8 <_sbrk_r>
 800689c:	3001      	adds	r0, #1
 800689e:	d0cf      	beq.n	8006840 <_malloc_r+0x48>
 80068a0:	6025      	str	r5, [r4, #0]
 80068a2:	e7db      	b.n	800685c <_malloc_r+0x64>
 80068a4:	20001210 	.word	0x20001210
 80068a8:	20001214 	.word	0x20001214

080068ac <_realloc_r>:
 80068ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ae:	4607      	mov	r7, r0
 80068b0:	4614      	mov	r4, r2
 80068b2:	460e      	mov	r6, r1
 80068b4:	b921      	cbnz	r1, 80068c0 <_realloc_r+0x14>
 80068b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80068ba:	4611      	mov	r1, r2
 80068bc:	f7ff bf9c 	b.w	80067f8 <_malloc_r>
 80068c0:	b922      	cbnz	r2, 80068cc <_realloc_r+0x20>
 80068c2:	f7ff ff4d 	bl	8006760 <_free_r>
 80068c6:	4625      	mov	r5, r4
 80068c8:	4628      	mov	r0, r5
 80068ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068cc:	f000 f826 	bl	800691c <_malloc_usable_size_r>
 80068d0:	42a0      	cmp	r0, r4
 80068d2:	d20f      	bcs.n	80068f4 <_realloc_r+0x48>
 80068d4:	4621      	mov	r1, r4
 80068d6:	4638      	mov	r0, r7
 80068d8:	f7ff ff8e 	bl	80067f8 <_malloc_r>
 80068dc:	4605      	mov	r5, r0
 80068de:	2800      	cmp	r0, #0
 80068e0:	d0f2      	beq.n	80068c8 <_realloc_r+0x1c>
 80068e2:	4631      	mov	r1, r6
 80068e4:	4622      	mov	r2, r4
 80068e6:	f7ff fc05 	bl	80060f4 <memcpy>
 80068ea:	4631      	mov	r1, r6
 80068ec:	4638      	mov	r0, r7
 80068ee:	f7ff ff37 	bl	8006760 <_free_r>
 80068f2:	e7e9      	b.n	80068c8 <_realloc_r+0x1c>
 80068f4:	4635      	mov	r5, r6
 80068f6:	e7e7      	b.n	80068c8 <_realloc_r+0x1c>

080068f8 <_sbrk_r>:
 80068f8:	b538      	push	{r3, r4, r5, lr}
 80068fa:	2300      	movs	r3, #0
 80068fc:	4c05      	ldr	r4, [pc, #20]	; (8006914 <_sbrk_r+0x1c>)
 80068fe:	4605      	mov	r5, r0
 8006900:	4608      	mov	r0, r1
 8006902:	6023      	str	r3, [r4, #0]
 8006904:	f7ff fb46 	bl	8005f94 <_sbrk>
 8006908:	1c43      	adds	r3, r0, #1
 800690a:	d102      	bne.n	8006912 <_sbrk_r+0x1a>
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	b103      	cbz	r3, 8006912 <_sbrk_r+0x1a>
 8006910:	602b      	str	r3, [r5, #0]
 8006912:	bd38      	pop	{r3, r4, r5, pc}
 8006914:	200017e0 	.word	0x200017e0

08006918 <__malloc_lock>:
 8006918:	4770      	bx	lr

0800691a <__malloc_unlock>:
 800691a:	4770      	bx	lr

0800691c <_malloc_usable_size_r>:
 800691c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006920:	1f18      	subs	r0, r3, #4
 8006922:	2b00      	cmp	r3, #0
 8006924:	bfbc      	itt	lt
 8006926:	580b      	ldrlt	r3, [r1, r0]
 8006928:	18c0      	addlt	r0, r0, r3
 800692a:	4770      	bx	lr

0800692c <_init>:
 800692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692e:	bf00      	nop
 8006930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006932:	bc08      	pop	{r3}
 8006934:	469e      	mov	lr, r3
 8006936:	4770      	bx	lr

08006938 <_fini>:
 8006938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693a:	bf00      	nop
 800693c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800693e:	bc08      	pop	{r3}
 8006940:	469e      	mov	lr, r3
 8006942:	4770      	bx	lr
